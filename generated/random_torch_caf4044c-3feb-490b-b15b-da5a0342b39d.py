
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'AdaptiveLogSoftmaxWithLoss', 'LazyBatchNorm2d', 'ReplicationPad1d', 'ChannelShuffle', 'LocalResponseNorm', 'LazyInstanceNorm1d', 'BatchNorm1d', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=512, n_classes=10, cutoffs=[2, 4])
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        self.channel_shuffle = nn.ChannelShuffle(groups=4)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.batch_norm1d = nn.BatchNorm1d(num_features=256)
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for LazyBatchNorm2d
        x = x.view(-1, x.size(1), x.size(2), x.size(3))
        x = self.lazy_batch_norm2d(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(-1, x.size(1), x.size(2) * x.size(3))
        x = self.replication_pad1d(x)
        
        # Reshape for ChannelShuffle
        x = x.view(-1, x.size(1), x.size(2), 1)
        x = self.channel_shuffle(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(-1, x.size(1), x.size(2) * x.size(3))
        x = self.lazy_instance_norm1d(x)
        
        # Reshape for BatchNorm1d
        x = x.view(-1, x.size(1))
        x = self.batch_norm1d(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = x.view(-1, 512)  # Reshape to match in_features
        output = self.adaptive_log_softmax(x, torch.tensor([0]))  # Dummy target for forward pass
        
        return output.output  # Return the log probabilities


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
