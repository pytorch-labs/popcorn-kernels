
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ReflectionPad2d', 'AdaptiveMaxPool3d', 'FractionalMaxPool2d', 'BCELoss', 'ModuleDict', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.channel_shuffle = nn.ChannelShuffle(4)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(16, 16))
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(3, 16, kernel_size=3),
            'conv2': nn.Conv2d(16, 32, kernel_size=3)
        })
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = self.adaptive_max_pool3d(x)
        x = x.squeeze(1)  # Remove the dummy channel dimension
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply ModuleDict convolutions
        x = self.module_dict['conv1'](x)
        x = F.relu(x)
        x = self.module_dict['conv2'](x)
        x = F.relu(x)
        
        # Flatten the tensor for LogSoftmax
        x = x.view(x.size(0), -1)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Dummy target for BCELoss (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        
        # Apply BCELoss
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

