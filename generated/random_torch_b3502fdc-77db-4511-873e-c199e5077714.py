
# This is a random torch model generated by the following modules: ['GroupNorm', 'MaxUnpool1d', 'ReplicationPad1d', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm1 = nn.GroupNorm(num_groups=2, num_channels=16)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.replication_pad1d = nn.ReplicationPad1d(padding=1)
        self.conv_transpose3d = nn.ConvTranspose3d(in_channels=16, out_channels=8, kernel_size=3, stride=2, padding=1)
        self.group_norm2 = nn.GroupNorm(num_groups=2, num_channels=8)
        self.conv_transpose3d2 = nn.ConvTranspose3d(in_channels=8, out_channels=4, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Assuming input is 3D, we first reshape it to 4D to apply GroupNorm
        x = x.view(x.size(0), 16, -1)  # Reshape to (batch_size, 16, -1)
        x = self.group_norm1(x)
        
        # Reshape to 3D for MaxUnpool1d
        x = x.view(x.size(0), 16, -1)  # Reshape to (batch_size, 16, -1)
        indices = torch.arange(0, x.size(2), 2).unsqueeze(0).unsqueeze(0).repeat(x.size(0), 16, 1).to(x.device)
        x = self.max_unpool1d(x, indices)
        
        # Apply ReplicationPad1d
        x = self.replication_pad1d(x)
        
        # Reshape to 5D for ConvTranspose3d
        x = x.view(x.size(0), 16, 1, -1, x.size(2))  # Reshape to (batch_size, 16, 1, -1, -1)
        x = self.conv_transpose3d(x)
        
        # Apply GroupNorm again
        x = x.view(x.size(0), 8, -1)  # Reshape to (batch_size, 8, -1)
        x = self.group_norm2(x)
        
        # Reshape back to 5D for the second ConvTranspose3d
        x = x.view(x.size(0), 8, 1, -1, x.size(2))  # Reshape to (batch_size, 8, 1, -1, -1)
        x = self.conv_transpose3d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 32).cuda()  # Input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

