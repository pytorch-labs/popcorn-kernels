
# This is a random torch model generated by the following modules: ['LazyConv2d', 'ConstantPad3d', 'CrossMapLRN2d', 'Threshold', 'PairwiseDistance', 'MaxPool3d', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.pad1 = nn.ConstantPad3d(padding=1, value=0)
        self.lrn1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.pool1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.norm1 = nn.InstanceNorm3d(num_features=16)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.pad2 = nn.ConstantPad3d(padding=1, value=0)
        self.lrn2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.threshold2 = nn.Threshold(threshold=0.5, value=0.0)
        self.pool2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.norm2 = nn.InstanceNorm3d(num_features=32)
        self.pairwise_distance = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv1(x)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for ConstantPad3d
        x = self.pad1(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        x = self.lrn1(x)
        x = self.threshold1(x)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for MaxPool3d
        x = self.pool1(x)
        x = self.norm1(x)
        x = x.squeeze(2)  # Remove the dummy dimension

        x = self.conv2(x)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for ConstantPad3d
        x = self.pad2(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        x = self.lrn2(x)
        x = self.threshold2(x)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for MaxPool3d
        x = self.pool2(x)
        x = self.norm2(x)
        x = x.squeeze(2)  # Remove the dummy dimension

        # PairwiseDistance requires two inputs, so we split the tensor
        x1, x2 = torch.chunk(x, 2, dim=1)
        x = self.pairwise_distance(x1, x2)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
