
# This is a random torch model generated by the following modules: ['Conv3d', 'Mish', 'LazyConvTranspose2d', 'LazyConv3d', 'Container', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.mish = nn.Mish()
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(20, kernel_size=3)
        self.lazy_conv3d = nn.LazyConv3d(30, kernel_size=3)
        self.container = nn.Sequential(
            nn.Conv3d(30, 40, kernel_size=3),
            nn.Mish(),
            nn.LazyConvTranspose3d(50, kernel_size=3)
        )
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(60, kernel_size=3)

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d_1(x)
        x = self.mish(x)
        
        # Reshape to fit LazyConvTranspose2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        x = self.mish(x)
        
        # Reshape back to 5D for LazyConv3d
        x = x.view(batch_size, -1, depth, height, width)
        
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        x = self.mish(x)
        
        # Apply Container
        x = self.container(x)
        
        # Apply LazyConvTranspose3d
        x = self.lazy_conv_transpose3d(x)
        x = self.mish(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
