
# This is a random torch model generated by the following modules: ['Flatten', 'Dropout', 'ReflectionPad3d', 'Mish', 'ReLU', 'LeakyReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.flatten = nn.Flatten()
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout(p=0.3)
        self.reflection_pad = nn.ReflectionPad3d(padding=1)
        self.mish = nn.Mish()
        self.relu = nn.ReLU()
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Apply ReLU activation
        x = self.relu(x)
        
        # Apply LeakyReLU activation
        x = self.leaky_relu(x)
        
        # Flatten the tensor
        x = self.flatten(x)
        
        # Apply Dropout
        x = self.dropout1(x)
        
        # Apply another Dropout
        x = self.dropout2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

