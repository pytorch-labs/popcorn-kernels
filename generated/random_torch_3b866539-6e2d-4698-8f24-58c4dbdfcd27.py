
# This is a random torch model generated by the following modules: ['GRU', 'LSTM', 'Identity', 'InstanceNorm1d', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.lstm = nn.LSTM(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.identity = nn.Identity()
        self.instance_norm = nn.InstanceNorm1d(num_features=256)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(32, 32, 32))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # Reshape for GRU
        x, _ = self.gru(x)
        
        # Pass through LSTM
        x, _ = self.lstm(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for InstanceNorm1d
        x = x.permute(0, 2, 1)  # (batch_size, num_features, sequence_length)
        x = self.instance_norm(x)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, num_features)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(-1)  # Add a depth dimension
        x = self.fractional_max_pool(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
