
# This is a random torch model generated by the following modules: ['Dropout2d', 'AvgPool2d', 'MultiheadAttention', 'LogSigmoid', 'CELU', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.avgpool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.logsigmoid = nn.LogSigmoid()
        self.celu = nn.CELU()
        self.zeropad3d = nn.ZeroPad3d(padding=1)

    def forward(self, x):
        # Apply ZeroPad3d to the input
        x = self.zeropad3d(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply AvgPool2d
        x = self.avgpool2d(x)
        
        # Reshape for MultiheadAttention
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, embed_dim)
        
        # Apply MultiheadAttention
        x, _ = self.multihead_attention(x, x, x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply LogSigmoid
        x = self.logsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
