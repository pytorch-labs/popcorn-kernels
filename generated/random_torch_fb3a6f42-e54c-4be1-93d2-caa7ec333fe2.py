
# This is a random torch model generated by the following modules: ['ReflectionPad1d', 'InstanceNorm2d', 'UpsamplingNearest2d', 'Upsample', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.instance_norm = nn.InstanceNorm2d(10)
        self.upsample_nearest = nn.UpsamplingNearest2d(scale_factor=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.conv1 = nn.Conv2d(3, 10, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(20, 30, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(30, 40, kernel_size=3, stride=1, padding=1)
        self.conv5 = nn.Conv2d(40, 50, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv1(x)
        x = self.instance_norm(x)
        x = self.upsample_nearest(x)
        x = self.conv2(x)
        x = self.upsample(x)
        x = self.conv3(x)
        x = self.instance_norm(x)
        x = self.conv4(x)
        x = self.upsample_nearest(x)
        x = self.conv5(x)
        
        # Apply ReflectionPad1d on the last dimension (width)
        x = x.permute(0, 2, 3, 1)  # (batch, height, width, channels)
        x = x.reshape(x.size(0), x.size(1), -1)  # (batch, height, width * channels)
        x = self.reflection_pad(x)
        x = x.reshape(x.size(0), x.size(1), -1, 50)  # (batch, height, width, channels)
        x = x.permute(0, 3, 1, 2)  # (batch, channels, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
