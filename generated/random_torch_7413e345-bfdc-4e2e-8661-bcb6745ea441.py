
# This is a random torch model generated by the following modules: ['RNNCellBase', 'TransformerDecoder', 'Container', 'PixelShuffle', 'LPPool3d', 'Unflatten', 'Unfold', 'AdaptiveAvgPool2d', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.transformer_decoder = nn.TransformerDecoder(
            decoder_layer=nn.TransformerDecoderLayer(d_model=256, nhead=8),
            num_layers=3
        )
        self.container = nn.Sequential(
            nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2),
            nn.PixelShuffle(upscale_factor=2),
            nn.Unfold(kernel_size=3, stride=1),
            nn.AdaptiveAvgPool2d(output_size=(16, 16)),
            nn.LPPool3d(norm_type=2, kernel_size=3, stride=2),
            nn.Unflatten(dim=1, unflattened_size=(64, 16, 16))
        )
        self.fc = nn.Linear(64 * 16 * 16, 10)

    def forward(self, x):
        # Assuming x is of shape (batch_size, seq_len, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Process through RNNCellBase
        hx = torch.zeros(batch_size, 256).to(x.device)
        outputs = []
        for t in range(seq_len):
            hx = self.rnn_cell(x[:, t, :], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=1)  # Shape: (batch_size, seq_len, hidden_size)
        
        # Process through TransformerDecoder
        memory = torch.zeros(batch_size, seq_len, 256).to(x.device)
        x = self.transformer_decoder(x, memory)  # Shape: (batch_size, seq_len, hidden_size)
        
        # Reshape and process through Container
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, seq_len, hidden_size)
        x = self.container(x)  # Shape: (batch_size, 64, 16, 16)
        
        # Flatten and process through final fully connected layer
        x = x.view(batch_size, -1)  # Shape: (batch_size, 64 * 16 * 16)
        x = self.fc(x)  # Shape: (batch_size, 10)
        
        return F.log_softmax(x, dim=1)

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, seq_len=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
