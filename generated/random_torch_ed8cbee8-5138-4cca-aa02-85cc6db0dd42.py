
# This is a random torch model generated by the following modules: ['RNNCell', 'UpsamplingNearest2d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell1 = nn.RNNCell(input_size=64, hidden_size=128)
        self.rnn_cell2 = nn.RNNCell(input_size=128, hidden_size=256)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((1, 1, 1))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Initialize hidden states for RNN cells
        h1 = torch.zeros(batch_size, 128).to(x.device)
        h2 = torch.zeros(batch_size, 256).to(x.device)
        
        # Process sequence through RNN cells
        for t in range(sequence_length):
            h1 = self.rnn_cell1(x[:, t, :], h1)
            h2 = self.rnn_cell2(h1, h2)
        
        # Reshape and upsample
        x = h2.view(batch_size, 16, 16)  # Reshape to 2D
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.upsample(x)  # Upsample to (batch_size, 1, 32, 32)
        
        # Reshape and apply adaptive average pooling
        x = x.unsqueeze(1)  # Add depth dimension
        x = self.adaptive_avg_pool(x)  # Pool to (batch_size, 1, 1, 1, 1)
        
        # Flatten output
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

