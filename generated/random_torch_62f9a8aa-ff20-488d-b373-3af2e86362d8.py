
# This is a random torch model generated by the following modules: ['Dropout2d', 'LazyInstanceNorm2d', 'BatchNorm1d', 'ConstantPad2d', 'ReflectionPad2d', 'AdaptiveAvgPool2d', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.constant_pad2d = nn.ConstantPad2d(2, 0.5)
        self.reflection_pad2d = nn.ReflectionPad2d(2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((1, 1))
        self.replication_pad2d = nn.ReplicationPad2d(2)

    def forward(self, x):
        # Apply ConstantPad2d
        x = self.constant_pad2d(x)
        
        # Apply ReflectionPad2d
        x = self.reflection_pad2d(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm2d(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
