
# This is a random torch model generated by the following modules: ['Softmax2d', 'Bilinear', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((16, 16))
        self.bilinear1 = nn.Bilinear(16 * 16, 16 * 16, 256)
        self.bilinear2 = nn.Bilinear(256, 256, 128)
        self.softmax2d = nn.Softmax2d()

    def forward(self, x):
        # Apply AdaptiveAvgPool2d to reduce spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Flatten the output for Bilinear layers
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Apply first Bilinear layer
        x = self.bilinear1(x, x)
        
        # Apply second Bilinear layer
        x = self.bilinear2(x, x)
        
        # Reshape back to 2D for Softmax2d
        x = x.view(batch_size, 1, 16, 8)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with 3 channels and 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
