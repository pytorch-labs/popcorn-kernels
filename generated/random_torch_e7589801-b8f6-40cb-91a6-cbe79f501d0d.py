
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'LazyConvTranspose3d', 'Dropout2d', 'SiLU', 'Unfold', 'PoissonNLLLoss', 'AvgPool1d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.silu = nn.SiLU()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=1)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.softshrink = nn.Softshrink(lambd=0.5)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.fractional_max_pool(x)
        
        # Reshape to 5D for LazyConvTranspose3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.lazy_conv_transpose3d(x)
        
        # Dropout2d requires 4D input (batch, channels, height, width)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.dropout2d(x)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Unfold requires 4D input (batch, channels, height, width)
        x = self.unfold(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool1d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # PoissonNLLLoss is typically used in the loss function, not in the forward pass
        # So we return the output and let the user handle the loss calculation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
