
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'ConstantPad3d', 'InstanceNorm2d', 'FractionalMaxPool3d', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)

    def forward(self, x):
        # Assuming input is 1D, reshape to 3D for ConvTranspose1d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, length)
        x = self.conv_transpose1d(x)  # Apply ConvTranspose1d
        
        # Reshape to 5D for ConstantPad3d
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to (batch_size, channels, 1, 1, length)
        x = self.constant_pad3d(x)  # Apply ConstantPad3d
        
        # Reshape to 4D for InstanceNorm2d
        x = x.squeeze(3).squeeze(3)  # Reshape to (batch_size, channels, height, width)
        x = self.instance_norm2d(x)  # Apply InstanceNorm2d
        
        # Reshape back to 5D for FractionalMaxPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to (batch_size, channels, 1, 1, length)
        x = self.fractional_max_pool3d(x)  # Apply FractionalMaxPool3d
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)  # Apply ReflectionPad3d
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
