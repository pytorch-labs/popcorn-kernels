
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'L1Loss', 'MultiMarginLoss', 'UpsamplingBilinear2d', 'Hardtanh', 'Softplus', 'LPPool2d', 'EmbeddingBag', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.hardtanh = nn.Hardtanh(min_val=-1, max_val=1)
        self.softplus = nn.Softplus()
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=100, embedding_dim=10, mode='mean')
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10, 10)),
            'param2': nn.Parameter(torch.randn(10, 10))
        })
        self.nll_loss = nn.NLLLoss2d()
        self.l1_loss = nn.L1Loss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Reshape for EmbeddingBag
        x = x.view(-1).long()  # Convert to long for embedding
        x = self.embedding_bag(x)
        
        # Apply ParameterDict
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Compute losses (dummy targets for demonstration)
        target_nll = torch.randint(0, 10, (x.size(0),)).cuda()
        target_l1 = torch.randn_like(x)
        target_multi_margin = torch.randint(0, 10, (x.size(0),)).cuda()
        
        nll_loss = self.nll_loss(x, target_nll)
        l1_loss = self.l1_loss(x, target_l1)
        multi_margin_loss = self.multi_margin_loss(x, target_multi_margin)
        
        # Return the sum of losses (for demonstration purposes)
        return nll_loss + l1_loss + multi_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
