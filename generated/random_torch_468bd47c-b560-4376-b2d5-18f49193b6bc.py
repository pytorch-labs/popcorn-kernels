
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'NLLLoss2d', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.log_sigmoid = nn.LogSigmoid()
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Apply LogSigmoid to the input
        x = self.log_sigmoid(x)
        
        # Generate a random target tensor for BCEWithLogitsLoss
        target_bce = torch.randint(0, 2, x.shape).float()
        
        # Compute BCEWithLogitsLoss
        bce_loss = self.bce_loss(x, target_bce)
        
        # Generate a random target tensor for NLLLoss2d
        target_nll = torch.randint(0, 2, (x.shape[0], x.shape[2], x.shape[3]))
        
        # Apply LogSigmoid again to the input
        x = self.log_sigmoid(x)
        
        # Compute NLLLoss2d
        nll_loss = self.nll_loss(x, target_nll)
        
        # Return the sum of the two losses
        return bce_loss + nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
