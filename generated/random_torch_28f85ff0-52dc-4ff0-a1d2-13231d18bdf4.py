
# This is a random torch model generated by the following modules: ['CTCLoss', 'ConvTranspose3d', 'ConvTranspose1d', 'MultiMarginLoss', 'GELU', 'ReLU', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d_1 = nn.ConvTranspose3d(1, 10, kernel_size=5)
        self.conv_transpose3d_2 = nn.ConvTranspose3d(10, 20, kernel_size=5)
        self.conv_transpose1d_1 = nn.ConvTranspose1d(20, 10, kernel_size=5)
        self.conv_transpose1d_2 = nn.ConvTranspose1d(10, 5, kernel_size=5)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.gelu = nn.GELU()
        self.relu = nn.ReLU()
        self.ctc_loss = nn.CTCLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assuming input is 3D, reshape to 5D for ConvTranspose3d
        x = x.view(-1, 1, 1, x.shape[-2], x.shape[-1])
        x = self.conv_transpose3d_1(x)
        x = self.relu(x)
        x = self.conv_transpose3d_2(x)
        x = self.gelu(x)
        
        # Reshape to 3D for ConvTranspose1d
        x = x.view(x.shape[0], x.shape[1], -1)
        x = self.conv_transpose1d_1(x)
        x = self.relu(x)
        x = self.conv_transpose1d_2(x)
        x = self.gelu(x)
        
        # Apply LazyInstanceNorm1d
        x = self.lazy_instance_norm1d(x)
        
        # Compute CTC Loss (dummy target and input lengths)
        target = torch.randint(1, 5, (x.shape[0], 5), dtype=torch.long)
        input_lengths = torch.full((x.shape[0],), x.shape[2], dtype=torch.long)
        target_lengths = torch.randint(1, 6, (x.shape[0],), dtype=torch.long)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Compute MultiMarginLoss (dummy target)
        target = torch.randint(0, 5, (x.shape[0],), dtype=torch.long)
        multi_margin_loss = self.multi_margin_loss(x.mean(dim=2), target)
        
        # Return both losses for demonstration purposes
        return ctc_loss, multi_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
