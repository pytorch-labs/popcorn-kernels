
# This is a random torch model generated by the following modules: ['Sequential', 'GLU', 'Dropout', 'LayerNorm', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2),
            nn.GLU(dim=1),
            nn.Dropout(p=0.5),
            nn.LayerNorm([32, 32, 32, 32]),
            nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2),
            nn.GLU(dim=1),
            nn.Dropout(p=0.5),
            nn.LayerNorm([64, 64, 64, 64]),
        )
        self.final_conv = nn.LazyConvTranspose3d(out_channels=1, kernel_size=3, stride=2)
        self.layer_norm = nn.LayerNorm([128, 128, 128, 128])
        self.dropout = nn.Dropout(p=0.5)

    def forward(self, x):
        x = self.sequential(x)
        x = self.final_conv(x)
        x = self.layer_norm(x)
        x = self.dropout(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
