
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'MaxPool3d', 'Mish', 'AdaptiveMaxPool2d', 'L1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.mish = nn.Mish()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=125, n_classes=10, cutoffs=[5])
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input is 3D (e.g., batch_size, channels, depth, height, width)
        x = self.max_pool3d(x)
        x = self.mish(x)
        
        # Reshape to 2D for AdaptiveMaxPool2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        x = self.adaptive_max_pool2d(x)
        
        # Flatten for AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Compute L1 loss with a dummy target (for demonstration purposes)
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input: batch_size=1, channels=3, depth=32, height=32, width=32
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
