
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'LazyConvTranspose3d', 'Dropout3d', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad1d(padding=2, value=0)
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.dropout1 = nn.Dropout3d(p=0.5)
        self.zero_pad1 = nn.ZeroPad3d(padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=1)
        self.dropout2 = nn.Dropout3d(p=0.5)
        self.zero_pad2 = nn.ZeroPad3d(padding=1)
        self.conv_transpose3 = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2)
        self.dropout3 = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.pad1(x)  # Apply ConstantPad1d
        x = x.unsqueeze(1)  # Add a new dimension to make it 3D
        x = self.conv_transpose1(x)  # Apply LazyConvTranspose3d
        x = self.dropout1(x)  # Apply Dropout3d
        x = self.zero_pad1(x)  # Apply ZeroPad3d
        x = self.conv_transpose2(x)  # Apply LazyConvTranspose3d
        x = self.dropout2(x)  # Apply Dropout3d
        x = self.zero_pad2(x)  # Apply ZeroPad3d
        x = self.conv_transpose3(x)  # Apply LazyConvTranspose3d
        x = self.dropout3(x)  # Apply Dropout3d
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

