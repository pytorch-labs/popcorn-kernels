
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'LeakyReLU', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1d = nn.ReplicationPad1d(2)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.pad2d = nn.ConstantPad2d(2, 3.5)
        self.pad1d_2 = nn.ReplicationPad1d(1)
        self.leaky_relu_2 = nn.LeakyReLU(negative_slope=0.2)
        self.pad2d_2 = nn.ConstantPad2d(1, 2.5)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, apply ReplicationPad1d to the last dimension
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        x = self.pad1d(x)
        x = self.leaky_relu(x)
        
        # Reshape back to 4D and apply ConstantPad2d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        x = self.pad2d(x)
        
        # Apply another ReplicationPad1d and LeakyReLU
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        x = self.pad1d_2(x)
        x = self.leaky_relu_2(x)
        
        # Reshape back to 4D and apply another ConstantPad2d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        x = self.pad2d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
