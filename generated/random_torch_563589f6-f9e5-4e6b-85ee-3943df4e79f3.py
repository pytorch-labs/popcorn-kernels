
# This is a random torch model generated by the following modules: ['Unflatten', 'NLLLoss', 'RNN', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 28, 28))  # Assuming input is flattened 1D tensor
        self.rnn1 = nn.RNN(input_size=28, hidden_size=64, num_layers=2, batch_first=True)
        self.rnn2 = nn.RNN(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.bilinear = nn.Bilinear(32, 32, 10)  # Assuming output size is 10
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Unflatten the input to a 2D shape
        x = self.unflatten(x)
        
        # Reshape for RNN input (batch_size, sequence_length, input_size)
        x = x.view(x.size(0), -1, 28)
        
        # Pass through the first RNN
        x, _ = self.rnn1(x)
        
        # Pass through the second RNN
        x, _ = self.rnn2(x)
        
        # Take the last hidden state
        x = x[:, -1, :]
        
        # Pass through the Bilinear layer
        x = self.bilinear(x, x)
        
        # Apply log_softmax for NLLLoss compatibility
        x = F.log_softmax(x, dim=1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 784).cuda()  # Assuming input is a flattened 28x28 image
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

