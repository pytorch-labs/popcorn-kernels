
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'BCEWithLogitsLoss', 'MaxPool2d', 'LazyInstanceNorm3d', 'Conv1d', 'FractionalMaxPool2d', 'Identity', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.conv1d = nn.Conv1d(in_channels=1, out_channels=10, kernel_size=5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(10, 10))
        self.identity = nn.Identity()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply MaxPool2d
        x = self.max_pool2d(x)
        
        # Reshape for LazyInstanceNorm3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(-1)  # Add a depth dimension
        x = self.lazy_instance_norm3d(x)
        
        # Reshape for Conv1d
        x = x.squeeze(-1)  # Remove depth dimension
        x = x.squeeze(1)  # Remove channel dimension
        x = x.unsqueeze(1)  # Add a channel dimension for Conv1d
        x = self.conv1d(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(-1)  # Add a depth dimension
        x = self.fractional_max_pool2d(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.adaptive_max_pool3d(x)
        
        # Flatten for BCEWithLogitsLoss
        x = x.view(x.size(0), -1)
        
        # Apply BCEWithLogitsLoss (assuming a target tensor is provided externally)
        # For demonstration, we'll just return the logits
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
