
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'ChannelShuffle', 'Tanh', 'FeatureAlphaDropout']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad2d(2, 3.0)  # Padding with value 3.0
        self.shuffle1 = nn.ChannelShuffle(4)  # Shuffling channels in groups of 4
        self.tanh1 = nn.Tanh()  # Applying Tanh activation
        self.dropout1 = nn.FeatureAlphaDropout(0.5)  # Applying FeatureAlphaDropout with 50% probability
        self.pad2 = nn.ConstantPad2d(1, 2.0)  # Padding with value 2.0
        self.shuffle2 = nn.ChannelShuffle(2)  # Shuffling channels in groups of 2
        self.tanh2 = nn.Tanh()  # Applying Tanh activation
        self.dropout2 = nn.FeatureAlphaDropout(0.3)  # Applying FeatureAlphaDropout with 30% probability

    def forward(self, x):
        x = self.pad1(x)  # Apply padding
        x = self.shuffle1(x)  # Shuffle channels
        x = self.tanh1(x)  # Apply Tanh activation
        x = self.dropout1(x)  # Apply FeatureAlphaDropout
        x = self.pad2(x)  # Apply padding
        x = self.shuffle2(x)  # Shuffle channels
        x = self.tanh2(x)  # Apply Tanh activation
        x = self.dropout2(x)  # Apply FeatureAlphaDropout
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input with 4 channels and 32x32 spatial dimensions
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
