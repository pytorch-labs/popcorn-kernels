
# This is a random torch model generated by the following modules: ['ParameterList', 'AdaptiveAvgPool3d', 'EmbeddingBag', 'SmoothL1Loss', 'RReLU', 'Identity', 'LazyBatchNorm2d', 'ConstantPad2d', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.param_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(3)])
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.embedding_bag = nn.EmbeddingBag(1000, 10, mode='mean')
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.rrelu = nn.RReLU()
        self.identity = nn.Identity()
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.constant_pad2d = nn.ConstantPad2d(2, 3.5)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=10, kernel_size=3)

    def forward(self, x):
        # Apply ConstantPad2d
        x = self.constant_pad2d(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm2d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for 3D operations
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        
        # Apply LazyConvTranspose3d
        x = self.lazy_conv_transpose3d(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for EmbeddingBag
        x = x.view(-1, x.shape[1] * x.shape[2] * x.shape[3] * x.shape[4])
        x = self.embedding_bag(x.long())
        
        # Apply SmoothL1Loss (assuming a target tensor for demonstration)
        target = torch.randn_like(x)
        loss = self.smooth_l1_loss(x, target)
        
        # Return the loss and the processed tensor
        return loss, x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

