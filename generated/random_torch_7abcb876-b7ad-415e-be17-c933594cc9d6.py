
# This is a random torch model generated by the following modules: ['Container', 'AdaptiveMaxPool3d', 'PReLU', 'GRU']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.AdaptiveMaxPool3d((5, 5, 5)),
            nn.PReLU(),
            nn.AdaptiveMaxPool3d((3, 3, 3)),
            nn.PReLU(),
        )
        self.gru = nn.GRU(input_size=135, hidden_size=64, num_layers=2, batch_first=True)
        self.fc = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.container(x)
        # Flatten the output to fit GRU input
        batch_size = x.size(0)
        x = x.view(batch_size, -1, x.size(1) * x.size(2) * x.size(3) * x.size(4))
        # GRU expects input of shape (batch_size, seq_len, input_size)
        x, _ = self.gru(x)
        # Take the last output of the GRU
        x = x[:, -1, :]
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

