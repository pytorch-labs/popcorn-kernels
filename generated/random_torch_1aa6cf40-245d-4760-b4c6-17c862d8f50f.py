
# This is a random torch model generated by the following modules: ['RNN', 'LazyBatchNorm1d', 'GRU', 'Module', 'Hardshrink', 'LayerNorm', 'FeatureAlphaDropout', 'BatchNorm1d', 'PoissonNLLLoss', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.lazy_bn1d = nn.LazyBatchNorm1d()
        self.gru = nn.GRU(input_size=20, hidden_size=30, num_layers=2, batch_first=True)
        self.hardshrink = nn.Hardshrink()
        self.layer_norm = nn.LayerNorm(30)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.bn1d = nn.BatchNorm1d(30)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.circular_pad2d = nn.CircularPad2d(2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.rnn(x)
        x = self.lazy_bn1d(x)
        x, _ = self.gru(x)
        x = self.hardshrink(x)
        x = self.layer_norm(x)
        x = self.feature_alpha_dropout(x)
        x = self.bn1d(x.transpose(1, 2)).transpose(1, 2)
        x = self.circular_pad2d(x.unsqueeze(1)).squeeze(1)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 10).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
