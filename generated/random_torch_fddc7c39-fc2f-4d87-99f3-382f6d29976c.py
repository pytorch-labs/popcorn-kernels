
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'MultiheadAttention', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((16, 16))
        self.multihead_attention1 = nn.MultiheadAttention(embed_dim=256, num_heads=8)
        self.multihead_attention2 = nn.MultiheadAttention(embed_dim=256, num_heads=8)
        self.selu1 = nn.SELU()
        self.selu2 = nn.SELU()
        self.selu3 = nn.SELU()

    def forward(self, x):
        # Apply AdaptiveAvgPool2d to reduce spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Reshape for MultiheadAttention
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, embed_dim)
        
        # Apply MultiheadAttention
        x, _ = self.multihead_attention1(x, x, x)
        x = self.selu1(x)
        
        # Apply another MultiheadAttention
        x, _ = self.multihead_attention2(x, x, x)
        x = self.selu2(x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply SELU
        x = self.selu3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

