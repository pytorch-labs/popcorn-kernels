
# This is a random torch model generated by the following modules: ['LazyConv3d', 'ParameterDict', 'Conv1d', 'MSELoss', 'BatchNorm2d', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=16)
        self.conv1d = nn.Conv1d(in_channels=16, out_channels=32, kernel_size=3)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(32, 10)),
            'param2': nn.Parameter(torch.randn(10, 1))
        })
        self.container = nn.Sequential(
            nn.LazyConv3d(out_channels=8, kernel_size=3),
            nn.BatchNorm2d(num_features=8)
        )
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply LazyConv3d
        x = self.conv3d(x)
        
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.batch_norm2d(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.conv1d(x)
        
        # Apply ParameterDict
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Apply Container
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape for LazyConv3d
        x = self.container(x)
        
        # Compute MSE Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        loss = self.mse_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
