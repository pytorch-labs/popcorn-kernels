
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'Container', 'TransformerDecoder']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.container = nn.Sequential(
            nn.Linear(256, 512),
            nn.ReLU(),
            nn.Linear(512, 256),
            nn.ReLU()
        )
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=256, nhead=8),
            num_layers=3
        )

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Flatten the output for the container (fully connected layers)
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Pass through the container (fully connected layers)
        x = self.container(x)
        
        # Reshape for TransformerDecoder
        x = x.view(batch_size, 1, -1)  # Reshape to (batch_size, sequence_length, feature_dim)
        
        # Create a dummy memory tensor for the TransformerDecoder
        memory = torch.zeros_like(x)
        
        # Pass through the TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # Flatten the output for final processing
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

