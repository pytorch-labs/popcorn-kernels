
# This is a random torch model generated by the following modules: ['GRUCell', 'MaxUnpool3d', 'LazyConvTranspose1d', 'PReLU', 'BatchNorm1d', 'Module', 'GroupNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2, padding=1)
        self.prelu = nn.PReLU()
        self.batch_norm1d = nn.BatchNorm1d(num_features=64)
        self.group_norm = nn.GroupNorm(num_groups=8, num_channels=64)

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process through GRUCells
        for t in range(seq_len):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape for MaxUnpool3d
        x = h2.view(batch_size, 1, 128, 1, 1)
        x = self.max_unpool3d(x, torch.zeros_like(x))  # Dummy indices for simplicity
        
        # Reshape for ConvTranspose1d
        x = x.view(batch_size, 128, -1)
        x = self.conv_transpose1d(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Apply GroupNorm
        x = self.group_norm(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

