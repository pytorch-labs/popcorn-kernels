
# This is a random torch model generated by the following modules: ['Dropout2d', 'Conv1d', 'MaxPool3d', 'GLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.conv1d_1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv1d_2 = nn.Conv1d(10, 20, kernel_size=5)
        self.maxpool3d = nn.MaxPool3d(kernel_size=2)
        self.glu = nn.GLU(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.dropout2d(x)
        
        # Reshape to fit Conv1d input shape (batch_size, channels, sequence_length)
        x = x.view(x.size(0), x.size(1), -1)
        
        x = F.relu(self.conv1d_1(x))
        x = F.relu(self.conv1d_2(x))
        
        # Reshape to fit MaxPool3d input shape (batch_size, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.maxpool3d(x)
        
        # Reshape to fit GLU input shape (batch_size, channels * 2, ...)
        x = x.view(x.size(0), -1, x.size(3), x.size(4))
        x = self.glu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
