
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'LSTM', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=128)
        self.lstm1 = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.lstm2 = nn.LSTM(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.lstm3 = nn.LSTM(input_size=32, hidden_size=16, num_layers=2, batch_first=True)
        self.lstm4 = nn.LSTM(input_size=16, hidden_size=8, num_layers=2, batch_first=True)
        self.lstm5 = nn.LSTM(input_size=8, hidden_size=4, num_layers=2, batch_first=True)
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, features)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, features, sequence_length)
        x = self.adaptive_avg_pool(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, sequence_length, features)
        
        x, _ = self.lstm1(x)
        x, _ = self.lstm2(x)
        x, _ = self.lstm3(x)
        x, _ = self.lstm4(x)
        x, _ = self.lstm5(x)
        
        # Assuming the output is of shape (batch_size, sequence_length, 4)
        # We can apply the loss function if we have target labels
        # For demonstration, let's assume the target is a random tensor of the same shape
        target = torch.randint(0, 2, x.shape).float()  # Random binary target
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100, 256).cuda()  # Example input shape (batch_size=1, sequence_length=100, features=256)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

