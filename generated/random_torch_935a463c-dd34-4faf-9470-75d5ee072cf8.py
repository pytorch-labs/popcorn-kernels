
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'InstanceNorm3d', 'AdaptiveAvgPool3d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.instance_norm = nn.InstanceNorm3d(20)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        
        # Using ModuleList to hold multiple layers
        self.module_list = nn.ModuleList([
            nn.ConvTranspose1d(20, 30, kernel_size=3, stride=1),
            nn.ConvTranspose1d(30, 40, kernel_size=3, stride=1),
            nn.ConvTranspose1d(40, 50, kernel_size=3, stride=1)
        ])

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape to 3D for InstanceNorm3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 20, 1, 1, length)
        x = self.instance_norm(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool(x)
        
        # Reshape back to 1D for ConvTranspose1d
        x = x.squeeze(2).squeeze(3)  # Shape: (batch_size, 20, length)
        
        # Apply layers from ModuleList
        for layer in self.module_list:
            x = layer(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

