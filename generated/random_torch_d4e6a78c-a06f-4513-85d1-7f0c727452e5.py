
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'LeakyReLU', 'Mish', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.leaky_relu1 = nn.LeakyReLU()
        self.mish1 = nn.Mish()
        self.maxpool3d1 = nn.MaxPool3d(kernel_size=2)
        self.bn2 = nn.LazyBatchNorm1d()
        self.leaky_relu2 = nn.LeakyReLU()
        self.mish2 = nn.Mish()
        self.maxpool3d2 = nn.MaxPool3d(kernel_size=2)
        self.bn3 = nn.LazyBatchNorm1d()
        self.leaky_relu3 = nn.LeakyReLU()
        self.mish3 = nn.Mish()
        self.maxpool3d3 = nn.MaxPool3d(kernel_size=2)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        # If not, reshape accordingly
        if len(x.shape) == 4:
            x = x.unsqueeze(1)  # Add a depth dimension if missing
        elif len(x.shape) == 2:
            x = x.unsqueeze(1).unsqueeze(1)  # Add depth, height, and width dimensions if missing

        x = self.bn1(x)
        x = self.leaky_relu1(x)
        x = self.mish1(x)
        x = self.maxpool3d1(x)

        x = self.bn2(x)
        x = self.leaky_relu2(x)
        x = self.mish2(x)
        x = self.maxpool3d2(x)

        x = self.bn3(x)
        x = self.leaky_relu3(x)
        x = self.mish3(x)
        x = self.maxpool3d3(x)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
