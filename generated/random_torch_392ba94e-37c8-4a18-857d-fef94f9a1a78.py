
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'CTCLoss', 'ReflectionPad2d', 'AdaptiveAvgPool2d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.reflection_pad = nn.ReflectionPad2d(padding=2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        self.ctc_loss = nn.CTCLoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Reshape for CTC Loss (assuming input is a sequence)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(2, 0, 1)  # CTC expects (sequence_length, batch_size, num_classes)
        
        # Dummy target for CTC Loss (assuming sequence length is 5)
        target = torch.randint(1, 10, (batch_size, 5), dtype=torch.long)
        input_lengths = torch.full((batch_size,), 5, dtype=torch.long)
        target_lengths = torch.randint(1, 6, (batch_size,), dtype=torch.long)
        
        # Apply CTC Loss
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Reshape for BCE Loss (assuming binary classification)
        x = x.permute(1, 2, 0)  # Back to (batch_size, num_classes, sequence_length)
        x = x.mean(dim=2)  # Average over sequence length
        x = torch.sigmoid(x)  # Apply sigmoid for BCE Loss
        
        # Dummy target for BCE Loss
        bce_target = torch.randint(0, 2, (batch_size, channels), dtype=torch.float)
        
        # Apply BCE Loss
        bce_loss = self.bce_loss(x, bce_target)
        
        # Return both losses (for demonstration purposes)
        return ctc_loss, bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

