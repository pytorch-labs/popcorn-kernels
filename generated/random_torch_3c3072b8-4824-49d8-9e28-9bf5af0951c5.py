
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'HingeEmbeddingLoss', 'Flatten', 'ReplicationPad2d', 'AdaptiveAvgPool1d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(10)
        self.replication_pad = nn.ReplicationPad2d(2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(10)
        self.flatten = nn.Flatten()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(10, 5)
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.adaptive_avg_pool(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Apply HingeEmbeddingLoss (assuming a target tensor is provided)
        target = torch.randint(0, 5, (x.size(0),)).to(x.device)
        loss = self.hinge_embedding_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

