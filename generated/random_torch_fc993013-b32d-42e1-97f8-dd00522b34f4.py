
# This is a random torch model generated by the following modules: ['Softsign', 'AvgPool3d', 'LazyConv2d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.lazy_conv2d = nn.LazyConv2d(out_channels=16, kernel_size=3, stride=1, padding=1)
        self.celu = nn.CELU()

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Reshape to 5D tensor for AvgPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.avgpool3d(x)
        
        # Reshape back to 4D tensor for LazyConv2d
        x = x.squeeze(2)  # Remove the depth dimension
        x = x.squeeze(1)  # Remove the channel dimension
        
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        
        # Apply CELU
        x = self.celu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

