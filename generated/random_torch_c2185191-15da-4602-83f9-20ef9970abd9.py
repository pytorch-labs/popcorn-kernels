
# This is a random torch model generated by the following modules: ['HingeEmbeddingLoss', 'ZeroPad2d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ZeroPad2d(2)
        self.pad2 = nn.ZeroPad2d(1)
        self.hinge_loss = nn.HingeEmbeddingLoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply ZeroPad2d layers
        x = self.pad1(x)
        x = self.pad2(x)
        
        # Flatten the input for loss computation
        x_flat = x.view(-1)
        
        # Create a dummy target tensor for loss computation
        target = torch.ones_like(x_flat)
        
        # Compute HingeEmbeddingLoss
        hinge_loss = self.hinge_loss(x_flat, target)
        
        # Compute BCELoss
        bce_loss = self.bce_loss(torch.sigmoid(x_flat), target)
        
        # Return the sum of the losses as the output
        return hinge_loss + bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
