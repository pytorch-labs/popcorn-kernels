
# This is a random torch model generated by the following modules: ['MaxUnpool3d', 'Conv3d', 'GELU', 'Linear', 'Hardshrink', 'HingeEmbeddingLoss', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv3d(1, 10, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv3d(10, 20, kernel_size=3, stride=1, padding=1)
        self.max_unpool = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(20 * 8 * 8 * 8, 256)
        self.fc2 = nn.Linear(256, 10)
        self.flatten = nn.Flatten()
        self.gelu = nn.GELU()
        self.hardshrink = nn.Hardshrink()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Initial Conv3d layers
        x = self.conv1(x)
        x = self.gelu(x)
        x = self.conv2(x)
        x = self.hardshrink(x)
        
        # MaxUnpool3d requires indices from a previous MaxPool3d operation
        # Since we don't have MaxPool3d in the module list, we'll simulate it
        pool_out, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool(pool_out, indices)
        
        # Flatten and pass through Linear layers
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.gelu(x)
        x = self.fc2(x)
        
        # Apply HingeEmbeddingLoss (typically used during training, not in forward pass)
        # Here, we'll just return the output and let the loss be computed externally
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
