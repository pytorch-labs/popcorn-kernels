
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'RNNCellBase', 'MarginRankingLoss', 'AvgPool1d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.rnn_cell = nn.RNNCellBase(input_size=10, hidden_size=20)
        self.margin_ranking_loss = nn.MarginRankingLoss()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)

    def forward(self, x):
        # Apply ConstantPad3d to the input
        x = self.constant_pad3d(x)
        
        # Reshape the input to fit the RNNCellBase input size
        x = x.view(-1, 10)
        
        # Apply RNNCellBase
        hx = torch.zeros(x.size(0), 20).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Reshape the output to fit the AvgPool1d input size
        x = x.unsqueeze(1)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Compute MarginRankingLoss (requires two inputs and a target)
        input1 = x[:, 0]
        input2 = x[:, 1]
        target = torch.ones_like(input1)
        loss = self.margin_ranking_loss(input1, input2, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
