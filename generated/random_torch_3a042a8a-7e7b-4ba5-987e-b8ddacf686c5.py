
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'UpsamplingBilinear2d', 'LazyLinear', 'AdaptiveMaxPool3d', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pairwise_distance = nn.PairwiseDistance()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.prelu = nn.PReLU()

    def forward(self, x):
        # Assuming x is a batch of 3D tensors, we first apply PairwiseDistance
        # PairwiseDistance requires two inputs, so we split the input tensor into two halves
        x1, x2 = torch.chunk(x, 2, dim=1)
        x = self.pairwise_distance(x1, x2)
        
        # Reshape to 4D tensor for UpsamplingBilinear2d
        x = x.unsqueeze(1).unsqueeze(1)
        x = self.upsample(x)
        
        # Reshape to 2D tensor for LazyLinear
        x = x.view(x.size(0), -1)
        x = self.prelu(self.lazy_linear1(x))
        x = self.prelu(self.lazy_linear2(x))
        
        # Reshape to 5D tensor for AdaptiveMaxPool3d
        x = x.view(x.size(0), 1, 8, 8, 8)
        x = self.adaptive_max_pool3d(x)
        
        # Final reshape to 2D tensor for output
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

