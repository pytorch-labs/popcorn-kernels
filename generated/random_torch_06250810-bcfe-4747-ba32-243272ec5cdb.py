
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'LazyConv2d', 'Dropout2d', 'LocalResponseNorm', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.prelu1 = nn.PReLU()
        self.dropout1 = nn.Dropout2d(p=0.2)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.prelu2 = nn.PReLU()
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.conv3 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.prelu3 = nn.PReLU()
        self.dropout2 = nn.Dropout2d(p=0.3)
        self.conv4 = nn.LazyConv2d(out_channels=128, kernel_size=3)
        self.prelu4 = nn.PReLU()
        self.local_response_norm2 = nn.LocalResponseNorm(size=5)
        self.adaptive_max_pool2 = nn.AdaptiveMaxPool1d(output_size=5)

    def forward(self, x):
        # First block
        x = self.conv1(x)
        x = self.prelu1(x)
        x = self.dropout1(x)
        
        # Second block
        x = self.conv2(x)
        x = self.prelu2(x)
        x = self.local_response_norm(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        
        # Third block
        x = self.conv3(x)
        x = self.prelu3(x)
        x = self.dropout2(x)
        
        # Fourth block
        x = self.conv4(x)
        x = self.prelu4(x)
        x = self.local_response_norm2(x)
        
        # Final reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
