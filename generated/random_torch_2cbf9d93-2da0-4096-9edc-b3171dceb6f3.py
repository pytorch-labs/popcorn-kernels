
# This is a random torch model generated by the following modules: ['LPPool3d', 'ChannelShuffle', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.batch_norm1 = nn.LazyBatchNorm1d()
        self.batch_norm2 = nn.LazyBatchNorm1d()
        self.batch_norm3 = nn.LazyBatchNorm1d()
        self.batch_norm4 = nn.LazyBatchNorm1d()
        self.batch_norm5 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Apply LPPool3d
        x = self.lp_pool(x)
        
        # Reshape to 2D for ChannelShuffle
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Flatten for BatchNorm1d
        x = x.view(batch_size, -1)
        
        # Apply LazyBatchNorm1d multiple times
        x = self.batch_norm1(x)
        x = self.batch_norm2(x)
        x = self.batch_norm3(x)
        x = self.batch_norm4(x)
        x = self.batch_norm5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

