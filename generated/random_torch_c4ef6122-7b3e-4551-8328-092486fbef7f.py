
# This is a random torch model generated by the following modules: ['Container', 'MultiLabelMarginLoss', 'Hardshrink', 'ReplicationPad2d', 'LSTM', 'ConstantPad3d', 'Hardswish', 'Linear', 'HingeEmbeddingLoss', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.ReplicationPad2d(2),
            nn.Hardshrink(),
            nn.Hardswish(),
            nn.Tanh(),
            nn.Linear(128, 64),
            nn.Linear(64, 32),
            nn.Linear(32, 16),
            nn.Linear(16, 8),
            nn.Linear(8, 4),
        )
        self.lstm = nn.LSTM(input_size=4, hidden_size=8, num_layers=2, batch_first=True)
        self.constant_pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.container[0](x)
        
        # Apply Hardshrink
        x = self.container[1](x)
        
        # Apply Hardswish
        x = self.container[2](x)
        
        # Apply Tanh
        x = self.container[3](x)
        
        # Reshape for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.container[4](x)
        x = self.container[5](x)
        x = self.container[6](x)
        x = self.container[7](x)
        x = self.container[8](x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 4)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply ConstantPad3d
        x = x.unsqueeze(1).unsqueeze(1)
        x = self.constant_pad(x)
        
        # Apply MultiLabelMarginLoss (dummy target)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        loss1 = self.multi_label_margin_loss(x.squeeze(), target)
        
        # Apply HingeEmbeddingLoss (dummy target)
        target = torch.randint(0, 2, (x.size(0),)).float()
        loss2 = self.hinge_embedding_loss(x.squeeze(), target)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

