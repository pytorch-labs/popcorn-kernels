
# This is a random torch model generated by the following modules: ['MSELoss', 'BCEWithLogitsLoss', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.mse_loss = nn.MSELoss()
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ReLU6 activation
        x = self.relu6(x)
        
        # Reshape the input to match the expected shape for loss functions
        x_reshaped = x.view(-1)
        
        # Generate a random target tensor for MSELoss
        target_mse = torch.randn_like(x_reshaped)
        
        # Compute MSELoss
        mse_loss = self.mse_loss(x_reshaped, target_mse)
        
        # Generate a random target tensor for BCEWithLogitsLoss
        target_bce = torch.randint(0, 2, (x_reshaped.size(0),), dtype=torch.float32)
        
        # Compute BCEWithLogitsLoss
        bce_loss = self.bce_loss(x_reshaped, target_bce)
        
        # Return the sum of the two losses
        return mse_loss + bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
