
# This is a random torch model generated by the following modules: ['LazyInstanceNorm2d', 'EmbeddingBag', 'LazyConv2d', 'AdaptiveMaxPool1d', 'AdaptiveAvgPool1d', 'LSTMCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm2d()
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.norm2 = nn.LazyInstanceNorm2d()
        self.conv2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=32)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=32)
        self.lstm_cell1 = nn.LSTMCell(input_size=32, hidden_size=64)
        self.lstm_cell2 = nn.LSTMCell(input_size=64, hidden_size=128)
        self.lstm_cell3 = nn.LSTMCell(input_size=128, hidden_size=64)
        self.lstm_cell4 = nn.LSTMCell(input_size=64, hidden_size=32)
        self.lstm_cell5 = nn.LSTMCell(input_size=32, hidden_size=16)

    def forward(self, x):
        # Apply InstanceNorm and Conv layers
        x = self.norm1(x)
        x = F.relu(self.conv1(x))
        x = self.norm2(x)
        x = F.relu(self.conv2(x))
        
        # Flatten the spatial dimensions and prepare for EmbeddingBag
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.embedding_bag(x.long())  # Assuming input can be converted to long
        
        # Apply adaptive pooling
        x = x.unsqueeze(1)  # Add a dummy dimension for pooling
        x = self.adaptive_max_pool(x)
        x = self.adaptive_avg_pool(x)
        
        # Prepare for LSTM cells
        x = x.squeeze(1)  # Remove the dummy dimension
        hx = torch.zeros(x.size(0), 64).to(x.device)
        cx = torch.zeros(x.size(0), 64).to(x.device)
        
        # Pass through LSTM cells
        hx, cx = self.lstm_cell1(x, (hx, cx))
        hx, cx = self.lstm_cell2(hx, (hx, cx))
        hx, cx = self.lstm_cell3(hx, (hx, cx))
        hx, cx = self.lstm_cell4(hx, (hx, cx))
        hx, cx = self.lstm_cell5(hx, (hx, cx))
        
        return hx


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

