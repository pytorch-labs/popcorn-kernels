
# This is a random torch model generated by the following modules: ['Fold', 'LPPool2d', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=3, stride=2)
        self.avg_pool = nn.AvgPool1d(kernel_size=2, stride=2)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(3, 3), stride=(1, 1))

    def forward(self, x):
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Reshape for AvgPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)
        
        # Apply AvgPool1d
        x = self.avg_pool(x)
        
        # Reshape for Fold
        x = x.view(batch_size, -1)
        
        # Apply Fold
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
