
# This is a random torch model generated by the following modules: ['Hardtanh', 'MaxPool3d', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh1 = nn.Hardtanh(min_val=-1, max_val=1)
        self.maxpool3d1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.rnn1 = nn.RNNBase(input_size=10, hidden_size=20, num_layers=2)
        self.hardtanh2 = nn.Hardtanh(min_val=-1, max_val=1)
        self.maxpool3d2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.rnn2 = nn.RNNBase(input_size=20, hidden_size=30, num_layers=2)
        self.hardtanh3 = nn.Hardtanh(min_val=-1, max_val=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.hardtanh1(x)
        x = self.maxpool3d1(x)
        
        # Reshape for RNN input: (batch_size, sequence_length, input_size)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, depth, -1)  # Flatten height and width into input_size
        
        x, _ = self.rnn1(x)
        x = self.hardtanh2(x)
        
        # Reshape back to 5D tensor for MaxPool3d
        x = x.view(batch_size, -1, depth, height, width)
        x = self.maxpool3d2(x)
        
        # Reshape for RNN input again
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, depth, -1)
        
        x, _ = self.rnn2(x)
        x = self.hardtanh3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

