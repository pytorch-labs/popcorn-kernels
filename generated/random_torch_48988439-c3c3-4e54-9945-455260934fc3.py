
# This is a random torch model generated by the following modules: ['GLU', 'LogSigmoid', 'LPPool3d', 'Sigmoid', 'Softsign', 'Dropout3d', 'ConvTranspose3d', 'AdaptiveMaxPool3d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d_1 = nn.ConvTranspose3d(1, 10, kernel_size=5)
        self.dropout3d_1 = nn.Dropout3d(p=0.5)
        self.lp_pool3d_1 = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.glu_1 = nn.GLU(dim=1)
        self.adaptive_max_pool3d_1 = nn.AdaptiveMaxPool3d(output_size=(10, 10, 10))
        self.gelu_1 = nn.GELU()
        self.conv_transpose3d_2 = nn.ConvTranspose3d(10, 20, kernel_size=5)
        self.softsign_1 = nn.Softsign()
        self.sigmoid_1 = nn.Sigmoid()
        self.log_sigmoid_1 = nn.LogSigmoid()

    def forward(self, x):
        x = self.conv_transpose3d_1(x)
        x = self.dropout3d_1(x)
        x = self.lp_pool3d_1(x)
        x = self.glu_1(x)
        x = self.adaptive_max_pool3d_1(x)
        x = self.gelu_1(x)
        x = self.conv_transpose3d_2(x)
        x = self.softsign_1(x)
        x = self.sigmoid_1(x)
        x = self.log_sigmoid_1(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
