
# This is a random torch model generated by the following modules: ['TransformerEncoderLayer', 'MaxPool3d', 'ELU', 'UpsamplingNearest2d', 'Hardswish', 'TransformerDecoder']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.transformer_encoder = nn.TransformerEncoder(self.encoder_layer, num_layers=3)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.elu = nn.ELU()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.hardswish = nn.Hardswish()
        self.decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.transformer_decoder = nn.TransformerDecoder(self.decoder_layer, num_layers=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # First, apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Reshape to fit TransformerEncoder input (sequence_length, batch_size, d_model)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width).permute(2, 0, 1)
        
        # Apply TransformerEncoder
        x = self.transformer_encoder(x)
        
        # Reshape back to 3D tensor
        x = x.permute(1, 2, 0).view(batch_size, channels, depth, height, width)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape to 2D for UpsamplingNearest2d
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height * 2, width * 2)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape to fit TransformerDecoder input (sequence_length, batch_size, d_model)
        x = x.view(batch_size, channels * depth, height * 2 * width * 2).permute(2, 0, 1)
        
        # Apply TransformerDecoder
        x = self.transformer_decoder(x, x)
        
        # Reshape back to original shape (batch_size, channels, depth, height, width)
        x = x.permute(1, 2, 0).view(batch_size, channels, depth, height * 2, width * 2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

