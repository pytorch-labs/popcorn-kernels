
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'GELU', 'CosineSimilarity', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReplicationPad2d(2)
        self.gelu = nn.GELU()
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.pad(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape x to have two tensors for CosineSimilarity
        # Assuming the input is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        x1 = x[:, :channels//2, :, :]
        x2 = x[:, channels//2:, :, :]
        
        # Apply CosineSimilarity
        x = self.cosine_sim(x1, x2)
        
        # Reshape x to match the expected input shape for PoissonNLLLoss
        x = x.view(batch_size, -1)
        
        # Generate a random target tensor for PoissonNLLLoss
        target = torch.randint(0, 10, (batch_size, x.size(1)), device=x.device).float()
        
        # Apply PoissonNLLLoss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

