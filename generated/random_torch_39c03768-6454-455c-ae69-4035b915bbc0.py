
# This is a random torch model generated by the following modules: ['PixelShuffle', 'InstanceNorm2d', 'GaussianNLLLoss', 'Dropout', 'BatchNorm2d', 'L1Loss', 'AlphaDropout', 'CELU', 'CircularPad3d', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.batch_norm2d = nn.BatchNorm2d(10)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.dropout = nn.Dropout(0.5)
        self.alpha_dropout = nn.AlphaDropout(0.5)
        self.celu = nn.CELU()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = x.unsqueeze(1)  # Add a channel dimension if necessary
        x = self.conv_transpose1d(x)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Expand dimensions for CircularPad3d
        x = self.circular_pad3d(x)
        x = x.squeeze(-1).squeeze(-1)  # Remove extra dimensions
        x = x.unsqueeze(-1).unsqueeze(-1)  # Expand dimensions for BatchNorm2d
        x = self.batch_norm2d(x)
        x = self.instance_norm2d(x)
        x = x.squeeze(-1).squeeze(-1)  # Remove extra dimensions
        x = self.dropout(x)
        x = self.alpha_dropout(x)
        x = self.celu(x)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Expand dimensions for PixelShuffle
        x = self.pixel_shuffle(x)
        x = x.squeeze(-1).squeeze(-1)  # Remove extra dimensions
        # For demonstration, we'll create a dummy target for GaussianNLLLoss and L1Loss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_nll_loss(x, target, var)
        l1_loss = self.l1_loss(x, target)
        return x, gaussian_loss, l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
