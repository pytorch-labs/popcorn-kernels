
# This is a random torch model generated by the following modules: ['Tanh', 'Hardshrink', 'SyncBatchNorm', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.SyncBatchNorm(32)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.SyncBatchNorm(64)
        self.conv3 = nn.LazyConv1d(out_channels=128, kernel_size=3)
        self.bn3 = nn.SyncBatchNorm(128)
        self.tanh = nn.Tanh()
        self.hardshrink = nn.Hardshrink()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.tanh(x)
        
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.hardshrink(x)
        
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.tanh(x)
        
        # Flatten the output for potential further processing
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input: (batch_size=1, channels=1, sequence_length=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

