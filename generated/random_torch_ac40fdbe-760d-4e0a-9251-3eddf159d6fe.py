
# This is a random torch model generated by the following modules: ['TripletMarginWithDistanceLoss', 'GaussianNLLLoss', 'Unflatten', 'MultiMarginLoss', 'LPPool1d', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.unflatten = nn.Unflatten(1, (10, 5))
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lp_pool1d(x)
        
        # Unflatten
        x = self.unflatten(x)
        
        # Reshape for TripletMarginWithDistanceLoss
        anchor = x[:, 0, :].view(x.size(0), -1)
        positive = x[:, 1, :].view(x.size(0), -1)
        negative = x[:, 2, :].view(x.size(0), -1)
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Reshape for GaussianNLLLoss
        input_gaussian = x[:, 3, :].view(x.size(0), -1)
        target_gaussian = torch.randn_like(input_gaussian)
        var_gaussian = torch.ones_like(input_gaussian)
        gaussian_nll_loss = self.gaussian_nll_loss(input_gaussian, target_gaussian, var_gaussian)
        
        # Reshape for MultiMarginLoss
        input_margin = x[:, 4, :].view(x.size(0), -1)
        target_margin = torch.randint(0, input_margin.size(1), (input_margin.size(0),))
        multi_margin_loss = self.multi_margin_loss(input_margin, target_margin)
        
        # Return the losses as a tuple
        return triplet_loss, gaussian_nll_loss, multi_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
