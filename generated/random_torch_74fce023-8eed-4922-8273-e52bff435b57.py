
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ConvTranspose3d', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.param_list = nn.ParameterList([nn.Parameter(torch.randn(20, 10)) for _ in range(5)])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = F.relu(self.conv_transpose1(x))
        x = F.relu(self.conv_transpose2(x))
        
        # Reshape to apply ParameterList
        batch_size = x.size(0)
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        
        # Apply ParameterList
        for param in self.param_list:
            x = torch.matmul(x, param)
        
        # Apply LogSoftmax
        x = F.log_softmax(x, dim=1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

