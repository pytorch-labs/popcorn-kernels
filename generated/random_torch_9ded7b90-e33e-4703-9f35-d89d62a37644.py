
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'LPPool2d', 'GRU', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.sequential = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 10)
        )

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.pad(x)
        
        # Reshape for LPPool2d (assuming input is 4D: batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3) * x.size(4))
        
        # Apply LPPool2d
        x = self.pool(x)
        
        # Reshape for GRU (assuming input is 3D: batch, sequence, features)
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Take the last output of the GRU
        x = x[:, -1, :]
        
        # Apply Sequential
        x = self.sequential(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input: batch_size=1, channels=3, depth=32, height=32, width=32
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

