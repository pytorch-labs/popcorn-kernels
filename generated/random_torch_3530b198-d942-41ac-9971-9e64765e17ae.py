
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'CircularPad2d', 'UpsamplingBilinear2d', 'RNNCell', 'LazyInstanceNorm2d', 'ConstantPad1d', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.circular_pad = nn.CircularPad2d(2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=128)
        self.instance_norm = nn.LazyInstanceNorm2d()
        self.constant_pad = nn.ConstantPad1d(2, 3.0)
        self.max_unpool = nn.MaxUnpool3d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape for RNNCell
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten spatial dimensions
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x, hx)
        
        # Reshape back to 4D for LazyInstanceNorm2d
        x = x.view(batch_size, channels, height, width)
        x = self.instance_norm(x)
        
        # Reshape for ConstantPad1d
        x = x.view(batch_size, -1)
        x = self.constant_pad(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(batch_size, 1, -1)  # Add a dummy dimension for 3D
        indices = torch.randint(0, x.shape[2], (batch_size, 1, x.shape[2])).to(x.device)
        x = self.max_unpool(x, indices)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

