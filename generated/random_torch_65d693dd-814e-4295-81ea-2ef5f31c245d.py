
# This is a random torch model generated by the following modules: ['HuberLoss', 'Dropout1d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.huber_loss = nn.HuberLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_avg_pool3d(x)  # Shape: (batch_size, channels, 5, 5, 5)
        
        # Reshape to apply Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 125)
        x = self.dropout1d(x)  # Shape: (batch_size, channels, 125)
        
        # Reshape back to 3D
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Shape: (batch_size, channels, 5, 5, 5)
        
        # Dummy target for HuberLoss (same shape as x)
        target = torch.zeros_like(x)
        
        # Apply HuberLoss
        loss = self.huber_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

