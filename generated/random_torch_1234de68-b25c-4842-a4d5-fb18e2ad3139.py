
# This is a random torch model generated by the following modules: ['ReLU', 'MultiheadAttention', 'Sequential', 'TransformerDecoderLayer', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(16)
        self.attention1 = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.transformer_decoder_layer1 = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.sequential1 = nn.Sequential(
            nn.ReLU(),
            nn.Linear(64, 128),
            nn.ReLU(),
            nn.Linear(128, 64)
        )
        self.bn2 = nn.BatchNorm3d(8)
        self.attention2 = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.transformer_decoder_layer2 = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.sequential2 = nn.Sequential(
            nn.ReLU(),
            nn.Linear(64, 128),
            nn.ReLU(),
            nn.Linear(128, 10)
        )

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        x = x.view(x.size(0), -1, x.size(2) * x.size(3) * x.size(4))  # Flatten spatial dimensions
        x = x.permute(1, 0, 2)  # Reshape for MultiheadAttention (seq_len, batch_size, embed_dim)
        x, _ = self.attention1(x, x, x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, embed_dim)
        x = self.transformer_decoder_layer1(x, x)
        x = self.sequential1(x)
        x = x.view(x.size(0), 8, -1, x.size(1) // 8, x.size(2))  # Reshape for BatchNorm3d
        x = self.bn2(x)
        x = x.view(x.size(0), -1, x.size(3) * x.size(4))  # Flatten spatial dimensions
        x = x.permute(1, 0, 2)  # Reshape for MultiheadAttention (seq_len, batch_size, embed_dim)
        x, _ = self.attention2(x, x, x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, embed_dim)
        x = self.transformer_decoder_layer2(x, x)
        x = self.sequential2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 8, 8, 8).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

