
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'GaussianNLLLoss', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply AdaptiveAvgPool3d to reduce spatial dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to fit Dropout1d input requirements
        x = x.view(x.size(0), -1, 1)  # Reshape to (batch_size, channels, 1)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Reshape back to original shape (excluding the last dimension)
        x = x.view(x.size(0), -1)
        
        # Generate a target tensor for GaussianNLLLoss
        target = torch.randn_like(x)
        
        # Generate a variance tensor for GaussianNLLLoss
        var = torch.ones_like(x)
        
        # Compute GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

