
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'MaxUnpool3d', 'ParameterDict', 'MaxUnpool2d', 'RNNCellBase', 'Hardswish', 'FractionalMaxPool2d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.batch_norm = nn.BatchNorm1d(128)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(128, 64)),
            'param2': nn.Parameter(torch.randn(64, 32))
        })
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.rnn_cell = nn.RNNCellBase(input_size=32, hidden_size=64)
        self.hardswish = nn.Hardswish()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, depth, height, width)
        x = self.constant_pad3d(x)  # Apply ConstantPad3d
        x = self.fractional_max_pool(x)  # Apply FractionalMaxPool2d
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x, indices = torch.max(x, dim=-1, keepdim=True)
        x = self.max_unpool3d(x, indices)  # Apply MaxUnpool3d
        
        # Reshape for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x, indices = torch.max(x, dim=-1, keepdim=True)
        x = self.max_unpool2d(x, indices)  # Apply MaxUnpool2d
        
        # Flatten for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm(x)  # Apply BatchNorm1d
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1, 32)
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.rnn_cell(x, hx)  # Apply RNNCellBase
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Use ParameterDict
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
