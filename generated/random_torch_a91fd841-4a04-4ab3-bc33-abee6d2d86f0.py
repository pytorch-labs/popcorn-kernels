
# This is a random torch model generated by the following modules: ['Dropout', 'FractionalMaxPool2d', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout(p=0.5)
        self.fractional_max_pool2d1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.fractional_max_pool2d2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()

    def forward(self, x):
        x = self.dropout1(x)
        x = self.fractional_max_pool2d1(x)
        x = self.rrelu1(x)
        x = self.dropout2(x)
        x = self.fractional_max_pool2d2(x)
        x = self.rrelu2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

