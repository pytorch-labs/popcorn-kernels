
# This is a random torch model generated by the following modules: ['Mish', 'ZeroPad2d', 'Container', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.mish1 = nn.Mish()
        self.zero_pad2d1 = nn.ZeroPad2d(2)
        self.container1 = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=5),
            nn.Mish(),
            nn.MaxPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2))
        )
        self.zero_pad2d2 = nn.ZeroPad2d(1)
        self.container2 = nn.Sequential(
            nn.Conv2d(10, 20, kernel_size=3),
            nn.Mish(),
            nn.MaxPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2))
        )
        self.fc1 = nn.Linear(720, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = self.mish1(x)
        x = self.zero_pad2d1(x)
        x = self.container1(x)
        x = self.zero_pad2d2(x)
        x = self.container2(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = F.mish(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
