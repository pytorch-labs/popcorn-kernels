
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'NLLLoss2d', 'AdaptiveMaxPool2d', 'RNN', 'LazyBatchNorm1d', 'MaxPool1d', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.rnn = nn.RNN(input_size=256, hidden_size=128, num_layers=2, batch_first=True)
        self.lazy_batch_norm = nn.LazyBatchNorm1d()
        self.max_pool = nn.MaxPool1d(kernel_size=2)
        self.circular_pad = nn.CircularPad1d(padding=1)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.nll_loss_2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, height, width)
        x = self.adaptive_max_pool(x)  # Shape: (batch_size, channels, 16, 16)
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 256)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 256, channels)
        x, _ = self.rnn(x)  # Shape: (batch_size, 256, 128)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 128, 256)
        x = self.lazy_batch_norm(x)  # Shape: (batch_size, 128, 256)
        x = self.max_pool(x)  # Shape: (batch_size, 128, 128)
        x = self.circular_pad(x)  # Shape: (batch_size, 128, 130)
        
        # Dummy target for loss functions (not used in actual forward pass)
        target = torch.randint(0, 10, (x.size(0), 128, 130))
        var = torch.ones_like(x)
        
        # Apply loss functions (not typical in forward pass, but included as per the module list)
        gaussian_loss = self.gaussian_nll_loss(x, target, var)
        nll_loss = self.nll_loss_2d(x, target)
        
        # Return the losses as part of the output (not typical, but included to use all modules)
        return x, gaussian_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

