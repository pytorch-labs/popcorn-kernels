
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'CircularPad1d', 'PoissonNLLLoss', 'CTCLoss', 'Softplus', 'GRU', 'PixelUnshuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad1d(2)
        self.softplus = nn.Softplus()
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply CircularPad1d
        x = self.circular_pad(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for GRU
        x = x.view(x.size(0), -1, 10)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Reshape for PixelUnshuffle
        x = x.view(x.size(0), 20, 8, 8)  # Reshape to (batch_size, channels, height, width)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Compute losses (dummy targets for demonstration)
        target_multi_margin = torch.randint(0, 10, (x.size(0),), dtype=torch.long, device=x.device)
        target_poisson = torch.randn_like(x)
        target_ctc = torch.randint(0, 10, (x.size(0), 10), dtype=torch.long, device=x.device)
        input_lengths = torch.full((x.size(0),), 10, dtype=torch.long, device=x.device)
        target_lengths = torch.randint(1, 10, (x.size(0),), dtype=torch.long, device=x.device)
        
        # Apply MultiMarginLoss
        loss_multi_margin = self.multi_margin_loss(x.view(x.size(0), -1), target_multi_margin)
        
        # Apply PoissonNLLLoss
        loss_poisson = self.poisson_nll_loss(x, target_poisson)
        
        # Apply CTCLoss
        loss_ctc = self.ctc_loss(x.view(x.size(0), 10, -1), target_ctc, input_lengths, target_lengths)
        
        # Return the sum of losses (for demonstration purposes)
        return loss_multi_margin + loss_poisson + loss_ctc

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
