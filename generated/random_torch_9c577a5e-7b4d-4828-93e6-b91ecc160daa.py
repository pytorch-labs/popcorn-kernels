
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'LazyInstanceNorm3d', 'LocalResponseNorm', 'InstanceNorm1d', 'ConvTranspose1d', 'ConvTranspose3d', 'ReplicationPad2d', 'GRUCell', 'RReLU', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose2d_1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2d_2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=64, out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose3d = nn.ConvTranspose3d(in_channels=32, out_channels=16, kernel_size=3, stride=2)
        self.instance_norm3d = nn.LazyInstanceNorm3d()
        self.instance_norm1d = nn.InstanceNorm1d(num_features=16)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.replication_pad2d = nn.ReplicationPad2d(padding=1)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.gru_cell = nn.GRUCell(input_size=16, hidden_size=32)
        self.rrelu = nn.RReLU()

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose2d_1(x)
        x = self.conv_transpose2d_2(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Apply ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Apply InstanceNorm3d
        x = self.instance_norm3d(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 32).to(x.device)
        x = self.gru_cell(x, hx)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
