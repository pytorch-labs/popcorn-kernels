
# This is a random torch model generated by the following modules: ['Conv1d', 'ReplicationPad1d', 'LazyBatchNorm2d', 'PixelUnshuffle', 'AvgPool2d', 'SiLU', 'InstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.pad1 = nn.ReplicationPad1d(2)
        self.bn1 = nn.LazyBatchNorm2d()
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2)
        self.silu = nn.SiLU()
        self.instance_norm = nn.InstanceNorm1d(10)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.pad2 = nn.ReplicationPad1d(2)
        self.bn2 = nn.LazyBatchNorm2d()
        self.pixel_unshuffle2 = nn.PixelUnshuffle(2)
        self.avg_pool2 = nn.AvgPool2d(kernel_size=2)
        self.silu2 = nn.SiLU()
        self.instance_norm2 = nn.InstanceNorm1d(20)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1(x)
        x = self.pad1(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 4D for LazyBatchNorm2d
        x = self.bn1(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = x.unsqueeze(2)  # Add a dimension to make it 4D for PixelUnshuffle
        x = self.pixel_unshuffle(x)
        x = self.avg_pool(x)
        x = self.silu(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.instance_norm(x)
        x = self.conv2(x)
        x = self.pad2(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 4D for LazyBatchNorm2d
        x = self.bn2(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = x.unsqueeze(2)  # Add a dimension to make it 4D for PixelUnshuffle
        x = self.pixel_unshuffle2(x)
        x = self.avg_pool2(x)
        x = self.silu2(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.instance_norm2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

