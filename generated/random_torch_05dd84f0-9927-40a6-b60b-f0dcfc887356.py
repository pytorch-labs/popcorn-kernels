
# This is a random torch model generated by the following modules: ['RNNCell', 'MaxUnpool1d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell1 = nn.RNNCell(input_size=64, hidden_size=128)
        self.rnn_cell2 = nn.RNNCell(input_size=128, hidden_size=256)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.batch_norm2d = nn.BatchNorm2d(256)
        self.fc = nn.Linear(256, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Initialize hidden states for RNN cells
        h1 = torch.zeros(batch_size, 128).to(x.device)
        h2 = torch.zeros(batch_size, 256).to(x.device)
        
        # Process sequence through RNN cells
        for t in range(seq_len):
            h1 = self.rnn_cell1(x[:, t, :], h1)
            h2 = self.rnn_cell2(h1, h2)
        
        # Reshape for MaxUnpool1d
        x = h2.unsqueeze(1)  # Shape: (batch_size, 1, 256)
        
        # MaxUnpool1d requires an input of shape (batch_size, channels, length)
        # Since we have only one channel, we can proceed
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape for BatchNorm2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 1, 256)
        x = self.batch_norm2d(x)
        
        # Flatten for fully connected layer
        x = x.view(batch_size, -1)
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

