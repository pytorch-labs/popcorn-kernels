
# This is a random torch model generated by the following modules: ['Tanhshrink', 'TripletMarginWithDistanceLoss', 'LazyBatchNorm1d', 'RMSNorm', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.bn1 = nn.LazyBatchNorm1d()
        self.rms_norm = RMSNorm(64)
        self.tanh_shrink = nn.Tanhshrink()
        self.loss_fn = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        batch_size, seq_len, feature_dim = x.shape
        
        # LSTM expects input of shape (batch_size, seq_len, feature_dim)
        x, _ = self.lstm(x)
        
        # Apply LazyBatchNorm1d
        x = x.reshape(batch_size * seq_len, -1)  # Reshape to (batch_size * seq_len, hidden_size)
        x = self.bn1(x)
        x = x.reshape(batch_size, seq_len, -1)  # Reshape back to (batch_size, seq_len, hidden_size)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply Tanhshrink
        x = self.tanh_shrink(x)
        
        # Generate anchor, positive, and negative samples for TripletMarginWithDistanceLoss
        anchor = x[:, 0, :]  # First element in the sequence as anchor
        positive = x[:, 1, :]  # Second element in the sequence as positive
        negative = x[:, 2, :]  # Third element in the sequence as negative
        
        # Compute triplet loss
        loss = self.loss_fn(anchor, positive, negative)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(32, 10, 128).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
