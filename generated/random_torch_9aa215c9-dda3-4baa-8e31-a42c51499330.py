
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'FractionalMaxPool2d', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.pool1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.bn1 = nn.BatchNorm1d(14 * 14)
        self.dropout2 = nn.FeatureAlphaDropout(p=0.5)
        self.pool2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.bn2 = nn.BatchNorm1d(7 * 7)

    def forward(self, x):
        x = self.dropout1(x)
        x = self.pool1(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.bn1(x)
        x = x.view(x.size(0), 1, 14, 14)  # Reshape back to 2D
        x = self.dropout2(x)
        x = self.pool2(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.bn2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
