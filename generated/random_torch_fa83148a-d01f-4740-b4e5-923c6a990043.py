
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'AdaptiveAvgPool3d', 'Conv2d', 'RMSNorm', 'SoftMarginLoss', 'EmbeddingBag', 'Transformer', 'Softsign', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.rms_norm = nn.RMSNorm(16)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.transformer = nn.Transformer(d_model=16, nhead=2, num_encoder_layers=2, num_decoder_layers=2)
        self.embedding_bag = nn.EmbeddingBag(1000, 16, mode='mean')
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.softsign = nn.Softsign()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.conv1(x)  # Shape: (batch_size, 16, height, width)
        x = self.rms_norm(x)  # Shape: (batch_size, 16, height, width)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Shape: (batch_size, 16, 1, height, width)
        x = self.adaptive_avg_pool3d(x)  # Shape: (batch_size, 16, 8, 8, 8)
        
        # Reshape for Transformer
        x = x.view(x.size(0), -1, 16)  # Shape: (batch_size, 8*8*8, 16)
        x = self.transformer(x, x)  # Shape: (batch_size, 8*8*8, 16)
        
        # Reshape for EmbeddingBag
        x = x.view(-1, 16)  # Shape: (batch_size * 8*8*8, 16)
        x = self.embedding_bag(x)  # Shape: (batch_size, 16)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)  # Shape: (batch_size, 16)
        
        # Apply Softsign
        x = self.softsign(x)  # Shape: (batch_size, 16)
        
        # Apply BCEWithLogitsLoss (assuming a target tensor)
        target = torch.randint(0, 2, (x.size(0), 16)).float()
        loss1 = self.bce_with_logits_loss(x, target)
        
        # Apply SoftMarginLoss (assuming another target tensor)
        target2 = torch.randint(0, 2, (x.size(0), 16)).float()
        loss2 = self.soft_margin_loss(x, target2)
        
        # Return both losses for demonstration purposes
        return loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

