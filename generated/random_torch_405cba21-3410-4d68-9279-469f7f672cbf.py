
# This is a random torch model generated by the following modules: ['ModuleList', 'ParameterList', 'Softshrink', 'Container', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        # Using ModuleList to store multiple layers
        self.module_list = nn.ModuleList([
            nn.Softshrink(lambd=0.5),
            nn.CELU(alpha=1.0),
            nn.Softshrink(lambd=0.5),
            nn.CELU(alpha=1.0),
            nn.Softshrink(lambd=0.5)
        ])
        
        # Using ParameterList to store parameters
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])
        
        # Using Container to group layers
        self.container = nn.Sequential(
            nn.Softshrink(lambd=0.5),
            nn.CELU(alpha=1.0)
        )

    def forward(self, x):
        # Apply ModuleList layers
        for layer in self.module_list:
            x = layer(x)
        
        # Apply ParameterList parameters
        for param in self.parameter_list:
            x = x + param.view(1, -1)
        
        # Apply Container layers
        x = self.container(x)
        
        # Reshape to ensure output is a single vector
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

