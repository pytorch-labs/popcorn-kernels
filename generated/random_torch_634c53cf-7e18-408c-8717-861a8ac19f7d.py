
# This is a random torch model generated by the following modules: ['CircularPad2d', 'Bilinear', 'Hardshrink', 'AdaptiveMaxPool1d', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(2)
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.hardshrink = nn.Hardshrink()
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.replication_pad = nn.ReplicationPad3d(1)

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten the input
        x = x.view(x.size(0), 10, -1)  # Reshape to (batch_size, 10, ...)
        x = x.view(x.size(0), 10, -1)  # Reshape to (batch_size, 10, ...)
        
        # Apply Bilinear layer
        x = self.bilinear(x[:, :10], x[:, 10:20])
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, length)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(1)  # Add a dummy dimension for 3D padding
        x = x.unsqueeze(1)  # Add another dummy dimension
        
        # Apply ReplicationPad3d
        x = self.replication_pad(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

