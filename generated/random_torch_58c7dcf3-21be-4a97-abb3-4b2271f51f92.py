
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'PoissonNLLLoss', 'BatchNorm3d', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.batch_norm3d_1 = nn.BatchNorm3d(64)
        self.batch_norm3d_2 = nn.BatchNorm3d(32)
        self.selu = nn.SELU()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to 5D tensor for BatchNorm3d
        x = x.view(-1, 64, 1, 1, 1)
        x = self.batch_norm3d_1(x)
        
        # Reshape to 3D tensor for SELU
        x = x.view(-1, 32, 2)
        x = self.selu(x)
        
        # Reshape back to 5D tensor for BatchNorm3d
        x = x.view(-1, 32, 1, 1, 1)
        x = self.batch_norm3d_2(x)
        
        # Flatten to 1D tensor for PoissonNLLLoss
        x = x.view(-1)
        
        # Dummy target for PoissonNLLLoss
        target = torch.ones_like(x)
        
        # Apply PoissonNLLLoss
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # 100 indices for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
