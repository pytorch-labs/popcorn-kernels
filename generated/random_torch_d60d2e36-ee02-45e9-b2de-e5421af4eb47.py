
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'Module', 'AvgPool1d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.silu = nn.SiLU()
        self.fc1 = nn.Linear(16 * 16, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Flatten the output for AvgPool1d
        x = x.view(x.size(0), -1)
        
        # Apply AvgPool1d
        x = x.unsqueeze(1)  # Add a dimension for AvgPool1d
        x = self.avg_pool(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Fully connected layers
        x = self.fc1(x)
        x = self.silu(x)
        x = self.fc2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
