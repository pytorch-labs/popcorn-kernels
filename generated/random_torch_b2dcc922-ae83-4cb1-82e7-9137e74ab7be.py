
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'MultiLabelMarginLoss', 'ModuleList', 'HingeEmbeddingLoss', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.module_list = nn.ModuleList([
            nn.Linear(128, 64),
            nn.Linear(64, 32),
            nn.Linear(32, 16)
        ])
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply average pooling
        x = self.avg_pool(x)
        
        # Flatten the tensor for linear layers
        x = x.view(x.size(0), -1)
        
        # Pass through the ModuleList layers
        for layer in self.module_list:
            x = F.relu(layer(x))
        
        # Dummy targets for loss functions
        target_multi_margin = torch.randint(0, 16, (x.size(0),)).long().to(x.device)
        target_multi_label_margin = torch.randint(0, 2, (x.size(0), 16)).long().to(x.device)
        target_hinge_embedding = torch.randint(0, 2, (x.size(0),)).float().to(x.device)
        target_hinge_embedding[target_hinge_embedding == 0] = -1
        
        # Compute losses
        loss1 = self.multi_margin_loss(x, target_multi_margin)
        loss2 = self.multi_label_margin_loss(x, target_multi_label_margin)
        loss3 = self.hinge_embedding_loss(x, target_hinge_embedding)
        
        # Return the sum of losses (for demonstration purposes)
        return loss1 + loss2 + loss3


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
