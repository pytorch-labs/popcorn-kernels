
# This is a random torch model generated by the following modules: ['CELU', 'ConstantPad3d', 'MaxPool2d', 'SELU', 'ReplicationPad3d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.constant_pad3d = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.selu1 = nn.SELU()
        self.selu2 = nn.SELU()
        self.replication_pad3d = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.softshrink1 = nn.Softshrink()
        self.softshrink2 = nn.Softshrink()

    def forward(self, x):
        # Apply CELU activation
        x = self.celu1(x)
        
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Reshape for MaxPool2d (assuming input is 3D, we add a dummy channel dimension)
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.max_pool2d(x)
        
        # Apply SELU activation
        x = self.selu1(x)
        
        # Apply ReplicationPad3d
        x = self.replication_pad3d(x)
        
        # Apply Softshrink
        x = self.softshrink1(x)
        
        # Apply CELU activation again
        x = self.celu2(x)
        
        # Apply SELU activation again
        x = self.selu2(x)
        
        # Apply Softshrink again
        x = self.softshrink2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Assuming a 3D input with 3 channels
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
