
# This is a random torch model generated by the following modules: ['PixelShuffle', 'CircularPad3d', 'LazyConvTranspose1d', 'AdaptiveAvgPool1d', 'ReflectionPad1d', 'ZeroPad3d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=16)
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.celu = nn.CELU()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.pixel_shuffle(x)  # PixelShuffle requires input to be 4D
        x = x.unsqueeze(1)  # Add a dimension to make it 5D for CircularPad3d
        x = self.circular_pad3d(x)
        x = x.squeeze(1)  # Remove the added dimension
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 3D for LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        x = self.adaptive_avg_pool1d(x)
        x = self.reflection_pad1d(x)
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions to make it 5D for ZeroPad3d
        x = self.zero_pad3d(x)
        x = x.squeeze(1).squeeze(1)  # Remove the added dimensions
        x = self.celu(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input shape for PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

