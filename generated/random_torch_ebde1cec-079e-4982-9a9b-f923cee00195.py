
# This is a random torch model generated by the following modules: ['MaxUnpool2d', 'ReLU', 'Softplus', 'BatchNorm3d', 'PoissonNLLLoss', 'MaxUnpool1d', 'LazyBatchNorm2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        self.softplus = nn.Softplus()
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(10, 5, [2, 3])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Apply MaxUnpool2d
        x = self.max_unpool2d(x, torch.zeros_like(x))  # Dummy indices for unpooling
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for BatchNorm3d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D
        x = self.batch_norm3d(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm2d(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.max_unpool1d(x, torch.zeros_like(x))  # Dummy indices for unpooling
        
        # Reshape back to 4D
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten for AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

