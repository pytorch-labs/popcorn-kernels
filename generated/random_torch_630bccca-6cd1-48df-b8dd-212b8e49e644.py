
# This is a random torch model generated by the following modules: ['SELU', 'Hardtanh', 'LazyConv3d', 'Dropout1d', 'LazyConvTranspose1d', 'AdaptiveAvgPool3d', 'TransformerEncoderLayer', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu = nn.SELU()
        self.hardtanh = nn.Hardtanh()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.conv_transpose2d = nn.ConvTranspose2d(in_channels=32, out_channels=16, kernel_size=3)

    def forward(self, x):
        # Apply SELU activation
        x = self.selu(x)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Reshape for LazyConv3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.lazy_conv3d(x)
        
        # Apply Dropout1d
        x = x.squeeze(2)  # Remove the singleton dimension for Dropout1d
        x = self.dropout1d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.unsqueeze(2)  # Add back the singleton dimension for LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(-1, 16, x.shape[2], x.shape[3], x.shape[4])
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for TransformerEncoderLayer
        x = x.view(-1, 8 * 8 * 8, 16)  # Flatten spatial dimensions
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, feature_size)
        x = self.transformer_encoder_layer(x)
        x = x.permute(1, 0, 2)  # Revert to (batch_size, sequence_length, feature_size)
        
        # Reshape for ConvTranspose2d
        x = x.view(-1, 32, 8, 8)  # Reshape to 4D tensor
        x = self.conv_transpose2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

