
# This is a random torch model generated by the following modules: ['RNNBase', 'Dropout3d', 'Sigmoid', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNNBase(input_size=128, hidden_size=256, num_layers=2, nonlinearity='tanh')
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.sigmoid = nn.Sigmoid()
        self.instance_norm1d = nn.LazyInstanceNorm1d()
        self.rnn2 = nn.RNNBase(input_size=256, hidden_size=128, num_layers=1, nonlinearity='relu')
        self.rnn3 = nn.RNNBase(input_size=128, hidden_size=64, num_layers=1, nonlinearity='tanh')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.rnn1(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        x = x.unsqueeze(1)  # Add a dimension for Dropout3d: (batch_size, 1, sequence_length, hidden_size)
        x = self.dropout3d(x)
        x = x.squeeze(1)  # Remove the added dimension: (batch_size, sequence_length, hidden_size)
        x = self.instance_norm1d(x)  # Normalize along the sequence_length dimension
        x, _ = self.rnn2(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        x = self.sigmoid(x)  # Apply sigmoid activation
        x, _ = self.rnn3(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

