
# This is a random torch model generated by the following modules: ['Transformer', 'BCEWithLogitsLoss', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer1 = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.transformer2 = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.pool = nn.AdaptiveMaxPool1d(output_size=1)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # Reshape x to fit the transformer input requirements
        x = x.permute(1, 0, 2)  # Transformer expects (seq_len, batch_size, d_model)
        
        # Pass through the first transformer
        x = self.transformer1(x, x)
        
        # Pass through the second transformer
        x = self.transformer2(x, x)
        
        # Reshape back to (batch_size, seq_len, d_model)
        x = x.permute(1, 0, 2)
        
        # Apply adaptive max pooling along the sequence dimension
        x = x.permute(0, 2, 1)  # (batch_size, d_model, seq_len)
        x = self.pool(x)  # (batch_size, d_model, 1)
        x = x.squeeze(2)  # (batch_size, d_model)
        
        # Compute the loss (assuming a binary classification task)
        target = torch.randint(0, 2, (batch_size, d_model)).float().to(x.device)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 20, 64).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

