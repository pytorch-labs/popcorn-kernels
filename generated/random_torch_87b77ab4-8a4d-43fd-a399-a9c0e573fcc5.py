
# This is a random torch model generated by the following modules: ['Dropout3d', 'LazyConvTranspose2d', 'ELU', 'LazyBatchNorm3d', 'Sequential', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.elu = nn.ELU(alpha=1.0)
        self.batch_norm3d = nn.LazyBatchNorm3d()
        self.sequential = nn.Sequential(
            nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1),
            nn.ELU(alpha=1.0),
            nn.LazyBatchNorm3d(),
            nn.Dropout3d(p=0.5)
        )
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.dropout3d(x)
        
        # Reshape to 2D for ConvTranspose2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        
        x = self.conv_transpose2d(x)
        x = self.elu(x)
        
        # Reshape back to 3D for BatchNorm3d
        x = x.view(batch_size, depth, x.shape[1], x.shape[2], x.shape[3])
        x = self.batch_norm3d(x)
        
        # Reshape to 2D for Sequential
        x = x.view(batch_size * depth, x.shape[2], x.shape[3], x.shape[4])
        x = self.sequential(x)
        
        # Reshape back to 3D for final output
        x = x.view(batch_size, depth, x.shape[1], x.shape[2], x.shape[3])
        
        # Assuming the target is of the same shape as the output
        target = torch.randint(0, 2, x.shape).float()
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

