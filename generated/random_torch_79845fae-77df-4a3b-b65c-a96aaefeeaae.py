
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'MaxUnpool2d', 'AvgPool3d', 'LazyInstanceNorm1d', 'TransformerDecoder', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.sequential = nn.Sequential(
            nn.Linear(64, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
            nn.ReLU(),
        )

    def forward(self, x):
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for MaxUnpool2d (assuming 4D input for MaxUnpool2d)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply MaxUnpool2d (dummy indices for unpooling)
        indices = torch.arange(0, x.numel(), dtype=torch.long, device=x.device).view(x.size())
        x = self.max_unpool2d(x, indices)
        
        # Reshape back to 5D for AvgPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyInstanceNorm1d
        x = self.lazy_instance_norm1d(x)
        
        # Reshape for TransformerDecoder
        x = x.view(x.size(0), -1, 64)  # Assuming d_model=64
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # Reshape for Sequential
        x = x.view(x.size(0), -1)
        
        # Apply Sequential
        x = self.sequential(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

