
# This is a random torch model generated by the following modules: ['Hardswish', 'GRUCell', 'SiLU', 'FractionalMaxPool3d', 'CTCLoss', 'NLLLoss2d', 'TripletMarginLoss', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardswish = nn.Hardswish()
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=128)
        self.silu = nn.SiLU()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.ctc_loss = nn.CTCLoss()
        self.nll_loss2d = nn.NLLLoss2d()
        self.triplet_margin_loss = nn.TripletMarginLoss()
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)

    def forward(self, x):
        # Apply ConstantPad3d to the input
        x = self.constant_pad3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for GRUCell
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        
        # Apply GRUCell
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Reshape back to 3D for further processing
        x = x.view(batch_size, 128, 1, 1, 1)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Compute CTC Loss (dummy target for demonstration)
        input_lengths = torch.full((batch_size,), 1, dtype=torch.long)
        target_lengths = torch.full((batch_size,), 1, dtype=torch.long)
        targets = torch.randint(0, 128, (batch_size, 1), dtype=torch.long)
        ctc_loss = self.ctc_loss(x.log_softmax(2), targets, input_lengths, target_lengths)
        
        # Compute NLLLoss2d (dummy target for demonstration)
        nll_loss = self.nll_loss2d(x.log_softmax(1), torch.zeros(batch_size, 1, 1, 1, dtype=torch.long).to(x.device))
        
        # Compute TripletMarginLoss (dummy anchors, positives, negatives for demonstration)
        anchor = x
        positive = torch.randn_like(anchor)
        negative = torch.randn_like(anchor)
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return a combination of losses for demonstration purposes
        return ctc_loss + nll_loss + triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
