
# This is a random torch model generated by the following modules: ['ReflectionPad3d', 'ReflectionPad1d', 'NLLLoss', 'Unflatten', 'BatchNorm1d', 'Upsample', 'Conv2d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.conv2d = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.silu = nn.SiLU()
        self.unflatten = nn.Unflatten(1, (16, 8, 8))
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Reshape for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.reflection_pad1d(x)
        
        # Reshape back for Conv2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply Conv2d
        x = self.conv2d(x)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = x.permute(0, 2, 1)
        x = x.contiguous().view(-1, x.size(2))
        x = self.batch_norm1d(x)
        
        # Reshape back for Unflatten
        x = x.view(x.size(0) // 64, 64, x.size(1))
        x = x.permute(0, 2, 1)
        x = x.contiguous().view(x.size(0), x.size(1), 8, 8)
        x = self.unflatten(x)
        
        # Reshape for NLLLoss (assuming target is provided externally)
        x = x.view(x.size(0), -1)
        x = F.log_softmax(x, dim=1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
