
# This is a random torch model generated by the following modules: ['CELU', 'LogSoftmax', 'AvgPool3d', 'InstanceNorm3d', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.instance_norm3d = nn.InstanceNorm3d(num_features=10)
        self.lazy_linear1 = nn.LazyLinear(out_features=50)
        self.lazy_linear2 = nn.LazyLinear(out_features=10)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Apply CELU activation
        x = self.celu1(x)
        
        # Reshape to 5D tensor for 3D operations
        x = x.view(x.size(0), 10, -1, x.size(-2), x.size(-1))
        
        # Apply InstanceNorm3d
        x = self.instance_norm3d(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Flatten the tensor for linear layers
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear layers with CELU activation
        x = self.celu2(self.lazy_linear1(x))
        x = self.lazy_linear2(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

