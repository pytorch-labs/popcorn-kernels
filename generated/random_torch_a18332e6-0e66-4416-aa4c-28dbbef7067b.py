
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'LazyLinear', 'CrossEntropyLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.LazyLinear(128)
        self.linear2 = nn.LazyLinear(64)
        self.linear3 = nn.LazyLinear(32)
        self.linear4 = nn.LazyLinear(10)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Flatten the input to fit the linear layers
        x = x.view(x.size(0), -1)
        
        # Pass through linear layers
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        x = F.relu(self.linear3(x))
        x = self.linear4(x)
        
        # Dummy target for loss calculation
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Calculate losses
        multi_margin_loss = self.multi_margin_loss(x, target)
        cross_entropy_loss = self.cross_entropy_loss(x, target)
        
        # Return the average of the two losses
        return (multi_margin_loss + cross_entropy_loss) / 2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
