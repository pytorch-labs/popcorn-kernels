
# This is a random torch model generated by the following modules: ['AvgPool3d', 'Linear', 'ReflectionPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.reflectionpad2d = nn.ReflectionPad2d(padding=1)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.linear3 = nn.Linear(32, 10)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avgpool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for ReflectionPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.reflectionpad2d(x)
        
        # Reshape back to 5D for another AvgPool3d
        x = x.view(x.size(0), x.size(1), -1, x.size(2), x.size(3))
        x = self.avgpool3d(x)
        
        # Flatten for Linear layers
        x = x.view(x.size(0), -1)
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        x = self.linear3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
