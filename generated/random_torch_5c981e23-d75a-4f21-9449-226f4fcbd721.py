
# This is a random torch model generated by the following modules: ['CosineSimilarity', 'CrossMapLRN2d', 'ReLU', 'AdaptiveAvgPool2d', 'PixelUnshuffle', 'Embedding', 'Linear', 'ParameterList', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.relu = nn.ReLU()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((7, 7))
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.embedding = nn.Embedding(num_embeddings=100, embedding_dim=16)
        self.linear1 = nn.Linear(784, 256)
        self.linear2 = nn.Linear(256, 10)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(16)) for _ in range(5)])
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.conv1(x)
        x = self.cross_map_lrn(x)
        x = self.relu(x)
        x = self.adaptive_avg_pool(x)
        x = self.pixel_unshuffle(x)
        
        # Flatten the tensor for embedding and linear layers
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Embedding layer requires integer input, so we create a dummy input
        dummy_indices = torch.arange(batch_size).to(x.device)
        embedded = self.embedding(dummy_indices)
        
        # Combine embedded features with the flattened tensor
        x = torch.cat([x, embedded], dim=1)
        
        x = self.linear1(x)
        x = self.relu(x)
        x = self.linear2(x)
        
        # Reshape back to a 4D tensor for Conv2d
        x = x.view(batch_size, 16, 7, 7)
        
        # Apply Conv2d and CosineSimilarity
        x = self.conv2(x)
        x = self.relu(x)
        
        # Use the first parameter from ParameterList for CosineSimilarity
        param = self.parameter_list[0].unsqueeze(0).unsqueeze(-1).unsqueeze(-1)
        x = self.cosine_similarity(x, param)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
