
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'Softmax', 'LazyConvTranspose3d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.softmax = nn.Softmax(dim=1)
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose3d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape to 2D for UpsamplingNearest2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height * 2, width * 2)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Dummy target for loss calculation (assuming binary classification)
        target = torch.randint(0, 2, (batch_size, channels, depth, height * 2, width * 2)).float()
        
        # Calculate loss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

