
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'ConstantPad1d', 'AdaptiveMaxPool2d', 'Dropout3d', 'BatchNorm1d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d_1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.constant_pad1d_1 = nn.ConstantPad1d(2, 0.5)
        self.adaptive_max_pool2d_1 = nn.AdaptiveMaxPool2d((32, 32))
        self.dropout3d_1 = nn.Dropout3d(0.2)
        self.batch_norm1d_1 = nn.BatchNorm1d(100)
        self.lazy_conv_transpose1d_1 = nn.LazyConvTranspose1d(out_channels=20, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d_2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.constant_pad1d_2 = nn.ConstantPad1d(2, 0.5)
        self.adaptive_max_pool2d_2 = nn.AdaptiveMaxPool2d((16, 16))
        self.dropout3d_2 = nn.Dropout3d(0.2)
        self.batch_norm1d_2 = nn.BatchNorm1d(200)
        self.lazy_conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=30, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Assuming input is 5D (batch_size, channels, depth, height, width)
        x = self.conv_transpose3d_1(x)
        x = self.dropout3d_1(x)
        
        # Reshape to 3D (batch_size, channels, depth * height * width)
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply ConstantPad1d
        x = self.constant_pad1d_1(x)
        
        # Reshape back to 4D (batch_size, channels, height, width)
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool2d_1(x)
        
        # Reshape to 2D (batch_size, channels * height * width)
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d_1(x)
        
        # Reshape to 3D (batch_size, channels, length)
        x = x.view(x.size(0), -1, 100)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d_1(x)
        
        # Reshape to 5D (batch_size, channels, depth, height, width)
        x = x.view(x.size(0), x.size(1), 10, 10, 10)
        
        # Apply ConvTranspose3d again
        x = self.conv_transpose3d_2(x)
        x = self.dropout3d_2(x)
        
        # Reshape to 3D (batch_size, channels, depth * height * width)
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply ConstantPad1d again
        x = self.constant_pad1d_2(x)
        
        # Reshape back to 4D (batch_size, channels, height, width)
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        
        # Apply AdaptiveMaxPool2d again
        x = self.adaptive_max_pool2d_2(x)
        
        # Reshape to 2D (batch_size, channels * height * width)
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d again
        x = self.batch_norm1d_2(x)
        
        # Reshape to 3D (batch_size, channels, length)
        x = x.view(x.size(0), -1, 200)
        
        # Apply LazyConvTranspose1d again
        x = self.lazy_conv_transpose1d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
