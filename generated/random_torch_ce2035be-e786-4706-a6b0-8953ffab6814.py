
# This is a random torch model generated by the following modules: ['Hardtanh', 'HuberLoss', 'LazyConv1d', 'MaxUnpool1d', 'AdaptiveAvgPool2d', 'PairwiseDistance', 'Bilinear', 'FractionalMaxPool2d', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh()
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.bilinear = nn.Bilinear(32, 32, 64)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))
        self.unflatten = nn.Unflatten(1, (32, 5, 5))
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.huber_loss = nn.HuberLoss()

    def forward(self, x):
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Reshape for LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Apply MaxUnpool1d (assuming we have indices from a previous maxpool operation)
        # For simplicity, we'll create dummy indices here
        _, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(x.size(0), 32, 5, 5)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        # Reshape for Bilinear
        x1 = x.view(x.size(0), 32, -1).mean(dim=2)
        x2 = x.view(x.size(0), 32, -1).mean(dim=2)
        x = self.bilinear(x1, x2)
        
        # Apply PairwiseDistance
        x = self.pairwise_distance(x, torch.zeros_like(x))
        
        # Apply HuberLoss (assuming we have a target tensor)
        target = torch.zeros_like(x)
        x = self.huber_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

