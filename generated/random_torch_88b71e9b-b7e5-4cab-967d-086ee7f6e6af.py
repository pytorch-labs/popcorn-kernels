
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'TripletMarginWithDistanceLoss', 'NLLLoss2d', 'HuberLoss', 'ParameterDict', 'Mish', 'EmbeddingBag', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.mish = nn.Mish()
        self.elu = nn.ELU()
        self.param_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(64, 128)),
            'param2': nn.Parameter(torch.randn(128, 256))
        })
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))
        self.nll_loss = nn.NLLLoss2d()
        self.huber_loss = nn.HuberLoss()

    def forward(self, x):
        # Assuming x is a 5D tensor for BatchNorm3d
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Reshape for EmbeddingBag
        x = x.view(-1).long()  # Flatten and convert to long for embedding
        x = self.embedding_bag(x)
        
        # Apply Mish and ELU
        x = self.mish(x)
        x = self.elu(x)
        
        # Use ParameterDict
        x = torch.matmul(x, self.param_dict['param1'])
        x = torch.matmul(x, self.param_dict['param2'])
        
        # Compute losses (just for demonstration, not typical in forward pass)
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        negative = torch.randn_like(x)
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        nll_loss_input = torch.randn(1, 10, 64, 64)
        nll_loss_target = torch.empty(1, 64, 64, dtype=torch.long).random_(10)
        nll_loss = self.nll_loss(nll_loss_input, nll_loss_target)
        
        huber_loss_input = torch.randn_like(x)
        huber_loss_target = torch.randn_like(x)
        huber_loss = self.huber_loss(huber_loss_input, huber_loss_target)
        
        # Return the final output and losses (not typical, but for demonstration)
        return x, triplet_loss, nll_loss, huber_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()  # 5D tensor for BatchNorm3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
