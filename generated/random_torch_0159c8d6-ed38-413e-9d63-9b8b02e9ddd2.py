
# This is a random torch model generated by the following modules: ['ELU', 'SiLU', 'MaxUnpool3d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU()
        self.silu1 = nn.SiLU()
        self.max_unpool3d1 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.batch_norm2d1 = nn.BatchNorm2d(10)
        self.elu2 = nn.ELU()
        self.silu2 = nn.SiLU()
        self.max_unpool3d2 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.batch_norm2d2 = nn.BatchNorm2d(20)
        self.elu3 = nn.ELU()
        self.silu3 = nn.SiLU()
        self.max_unpool3d3 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.batch_norm2d3 = nn.BatchNorm2d(30)
        self.elu4 = nn.ELU()
        self.silu4 = nn.SiLU()
        self.max_unpool3d4 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.batch_norm2d4 = nn.BatchNorm2d(40)
        self.elu5 = nn.ELU()
        self.silu5 = nn.SiLU()
        self.max_unpool3d5 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.batch_norm2d5 = nn.BatchNorm2d(50)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Reshape to 5D for MaxUnpool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.elu1(x)
        x = self.silu1(x)
        x, indices1 = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d1(x, indices1)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.batch_norm2d1(x)
        
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.elu2(x)
        x = self.silu2(x)
        x, indices2 = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d2(x, indices2)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.batch_norm2d2(x)
        
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.elu3(x)
        x = self.silu3(x)
        x, indices3 = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d3(x, indices3)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.batch_norm2d3(x)
        
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.elu4(x)
        x = self.silu4(x)
        x, indices4 = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d4(x, indices4)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.batch_norm2d4(x)
        
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.elu5(x)
        x = self.silu5(x)
        x, indices5 = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d5(x, indices5)
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.batch_norm2d5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
