
# This is a random torch model generated by the following modules: ['Softplus', 'AdaptiveMaxPool1d', 'CrossEntropyLoss', 'LazyConv1d', 'Sequential', 'Hardswish', 'LazyBatchNorm3d', 'MarginRankingLoss', 'Softmin', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm3d()
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.BatchNorm2d(num_features=64)
        self.pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.sequential = nn.Sequential(
            nn.Hardswish(),
            nn.Softplus(),
            nn.Softmin(dim=1)
        )
        self.loss1 = nn.CrossEntropyLoss()
        self.loss2 = nn.MarginRankingLoss()

    def forward(self, x):
        # Reshape input to fit Conv1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        
        # Apply Conv1d and BatchNorm
        x = self.conv1(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to fit LazyBatchNorm3d
        x = self.bn1(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back to fit Conv1d
        
        # Apply second Conv1d and BatchNorm2d
        x = self.conv2(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to fit BatchNorm2d
        x = self.bn2(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back to fit AdaptiveMaxPool1d
        
        # Apply AdaptiveMaxPool1d
        x = self.pool(x)
        
        # Apply Sequential block
        x = self.sequential(x)
        
        # Dummy loss computation (assuming we have targets)
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        loss1 = self.loss1(x, target)
        
        # Dummy MarginRankingLoss computation
        input1 = torch.randn_like(x)
        input2 = torch.randn_like(x)
        target = torch.ones_like(x[:, 0])
        loss2 = self.loss2(input1, input2, target)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

