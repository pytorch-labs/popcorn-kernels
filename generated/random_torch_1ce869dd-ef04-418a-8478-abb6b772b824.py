
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'AdaptiveMaxPool3d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))

    def forward(self, x):
        # Apply CircularPad3d to the input
        x = self.circular_pad3d(x)
        
        # Reshape the tensor to fit AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last three dimensions
        x = self.adaptive_max_pool1d(x)
        
        # Reshape the tensor back to fit AdaptiveMaxPool3d
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Reshape to 3D
        x = self.adaptive_max_pool3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
