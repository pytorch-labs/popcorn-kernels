
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'ModuleDict', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(3, 16, kernel_size=3, padding=1),
            'conv2': nn.Conv2d(16, 32, kernel_size=3, padding=1),
        })
        self.pairwise_distance = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply ModuleDict layers
        x = self.module_dict['conv1'](x)
        x = F.relu(x)
        x = self.module_dict['conv2'](x)
        x = F.relu(x)
        
        # Reshape for PairwiseDistance
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = x.permute(0, 2, 1)  # Swap dimensions for pairwise distance calculation
        
        # Calculate pairwise distance
        x = self.pairwise_distance(x[:, 0], x[:, 1])
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
