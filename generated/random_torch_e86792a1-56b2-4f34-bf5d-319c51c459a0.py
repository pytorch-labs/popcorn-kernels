
# This is a random torch model generated by the following modules: ['Sequential', 'CosineEmbeddingLoss', 'Conv2d', 'Hardsigmoid', 'MaxUnpool2d', 'LazyInstanceNorm2d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.hardsigmoid = nn.Hardsigmoid()
        self.softshrink = nn.Softshrink()
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.sequential = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.LazyInstanceNorm2d(),
            nn.Hardsigmoid()
        )
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.conv1(x)
        x = self.lazy_instance_norm(x)
        x = self.hardsigmoid(x)
        
        # Save indices for MaxUnpool2d
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        
        x = self.conv2(x)
        x = self.softshrink(x)
        
        # Unpooling
        x = self.max_unpool(x, indices)
        
        x = self.sequential(x)
        
        # Dummy target for CosineEmbeddingLoss
        target = torch.ones(x.size(0), dtype=torch.float32, device=x.device)
        loss = self.cosine_loss(x.view(x.size(0), -1), torch.zeros_like(x.view(x.size(0), -1)), target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
