
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'LocalResponseNorm', 'RNN', 'Tanh', 'GELU', 'CrossEntropyLoss', 'RNNCellBase', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.rnn1 = nn.RNN(input_size=125, hidden_size=64, num_layers=2, batch_first=True)
        self.rnn2 = nn.RNN(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.tanh = nn.Tanh()
        self.gelu = nn.GELU()
        self.rnn_cell_base = nn.RNNCellBase(input_size=32, hidden_size=16)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_avg_pool3d(x)  # Output shape: (batch_size, channels, 5, 5, 5)
        x = self.local_response_norm(x)  # Output shape: (batch_size, channels, 5, 5, 5)
        
        # Reshape for RNN input
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width)  # Output shape: (batch_size, channels*depth, height*width)
        x = x.permute(0, 2, 1)  # Output shape: (batch_size, height*width, channels*depth)
        
        x, _ = self.rnn1(x)  # Output shape: (batch_size, height*width, 64)
        x = self.tanh(x)  # Output shape: (batch_size, height*width, 64)
        
        x, _ = self.rnn2(x)  # Output shape: (batch_size, height*width, 32)
        x = self.gelu(x)  # Output shape: (batch_size, height*width, 32)
        
        # Apply RNNCellBase
        x = x.reshape(-1, 32)  # Output shape: (batch_size * height*width, 32)
        x = self.rnn_cell_base(x)  # Output shape: (batch_size * height*width, 16)
        x = x.view(batch_size, height * width, 16)  # Output shape: (batch_size, height*width, 16)
        
        # Final output
        x = x.mean(dim=1)  # Output shape: (batch_size, 16)
        
        # Assuming we have a target for loss calculation
        target = torch.randint(0, 16, (batch_size,)).long().to(x.device)
        loss1 = self.cross_entropy_loss(x, target)
        loss2 = self.nll_loss(F.log_softmax(x, dim=1), target)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

