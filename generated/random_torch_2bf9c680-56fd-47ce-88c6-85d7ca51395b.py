
# This is a random torch model generated by the following modules: ['TransformerEncoder', 'ReLU6', 'AvgPool2d', 'FractionalMaxPool2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.relu6 = nn.ReLU6()
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.batch_norm3d = nn.BatchNorm3d(num_features=16)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # Reshape input to fit TransformerEncoder (batch_size, sequence_length, d_model)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (sequence_length, batch_size, d_model)
        
        # Apply TransformerEncoder
        x = self.transformer_encoder(x)
        
        # Reshape back to (batch_size, channels, height, width)
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply AvgPool2d
        x = self.avg_pool2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Reshape to fit BatchNorm3d (batch_size, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.batch_norm3d(x)
        
        # Remove depth dimension
        x = x.squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

