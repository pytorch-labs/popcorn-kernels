
# This is a random torch model generated by the following modules: ['ModuleDict', 'L1Loss', 'Tanh', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'tanh1': nn.Tanh(),
            'tanh2': nn.Tanh(),
            'adaptive_avg_pool1d': nn.AdaptiveAvgPool1d(output_size=10),
        })
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply the first Tanh activation
        x = self.module_dict['tanh1'](x)
        
        # Reshape the input to fit the AdaptiveAvgPool1d layer
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, sequence_length)
        
        # Apply AdaptiveAvgPool1d
        x = self.module_dict['adaptive_avg_pool1d'](x)
        
        # Apply the second Tanh activation
        x = self.module_dict['tanh2'](x)
        
        # Compute L1 loss with a dummy target (for demonstration purposes)
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
