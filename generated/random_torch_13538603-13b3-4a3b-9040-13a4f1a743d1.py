
# This is a random torch model generated by the following modules: ['ELU', 'MultiLabelSoftMarginLoss', 'AdaptiveAvgPool2d', 'Conv3d', 'RMSNorm', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.rms_norm = RMSNorm(20 * 5 * 5)
        self.elu = nn.ELU()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(20 * 5 * 5, 100)) for _ in range(5)])
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channel, depth, height, width)
        x = self.conv3d_1(x)
        x = self.conv3d_2(x)
        
        # Reduce depth dimension by averaging
        x = torch.mean(x, dim=2)  # Shape: (batch, 20, height, width)
        
        x = self.adaptive_avg_pool2d(x)  # Shape: (batch, 20, 5, 5)
        x = x.view(x.size(0), -1)  # Flatten to (batch, 20 * 5 * 5)
        x = self.rms_norm(x)
        x = self.elu(x)
        
        # Apply parameter list transformations
        for param in self.parameter_list:
            x = F.linear(x, param)
        
        # Dummy target for loss calculation (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), 100)).float()
        loss = self.multi_label_soft_margin_loss(x, target)
        
        return loss

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
