
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'CTCLoss', 'Softshrink', 'CircularPad1d', 'RReLU', 'ConvTranspose2d', 'CircularPad3d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.rrelu = nn.RReLU()
        self.conv_transpose2d = nn.ConvTranspose2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=1)
        self.circular_pad3d = nn.CircularPad3d(padding=1)
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape back to 4D for ConvTranspose2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(2)
        
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Reshape back to 2D for CTC Loss
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply CTC Loss (assuming targets are provided externally)
        # For demonstration, we will return the output before CTC Loss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

