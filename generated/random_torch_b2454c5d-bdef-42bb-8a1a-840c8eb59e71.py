
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'MaxPool1d', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.convtranspose2d1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2)
        self.convtranspose2d2 = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input is 1D, reshape to 2D for ConvTranspose2d
        x = x.view(x.size(0), 1, -1, 1)  # Reshape to (batch_size, 1, sequence_length, 1)
        
        # Apply ConvTranspose2d layers
        x = F.relu(self.convtranspose2d1(x))
        x = F.relu(self.convtranspose2d2(x))
        
        # Reshape back to 1D for MaxPool1d
        x = x.view(x.size(0), -1)  # Reshape to (batch_size, sequence_length)
        x = x.unsqueeze(1)  # Add channel dimension for MaxPool1d
        
        # Apply MaxPool1d
        x = self.maxpool1d(x)
        
        # Reshape for GaussianNLLLoss (assuming target is the same shape as output)
        x = x.view(x.size(0), -1)  # Flatten for loss calculation
        
        # Dummy target for GaussianNLLLoss (same shape as x)
        target = torch.randn_like(x)
        var = torch.ones_like(x)  # Variance for GaussianNLLLoss
        
        # Apply GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Arbitrary 1D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

