
# This is a random torch model generated by the following modules: ['Dropout', 'GaussianNLLLoss', 'TripletMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout(p=0.5)
        self.dropout3 = nn.Dropout(p=0.5)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Apply dropout layers
        x = self.dropout1(x)
        x = self.dropout2(x)
        x = self.dropout3(x)
        
        # Flatten the input for GaussianNLLLoss and TripletMarginLoss
        x_flat = x.view(x.size(0), -1)
        
        # Generate random targets for GaussianNLLLoss
        target = torch.randn_like(x_flat)
        var = torch.ones_like(x_flat)
        
        # Compute GaussianNLLLoss
        gaussian_loss = self.gaussian_nll_loss(x_flat, target, var)
        
        # Generate random anchors, positives, and negatives for TripletMarginLoss
        anchor = torch.randn_like(x_flat)
        positive = torch.randn_like(x_flat)
        negative = torch.randn_like(x_flat)
        
        # Compute TripletMarginLoss
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return the sum of the losses
        return gaussian_loss + triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
