
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'AvgPool1d', 'Softsign', 'Dropout3d', 'ELU', 'Tanh', 'Embedding', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming vocab size of 1000
        self.lstm = nn.LSTM(128, 64, batch_first=True)
        self.zero_pad = nn.ZeroPad2d(2)
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.softsign = nn.Softsign()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.elu = nn.ELU()
        self.tanh = nn.Tanh()

    def forward(self, x):
        # Assuming x is a batch of sequences of token indices
        x = self.embedding(x)  # (batch_size, seq_len, embedding_dim)
        
        # Reshape for LSTM
        x, _ = self.lstm(x)  # (batch_size, seq_len, hidden_size)
        
        # Reshape for AvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, hidden_size, seq_len)
        x = self.avg_pool(x)  # (batch_size, hidden_size, seq_len // 2)
        
        # Reshape for ZeroPad2d
        x = x.unsqueeze(1)  # (batch_size, 1, hidden_size, seq_len // 2)
        x = self.zero_pad(x)  # (batch_size, 1, hidden_size + 4, seq_len // 2 + 4)
        
        # Reshape for Dropout3d
        x = self.dropout3d(x)
        
        # Reshape for ELU
        x = x.squeeze(1)  # (batch_size, hidden_size + 4, seq_len // 2 + 4)
        x = self.elu(x)
        
        # Reshape for Tanh
        x = self.tanh(x)
        
        # Reshape for Softsign
        x = self.softsign(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # (batch_size, seq_len)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

