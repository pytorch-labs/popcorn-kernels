
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'Linear', 'TripletMarginLoss', 'ModuleList', 'MaxPool3d', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 128)
        self.linear3 = nn.Linear(128, 64)
        self.linear4 = nn.Linear(64, 32)
        self.linear5 = nn.Linear(32, 16)
        
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        
        self.instance_norm = nn.InstanceNorm2d(10)
        
        self.module_list = nn.ModuleList([
            nn.Linear(16, 8),
            nn.Linear(8, 4),
            nn.Linear(4, 2)
        ])
        
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(2, 2, [1, 1])
        
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # Apply InstanceNorm2d
        x = x.permute(0, 2, 1, 3, 4)  # Swap channels and depth for InstanceNorm2d
        x = x.reshape(-1, x.size(2), x.size(3), x.size(4))  # Flatten batch and depth
        x = self.instance_norm(x)
        x = x.reshape(-1, x.size(1), x.size(2), x.size(3))  # Reshape back
        x = x.permute(0, 2, 1, 3, 4)  # Swap back channels and depth
        
        # Apply MaxPool3d
        x = self.maxpool3d(x)
        
        # Flatten the tensor for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        x = F.relu(self.linear3(x))
        x = F.relu(self.linear4(x))
        x = F.relu(self.linear5(x))
        
        # Apply ModuleList layers
        for layer in self.module_list:
            x = F.relu(layer(x))
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.zeros(x.size(0), dtype=torch.long).to(x.device))
        
        # Apply TripletMarginLoss (for demonstration, we use the same tensor as anchor, positive, and negative)
        loss = self.triplet_margin_loss(x, x, x)
        
        return output.output, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

