
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'InstanceNorm3d', 'MaxPool1d', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv3d(1, 16, kernel_size=3, stride=1, padding=1)
        self.instance_norm1 = nn.InstanceNorm3d(16)
        self.max_pool1 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv3d(16, 32, kernel_size=3, stride=1, padding=1)
        self.instance_norm2 = nn.InstanceNorm3d(32)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.conv3 = nn.Conv3d(32, 64, kernel_size=3, stride=1, padding=1)
        self.instance_norm3 = nn.InstanceNorm3d(64)
        self.max_pool2 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.conv4 = nn.Conv3d(64, 128, kernel_size=3, stride=1, padding=1)
        self.instance_norm4 = nn.InstanceNorm3d(128)
        self.feature_alpha_dropout2 = nn.FeatureAlphaDropout(p=0.5)
        self.conv5 = nn.Conv3d(128, 256, kernel_size=3, stride=1, padding=1)
        self.instance_norm5 = nn.InstanceNorm3d(256)

    def forward(self, x):
        # Initial 3D convolution and instance normalization
        x = self.conv1(x)
        x = self.instance_norm1(x)
        
        # Reshape for MaxPool1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        x = self.max_pool1(x)
        x = x.view(batch_size, channels, depth, height, -1)
        
        # Second 3D convolution and instance normalization
        x = self.conv2(x)
        x = self.instance_norm2(x)
        
        # Apply feature alpha dropout
        x = self.feature_alpha_dropout(x)
        
        # Third 3D convolution and instance normalization
        x = self.conv3(x)
        x = self.instance_norm3(x)
        
        # Reshape for MaxPool1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        x = self.max_pool2(x)
        x = x.view(batch_size, channels, depth, height, -1)
        
        # Fourth 3D convolution and instance normalization
        x = self.conv4(x)
        x = self.instance_norm4(x)
        
        # Apply feature alpha dropout
        x = self.feature_alpha_dropout2(x)
        
        # Fifth 3D convolution and instance normalization
        x = self.conv5(x)
        x = self.instance_norm5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
