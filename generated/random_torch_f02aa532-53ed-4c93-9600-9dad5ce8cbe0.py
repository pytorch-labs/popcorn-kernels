
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'ParameterList', 'BCEWithLogitsLoss', 'LazyConv3d', 'FractionalMaxPool3d', 'MaxPool2d', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.max_pool2d = nn.MaxPool2d(kernel_size=2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((4, 4))
        self.sequential = nn.Sequential(
            nn.LazyConv3d(out_channels=32, kernel_size=3),
            nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        )
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(16)),
            nn.Parameter(torch.randn(32))
        ])
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.lazy_conv3d(x)
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for 2D operations
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        x = self.max_pool2d(x)
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape back to 5D for sequential operations
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        x = self.sequential(x)
        
        # Flatten for parameter list application
        x = x.view(x.size(0), -1)
        
        # Apply parameters from ParameterList
        for param in self.parameter_list:
            x = x + param.unsqueeze(0).expand_as(x)
        
        # Assuming binary classification, output a single logit
        x = x.mean(dim=1, keepdim=True)
        
        # Loss is not typically part of the forward pass, but included as per the module list
        target = torch.randint(0, 2, (x.size(0), 1), dtype=torch.float32).to(x.device)
        loss = self.bce_with_logits_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
