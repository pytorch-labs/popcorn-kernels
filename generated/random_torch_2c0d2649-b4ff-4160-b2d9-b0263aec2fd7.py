
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'Dropout1d', 'FeatureAlphaDropout', 'Dropout', 'Container', 'BCELoss', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.dropout = nn.Dropout(p=0.5)
        self.container = nn.Sequential(
            nn.LazyConvTranspose1d(out_channels=128, kernel_size=3),
            nn.Dropout1d(p=0.5),
            nn.FeatureAlphaDropout(p=0.5)
        )
        self.bce_loss = nn.BCELoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Pass through the container
        x = self.container(x)
        
        # Reshape for loss computation
        x = x.view(x.size(0), -1)  # Flatten the output
        
        # Compute BCE Loss (dummy target for demonstration)
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(torch.sigmoid(x), target)
        
        # Compute MultiLabelSoftMarginLoss (dummy target for demonstration)
        target_labels = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        multi_label_loss = self.multi_label_soft_margin_loss(x, target_labels)
        
        # Return the losses for demonstration purposes
        return bce_loss, multi_label_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
