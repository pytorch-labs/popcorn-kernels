
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'CTCLoss', 'Softplus', 'Conv1d', 'Hardswish', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.instance_norm1 = nn.LazyInstanceNorm1d()
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.instance_norm2 = nn.LazyInstanceNorm1d()
        self.softplus = nn.Softplus()
        self.hardswish = nn.Hardswish()
        self.ctc_loss = nn.CTCLoss()
        self.multi_label_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv1(x)
        x = self.instance_norm1(x)
        x = self.hardswish(x)
        
        x = self.conv2(x)
        x = self.instance_norm2(x)
        x = self.softplus(x)
        
        # Reshape for CTC Loss (assuming sequence_length is the same as input)
        x = x.permute(2, 0, 1)  # (sequence_length, batch_size, num_classes)
        
        # Dummy target for CTC Loss (assuming target sequence length is 10)
        target = torch.randint(0, 20, (x.size(1), 10), dtype=torch.long)
        input_lengths = torch.full((x.size(1),), x.size(0), dtype=torch.long)
        target_lengths = torch.randint(1, 10, (x.size(1),), dtype=torch.long)
        
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Reshape for MultiLabelSoftMarginLoss (assuming binary classification)
        x = x.permute(1, 2, 0)  # (batch_size, num_classes, sequence_length)
        x = x.mean(dim=2)  # Average over sequence_length
        
        # Dummy target for MultiLabelSoftMarginLoss (assuming 20 classes)
        target = torch.randint(0, 2, (x.size(0), 20), dtype=torch.float)
        
        multi_label_loss = self.multi_label_loss(x, target)
        
        # Return both losses for demonstration purposes
        return ctc_loss, multi_label_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

