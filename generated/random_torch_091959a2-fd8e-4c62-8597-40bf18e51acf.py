
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'AvgPool1d', 'LazyLinear', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.linear1 = nn.LazyLinear(out_features=128)
        self.linear2 = nn.LazyLinear(out_features=64)
        self.bilinear = nn.Bilinear(64, 64, 32)

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = F.relu(x)
        x = self.conv_transpose2(x)
        x = F.relu(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.linear1(x)
        x = F.relu(x)
        x = self.linear2(x)
        x = F.relu(x)
        
        # Apply Bilinear layer
        x = self.bilinear(x, x)  # Using the same tensor for both inputs
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

