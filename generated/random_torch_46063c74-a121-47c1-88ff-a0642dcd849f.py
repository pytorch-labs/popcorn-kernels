
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'Unflatten', 'CELU', 'AlphaDropout', 'UpsamplingNearest2d', 'LayerNorm', 'PReLU', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(16, 4, 4))
        self.celu = nn.CELU()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.layer_norm = nn.LayerNorm([32, 32])
        self.prelu = nn.PReLU()
        self.constant_pad2d = nn.ConstantPad2d(padding=2, value=1.0)

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Apply LayerNorm
        x = x.permute(0, 2, 3, 1)  # Change shape to [batch, height, width, channels] for LayerNorm
        x = self.layer_norm(x)
        x = x.permute(0, 3, 1, 2)  # Change shape back to [batch, channels, height, width]
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply ConstantPad2d
        x = self.constant_pad2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

