
# This is a random torch model generated by the following modules: ['MaxPool2d', 'LogSoftmax', 'Linear', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.linear1 = nn.Linear(320, 128)
        self.linear2 = nn.Linear(128, 64)
        self.linear3 = nn.Linear(64, 10)

    def forward(self, x):
        # Assume input x has a shape of (batch_size, channels, height, width)
        x = self.maxpool(x)  # Apply MaxPool2d
        x = F.relu(x)        # Apply ReLU

        # Flatten the tensor to feed into linear layers
        x = x.view(x.size(0), -1)

        # First linear layer
        x = self.linear1(x)
        x = F.relu(x)        # Apply ReLU

        # Second linear layer
        x = self.linear2(x)
        x = F.relu(x)        # Apply ReLU

        # Third linear layer
        x = self.linear3(x)
        
        # Apply LogSoftmax
        return F.log_softmax(x, dim=1)


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

