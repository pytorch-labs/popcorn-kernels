
# This is a random torch model generated by the following modules: ['TransformerEncoderLayer', 'Threshold', 'PixelShuffle', 'RNNBase', 'FeatureAlphaDropout', 'GRUCell', 'LazyConv3d', 'AvgPool1d', 'AdaptiveLogSoftmaxWithLoss', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.rnn = nn.RNNBase(mode='LSTM', input_size=64, hidden_size=128, num_layers=2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=64)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.conv_transpose2d = nn.ConvTranspose2d(in_channels=16, out_channels=8, kernel_size=3)
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=64, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_conv3d(x)  # Shape: (batch_size, 16, depth-2, height-2, width-2)
        x = self.threshold(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width)  # Shape: (batch_size, 16*(depth-2), (height-2)*(width-2))
        x = self.transformer_encoder_layer(x)
        
        # Reshape for RNN
        x = x.view(batch_size, -1, 64)  # Shape: (batch_size, seq_len, 64)
        x, _ = self.rnn(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply GRUCell
        x = x.view(-1, 128)  # Shape: (batch_size * seq_len, 128)
        x = self.gru_cell(x)
        
        # Reshape for AvgPool1d
        x = x.view(batch_size, -1, 64)  # Shape: (batch_size, seq_len, 64)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 64, seq_len)
        x = self.avg_pool1d(x)
        
        # Reshape for ConvTranspose2d
        x = x.view(batch_size, 16, 8, 8)  # Shape: (batch_size, 16, 8, 8)
        x = self.conv_transpose2d(x)  # Shape: (batch_size, 8, 10, 10)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)  # Shape: (batch_size, 2, 20, 20)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)  # Shape: (batch_size, 2*20*20)
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
