
# This is a random torch model generated by the following modules: ['Bilinear', 'PixelUnshuffle', 'AvgPool2d', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(10, 20, 30)
        self.bilinear2 = nn.Bilinear(30, 40, 50)
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.replication_pad3d = nn.ReplicationPad3d(1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # First, apply PixelUnshuffle to increase the number of channels
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, channels * 4, height // 2, width // 2)
        
        # Apply AvgPool2d to reduce spatial dimensions
        x = self.avg_pool2d(x)  # Shape: (batch_size, channels * 4, height // 4, width // 4)
        
        # Reshape x to fit the input requirements of Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = x.unsqueeze(1)  # Add a dimension to match Bilinear input shape
        
        # Apply first Bilinear layer
        x = self.bilinear1(x, x)  # Shape: (batch_size, 1, 30)
        
        # Apply ReplicationPad3d (requires 5D input)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, 1, 30, 1, 1)
        x = self.replication_pad3d(x)  # Shape: (batch_size, 1, 32, 3, 3)
        
        # Flatten and apply second Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = x.unsqueeze(1)  # Add a dimension to match Bilinear input shape
        x = self.bilinear2(x, x)  # Shape: (batch_size, 1, 50)
        
        # Final output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

