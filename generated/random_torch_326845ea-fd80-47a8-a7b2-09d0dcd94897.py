
# This is a random torch model generated by the following modules: ['Mish', 'Softmin', 'GELU', 'ConvTranspose2d', 'Unfold', 'CosineEmbeddingLoss', 'Softmax', 'ConvTranspose1d', 'AdaptiveAvgPool3d', 'Identity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.mish = nn.Mish()
        self.softmin = nn.Softmin(dim=1)
        self.gelu = nn.GELU()
        self.conv_transpose_2d = nn.ConvTranspose2d(3, 6, kernel_size=3, stride=2)
        self.unfold = nn.Unfold(kernel_size=2, stride=2)
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()
        self.softmax = nn.Softmax(dim=1)
        self.conv_transpose_1d = nn.ConvTranspose1d(6, 12, kernel_size=3, stride=2)
        self.adaptive_avg_pool_3d = nn.AdaptiveAvgPool3d((4, 4, 4))
        self.identity = nn.Identity()

    def forward(self, x):
        # Apply Mish activation
        x = self.mish(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape for ConvTranspose2d
        x = x.view(-1, 3, 16, 16)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose_2d(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(-1, 6, 32)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose_1d(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(-1, 12, 8, 8, 8)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool_3d(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
