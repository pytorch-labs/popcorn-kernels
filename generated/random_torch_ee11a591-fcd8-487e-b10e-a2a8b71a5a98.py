
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'LeakyReLU', 'LazyInstanceNorm2d', 'SyncBatchNorm', 'LSTM', 'ConvTranspose1d', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(1, 0.5)
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.instance_norm = nn.LazyInstanceNorm2d()
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.conv_transpose1d = nn.ConvTranspose1d(128, 64, kernel_size=3, stride=2)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=5)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.lazy_conv1d_3 = nn.LazyConv1d(out_channels=8, kernel_size=3)
        self.lazy_conv1d_4 = nn.LazyConv1d(out_channels=4, kernel_size=3)
        self.lazy_conv1d_5 = nn.LazyConv1d(out_channels=1, kernel_size=3)

    def forward(self, x):
        # Apply ConstantPad2d
        x = self.pad(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply LazyInstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Reshape for LSTM
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels * height, width)
        x = x.permute(0, 2, 1)  # (batch_size, width, channels * height)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Reshape for ConvTranspose1d
        x = x.permute(0, 2, 1)  # (batch_size, hidden_size, width)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Apply LazyConv1d multiple times
        x = self.lazy_conv1d(x)
        x = self.lazy_conv1d_2(x)
        x = self.lazy_conv1d_3(x)
        x = self.lazy_conv1d_4(x)
        x = self.lazy_conv1d_5(x)
        
        # Final output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

