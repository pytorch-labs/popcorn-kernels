
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'ConvTranspose3d', 'CTCLoss', 'LazyBatchNorm3d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=20, kernel_size=5)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.conv_transpose3d(x)
        x = self.lazy_batch_norm3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for LazyConv2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.lazy_conv2d(x)
        
        # Reshape back to 5D for PoissonNLLLoss and CTCLoss
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        
        # Dummy target for PoissonNLLLoss
        target_poisson = torch.randint(0, 10, (x.size(0), x.size(1), x.size(2), x.size(3), x.size(4)), device=x.device).float()
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Dummy target for CTCLoss
        target_ctc = torch.randint(0, 10, (x.size(0), x.size(2)), device=x.device)
        input_lengths = torch.full((x.size(0),), x.size(2), dtype=torch.long, device=x.device)
        target_lengths = torch.randint(1, x.size(2), (x.size(0),), dtype=torch.long, device=x.device)
        ctc_loss = self.ctc_loss(x, target_ctc, input_lengths, target_lengths)
        
        # Return the sum of the losses
        return poisson_loss + ctc_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

