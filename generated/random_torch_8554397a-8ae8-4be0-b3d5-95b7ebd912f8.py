
# This is a random torch model generated by the following modules: ['Sigmoid', 'UpsamplingNearest2d', 'ConstantPad1d', 'CrossEntropyLoss', 'Dropout1d', 'LazyConv2d', 'L1Loss', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lazy_linear = nn.LazyLinear(out_features=10)
        self.sigmoid = nn.Sigmoid()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.constant_pad1d(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.lazy_linear(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Compute CrossEntropyLoss (assuming target is provided)
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss_ce = self.cross_entropy_loss(x, target)
        
        # Compute L1Loss (assuming target is provided)
        target_l1 = torch.randn_like(x)
        loss_l1 = self.l1_loss(x, target_l1)
        
        # Return both losses and the final output
        return x, loss_ce, loss_l1


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
