
# This is a random torch model generated by the following modules: ['BatchNorm2d', 'Softshrink', 'CrossMapLRN2d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm2d(3)  # Assuming input has 3 channels
        self.softshrink1 = nn.Softshrink(lambd=0.5)
        self.lrn1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.bn2 = nn.BatchNorm2d(3)
        self.softshrink2 = nn.Softshrink(lambd=0.5)
        self.lrn2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)

    def forward(self, x):
        x = self.bn1(x)
        x = self.softshrink1(x)
        x = self.lrn1(x)
        x = self.bn2(x)
        x = self.softshrink2(x)
        x = self.lrn2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming input has 3 channels and spatial size 64x64
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
