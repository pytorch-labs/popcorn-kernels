
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'BatchNorm2d', 'AdaptiveAvgPool2d', 'BCEWithLogitsLoss', 'Container', 'BatchNorm1d', 'EmbeddingBag', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)
        self.embedding_bag = nn.EmbeddingBag(1000, 128, mode='mean')
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.batch_norm2d = nn.BatchNorm2d(64)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((16, 16))
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.loss = nn.BCEWithLogitsLoss()
        self.container = nn.Sequential(
            nn.Linear(128, 256),
            nn.ReLU(),
            nn.Linear(256, 128),
            nn.ReLU()
        )

    def forward(self, x):
        # Assuming x is a 3D tensor (batch_size, sequence_length)
        x = self.embedding(x)
        x = self.embedding_bag(x)
        x = self.batch_norm1d(x)
        
        # Reshape for 2D operations
        x = x.view(-1, 64, 16, 16)
        x = self.batch_norm2d(x)
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape for 3D operations
        x = x.view(-1, 64, 8, 8, 8)
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten for container
        x = x.view(-1, 128)
        x = self.container(x)
        
        # Dummy target for BCEWithLogitsLoss
        target = torch.randint(0, 2, (x.size(0), 1)).float()
        loss = self.loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 64)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

