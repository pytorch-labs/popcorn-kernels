
# This is a random torch model generated by the following modules: ['Sigmoid', 'LazyInstanceNorm2d', 'AdaptiveMaxPool1d', 'LazyLinear', 'AvgPool2d', 'GroupNorm', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sigmoid = nn.Sigmoid()
        self.instance_norm = nn.LazyInstanceNorm2d()
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.linear1 = nn.LazyLinear(out_features=128)
        self.linear2 = nn.LazyLinear(out_features=64)
        self.avg_pool = nn.AvgPool2d(kernel_size=2)
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=64)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply LazyInstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Apply GroupNorm
        x = self.group_norm(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # GaussianNLLLoss requires a target, so we return x and assume target is provided externally
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
