
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'TransformerDecoder', 'AvgPool1d', 'BatchNorm2d', 'LazyInstanceNorm1d', 'PReLU', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(1, 0.5)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.batch_norm2d = nn.BatchNorm2d(64)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.prelu = nn.PReLU()
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()

    def forward(self, x):
        # Apply ConstantPad2d
        x = self.pad(x)
        
        # Reshape for TransformerDecoder
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # Reshape back for AvgPool1d
        x = x.permute(1, 2, 0)  # (batch_size, d_model, seq_len)
        
        # Apply AvgPool1d
        x = self.avg_pool(x)
        
        # Reshape for BatchNorm2d
        x = x.unsqueeze(-1)  # Add a dummy dimension
        x = x.view(batch_size, -1, height, width)  # Reshape to 4D
        
        # Apply BatchNorm2d
        x = self.batch_norm2d(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(batch_size, -1)  # Flatten to 2D
        
        # Apply LazyInstanceNorm1d
        x = self.lazy_instance_norm1d(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Reshape for LazyBatchNorm3d
        x = x.view(batch_size, -1, 1, 1, 1)  # Reshape to 5D
        
        # Apply LazyBatchNorm3d
        x = self.lazy_batch_norm3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
