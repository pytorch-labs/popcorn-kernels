
# This is a random torch model generated by the following modules: ['LSTMCell', 'SiLU', 'FractionalMaxPool2d', 'CrossEntropyLoss', 'Hardsigmoid', 'CELU', 'CosineEmbeddingLoss', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm_cell1 = nn.LSTMCell(input_size=128, hidden_size=64)
        self.lstm_cell2 = nn.LSTMCell(input_size=64, hidden_size=32)
        self.silu = nn.SiLU()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.hardsigmoid = nn.Hardsigmoid()
        self.celu = nn.CELU()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.size()
        
        # Reshape for LSTM
        x = x.view(batch_size, -1)  # Flatten the input for LSTM
        hx1 = torch.zeros(batch_size, 64).to(x.device)
        cx1 = torch.zeros(batch_size, 64).to(x.device)
        hx1, cx1 = self.lstm_cell1(x, (hx1, cx1))
        
        hx2 = torch.zeros(batch_size, 32).to(x.device)
        cx2 = torch.zeros(batch_size, 32).to(x.device)
        hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
        
        # Reshape back to 2D for pooling
        x = hx2.view(batch_size, 1, 8, 4)  # Arbitrary reshape to 2D
        x = self.fractional_max_pool(x)
        
        # Apply activation functions
        x = self.silu(x)
        x = self.hardsigmoid(x)
        x = self.celu(x)
        x = self.hardtanh(x)
        
        # Flatten for output
        x = x.view(batch_size, -1)
        
        # Dummy target for loss functions (not used in actual forward pass)
        target = torch.randint(0, 10, (batch_size,)).to(x.device)
        dummy_target = torch.ones(batch_size).to(x.device)
        
        # Compute losses (not used in actual forward pass, just for demonstration)
        loss1 = self.cross_entropy_loss(x, target)
        loss2 = self.cosine_embedding_loss(x, x, dummy_target)
        
        return x  # Return the final output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
