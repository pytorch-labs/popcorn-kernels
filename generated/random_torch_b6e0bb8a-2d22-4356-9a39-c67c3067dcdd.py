
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'ELU', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=128, mode='mean')
        self.conv_transpose1 = nn.ConvTranspose3d(in_channels=128, out_channels=64, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose3d(in_channels=64, out_channels=32, kernel_size=3, stride=2, padding=1)
        self.elu = nn.ELU()

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to 5D tensor for ConvTranspose3d
        x = x.view(-1, 128, 1, 1, 1)
        
        # Apply ConvTranspose3d layers with ELU activation
        x = self.elu(self.conv_transpose1(x))
        x = self.elu(self.conv_transpose2(x))
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

