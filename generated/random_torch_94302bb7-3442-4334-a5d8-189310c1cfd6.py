
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'MaxUnpool2d', 'LogSigmoid', 'LazyConvTranspose3d', 'SoftMarginLoss', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.log_sigmoid = nn.LogSigmoid()
        self.sequential = nn.Sequential(
            nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=1, padding=1),
            nn.MaxUnpool2d(kernel_size=2, stride=2),
            nn.LogSigmoid()
        )
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width), we need to reshape it to 5D for ConvTranspose3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape back to 4D for MaxUnpool2d
        x = x.squeeze(2)
        
        # Create a dummy indices tensor for MaxUnpool2d
        _, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        x = self.log_sigmoid(x)
        
        # Pass through the Sequential module
        x = x.unsqueeze(2)  # Add a depth dimension again
        x = self.sequential(x)
        x = x.squeeze(2)
        
        # Compute GaussianNLLLoss (requires target and variance)
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_nll_loss(x, target, var)
        
        # Compute SoftMarginLoss (requires target)
        soft_margin_loss = self.soft_margin_loss(x, torch.ones_like(x))
        
        # Return both losses for demonstration purposes
        return gaussian_loss, soft_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

