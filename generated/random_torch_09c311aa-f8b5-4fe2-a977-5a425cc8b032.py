
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'InstanceNorm1d', 'CrossEntropyLoss', 'ReflectionPad2d', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(64)
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.container = nn.Sequential(
            nn.InstanceNorm1d(64),
            nn.ReflectionPad2d(2),
            nn.InstanceNorm1d(64)
        )
        self.loss1 = nn.MultiLabelSoftMarginLoss()
        self.loss2 = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        x = self.instance_norm(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))  # Reshape back to 2D
        x = self.reflection_pad(x)
        x = self.container(x)
        x = x.view(x.size(0), -1)  # Flatten for loss computation
        # Dummy targets for loss computation
        target1 = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        target2 = torch.randint(0, x.size(1), (x.size(0),))
        loss1 = self.loss1(x, target1)
        loss2 = self.loss2(x, target2)
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

