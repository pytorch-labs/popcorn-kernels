
# This is a random torch model generated by the following modules: ['RReLU', 'SyncBatchNorm', 'AvgPool3d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.bn1 = nn.SyncBatchNorm(32)
        self.avg_pool1 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.bn2 = nn.SyncBatchNorm(64)
        self.rrelu = nn.RReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, *dims)
        # First, reshape the input to 1D convolution if necessary
        if x.dim() > 3:
            x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        x = self.conv_transpose1(x)
        x = self.bn1(x)
        x = self.rrelu(x)
        
        # Reshape for 3D pooling
        x = x.unsqueeze(-1).unsqueeze(-1)  # Add two extra dimensions for 3D pooling
        x = self.avg_pool1(x)
        
        # Reshape back to 1D for the next convolution
        x = x.squeeze(-1).squeeze(-1)
        
        x = self.conv_transpose2(x)
        x = self.bn2(x)
        x = self.rrelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
