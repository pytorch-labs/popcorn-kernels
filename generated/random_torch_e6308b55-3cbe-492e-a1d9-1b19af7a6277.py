
# This is a random torch model generated by the following modules: ['Tanhshrink', 'Tanh', 'LazyLinear', 'GroupNorm', 'Container', 'Sigmoid', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.group_norm1 = nn.GroupNorm(8, 128)
        self.tanhshrink = nn.Tanhshrink()
        self.tanh = nn.Tanh()
        self.lazy_linear2 = nn.LazyLinear(64)
        self.group_norm2 = nn.GroupNorm(4, 64)
        self.sigmoid = nn.Sigmoid()
        self.elu = nn.ELU()
        self.lazy_linear3 = nn.LazyLinear(32)
        self.container = nn.Sequential(
            nn.LazyLinear(16),
            nn.Tanh(),
            nn.LazyLinear(10)
        )

    def forward(self, x):
        # Flatten the input to fit LazyLinear
        x = x.view(x.size(0), -1)
        
        x = self.lazy_linear1(x)
        x = self.group_norm1(x)
        x = self.tanhshrink(x)
        x = self.tanh(x)
        
        x = self.lazy_linear2(x)
        x = self.group_norm2(x)
        x = self.sigmoid(x)
        x = self.elu(x)
        
        x = self.lazy_linear3(x)
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
