
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'Mish', 'LazyInstanceNorm2d', 'MaxUnpool2d', 'CrossMapLRN2d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm1 = nn.InstanceNorm2d(64)
        self.mish1 = nn.Mish()
        self.lazy_instance_norm1 = nn.LazyInstanceNorm2d()
        self.max_unpool1 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.cross_map_lrn1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.instance_norm2 = nn.InstanceNorm2d(32)
        self.mish2 = nn.Mish()
        self.lazy_instance_norm2 = nn.LazyInstanceNorm2d()
        self.max_unpool2 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.cross_map_lrn2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose2 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.instance_norm3 = nn.InstanceNorm2d(16)
        self.mish3 = nn.Mish()
        self.lazy_instance_norm3 = nn.LazyInstanceNorm2d()
        self.max_unpool3 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.cross_map_lrn3 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose3 = nn.LazyConvTranspose2d(out_channels=8, kernel_size=3, stride=2, padding=1)
        self.instance_norm4 = nn.InstanceNorm2d(8)
        self.mish4 = nn.Mish()
        self.lazy_instance_norm4 = nn.LazyInstanceNorm2d()
        self.max_unpool4 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.cross_map_lrn4 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose4 = nn.LazyConvTranspose2d(out_channels=4, kernel_size=3, stride=2, padding=1)
        self.instance_norm5 = nn.InstanceNorm2d(4)
        self.mish5 = nn.Mish()
        self.lazy_instance_norm5 = nn.LazyInstanceNorm2d()
        self.max_unpool5 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.cross_map_lrn5 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose5 = nn.LazyConvTranspose2d(out_channels=1, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        x = self.instance_norm1(x)
        x = self.mish1(x)
        x = self.lazy_instance_norm1(x)
        x = self.max_unpool1(x)
        x = self.cross_map_lrn1(x)
        x = self.lazy_conv_transpose1(x)
        x = self.instance_norm2(x)
        x = self.mish2(x)
        x = self.lazy_instance_norm2(x)
        x = self.max_unpool2(x)
        x = self.cross_map_lrn2(x)
        x = self.lazy_conv_transpose2(x)
        x = self.instance_norm3(x)
        x = self.mish3(x)
        x = self.lazy_instance_norm3(x)
        x = self.max_unpool3(x)
        x = self.cross_map_lrn3(x)
        x = self.lazy_conv_transpose3(x)
        x = self.instance_norm4(x)
        x = self.mish4(x)
        x = self.lazy_instance_norm4(x)
        x = self.max_unpool4(x)
        x = self.cross_map_lrn4(x)
        x = self.lazy_conv_transpose4(x)
        x = self.instance_norm5(x)
        x = self.mish5(x)
        x = self.lazy_instance_norm5(x)
        x = self.max_unpool5(x)
        x = self.cross_map_lrn5(x)
        x = self.lazy_conv_transpose5(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
