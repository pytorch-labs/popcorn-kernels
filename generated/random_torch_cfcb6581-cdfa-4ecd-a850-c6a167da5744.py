
# This is a random torch model generated by the following modules: ['Conv3d', 'LazyConvTranspose3d', 'PairwiseDistance', 'Hardsigmoid', 'GRU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3, stride=1, padding=1)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3, stride=1, padding=1)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(10, kernel_size=3, stride=1, padding=1)
        self.gru = nn.GRU(input_size=100, hidden_size=50, num_layers=2, batch_first=True)
        self.hardsigmoid = nn.Hardsigmoid()
        self.pairwise_distance = nn.PairwiseDistance()

    def forward(self, x):
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.conv3d_2(x)
        
        # Apply LazyConvTranspose3d
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape for GRU
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width)
        x = x.permute(0, 2, 1)  # (batch_size, height*width, channels*depth)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Compute PairwiseDistance
        x = x.permute(0, 2, 1)  # (batch_size, channels*depth, height*width)
        x = x.view(batch_size, -1)  # Flatten for PairwiseDistance
        x = self.pairwise_distance(x, x)  # Compute pairwise distance
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

