
# This is a random torch model generated by the following modules: ['CircularPad2d', 'MultiMarginLoss', 'ConstantPad1d', 'RNNBase', 'TransformerDecoder', 'AvgPool2d', 'MultiLabelMarginLoss', 'SyncBatchNorm', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(2)
        self.constant_pad = nn.ConstantPad1d(2, 3.0)
        self.rnn = nn.RNNBase(input_size=10, hidden_size=20, num_layers=2)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), -1)
        x = self.constant_pad(x)
        
        # Reshape for RNNBase
        x = x.view(x.size(0), -1, 10)
        x, _ = self.rnn(x)
        
        # Reshape for TransformerDecoder
        x = x.permute(1, 0, 2)
        memory = torch.zeros_like(x)
        x = self.transformer_decoder(x, memory)
        
        # Reshape for AvgPool2d
        x = x.permute(1, 2, 0)
        x = x.unsqueeze(1)
        x = self.avg_pool(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape for MultiMarginLoss and MultiLabelMarginLoss
        x = x.view(x.size(0), -1)
        target = torch.randint(0, 10, (x.size(0),), dtype=torch.long).to(x.device)
        multi_margin_loss = self.multi_margin_loss(x, target)
        
        target_multi_label = torch.randint(0, 2, (x.size(0), 10), dtype=torch.long).to(x.device)
        multi_label_margin_loss = self.multi_label_margin_loss(x, target_multi_label)
        
        return x, multi_margin_loss, multi_label_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
