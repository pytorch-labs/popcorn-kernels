
# This is a random torch model generated by the following modules: ['LazyConv1d', 'Upsample', 'Mish', 'RReLU', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.upsample1 = nn.Upsample(scale_factor=2)
        self.mish1 = nn.Mish()
        self.rrelu1 = nn.RReLU()
        self.linear1 = nn.Linear(32, 64)
        self.linear2 = nn.Linear(64, 128)
        self.linear3 = nn.Linear(128, 10)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 32, length - 2)
        x = self.upsample1(x)  # Shape: (batch_size, 32, 2*(length - 2))
        x = self.mish1(x)  # Shape remains the same
        x = self.rrelu1(x)  # Shape remains the same
        x = x.mean(dim=2)  # Global average pooling, Shape: (batch_size, 32)
        x = self.linear1(x)  # Shape: (batch_size, 64)
        x = self.linear2(x)  # Shape: (batch_size, 128)
        x = self.linear3(x)  # Shape: (batch_size, 10)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(inputs[0])
# print(output.shape)
