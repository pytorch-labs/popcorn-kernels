
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'ReLU', 'PReLU', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.relu1 = nn.ReLU()
        self.prelu1 = nn.PReLU()
        self.maxpool1 = nn.MaxPool1d(kernel_size=2)
        self.bn2 = nn.BatchNorm1d(64)
        self.relu2 = nn.ReLU()
        self.prelu2 = nn.PReLU()
        self.maxpool2 = nn.MaxPool1d(kernel_size=2)
        self.bn3 = nn.BatchNorm1d(32)
        self.relu3 = nn.ReLU()
        self.prelu3 = nn.PReLU()
        self.maxpool3 = nn.MaxPool1d(kernel_size=2)

    def forward(self, x):
        # Assuming input shape is (batch_size, channels, sequence_length)
        x = self.bn1(x)
        x = self.relu1(x)
        x = self.prelu1(x)
        x = self.maxpool1(x)
        
        x = self.bn2(x)
        x = self.relu2(x)
        x = self.prelu2(x)
        x = self.maxpool2(x)
        
        x = self.bn3(x)
        x = self.relu3(x)
        x = self.prelu3(x)
        x = self.maxpool3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 256).cuda()  # Example input shape: (batch_size=1, channels=128, sequence_length=256)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

