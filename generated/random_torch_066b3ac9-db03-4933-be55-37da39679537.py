
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'BCELoss', 'ModuleDict', 'Hardtanh', 'Tanhshrink', 'Threshold', 'CELU', 'LPPool2d', 'GLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.tanhshrink = nn.Tanhshrink()
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.celu = nn.CELU(alpha=1.0)
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.glu = nn.GLU(dim=1)
        
        # ModuleDict example
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5)
        })
        
        # BCELoss is used in the loss function, not in the forward pass
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D for LPPool2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.lp_pool2d(x)
        
        # Reshape back to 5D for GLU
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        x = self.glu(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Use ModuleDict
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.module_dict['conv1'](x)
        x = self.module_dict['conv2'](x)
        
        # Reshape to 2D for BCELoss (if needed)
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # 5D input for FractionalMaxPool3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
