
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'ConstantPad1d', 'AdaptiveMaxPool2d', 'AdaptiveMaxPool3d', 'LazyConv2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.constant_pad = nn.ConstantPad1d(2, 3.5)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.batch_norm3d = nn.BatchNorm3d(32)

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), -1)
        x = self.constant_pad(x)
        
        # Reshape back to 4D for AdaptiveMaxPool2d
        x = x.view(x.size(0), 32, 16, 16)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape to 5D for AdaptiveMaxPool3d
        x = x.unsqueeze(2)
        x = self.adaptive_max_pool3d(x)
        
        # Apply LazyConv2d
        x = x.view(x.size(0), 32, 8, 8)
        x = self.lazy_conv2d(x)
        
        # Reshape to 5D for BatchNorm3d
        x = x.unsqueeze(2)
        x = self.batch_norm3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
