
# This is a random torch model generated by the following modules: ['Linear', 'LazyInstanceNorm3d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 512)
        self.instance_norm = nn.LazyInstanceNorm3d()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.linear3 = nn.Linear(32 * 16, 10)  # Assuming the final output size is 10

    def forward(self, x):
        # Assuming input x is of shape (batch_size, *), we first flatten it
        x = x.view(x.size(0), -1)
        
        # Apply linear layers
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        
        # Reshape for 3D instance normalization
        x = x.view(x.size(0), 1, 1, -1)  # Reshape to (batch_size, 1, 1, 512)
        x = self.instance_norm(x)
        
        # Reshape for 1D transposed convolution
        x = x.view(x.size(0), 512, 1)  # Reshape to (batch_size, 512, 1)
        x = F.relu(self.conv_transpose1(x))
        x = F.relu(self.conv_transpose2(x))
        
        # Flatten and apply final linear layer
        x = x.view(x.size(0), -1)
        x = self.linear3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Assuming input size is 128
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
