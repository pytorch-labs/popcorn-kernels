
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'Mish', 'Conv3d', 'GroupNorm', 'ConvTranspose3d', 'RNNCell', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_instance_norm = nn.LazyInstanceNorm1d()
        self.mish = nn.Mish()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3, padding=1)
        self.group_norm = nn.GroupNorm(2, 10)
        self.conv_transpose3d = nn.ConvTranspose3d(10, 20, kernel_size=3, padding=1)
        self.rnn_cell = nn.RNNCell(20, 20)
        self.rrelu = nn.RReLU()
        self.conv3d_2 = nn.Conv3d(20, 1, kernel_size=3, padding=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_instance_norm(x)
        x = self.mish(x)
        x = self.conv3d_1(x)
        x = self.group_norm(x)
        x = self.conv_transpose3d(x)
        x = x.permute(0, 2, 1, 3, 4)  # Reshape for RNNCell
        batch_size, depth, channels, height, width = x.shape
        x = x.reshape(batch_size * depth, channels, height, width)
        x = x.permute(0, 2, 3, 1)  # Reshape for RNNCell
        x = x.reshape(-1, channels)  # Flatten for RNNCell
        hx = torch.zeros(x.size(0), 20).to(x.device)
        x = self.rnn_cell(x, hx)
        x = x.reshape(batch_size * depth, height, width, 20)
        x = x.permute(0, 3, 1, 2)  # Reshape back to (batch_size * depth, channels, height, width)
        x = x.reshape(batch_size, depth, 20, height, width)
        x = x.permute(0, 2, 1, 3, 4)  # Reshape back to (batch_size, channels, depth, height, width)
        x = self.rrelu(x)
        x = self.conv3d_2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

