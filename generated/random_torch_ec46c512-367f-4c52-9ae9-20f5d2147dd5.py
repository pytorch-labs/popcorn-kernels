
# This is a random torch model generated by the following modules: ['PixelShuffle', 'Tanh', 'Container', 'LPPool1d', 'SoftMarginLoss', 'ConvTranspose2d', 'GaussianNLLLoss', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose2d = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3)
        self.tanh = nn.Tanh()
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=20, kernel_size=3)
        self.container = nn.Sequential(
            nn.ConvTranspose2d(10, 20, kernel_size=5),
            nn.Tanh(),
            nn.PixelShuffle(2)
        )
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lp_pool1d(x)
        
        # Apply Tanh
        x = self.tanh(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), 1, 1, 1)  # Reshape to 3D
        x = self.lazy_conv_transpose3d(x)
        
        # Apply Container (Sequential)
        x = x.view(x.size(0), x.size(1), 1, 1)  # Reshape to 2D
        x = self.container(x)
        
        # Apply SoftMarginLoss (requires target, so we skip it in forward pass)
        # Apply GaussianNLLLoss (requires target and variance, so we skip it in forward pass)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

