
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'MultiheadAttention', 'RNNCell', 'RReLU', 'Linear', 'Hardswish', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.linear1 = nn.Linear(512, 256)
        self.rrelu = nn.RReLU()
        self.multihead_attn = nn.MultiheadAttention(embed_dim=256, num_heads=8)
        self.rnn_cell = nn.RNNCell(input_size=256, hidden_size=128)
        self.linear2 = nn.Linear(128, 64)
        self.hardswish = nn.Hardswish()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool(x)
        
        # Reshape for Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply Linear layer
        x = self.linear1(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape for MultiheadAttention
        x = x.unsqueeze(0)
        
        # Apply MultiheadAttention
        x, _ = self.multihead_attn(x, x, x)
        
        # Reshape for RNNCell
        x = x.squeeze(0)
        
        # Apply RNNCell
        hx = torch.zeros(x.size(0), 128).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Apply Linear layer
        x = self.linear2(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

