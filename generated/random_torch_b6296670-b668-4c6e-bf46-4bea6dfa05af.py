
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'LogSoftmax', 'TripletMarginWithDistanceLoss', 'InstanceNorm3d', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm3d(10)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.pairwise_distance = nn.PairwiseDistance()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=self.pairwise_distance)
        self.poisson_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming x is a 5D tensor (batch, channels, depth, height, width)
        x = self.instance_norm(x)
        
        # Flatten the tensor for LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        
        # Reshape back to original shape for triplet loss
        x = x.view(x.size(0), 10, -1)
        
        # Generate anchor, positive, and negative samples for triplet loss
        anchor = x[:, 0, :]
        positive = x[:, 1, :]
        negative = x[:, 2, :]
        
        # Compute triplet loss
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Compute PoissonNLLLoss
        poisson_loss = self.poisson_loss(x, torch.exp(x))
        
        # Return the sum of losses as the output
        return triplet_loss + poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 5, 5).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

