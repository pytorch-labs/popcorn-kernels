
# This is a random torch model generated by the following modules: ['RNNCell', 'MaxUnpool1d', 'ReLU', 'MaxUnpool2d', 'BCELoss', 'EmbeddingBag', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.rnn_cell1 = nn.RNNCell(64, 128)
        self.rnn_cell2 = nn.RNNCell(128, 256)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        self.rrelu = nn.RReLU()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming x is a 1D tensor for simplicity
        x = self.embedding_bag(x)
        
        # Pass through RNN cells
        h1 = self.rnn_cell1(x)
        h2 = self.rnn_cell2(h1)
        
        # Reshape for MaxUnpool1d
        x = h2.view(1, 256, -1)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Apply ReLU and RReLU
        x = self.relu(x)
        x = self.rrelu(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(1, 256, 8, 8)
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        # Apply ReLU again
        x = self.relu(x)
        
        # Flatten and compute BCE loss (for demonstration purposes, we use a dummy target)
        x = x.view(-1)
        target = torch.rand_like(x)
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

