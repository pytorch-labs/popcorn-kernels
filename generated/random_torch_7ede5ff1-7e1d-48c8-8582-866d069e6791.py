
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'SyncBatchNorm', 'ChannelShuffle', 'GRU', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn1 = nn.LazyBatchNorm2d()
        self.sync_bn1 = nn.SyncBatchNorm(10)
        self.channel_shuffle1 = nn.ChannelShuffle(2)
        self.gru1 = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.conv_transpose1 = nn.ConvTranspose2d(20, 10, kernel_size=3, stride=2, padding=1)
        self.lazy_bn2 = nn.LazyBatchNorm2d()
        self.sync_bn2 = nn.SyncBatchNorm(10)
        self.channel_shuffle2 = nn.ChannelShuffle(2)
        self.conv_transpose2 = nn.ConvTranspose2d(10, 5, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.lazy_bn1(x)
        
        # Apply SyncBatchNorm
        x = self.sync_bn1(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle1(x)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # (batch_size, seq_len, input_size)
        
        # Apply GRU
        x, _ = self.gru1(x)
        
        # Reshape back to 4D tensor
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_bn2(x)
        
        # Apply SyncBatchNorm
        x = self.sync_bn2(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle2(x)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
