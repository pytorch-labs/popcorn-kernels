
# This is a random torch model generated by the following modules: ['LeakyReLU', 'Upsample', 'Flatten', 'SELU', 'MultiheadAttention', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.upsample1 = nn.Upsample(scale_factor=2)
        self.leaky_relu1 = nn.LeakyReLU(0.1)
        self.flatten = nn.Flatten()
        self.selu1 = nn.SELU()
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.leaky_relu2 = nn.LeakyReLU(0.1)
        self.upsample2 = nn.Upsample(scale_factor=2)
        self.bn2 = nn.LazyBatchNorm3d()
        self.selu2 = nn.SELU()

    def forward(self, x):
        x = self.bn1(x)
        x = self.upsample1(x)
        x = self.leaky_relu1(x)
        x = self.flatten(x)
        x = self.selu1(x)
        x = x.unsqueeze(0)  # Add batch dimension for MultiheadAttention
        x, _ = self.multihead_attention(x, x, x)
        x = x.squeeze(0)  # Remove batch dimension
        x = self.leaky_relu2(x)
        x = x.view(-1, 1, 8, 8)  # Reshape for Upsample
        x = self.upsample2(x)
        x = self.bn2(x)
        x = self.selu2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape for LazyBatchNorm3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

