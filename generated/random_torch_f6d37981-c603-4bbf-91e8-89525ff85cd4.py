
# This is a random torch model generated by the following modules: ['Dropout3d', 'LazyBatchNorm2d', 'SmoothL1Loss', 'LazyConv2d', 'ConstantPad3d', 'LeakyReLU', 'TripletMarginLoss', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm2d()
        self.dropout1 = nn.Dropout3d(p=0.5)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.conv2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.bn2 = nn.LazyBatchNorm2d()
        self.dropout2 = nn.Dropout3d(p=0.5)
        self.module_dict = nn.ModuleDict({
            'conv3': nn.LazyConv2d(out_channels=128, kernel_size=3),
            'bn3': nn.LazyBatchNorm2d(),
            'dropout3': nn.Dropout3d(p=0.5)
        })
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # First Conv Block
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.dropout1(x)
        x = self.leaky_relu(x)
        
        # Second Conv Block
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.dropout2(x)
        x = self.leaky_relu(x)
        
        # ModuleDict Block
        x = self.module_dict['conv3'](x)
        x = self.module_dict['bn3'](x)
        x = self.module_dict['dropout3'](x)
        x = self.leaky_relu(x)
        
        # Compute losses (dummy targets for demonstration)
        target = torch.rand_like(x)
        anchor = torch.rand_like(x)
        positive = torch.rand_like(x)
        negative = torch.rand_like(x)
        
        smooth_l1_loss = self.smooth_l1_loss(x, target)
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return x, smooth_l1_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape for 3D data
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
