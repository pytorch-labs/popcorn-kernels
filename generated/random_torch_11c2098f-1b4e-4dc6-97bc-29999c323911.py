
# This is a random torch model generated by the following modules: ['SELU', 'AdaptiveAvgPool3d', 'L1Loss', 'Conv2d', 'LazyBatchNorm2d', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.LazyBatchNorm2d()
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.LazyBatchNorm2d()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.bilinear = nn.Bilinear(32, 32, 64)
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.selu(x)
        
        x = self.conv2(x)
        x = self.bn2(x)
        x = F.selu(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.adaptive_avg_pool(x)
        
        # Flatten the spatial dimensions
        x = x.view(x.size(0), x.size(1), -1)
        
        # Use Bilinear layer
        x1 = x[:, :, :x.size(2)//2]
        x2 = x[:, :, x.size(2)//2:]
        x = self.bilinear(x1, x2)
        
        # Compute L1 loss with a dummy target (for demonstration purposes)
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

