
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'ConvTranspose2d', 'PixelUnshuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.conv_transpose2d1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2)
        self.pixel_unshuffle1 = nn.PixelUnshuffle(2)
        self.conv_transpose2d2 = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2)
        self.pixel_unshuffle2 = nn.PixelUnshuffle(2)
        self.replication_pad1d2 = nn.ReplicationPad1d(1)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, apply ReplicationPad1d to the height dimension
        x = x.permute(0, 2, 1, 3)  # Swap height and channels for ReplicationPad1d
        x = self.replication_pad1d(x)
        x = x.permute(0, 2, 1, 3)  # Swap back
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2d1(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle1(x)
        
        # Apply another ConvTranspose2d
        x = self.conv_transpose2d2(x)
        
        # Apply another PixelUnshuffle
        x = self.pixel_unshuffle2(x)
        
        # Apply ReplicationPad1d again
        x = x.permute(0, 2, 1, 3)  # Swap height and channels for ReplicationPad1d
        x = self.replication_pad1d2(x)
        x = x.permute(0, 2, 1, 3)  # Swap back
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
