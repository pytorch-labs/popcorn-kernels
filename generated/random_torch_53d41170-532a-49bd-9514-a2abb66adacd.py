
# This is a random torch model generated by the following modules: ['Tanhshrink', 'PixelShuffle', 'TripletMarginLoss', 'ConstantPad3d', 'ConstantPad2d', 'Conv2d', 'Hardsigmoid', 'LazyConv2d', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad_3d = nn.ConstantPad3d(1, 1.0)
        self.constant_pad_2d = nn.ConstantPad2d(1, 1.0)
        self.conv2d = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.lazy_conv2d = nn.LazyConv2d(32, kernel_size=3, stride=1, padding=1)
        self.avg_pool_3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.tanhshrink = nn.Tanhshrink()
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.constant_pad_3d(x)
        
        # Apply AvgPool3d
        x = self.avg_pool_3d(x)
        
        # Reshape to 2D for Conv2d operations
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply ConstantPad2d
        x = self.constant_pad_2d(x)
        
        # Apply Conv2d
        x = self.conv2d(x)
        
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape back to 3D for TripletMarginLoss
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Generate anchor, positive, and negative samples for TripletMarginLoss
        anchor = x[:, :, :, :, 0]
        positive = x[:, :, :, :, 1]
        negative = x[:, :, :, :, 2]
        
        # Apply TripletMarginLoss
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
