
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'ConvTranspose2d', 'MaxPool2d', 'ZeroPad3d', 'Conv2d', 'ParameterDict', 'ZeroPad1d', 'SoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=16, kernel_size=3)
        self.conv_transpose2d = nn.ConvTranspose2d(in_channels=16, out_channels=32, kernel_size=3, stride=2)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.conv2d = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(64, 64)),
            'param2': nn.Parameter(torch.randn(64, 64))
        })
        self.zero_pad1d = nn.ZeroPad1d(padding=1)
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Reshape to 3D for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # (batch, channels, height * width)
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape back to 4D for ConvTranspose2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.conv_transpose2d(x)
        
        x = self.max_pool2d(x)
        x = self.zero_pad3d(x)
        x = self.conv2d(x)
        
        # Apply ParameterDict parameters
        x = torch.matmul(x.view(x.size(0), -1), self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Reshape to 2D for ZeroPad1d
        x = x.view(x.size(0), -1)
        x = self.zero_pad1d(x)
        
        # Compute loss (dummy target for demonstration)
        target = torch.ones_like(x)
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
