
# This is a random torch model generated by the following modules: ['Hardswish', 'AlphaDropout', 'LogSoftmax', 'MSELoss', 'ModuleList', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((7, 7))
        self.module_list = nn.ModuleList([
            nn.Sequential(
                nn.Hardswish(),
                nn.AlphaDropout(p=0.5)
            ) for _ in range(3)
        ])
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        x = self.adaptive_avg_pool(x)
        for module in self.module_list:
            x = module(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.log_softmax(x)
        # Assuming we have a target tensor for MSELoss, we generate a dummy one here
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
