
# This is a random torch model generated by the following modules: ['ReflectionPad3d', 'LazyBatchNorm2d', 'Linear', 'Tanh', 'LogSoftmax', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReflectionPad3d(1)
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.tanh = nn.Tanh()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.instance_norm = nn.InstanceNorm2d(32)

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.pad(x)
        
        # Apply LazyBatchNorm2d twice
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Reshape for Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Reshape back for InstanceNorm2d
        x = x.view(x.size(0), 32, 1, 1)
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), -1)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for ReflectionPad3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

