
# This is a random torch model generated by the following modules: ['CircularPad1d', 'Conv3d', 'CrossEntropyLoss', 'NLLLoss2d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1d = nn.CircularPad1d(1)
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        # Apply CircularPad1d to the last dimension
        x = self.circular_pad1d(x)
        
        # Apply Conv3d layers
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reshape to apply AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for CrossEntropyLoss and NLLLoss2d
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        
        # Dummy target for loss calculation (assuming classification task)
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Apply CrossEntropyLoss
        loss_ce = self.cross_entropy_loss(x, target)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), 1, 10, 10)  # Reshape to (batch_size, 1, 10, 10)
        
        # Dummy target for NLLLoss2d
        target_2d = torch.randint(0, 10, (x.size(0), 10, 10), device=x.device)
        
        # Apply NLLLoss2d
        loss_nll = self.nll_loss2d(x, target_2d)
        
        # Return both losses for demonstration purposes
        return loss_ce, loss_nll


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

