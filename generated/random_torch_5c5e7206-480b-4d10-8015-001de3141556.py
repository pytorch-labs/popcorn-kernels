
# This is a random torch model generated by the following modules: ['LSTM', 'BatchNorm3d', 'RNNCellBase', 'MaxPool3d', 'RReLU', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm = nn.LSTM(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.batch_norm3d = nn.BatchNorm3d(num_features=64)
        self.rnn_cell = nn.RNNCell(input_size=256, hidden_size=128)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.rrelu = nn.RReLU()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # Apply BatchNorm3d
        x = self.batch_norm3d(x)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Reshape for LSTM
        batch_size, channels, depth, height, width = x.size()
        x = x.view(batch_size, channels * depth, height * width).permute(0, 2, 1)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 128).to(x.device)
        x = self.rnn_cell(x[:, -1, :], hx)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

