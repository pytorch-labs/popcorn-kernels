
# This is a random torch model generated by the following modules: ['Tanhshrink', 'Embedding', 'RNNBase', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.rnn1 = nn.RNNBase(input_size=128, hidden_size=64, num_layers=1, batch_first=True)  # RNN layer
        self.rnn2 = nn.RNNBase(input_size=64, hidden_size=32, num_layers=1, batch_first=True)  # RNN layer
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)  # MaxPool1d layer
        self.tanhshrink = nn.Tanhshrink()  # Tanhshrink activation

    def forward(self, x):
        # Assume input x is of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Shape: (batch_size, sequence_length, embedding_dim)
        x, _ = self.rnn1(x)  # Shape: (batch_size, sequence_length, hidden_size)
        x, _ = self.rnn2(x)  # Shape: (batch_size, sequence_length, hidden_size)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size, sequence_length)
        x = self.maxpool1d(x)  # Shape: (batch_size, hidden_size, sequence_length // 2)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length // 2, hidden_size)
        x = self.tanhshrink(x)  # Shape: (batch_size, sequence_length // 2, hidden_size)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # Example input: (batch_size=32, sequence_length=50)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
