
# This is a random torch model generated by the following modules: ['Module', 'FractionalMaxPool3d', 'Dropout2d', 'SyncBatchNorm', 'ConstantPad2d', 'BatchNorm2d', 'EmbeddingBag', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad = nn.ConstantPad2d(1, 0.5)
        self.batch_norm2d = nn.BatchNorm2d(3)
        self.sync_batch_norm = nn.SyncBatchNorm(3)
        self.dropout2d = nn.Dropout2d(0.5)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.embedding_bag = nn.EmbeddingBag(10, 3, mode='mean')
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assume input is 3D (batch, channels, height, width)
        x = self.constant_pad(x)
        x = self.batch_norm2d(x)
        x = self.sync_batch_norm(x)
        x = self.dropout2d(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for FractionalMaxPool3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.fractional_max_pool3d(x)
        
        # Reshape back to 4D (batch, channels, height, width)
        x = x.squeeze(2)
        
        # Flatten for EmbeddingBag
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.embedding_bag(x.long() % 10)  # Ensure input is within vocabulary size
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 8, 8).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

