
# This is a random torch model generated by the following modules: ['ParameterDict', 'MaxPool2d', 'BatchNorm3d', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.params = nn.ParameterDict({
            'weight1': nn.Parameter(torch.randn(10, 1, 5, 5)),
            'weight2': nn.Parameter(torch.randn(20, 10, 5, 5))
        })
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.batchnorm3d = nn.BatchNorm3d(20)
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = F.conv2d(x, self.params['weight1'])
        x = self.maxpool1(x)
        x = F.conv2d(x, self.params['weight2'])
        x = self.maxpool2(x)
        
        # Reshape to add a 3D dimension for BatchNorm3d
        x = x.unsqueeze(2)  # Shape: (batch_size, channels, 1, height, width)
        x = self.batchnorm3d(x)
        x = x.squeeze(2)  # Shape: (batch_size, channels, height, width)
        
        x = self.tanhshrink(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

