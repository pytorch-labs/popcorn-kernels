
# This is a random torch model generated by the following modules: ['LSTM', 'ReLU', 'ReplicationPad3d', 'AdaptiveMaxPool1d', 'MaxUnpool3d', 'Flatten', 'ReplicationPad2d', 'ModuleDict', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.relu = nn.ReLU()
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=32)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.flatten = nn.Flatten()
        self.replication_pad2d = nn.ReplicationPad2d(padding=1)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5)
        })
        self.instance_norm3d = nn.InstanceNorm3d(num_features=10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.lstm(x)  # Shape: (batch_size, sequence_length, hidden_size)
        x = self.relu(x)  # Shape: (batch_size, sequence_length, hidden_size)
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, sequence_length, hidden_size, 1)
        x = self.replication_pad3d(x)  # Shape: (batch_size, 1, sequence_length + 2, hidden_size + 2, 1 + 2)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(2), -1)  # Shape: (batch_size, sequence_length + 2, (hidden_size + 2) * (1 + 2))
        x = self.adaptive_max_pool1d(x)  # Shape: (batch_size, sequence_length + 2, 32)
        
        # Reshape for MaxUnpool3d
        x = x.unsqueeze(1).unsqueeze(-1)  # Shape: (batch_size, 1, sequence_length + 2, 32, 1)
        x = self.max_unpool3d(x, indices=torch.zeros_like(x).long())  # Shape: (batch_size, 1, 2*(sequence_length + 2), 2*32, 2*1)
        
        # Flatten
        x = self.flatten(x)  # Shape: (batch_size, -1)
        
        # Reshape for ReplicationPad2d
        x = x.view(x.size(0), 1, int(x.size(1)**0.5), int(x.size(1)**0.5))  # Shape: (batch_size, 1, sqrt(flattened_size), sqrt(flattened_size))
        x = self.replication_pad2d(x)  # Shape: (batch_size, 1, sqrt(flattened_size) + 2, sqrt(flattened_size) + 2)
        
        # ModuleDict
        x = self.module_dict['conv1'](x)  # Shape: (batch_size, 10, sqrt(flattened_size) + 2 - 4, sqrt(flattened_size) + 2 - 4)
        x = self.module_dict['conv2'](x)  # Shape: (batch_size, 20, sqrt(flattened_size) + 2 - 8, sqrt(flattened_size) + 2 - 8)
        
        # Reshape for InstanceNorm3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 20, sqrt(flattened_size) + 2 - 8, sqrt(flattened_size) + 2 - 8)
        x = self.instance_norm3d(x)  # Shape: (batch_size, 1, 20, sqrt(flattened_size) + 2 - 8, sqrt(flattened_size) + 2 - 8)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input shape: (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

