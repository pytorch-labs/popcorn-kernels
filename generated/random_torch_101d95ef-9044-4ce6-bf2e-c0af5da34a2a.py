
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'TripletMarginLoss', 'HingeEmbeddingLoss', 'LazyConv1d', 'MaxUnpool1d', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.gru_cell = nn.GRUCell(input_size=32, hidden_size=64)
        self.triplet_loss = nn.TripletMarginLoss()
        self.hinge_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Reshape for LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Apply MaxUnpool1d (requires indices from a previous max pooling operation)
        # Since we don't have a previous max pooling, we'll create dummy indices
        _, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Compute TripletMarginLoss (requires three inputs: anchor, positive, negative)
        anchor = x[:x.size(0)//2]
        positive = x[x.size(0)//2:]
        negative = torch.roll(x, shifts=1, dims=0)[:x.size(0)//2]
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Compute HingeEmbeddingLoss (requires input and target)
        target = torch.ones_like(anchor[:, 0])  # Dummy target
        hinge_loss = self.hinge_loss(anchor[:, 0], target)
        
        # Return both losses for demonstration purposes
        return triplet_loss, hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 3, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
