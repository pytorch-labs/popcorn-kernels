
# This is a random torch model generated by the following modules: ['LSTMCell', 'Dropout', 'HingeEmbeddingLoss', 'Hardswish', 'ZeroPad1d', 'PixelShuffle', 'Dropout1d', 'Softsign', 'Dropout2d', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm_cell1 = nn.LSTMCell(input_size=128, hidden_size=256)
        self.lstm_cell2 = nn.LSTMCell(input_size=256, hidden_size=128)
        self.dropout = nn.Dropout(p=0.5)
        self.hardswish = nn.Hardswish()
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.dropout1d = nn.Dropout1d(p=0.2)
        self.softsign = nn.Softsign()
        self.dropout2d = nn.Dropout2d(p=0.3)
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Initialize hidden and cell states for LSTMCell
        hx1 = torch.zeros(batch_size, 256).to(x.device)
        cx1 = torch.zeros(batch_size, 256).to(x.device)
        hx2 = torch.zeros(batch_size, 128).to(x.device)
        cx2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process through LSTMCells
        for t in range(sequence_length):
            hx1, cx1 = self.lstm_cell1(x[:, t, :], (hx1, cx1))
            hx1 = self.dropout(hx1)
            hx1 = self.hardswish(hx1)
            hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
            hx2 = self.softsign(hx2)
        
        # Reshape and apply ZeroPad1d
        hx2 = hx2.unsqueeze(1)  # Add a dimension for 1D padding
        hx2 = self.zero_pad1d(hx2)
        
        # Reshape and apply PixelShuffle
        hx2 = hx2.unsqueeze(1)  # Add a dimension for PixelShuffle
        hx2 = self.pixel_shuffle(hx2)
        
        # Apply Dropout1d and Dropout2d
        hx2 = self.dropout1d(hx2)
        hx2 = self.dropout2d(hx2)
        
        # Compute HingeEmbeddingLoss and CosineEmbeddingLoss (dummy targets for illustration)
        target_hinge = torch.ones(batch_size).to(x.device)
        target_cosine = torch.ones(batch_size).to(x.device)
        hinge_loss = self.hinge_embedding_loss(hx2.mean(dim=(1, 2)), target_hinge)
        cosine_loss = self.cosine_embedding_loss(hx2.mean(dim=(1, 2)), hx2.mean(dim=(1, 2)), target_cosine)
        
        # Return the final output (for illustration, returning the sum of losses)
        return hinge_loss + cosine_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

