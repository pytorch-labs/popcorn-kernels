
# This is a random torch model generated by the following modules: ['Hardtanh', 'BatchNorm1d', 'RNNCellBase', 'RNN']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh1 = nn.Hardtanh()
        self.batchnorm1d1 = nn.BatchNorm1d(128)
        self.rnncellbase1 = nn.RNNCellBase(input_size=128, hidden_size=64)
        self.rnn1 = nn.RNN(input_size=64, hidden_size=32, num_layers=2)
        self.hardtanh2 = nn.Hardtanh()
        self.batchnorm1d2 = nn.BatchNorm1d(32)
        self.rnncellbase2 = nn.RNNCellBase(input_size=32, hidden_size=16)
        self.rnn2 = nn.RNN(input_size=16, hidden_size=8, num_layers=1)
        self.hardtanh3 = nn.Hardtanh()
        self.batchnorm1d3 = nn.BatchNorm1d(8)

    def forward(self, x):
        # Flatten the input to 2D (batch_size, features)
        x = x.view(x.size(0), -1)
        
        # Apply Hardtanh and BatchNorm1d
        x = self.hardtanh1(x)
        x = self.batchnorm1d1(x)
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1, 128)
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.rnncellbase1(x, hx)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 64)
        hx = torch.zeros(2, x.size(0), 32).to(x.device)
        x, _ = self.rnn1(x, hx)
        
        # Apply Hardtanh and BatchNorm1d
        x = self.hardtanh2(x)
        x = self.batchnorm1d2(x)
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1, 32)
        hx = torch.zeros(x.size(0), 16).to(x.device)
        x = self.rnncellbase2(x, hx)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 16)
        hx = torch.zeros(1, x.size(0), 8).to(x.device)
        x, _ = self.rnn2(x, hx)
        
        # Apply Hardtanh and BatchNorm1d
        x = self.hardtanh3(x)
        x = self.batchnorm1d3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

