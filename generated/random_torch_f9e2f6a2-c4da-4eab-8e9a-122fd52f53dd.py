
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'LSTM', 'ReLU', 'ConvTranspose3d', 'GRUCell', 'SiLU', 'MaxUnpool1d', 'Conv2d', 'SELU', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming vocab size of 1000
        self.conv2d = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)
        self.conv_transpose3d = nn.ConvTranspose3d(32, 16, kernel_size=3, stride=1, padding=1)
        self.lstm = nn.LSTM(128, 64, batch_first=True)
        self.gru_cell = nn.GRUCell(64, 32)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(16)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        self.silu = nn.SiLU()
        self.selu = nn.SELU()

    def forward(self, x):
        # Assuming x is a 2D tensor of shape (batch_size, sequence_length)
        x = self.embedding(x)  # (batch_size, sequence_length, embedding_dim)
        
        # Reshape for Conv2d
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length, embedding_dim)
        x = self.conv2d(x)  # (batch_size, 32, sequence_length, embedding_dim)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(2)  # (batch_size, 32, 1, sequence_length, embedding_dim)
        x = self.conv_transpose3d(x)  # (batch_size, 16, 1, sequence_length, embedding_dim)
        
        # Reshape for LSTM
        x = x.squeeze(2)  # (batch_size, 16, sequence_length, embedding_dim)
        x = x.permute(0, 2, 1, 3)  # (batch_size, sequence_length, 16, embedding_dim)
        x = x.reshape(x.size(0), x.size(1), -1)  # (batch_size, sequence_length, 16 * embedding_dim)
        x, _ = self.lstm(x)  # (batch_size, sequence_length, 64)
        
        # GRUCell requires sequential processing
        hx = torch.zeros(x.size(0), 32).to(x.device)  # Initialize hidden state for GRUCell
        gru_outputs = []
        for t in range(x.size(1)):
            hx = self.gru_cell(x[:, t, :], hx)
            gru_outputs.append(hx)
        x = torch.stack(gru_outputs, dim=1)  # (batch_size, sequence_length, 32)
        
        # AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, 32, sequence_length)
        x = self.adaptive_avg_pool1d(x)  # (batch_size, 32, 16)
        
        # MaxUnpool1d
        x = x.permute(0, 2, 1)  # (batch_size, 16, 32)
        x = x.unsqueeze(1)  # (batch_size, 1, 16, 32)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)  # (batch_size, 1, 32, 32)
        
        # Apply activation functions
        x = self.relu(x)
        x = self.silu(x)
        x = self.selu(x)
        
        # Final reshape to flatten the output
        x = x.view(x.size(0), -1)  # (batch_size, 1 * 32 * 32)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
