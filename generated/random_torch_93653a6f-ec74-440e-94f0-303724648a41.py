
# This is a random torch model generated by the following modules: ['Upsample', 'NLLLoss2d', 'CTCLoss', 'Softmax', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.softmax = nn.Softmax(dim=1)
        self.nll_loss2d = nn.NLLLoss2d()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Reshape for NLLLoss2d and CTCLoss
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1)  # Reshape for NLLLoss2d
        x = x.permute(1, 0, 2)  # Reshape for CTCLoss
        
        # Dummy target for NLLLoss2d and CTCLoss
        target = torch.randint(0, channels, (batch_size, height * width), dtype=torch.long)
        target_lengths = torch.full((batch_size,), height * width, dtype=torch.long)
        input_lengths = torch.full((batch_size,), height * width, dtype=torch.long)
        
        # Calculate NLLLoss2d and CTCLoss
        nll_loss = self.nll_loss2d(x, target)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Return the sum of losses as the output
        return nll_loss + ctc_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
