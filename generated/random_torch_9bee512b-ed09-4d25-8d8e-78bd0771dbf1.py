
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'AdaptiveMaxPool3d', 'GLU', 'Tanh', 'LazyConv1d', 'PairwiseDistance', 'Embedding', 'Module', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.lazy_conv1d = nn.LazyConv1d(out_channels=64, kernel_size=3)  # LazyConv1d layer
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=32)  # AdaptiveAvgPool1d layer
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))  # AdaptiveMaxPool3d layer
        self.glu = nn.GLU(dim=1)  # GLU layer
        self.tanh = nn.Tanh()  # Tanh activation
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)  # PixelShuffle layer
        self.pairwise_distance = nn.PairwiseDistance(p=2)  # PairwiseDistance layer

    def forward(self, x):
        # Assume x is a tensor of arbitrary shape
        # First, reshape x to be compatible with the embedding layer
        x = x.long()  # Convert to long for embedding
        x = self.embedding(x)  # (batch_size, seq_len, embedding_dim)
        
        # Reshape for LazyConv1d
        x = x.permute(0, 2, 1)  # (batch_size, embedding_dim, seq_len)
        x = self.lazy_conv1d(x)  # (batch_size, 64, seq_len - kernel_size + 1)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)  # (batch_size, 64, 32)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # (batch_size, 1, 64, 32)
        x = x.unsqueeze(-1)  # (batch_size, 1, 64, 32, 1)
        x = self.adaptive_max_pool3d(x)  # (batch_size, 1, 8, 8, 8)
        
        # Apply GLU
        x = x.squeeze(1)  # (batch_size, 8, 8, 8)
        x = x.permute(0, 3, 1, 2)  # (batch_size, 8, 8, 8) -> (batch_size, 8, 8, 8)
        x = x.reshape(x.size(0), -1, x.size(2), x.size(3))  # (batch_size, 8*8, 8, 8)
        x = self.glu(x)  # (batch_size, 4*8, 8, 8)
        
        # Apply Tanh
        x = self.tanh(x)  # (batch_size, 32, 8, 8)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)  # (batch_size, 8, 16, 16)
        
        # Apply PairwiseDistance
        x1 = x[:, :, :8, :8]  # (batch_size, 8, 8, 8)
        x2 = x[:, :, 8:, 8:]  # (batch_size, 8, 8, 8)
        x1 = x1.reshape(x1.size(0), x1.size(1), -1)  # (batch_size, 8, 64)
        x2 = x2.reshape(x2.size(0), x2.size(1), -1)  # (batch_size, 8, 64)
        x = self.pairwise_distance(x1, x2)  # (batch_size, 8)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 32)).cuda()  # (batch_size, seq_len)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
