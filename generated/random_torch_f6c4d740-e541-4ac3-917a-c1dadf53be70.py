
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'ReLU', 'ConstantPad1d', 'ModuleList', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad1d(padding=2, value=0)
        self.pool = nn.AdaptiveAvgPool1d(output_size=10)
        self.relu = nn.ReLU()
        self.module_list = nn.ModuleList([nn.ReLU() for _ in range(3)])  # Repeating ReLU up to 5 times
        self.loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.pad(x)  # Apply padding
        x = self.pool(x)  # Apply adaptive average pooling
        x = self.relu(x)  # Apply ReLU
        
        # Apply ReLU from ModuleList
        for module in self.module_list:
            x = module(x)
        
        # Compute PoissonNLLLoss (assuming target is the same as input for simplicity)
        target = x.detach()  # Detach to avoid backprop through target
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 20).cuda()  # Example input shape (batch_size=1, channels=3, length=20)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
