
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'RNN', 'AdaptiveAvgPool1d', 'InstanceNorm1d', 'MultiMarginLoss', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.instance_norm1d = nn.InstanceNorm1d(num_features=20)
        self.module_list = nn.ModuleList([
            nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1),
            nn.RNN(input_size=20, hidden_size=30, num_layers=1, batch_first=True),
            nn.AdaptiveAvgPool1d(output_size=5),
            nn.InstanceNorm1d(num_features=30),
        ])
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape for RNN
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1).transpose(1, 2)  # (batch_size, seq_len, channels)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x.transpose(1, 2)).transpose(1, 2)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x.transpose(1, 2)).transpose(1, 2)
        
        # Apply ModuleList
        for module in self.module_list:
            if isinstance(module, nn.ConvTranspose3d):
                x = x.transpose(1, 2).view(batch_size, -1, depth, height, width)
                x = module(x)
                batch_size, channels, depth, height, width = x.shape
                x = x.view(batch_size, channels, -1).transpose(1, 2)
            elif isinstance(module, nn.RNN):
                x, _ = module(x)
            elif isinstance(module, nn.AdaptiveAvgPool1d):
                x = module(x.transpose(1, 2)).transpose(1, 2)
            elif isinstance(module, nn.InstanceNorm1d):
                x = module(x.transpose(1, 2)).transpose(1, 2)
        
        # Reshape for MultiMarginLoss (assuming target is provided externally)
        # Here we just return the output, and the loss can be computed externally
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
