
# This is a random torch model generated by the following modules: ['SiLU', 'ModuleDict', 'Dropout1d', 'Sigmoid', 'AdaptiveMaxPool1d', 'ZeroPad2d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.silu = nn.SiLU()
        self.module_dict = nn.ModuleDict({
            'conv1': nn.LazyConvTranspose2d(out_channels=16, kernel_size=3),
            'conv2': nn.LazyConvTranspose2d(out_channels=32, kernel_size=3),
        })
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.zero_pad2d = nn.ZeroPad2d(padding=1)
        
    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Apply LazyConvTranspose2d from ModuleDict
        x = self.module_dict['conv1'](x)
        x = self.silu(x)
        
        # Apply LazyConvTranspose2d from ModuleDict
        x = self.module_dict['conv2'](x)
        x = self.silu(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.dropout1d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.adaptive_max_pool1d(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
