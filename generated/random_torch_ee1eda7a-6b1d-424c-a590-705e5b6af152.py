
# This is a random torch model generated by the following modules: ['LPPool1d', 'GRU', 'MaxPool1d', 'AdaptiveLogSoftmaxWithLoss', 'LazyBatchNorm3d', 'AdaptiveMaxPool2d', 'Sigmoid', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=20, n_classes=10, cutoffs=[5])
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.sigmoid = nn.Sigmoid()
        self.rnn_cell_base = nn.RNNCellBase(input_size=10, hidden_size=20)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Reshape to 1D for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # (batch_size, channels, height * width)
        x = self.lp_pool1d(x)
        
        # Reshape for GRU
        x = x.permute(0, 2, 1)  # (batch_size, seq_len, features)
        x, _ = self.gru(x)
        
        # Reshape for MaxPool1d
        x = x.permute(0, 2, 1)  # (batch_size, features, seq_len)
        x = self.max_pool1d(x)
        
        # Reshape for LazyBatchNorm3d
        x = x.unsqueeze(1)  # (batch_size, 1, features, seq_len)
        x = self.lazy_batch_norm3d(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.squeeze(1)  # (batch_size, features, seq_len)
        x = x.unsqueeze(-1)  # (batch_size, features, seq_len, 1)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1)  # (batch_size, features * seq_len * 1)
        x = self.rnn_cell_base(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # (batch_size, features)
        x = self.adaptive_log_softmax(x, torch.zeros(x.size(0), dtype=torch.long))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

