
# This is a random torch model generated by the following modules: ['BCELoss', 'Hardtanh', 'LeakyReLU', 'PReLU', 'BatchNorm2d', 'ConstantPad1d', 'RMSNorm', 'UpsamplingNearest2d', 'NLLLoss2d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.prelu = nn.PReLU(num_parameters=1)
        self.batch_norm2d = nn.BatchNorm2d(num_features=10)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.rms_norm = nn.RMSNorm(normalized_shape=10)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.bce_loss = nn.BCELoss()
        self.nll_loss2d = nn.NLLLoss2d()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10, 10)),
            'param2': nn.Parameter(torch.randn(10, 10))
        })

    def forward(self, x):
        # Apply ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for 2D operations
        x = x.view(-1, 10, 10, 10)
        
        # Apply BatchNorm2d
        x = self.batch_norm2d(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Reshape for 1D operations
        x = x.view(-1, 10, 10)
        
        # Apply ParameterDict
        x = x * self.parameter_dict['param1']
        
        # Apply BCELoss (assuming x is already in the correct shape and range)
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Apply NLLLoss2d (assuming x is already in the correct shape and range)
        target_nll = torch.randint(0, 10, (x.size(0), x.size(2), x.size(3)))
        nll_loss = self.nll_loss2d(x, target_nll)
        
        # Return the losses as outputs
        return bce_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
