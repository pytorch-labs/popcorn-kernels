
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'LocalResponseNorm', 'GLU', 'Hardtanh', 'Linear', 'LayerNorm', 'AvgPool1d', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.local_response_norm1 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.glu1 = nn.GLU(dim=1)
        self.hardtanh1 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.linear1 = nn.Linear(in_features=128, out_features=64)
        self.layer_norm1 = nn.LayerNorm(64)
        self.avg_pool1d1 = nn.AvgPool1d(kernel_size=2, stride=2)
        self.replication_pad2d1 = nn.ReplicationPad2d(padding=2)
        
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.local_response_norm2 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.glu2 = nn.GLU(dim=1)
        self.hardtanh2 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.linear2 = nn.Linear(in_features=64, out_features=32)
        self.layer_norm2 = nn.LayerNorm(32)
        self.avg_pool1d2 = nn.AvgPool1d(kernel_size=2, stride=2)
        self.replication_pad2d2 = nn.ReplicationPad2d(padding=2)

    def forward(self, x):
        # First block
        x = self.conv_transpose1(x)
        x = self.local_response_norm1(x)
        x = self.glu1(x)
        x = self.hardtanh1(x)
        
        # Reshape for Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear1(x)
        x = self.layer_norm1(x)
        
        # Reshape back for 1D pooling
        x = x.unsqueeze(1)
        x = self.avg_pool1d1(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), 16, 8, 8)
        x = self.replication_pad2d1(x)
        
        # Second block
        x = self.conv_transpose2(x)
        x = self.local_response_norm2(x)
        x = self.glu2(x)
        x = self.hardtanh2(x)
        
        # Reshape for Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear2(x)
        x = self.layer_norm2(x)
        
        # Reshape back for 1D pooling
        x = x.unsqueeze(1)
        x = self.avg_pool1d2(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), 8, 4, 4)
        x = self.replication_pad2d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
