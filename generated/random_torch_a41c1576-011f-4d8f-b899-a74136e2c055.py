
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'ReplicationPad2d', 'ChannelShuffle', 'Sigmoid', 'AdaptiveMaxPool3d', 'CTCLoss', 'MaxUnpool2d', 'Module', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=512, nhead=8), num_layers=3
        )
        self.replication_pad = nn.ReplicationPad2d(2)
        self.channel_shuffle = nn.ChannelShuffle(4)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_max_pool = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.ctc_loss = nn.CTCLoss()
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.module_dict = nn.ModuleDict({
            'linear1': nn.Linear(512, 256),
            'linear2': nn.Linear(256, 128),
        })

    def forward(self, x):
        # Assuming x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # TransformerDecoder expects input of shape (seq_len, batch_size, d_model)
        x = x.permute(1, 0, 2)
        memory = torch.zeros_like(x)
        x = self.transformer_decoder(x, memory)
        x = x.permute(1, 0, 2)  # Back to (batch_size, seq_len, d_model)
        
        # Reshape for ReplicationPad2d
        x = x.view(batch_size, seq_len, int(d_model**0.5), int(d_model**0.5))
        x = self.replication_pad(x)
        
        # ChannelShuffle expects input of shape (batch_size, channels, height, width)
        x = self.channel_shuffle(x)
        
        # Sigmoid activation
        x = self.sigmoid(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(batch_size, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.adaptive_max_pool(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(batch_size, x.shape[2], x.shape[3], x.shape[4])
        x = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x, indices = x
        x = self.max_unpool(x, indices)
        
        # Flatten for ModuleDict
        x = x.view(batch_size, -1)
        x = self.module_dict['linear1'](x)
        x = self.module_dict['linear2'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 512).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

