
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'Conv3d', 'Threshold', 'MaxUnpool3d', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3, stride=1, padding=1)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3, stride=1, padding=1)
        self.threshold = nn.Threshold(0.1, 0.5)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.elu = nn.ELU()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv3d_1(x)  # Shape: (batch_size, 10, depth, height, width)
        
        # Convert to 2D for InstanceNorm2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)  # Shape: (batch_size * depth, 10, height, width)
        x = self.instance_norm2d(x)  # Shape: (batch_size * depth, 10, height, width)
        x = x.view(batch_size, channels, depth, height, width)  # Shape: (batch_size, 10, depth, height, width)
        
        x = self.conv3d_2(x)  # Shape: (batch_size, 20, depth, height, width)
        x = self.threshold(x)  # Shape: (batch_size, 20, depth, height, width)
        
        # MaxUnpool3d requires indices from a previous MaxPool3d operation
        # For simplicity, we'll perform a MaxPool3d and then unpool it
        pool_output, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)  # Shape: (batch_size, 20, depth/2, height/2, width/2)
        x = self.max_unpool3d(pool_output, indices)  # Shape: (batch_size, 20, depth, height, width)
        
        x = self.elu(x)  # Shape: (batch_size, 20, depth, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

