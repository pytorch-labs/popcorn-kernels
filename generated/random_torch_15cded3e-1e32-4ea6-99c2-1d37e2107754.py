
# This is a random torch model generated by the following modules: ['Module', 'ZeroPad3d', 'Softshrink', 'Tanhshrink', 'LayerNorm', 'Dropout2d', 'ReLU6', 'LazyBatchNorm1d', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.softshrink = nn.Softshrink()
        self.tanhshrink = nn.Tanhshrink()
        self.layer_norm = nn.LayerNorm(64)
        self.dropout2d = nn.Dropout2d(0.5)
        self.relu6 = nn.ReLU6()
        self.lazy_batch_norm = nn.LazyBatchNorm1d()
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        
    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape for LayerNorm
        x = x.view(x.size(0), -1)
        x = self.layer_norm(x)
        
        # Reshape back for Dropout2d
        x = x.view(x.size(0), 1, int(x.size(1)**0.5), int(x.size(1)**0.5))
        x = self.dropout2d(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.lazy_batch_norm(x)
        
        # Reshape for AvgPool1d
        x = x.unsqueeze(1)
        x = self.avg_pool(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
