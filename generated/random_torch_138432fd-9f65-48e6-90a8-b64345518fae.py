
# This is a random torch model generated by the following modules: ['ParameterDict', 'RNNCell', 'InstanceNorm1d', 'BatchNorm3d', 'NLLLoss2d', 'LazyConvTranspose3d', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.param_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.rnn_cell = nn.RNNCell(input_size=10, hidden_size=20)
        self.instance_norm = nn.InstanceNorm1d(num_features=20)
        self.batch_norm3d = nn.BatchNorm3d(num_features=5)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=5, kernel_size=3)
        self.sigmoid = nn.Sigmoid()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_conv_transpose3d(x)  # Shape: (batch_size, 5, depth', height', width')
        x = self.batch_norm3d(x)  # Shape: (batch_size, 5, depth', height', width')
        
        # Reshape for RNNCell
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width)  # Shape: (batch_size, channels * depth * height * width)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 20)  # Initialize hidden state
        x = self.rnn_cell(x, hx)  # Shape: (batch_size, 20)
        
        # Apply InstanceNorm1d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 20)
        x = self.instance_norm(x)  # Shape: (batch_size, 1, 20)
        x = x.squeeze(1)  # Shape: (batch_size, 20)
        
        # Apply Sigmoid
        x = self.sigmoid(x)  # Shape: (batch_size, 20)
        
        # Apply ParameterDict
        x = x * self.param_dict['param1'] + self.param_dict['param2']  # Shape: (batch_size, 20)
        
        # Reshape for NLLLoss2d
        x = x.view(batch_size, 1, 4, 5)  # Shape: (batch_size, 1, 4, 5)
        
        # Assuming target is provided externally
        target = torch.randint(0, 5, (batch_size, 4, 5))  # Example target
        loss = self.nll_loss2d(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
