
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'AvgPool1d', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.avg_pool1 = nn.AvgPool1d(kernel_size=3, stride=2)
        self.pixel_shuffle1 = nn.PixelShuffle(upscale_factor=2)
        self.lrn2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.avg_pool2 = nn.AvgPool1d(kernel_size=3, stride=2)
        self.pixel_shuffle2 = nn.PixelShuffle(upscale_factor=2)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lrn1(x)
        
        # Reshape for AvgPool1d
        batch, channels, height, width = x.shape
        x = x.view(batch, channels * height, width)  # Reshape to (batch, channels*height, width)
        x = self.avg_pool1(x)
        
        # Reshape back to 4D for PixelShuffle
        x = x.view(batch, channels, height, -1)  # Reshape to (batch, channels, height, new_width)
        x = self.pixel_shuffle1(x)
        
        x = self.lrn2(x)
        
        # Reshape for AvgPool1d again
        batch, channels, height, width = x.shape
        x = x.view(batch, channels * height, width)
        x = self.avg_pool2(x)
        
        # Reshape back to 4D for PixelShuffle
        x = x.view(batch, channels, height, -1)
        x = self.pixel_shuffle2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
