
# This is a random torch model generated by the following modules: ['GLU', 'LazyInstanceNorm3d', 'AdaptiveLogSoftmaxWithLoss', 'GRUCell', 'ParameterList', 'LazyConv3d', 'CircularPad1d', 'AvgPool3d', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu = nn.GLU(dim=1)
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=128)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])
        self.lazy_conv3d = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[4, 8])

    def forward(self, x):
        # Apply GLU
        x = self.glu(x)
        
        # Apply LazyInstanceNorm3d
        x = self.lazy_instance_norm3d(x)
        
        # Reshape for GRUCell
        batch_size, *dims = x.shape
        x = x.view(batch_size, -1)
        hx = torch.zeros(batch_size, 128).to(x.device)
        x = self.gru_cell(x, hx)
        
        # Apply ParameterList (just for demonstration, not used in forward pass)
        for param in self.parameter_list:
            pass  # Parameters are not directly used in forward pass
        
        # Reshape for LazyConv3d
        x = x.view(batch_size, 32, 4, 4, 4)
        x = self.lazy_conv3d(x)
        
        # Apply CircularPad1d (reshape to 1D first)
        x = x.view(batch_size, -1)
        x = self.circular_pad1d(x)
        
        # Reshape back to 3D for AvgPool3d
        x = x.view(batch_size, 32, 4, 4, 4)
        x = self.avg_pool3d(x)
        
        # Reshape to 2D for AvgPool2d
        x = x.view(batch_size, 32, 4, 4)
        x = self.avg_pool2d(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)
        output = self.adaptive_log_softmax(x, torch.zeros(batch_size, dtype=torch.long).to(x.device))
        
        return output.log_prob


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 8, 8, 8).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

