
# This is a random torch model generated by the following modules: ['Softplus', 'LazyConvTranspose1d', 'PoissonNLLLoss', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.linear1 = nn.LazyLinear(out_features=128)
        self.linear2 = nn.LazyLinear(out_features=64)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Reshape input to 1D convolution compatible shape
        x = x.view(x.size(0), -1, 1)  # Reshape to (batch_size, channels, sequence_length)
        
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Flatten the output for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # Note: PoissonNLLLoss is typically used in the loss function, not in the forward pass.
        # Here, we just return the output of the last Linear layer.
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
