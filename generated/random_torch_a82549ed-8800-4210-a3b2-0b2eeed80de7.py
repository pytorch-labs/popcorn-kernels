
# This is a random torch model generated by the following modules: ['ReLU6', 'Dropout2d', 'Softmin', 'PixelShuffle', 'Dropout3d', 'NLLLoss', 'ZeroPad1d', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.softmin = nn.Softmin(dim=1)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.container = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 32)
        )
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply ZeroPad1d to the input
        x = self.zero_pad1d(x)
        
        # Reshape the input to 4D for Dropout2d and PixelShuffle
        x = x.view(-1, 1, x.shape[1], x.shape[2])
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape the input to 5D for Dropout3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Reshape the input back to 2D for the container
        x = x.view(x.shape[0], -1)
        
        # Apply the container (Sequential)
        x = self.container(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Apply NLLLoss (assuming target is provided externally)
        # Note: NLLLoss requires a target, so this is just a placeholder
        # target = torch.tensor([0])  # Example target
        # loss = self.nll_loss(x, target)
        
        return x  # Return the output before NLLLoss for flexibility


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

