
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'ReflectionPad1d', 'AdaptiveMaxPool2d', 'MaxPool3d', 'Dropout1d', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((10, 10))
        self.max_pool3d = nn.MaxPool3d(kernel_size=(2, 2, 2))
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.bilinear = nn.Bilinear(100, 100, 50)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.upsample(x)  # Upsample the input
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.reflection_pad(x)  # Apply reflection padding
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        x = self.adaptive_max_pool(x)  # Apply adaptive max pooling
        x = x.unsqueeze(1)  # Add a dimension to make it 3D
        x = self.max_pool3d(x)  # Apply 3D max pooling
        x = x.squeeze(1)  # Remove the added dimension
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.dropout1d(x)  # Apply 1D dropout
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.bilinear(x, x)  # Apply bilinear transformation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

