
# This is a random torch model generated by the following modules: ['Dropout', 'LazyBatchNorm1d', 'PReLU', 'LayerNorm', 'CELU', 'LazyConv3d', 'MaxPool1d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.bn1 = nn.LazyBatchNorm1d()
        self.prelu1 = nn.PReLU()
        self.layernorm1 = nn.LayerNorm(128)
        self.celu1 = nn.CELU()
        self.conv3d1 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.maxpool1d1 = nn.MaxPool1d(kernel_size=2)
        self.flatten = nn.Flatten()
        self.dropout2 = nn.Dropout(p=0.3)
        self.bn2 = nn.LazyBatchNorm1d()
        self.prelu2 = nn.PReLU()
        self.layernorm2 = nn.LayerNorm(64)
        self.celu2 = nn.CELU()
        self.conv3d2 = nn.LazyConv3d(out_channels=64, kernel_size=3)
        self.maxpool1d2 = nn.MaxPool1d(kernel_size=2)

    def forward(self, x):
        x = self.dropout1(x)
        x = self.bn1(x)
        x = self.prelu1(x)
        x = self.layernorm1(x)
        x = self.celu1(x)
        
        # Reshape for Conv3d
        x = x.view(-1, 1, 32, 32, 32)
        x = self.conv3d1(x)
        
        # Reshape for MaxPool1d
        x = x.view(-1, 32, 32*32*32)
        x = self.maxpool1d1(x)
        
        x = self.flatten(x)
        x = self.dropout2(x)
        x = self.bn2(x)
        x = self.prelu2(x)
        x = self.layernorm2(x)
        x = self.celu2(x)
        
        # Reshape for Conv3d
        x = x.view(-1, 32, 16, 16, 16)
        x = self.conv3d2(x)
        
        # Reshape for MaxPool1d
        x = x.view(-1, 64, 16*16*16)
        x = self.maxpool1d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
