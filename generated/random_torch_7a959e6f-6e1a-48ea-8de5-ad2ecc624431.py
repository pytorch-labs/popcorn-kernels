
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'BCEWithLogitsLoss', 'LogSoftmax', 'Module', 'ELU', 'Hardtanh', 'CrossEntropyLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self.elu1 = nn.ELU()
        self.elu2 = nn.ELU()
        self.hardtanh1 = nn.Hardtanh()
        self.hardtanh2 = nn.Hardtanh()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply AdaptiveAvgPool2d to reduce spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Flatten the tensor for further processing
        x = x.view(x.size(0), -1)
        
        # Apply ELU activation
        x = self.elu1(x)
        
        # Apply Hardtanh activation
        x = self.hardtanh1(x)
        
        # Apply another ELU activation
        x = self.elu2(x)
        
        # Apply another Hardtanh activation
        x = self.hardtanh2(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Compute BCEWithLogitsLoss (assuming a dummy target)
        dummy_target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        bce_loss = self.bce_loss(x, dummy_target)
        
        # Compute CrossEntropyLoss (assuming a dummy target)
        dummy_target = torch.randint(0, x.size(1), (x.size(0),))
        cross_entropy_loss = self.cross_entropy_loss(x, dummy_target)
        
        # Return the losses as a tuple
        return bce_loss, cross_entropy_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
