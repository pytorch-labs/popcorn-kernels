
# This is a random torch model generated by the following modules: ['MaxPool2d', 'LazyConvTranspose2d', 'ZeroPad3d', 'LazyBatchNorm2d', 'AdaptiveMaxPool1d', 'ELU', 'BCELoss', 'Softsign']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv_transpose2d = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.batch_norm2d = nn.LazyBatchNorm2d()
        self.adaptive_maxpool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.elu = nn.ELU()
        self.bce_loss = nn.BCELoss()
        self.softsign = nn.Softsign()

    def forward(self, x):
        # Apply MaxPool2d
        x = self.maxpool2d(x)
        
        # Apply LazyConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Apply ZeroPad3d (reshape to 3D first)
        x = x.unsqueeze(1)  # Add a dummy dimension to make it 5D (batch, channel, depth, height, width)
        x = self.zero_pad3d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Apply LazyBatchNorm2d
        x = self.batch_norm2d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width dimensions
        x = self.adaptive_maxpool1d(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Compute BCELoss (assuming a target tensor is provided externally)
        # For demonstration, we create a dummy target tensor of the same shape as x
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

