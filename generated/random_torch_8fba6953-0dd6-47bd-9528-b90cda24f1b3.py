
# This is a random torch model generated by the following modules: ['GRUCell', 'CTCLoss', 'ZeroPad1d', 'GLU', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.glu = nn.GLU(dim=1)
        self.celu = nn.CELU()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process sequence through GRUCells
        for t in range(sequence_length):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape and apply ZeroPad1d
        x = h2.unsqueeze(1)  # Add a dimension for padding
        x = self.zero_pad1d(x)
        
        # Apply GLU
        x = self.glu(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Compute CTC Loss (dummy target and input lengths for demonstration)
        # Note: CTC Loss requires log_probs, targets, input_lengths, and target_lengths
        log_probs = F.log_softmax(x, dim=2)
        targets = torch.randint(0, 128, (batch_size, sequence_length), dtype=torch.long).to(x.device)
        input_lengths = torch.full((batch_size,), sequence_length, dtype=torch.long).to(x.device)
        target_lengths = torch.randint(1, sequence_length + 1, (batch_size,), dtype=torch.long).to(x.device)
        
        loss = self.ctc_loss(log_probs, targets, input_lengths, target_lengths)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

