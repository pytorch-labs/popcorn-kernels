
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'SmoothL1Loss', 'CELU', 'ZeroPad3d', 'UpsamplingBilinear2d', 'ReflectionPad2d', 'AdaptiveAvgPool3d', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn = nn.SyncBatchNorm(10)
        self.celu = nn.CELU()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.upsample_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.reflection_pad2d = nn.ReflectionPad2d(2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.sigmoid = nn.Sigmoid()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # First, apply ZeroPad3d to add padding
        x = self.zero_pad3d(x)
        
        # Apply SyncBatchNorm
        x = self.sync_bn(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape to 4D for UpsamplingBilinear2d and ReflectionPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        # Apply UpsamplingBilinear2d
        x = self.upsample_bilinear2d(x)
        
        # Apply ReflectionPad2d
        x = self.reflection_pad2d(x)
        
        # Reshape back to 5D for AdaptiveAvgPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Apply Sigmoid activation
        x = self.sigmoid(x)
        
        # Compute SmoothL1Loss with a dummy target (for demonstration purposes)
        target = torch.zeros_like(x)
        loss = self.smooth_l1_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

