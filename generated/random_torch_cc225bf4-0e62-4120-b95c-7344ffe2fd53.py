
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'ConvTranspose2d', 'CosineSimilarity', 'Dropout2d', 'NLLLoss2d', 'SmoothL1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.bn2 = nn.LazyBatchNorm2d()
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.nll_loss = nn.NLLLoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        x = self.bn1(x)
        x = self.conv_transpose1(x)
        x = self.dropout1(x)
        x = self.bn2(x)
        x = self.conv_transpose2(x)
        x = self.dropout2(x)
        
        # Reshape for CosineSimilarity
        x = x.view(x.size(0), -1)
        y = torch.randn_like(x)  # Random target for CosineSimilarity
        x = self.cosine_sim(x, y)
        
        # Reshape for NLLLoss
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        target = torch.randint(0, 1, (1, 1))  # Random target for NLLLoss
        x = self.nll_loss(x, target)
        
        # Reshape for SmoothL1Loss
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        target = torch.randn_like(x)  # Random target for SmoothL1Loss
        x = self.smooth_l1_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
