
# This is a random torch model generated by the following modules: ['SoftMarginLoss', 'ConvTranspose1d', 'PairwiseDistance', 'Tanhshrink', 'LPPool1d', 'LayerNorm', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.lazy_conv_transpose1 = nn.LazyConvTranspose1d(20, kernel_size=5)
        self.layer_norm = nn.LayerNorm(20)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=2)
        self.tanhshrink = nn.Tanhshrink()
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose1d
        x = self.conv_transpose1(x)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x.transpose(1, 2)).transpose(1, 2)
        
        # Apply LPPool1d
        x = self.lp_pool1d(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)
        x1 = x[:, :x.size(1)//2]
        x2 = x[:, x.size(1)//2:]
        
        # Apply PairwiseDistance
        x = self.pairwise_distance(x1, x2)
        
        # Reshape for SoftMarginLoss
        x = x.unsqueeze(0)
        target = torch.ones_like(x)
        
        # Apply SoftMarginLoss
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

