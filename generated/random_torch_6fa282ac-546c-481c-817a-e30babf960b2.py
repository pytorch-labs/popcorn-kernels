
# This is a random torch model generated by the following modules: ['Dropout', 'SELU', 'Hardsigmoid', 'ReLU6', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.selu1 = nn.SELU()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.relu6_1 = nn.ReLU6()
        self.adaptive_max_pool1d_1 = nn.AdaptiveMaxPool1d(output_size=10)
        self.dropout2 = nn.Dropout(p=0.5)
        self.selu2 = nn.SELU()
        self.hardsigmoid2 = nn.Hardsigmoid()
        self.relu6_2 = nn.ReLU6()
        self.adaptive_max_pool1d_2 = nn.AdaptiveMaxPool1d(output_size=5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.dropout1(x)
        x = self.selu1(x)
        x = self.hardsigmoid1(x)
        x = self.relu6_1(x)
        x = self.adaptive_max_pool1d_1(x)
        x = self.dropout2(x)
        x = self.selu2(x)
        x = self.hardsigmoid2(x)
        x = self.relu6_2(x)
        x = self.adaptive_max_pool1d_2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 100).cuda()  # Example input shape (batch_size=1, channels=3, sequence_length=100)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
