
# This is a random torch model generated by the following modules: ['Module', 'Sigmoid', 'Dropout3d', 'AdaptiveAvgPool1d', 'Softshrink', 'ReLU6', 'ReflectionPad2d', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.relu6 = nn.ReLU6()
        self.reflection_pad2d = nn.ReflectionPad2d(padding=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Apply ReflectionPad2d to the input
        x = self.reflection_pad2d(x)
        
        # Apply Dropout3d (assuming input is 5D: batch, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.dropout3d(x)
        x = x.squeeze(2)  # Remove the depth dimension
        
        # Apply AdaptiveAvgPool1d (assuming input is 3D: batch, channels, length)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input: batch size 1, 3 channels, 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
