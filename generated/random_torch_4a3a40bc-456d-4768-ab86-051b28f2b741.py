
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'CircularPad1d', 'AvgPool2d', 'CircularPad2d', 'UpsamplingNearest2d', 'CTCLoss', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1d = nn.CircularPad1d(2)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.circular_pad2d = nn.CircularPad2d(2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Apply CircularPad1d to the first dimension (height)
        x = x.permute(0, 2, 1, 3)  # Swap height and channels for CircularPad1d
        x = self.circular_pad1d(x)
        x = x.permute(0, 2, 1, 3)  # Swap back
        
        # Apply AvgPool2d
        x = self.avg_pool2d(x)
        
        # Apply CircularPad2d
        x = self.circular_pad2d(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Assuming we have a target for BCEWithLogitsLoss
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Assuming we have log_probs and targets for CTCLoss
        log_probs = x.permute(1, 0, 2, 3).reshape(-1, x.size(0), x.size(2) * x.size(3))
        targets = torch.randint(1, 10, (x.size(0), 10), dtype=torch.long)
        input_lengths = torch.full((x.size(0),), log_probs.size(0), dtype=torch.long)
        target_lengths = torch.randint(1, 10, (x.size(0),), dtype=torch.long)
        ctc_loss = self.ctc_loss(log_probs, targets, input_lengths, target_lengths)
        
        # Return the sum of the losses as the output
        return bce_loss + ctc_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
