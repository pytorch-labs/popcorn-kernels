
# This is a random torch model generated by the following modules: ['Identity', 'Bilinear', 'BCELoss', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.bilinear1 = nn.Bilinear(10, 10, 20)
        self.bilinear2 = nn.Bilinear(20, 20, 10)
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Reshape input for Bilinear layer
        batch_size = x.size(0)
        x = x.view(batch_size, -1)  # Flatten the input
        x = x.view(batch_size, 10, -1)  # Reshape to (batch_size, 10, ...)
        
        # Apply first Bilinear layer
        x1 = x[:, :10, :10]  # Split input for Bilinear
        x2 = x[:, :10, :10]  # Split input for Bilinear
        x = self.bilinear1(x1, x2)
        
        # Apply MaxPool2d
        x = x.view(batch_size, 20, 10, 10)  # Reshape to 4D for MaxPool2d
        x = self.maxpool(x)
        
        # Reshape for second Bilinear layer
        x = x.view(batch_size, 20, -1)  # Flatten the input
        x1 = x[:, :20, :20]  # Split input for Bilinear
        x2 = x[:, :20, :20]  # Split input for Bilinear
        x = self.bilinear2(x1, x2)
        
        # Apply BCELoss (assuming a target tensor is provided)
        target = torch.rand_like(x)  # Random target for demonstration
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

