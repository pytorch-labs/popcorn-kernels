
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'LazyConvTranspose3d', 'LazyInstanceNorm3d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d_1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose3d_1 = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2)
        self.instance_norm3d_1 = nn.LazyInstanceNorm3d()
        self.conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=1)
        self.conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=1)
        self.instance_norm3d_2 = nn.LazyInstanceNorm3d()

    def forward(self, x):
        # Assuming input is 1D, reshape to 3D for ConvTranspose3d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Reshape to (batch, channels, 1, 1, 1)
        
        # Apply ConvTranspose3d and InstanceNorm3d
        x = self.conv_transpose3d_1(x)
        x = self.instance_norm3d_1(x)
        x = torch.relu(x)
        
        # Apply ConvTranspose3d and InstanceNorm3d again
        x = self.conv_transpose3d_2(x)
        x = self.instance_norm3d_2(x)
        x = torch.relu(x)
        
        # Reshape back to 1D for ConvTranspose1d
        x = x.squeeze(-1).squeeze(-1)  # Reshape to (batch, channels, length)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d_1(x)
        x = torch.relu(x)
        
        # Apply ConvTranspose1d again
        x = self.conv_transpose1d_2(x)
        x = torch.relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch, channels, length)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

