
# This is a random torch model generated by the following modules: ['Dropout1d', 'LazyBatchNorm3d', 'BCEWithLogitsLoss', 'AdaptiveLogSoftmaxWithLoss', 'GaussianNLLLoss', 'CircularPad1d', 'Hardswish', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lazy_batchnorm3d = nn.LazyBatchNorm3d()
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.hardswish = nn.Hardswish()
        self.silu = nn.SiLU()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.adaptive_log_softmax_with_loss = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_batchnorm3d(x)  # Apply LazyBatchNorm3d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, depth*height*width)
        x = self.dropout1d(x)  # Apply Dropout1d
        x = x.view(x.size(0), x.size(1), 1, -1)  # Reshape to (batch_size, channels, 1, depth*height*width)
        x = self.circular_pad1d(x)  # Apply CircularPad1d
        x = self.hardswish(x)  # Apply Hardswish
        x = self.silu(x)  # Apply SiLU
        
        # Assuming we have a target for BCEWithLogitsLoss
        target = torch.randint(0, 2, (x.size(0), x.size(1), x.size(2), x.size(3))).float()
        bce_loss = self.bce_with_logits_loss(x, target)
        
        # Assuming we have a target for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Reshape to (batch_size, channels*depth*height*width)
        target_adaptive = torch.randint(0, 10, (x.size(0),))
        adaptive_loss = self.adaptive_log_softmax_with_loss(x, target_adaptive)
        
        # Assuming we have a target for GaussianNLLLoss
        target_gaussian = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_nll_loss(x, target_gaussian, var)
        
        # Return the losses as a tuple
        return bce_loss, adaptive_loss, gaussian_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

