
# This is a random torch model generated by the following modules: ['Hardswish', 'Module', 'LazyConv1d', 'LazyConvTranspose1d', 'Upsample', 'InstanceNorm2d', 'Fold', 'Container', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.upsample = nn.Upsample(scale_factor=2, mode='linear')
        self.instance_norm2d = nn.InstanceNorm2d(64)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.container = nn.Sequential(
            nn.LazyConv1d(out_channels=32, kernel_size=3),
            nn.Hardswish(),
            nn.LazyConv1d(out_channels=64, kernel_size=3),
            nn.Hardswish()
        )
        self.hardswish = nn.Hardswish()

    def forward(self, x):
        # Assume input is a 1D tensor for simplicity
        if x.dim() == 1:
            x = self.embedding_bag(x)
        
        # Reshape for 1D convolutions
        x = x.view(1, -1, x.size(-1))
        
        x = self.lazy_conv1d(x)
        x = self.hardswish(x)
        x = self.lazy_conv_transpose1d(x)
        x = self.hardswish(x)
        x = self.upsample(x)
        
        # Reshape for 2D operations
        x = x.view(1, 64, 8, 8)
        x = self.instance_norm2d(x)
        
        # Fold operation
        x = self.fold(x)
        
        # Reshape for 1D operations
        x = x.view(1, -1, x.size(-1))
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

