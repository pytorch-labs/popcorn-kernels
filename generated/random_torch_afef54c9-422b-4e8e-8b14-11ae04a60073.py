
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'LPPool2d', 'ReflectionPad2d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.lazy_conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.lazy_conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=10)

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Apply LazyConv2d
        x = F.relu(self.lazy_conv1(x))
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Apply LazyConv2d again
        x = F.relu(self.lazy_conv2(x))
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Reshape back to a 2D tensor
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
