
# This is a random torch model generated by the following modules: ['Hardtanh', 'Sequential', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.sequential = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 16)
        )
        self.alpha_dropout = nn.AlphaDropout(p=0.5)

    def forward(self, x):
        # Flatten the input to fit the linear layers in the sequential module
        x = x.view(x.size(0), -1)
        x = self.hardtanh(x)
        x = self.sequential(x)
        x = self.alpha_dropout(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Assuming input shape (batch_size, 128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

