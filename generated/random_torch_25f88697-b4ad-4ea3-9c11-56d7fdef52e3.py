
# This is a random torch model generated by the following modules: ['RNNBase', 'ConvTranspose1d', 'CircularPad1d', 'Upsample', 'CosineSimilarity', 'LocalResponseNorm', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=128, out_channels=64, kernel_size=3, stride=2)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.upsample = nn.Upsample(scale_factor=2, mode='linear')
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.rnn(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, hidden_size, sequence_length)
        x = self.conv_transpose1d(x)  # Output shape: (batch_size, 64, new_sequence_length)
        x = self.circular_pad1d(x)  # Output shape: (batch_size, 64, new_sequence_length + 2)
        x = self.upsample(x)  # Output shape: (batch_size, 64, 2*(new_sequence_length + 2))
        x = self.local_response_norm(x)  # Output shape: (batch_size, 64, 2*(new_sequence_length + 2))
        x = self.adaptive_avg_pool1d(x)  # Output shape: (batch_size, 64, 10)
        
        # Create a second tensor for cosine similarity
        x2 = torch.randn_like(x)  # Random tensor of same shape as x
        x = self.cosine_similarity(x, x2)  # Output shape: (batch_size, 10)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20, 64).cuda()  # Example input shape: (batch_size=1, sequence_length=20, input_size=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

