
# This is a random torch model generated by the following modules: ['SiLU', 'AvgPool1d', 'Dropout2d', 'LazyConvTranspose3d', 'Hardsigmoid', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.silu1 = nn.SiLU()
        self.avgpool1d1 = nn.AvgPool1d(kernel_size=2)
        self.dropout2d1 = nn.Dropout2d(p=0.5)
        self.lazyconvtranspose3d1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.relu6_1 = nn.ReLU6()
        self.silu2 = nn.SiLU()
        self.avgpool1d2 = nn.AvgPool1d(kernel_size=2)
        self.dropout2d2 = nn.Dropout2d(p=0.5)
        self.lazyconvtranspose3d2 = nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=2)
        self.hardsigmoid2 = nn.Hardsigmoid()
        self.relu6_2 = nn.ReLU6()

    def forward(self, x):
        # Apply SiLU
        x = self.silu1(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.avgpool1d1(x)
        
        # Reshape for Dropout2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        x = self.dropout2d1(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.lazyconvtranspose3d1(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid1(x)
        
        # Apply ReLU6
        x = self.relu6_1(x)
        
        # Apply SiLU again
        x = self.silu2(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.avgpool1d2(x)
        
        # Reshape for Dropout2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        x = self.dropout2d2(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.lazyconvtranspose3d2(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid2(x)
        
        # Apply ReLU6
        x = self.relu6_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
