
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'Dropout3d', 'Sequential', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(64)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
        )
        self.pixel_shuffle = nn.PixelShuffle(2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Apply InstanceNorm1d on the flattened spatial dimensions
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.instance_norm(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back

        # Apply Dropout3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension for Dropout3d
        x = self.dropout3d(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension

        # Apply Sequential
        x = self.sequential(x)

        # Apply PixelShuffle
        x = self.pixel_shuffle(x)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
