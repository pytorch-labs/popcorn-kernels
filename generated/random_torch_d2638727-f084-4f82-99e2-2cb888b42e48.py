
# This is a random torch model generated by the following modules: ['Upsample', 'LazyInstanceNorm2d', 'Softplus', 'ParameterDict', 'MaxUnpool3d', 'AvgPool1d', 'AdaptiveMaxPool2d', 'HingeEmbeddingLoss', 'GroupNorm', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.softplus = nn.Softplus()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=10)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=5)

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm(x)
        
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Use ParameterDict (just for demonstration, not directly applied to x)
        param1 = self.parameter_dict['param1']
        param2 = self.parameter_dict['param2']
        
        # Reshape for MaxUnpool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(4)  # Add a depth dimension
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        
        # Remove extra dimensions
        x = x.squeeze(4).squeeze(1)
        
        # Apply AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for 1D pooling
        x = self.avg_pool1d(x)
        
        # Apply AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape for 2D pooling
        x = self.adaptive_max_pool2d(x)
        
        # Apply GroupNorm
        x = self.group_norm(x)
        
        # Apply AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for 1D pooling
        x = self.adaptive_max_pool1d(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        # Apply HingeEmbeddingLoss (just for demonstration, not directly applied to x)
        target = torch.ones(x.size(0)).to(x.device)
        loss = self.hinge_embedding_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
