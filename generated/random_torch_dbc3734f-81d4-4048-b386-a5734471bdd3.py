
# This is a random torch model generated by the following modules: ['CircularPad2d', 'TransformerEncoderLayer', 'AdaptiveAvgPool1d', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=32)
        self.conv_transpose = nn.ConvTranspose2d(in_channels=64, out_channels=32, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose2d(in_channels=32, out_channels=16, kernel_size=3, stride=2, padding=1)
        self.circular_pad2 = nn.CircularPad2d(1)
        self.transformer_encoder_layer2 = nn.TransformerEncoderLayer(d_model=32, nhead=8)
        self.adaptive_avg_pool2 = nn.AdaptiveAvgPool1d(output_size=16)
        self.conv_transpose3 = nn.ConvTranspose2d(in_channels=16, out_channels=8, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        x = self.transformer_encoder_layer(x)
        
        # Reshape back to original shape
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply AdaptiveAvgPool1d
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Reshape for ConvTranspose2d
        x = x.view(batch_size, channels, 32, 32)
        x = self.conv_transpose(x)
        
        # Apply second CircularPad2d
        x = self.circular_pad2(x)
        
        # Reshape for second TransformerEncoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)
        x = self.transformer_encoder_layer2(x)
        
        # Reshape back to original shape
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply second AdaptiveAvgPool1d
        x = x.view(batch_size, channels, -1)
        x = self.adaptive_avg_pool2(x)
        
        # Reshape for second ConvTranspose2d
        x = x.view(batch_size, channels, 16, 16)
        x = self.conv_transpose2(x)
        
        # Apply third ConvTranspose2d
        x = self.conv_transpose3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
