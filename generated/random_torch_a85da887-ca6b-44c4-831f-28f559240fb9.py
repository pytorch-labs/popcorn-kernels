
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'Hardshrink', 'MSELoss', 'Dropout3d', 'BatchNorm2d', 'Conv3d', 'LazyBatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 16, kernel_size=3, stride=1, padding=1)
        self.batch_norm2d_1 = nn.BatchNorm2d(16)
        self.lazy_batch_norm2d_1 = nn.LazyBatchNorm2d()
        self.dropout3d_1 = nn.Dropout3d(p=0.5)
        self.conv3d_2 = nn.Conv3d(16, 32, kernel_size=3, stride=1, padding=1)
        self.adaptive_avg_pool3d_1 = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.hardshrink_1 = nn.Hardshrink()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Initial 3D convolution
        x = self.conv3d_1(x)
        
        # Reshape to 2D for BatchNorm2d and LazyBatchNorm2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        
        # Apply BatchNorm2d and LazyBatchNorm2d
        x = self.batch_norm2d_1(x)
        x = self.lazy_batch_norm2d_1(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply Dropout3d
        x = self.dropout3d_1(x)
        
        # Second 3D convolution
        x = self.conv3d_2(x)
        
        # Adaptive average pooling
        x = self.adaptive_avg_pool3d_1(x)
        
        # Apply Hardshrink activation
        x = self.hardshrink_1(x)
        
        # Compute MSE loss with respect to a target (for demonstration, we use a zero tensor)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

