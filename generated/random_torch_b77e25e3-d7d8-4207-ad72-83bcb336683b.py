
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'ELU', 'SELU', 'LPPool3d', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.elu = nn.ELU()
        self.selu = nn.SELU()
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.softplus = nn.Softplus()

    def forward(self, x):
        # ZeroPad2d: Pad the input tensor
        x = self.zero_pad(x)
        
        # ELU: Apply ELU activation
        x = self.elu(x)
        
        # SELU: Apply SELU activation
        x = self.selu(x)
        
        # Reshape to 5D for LPPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        
        # LPPool3d: Apply LPPool3d
        x = self.lp_pool3d(x)
        
        # Reshape back to 4D
        x = x.squeeze(1)  # Remove depth dimension
        x = x.squeeze(1)  # Remove channel dimension
        
        # Softplus: Apply Softplus activation
        x = self.softplus(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

