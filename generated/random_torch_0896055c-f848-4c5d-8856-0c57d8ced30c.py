
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'FeatureAlphaDropout', 'GroupNorm', 'GaussianNLLLoss', 'Upsample', 'MaxPool1d', 'Dropout1d', 'RNNCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.group_norm = nn.GroupNorm(num_groups=4, num_channels=8)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.dropout1d = nn.Dropout1d(p=0.2)
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=128)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_avg_pool3d(x)  # Shape: (batch_size, channels, 8, 8, 8)
        x = self.feature_alpha_dropout(x)  # Shape: (batch_size, channels, 8, 8, 8)
        x = x.view(x.size(0), -1, 8, 8)  # Reshape to (batch_size, channels*8, 8, 8)
        x = self.group_norm(x)  # Shape: (batch_size, channels*8, 8, 8)
        x = x.view(x.size(0), -1, 8)  # Reshape to (batch_size, channels*8*8, 8)
        x = self.max_pool1d(x)  # Shape: (batch_size, channels*8*8, 4)
        x = self.dropout1d(x)  # Shape: (batch_size, channels*8*8, 4)
        x = x.view(x.size(0), -1)  # Reshape to (batch_size, channels*8*8*4)
        x = self.rnn_cell(x)  # Shape: (batch_size, 128)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 128)
        x = self.upsample(x)  # Shape: (batch_size, 1, 256)
        x = x.squeeze(1)  # Shape: (batch_size, 256)
        return x

    def compute_loss(self, output, target):
        # Assuming target is of shape (batch_size, 256)
        return self.gaussian_nll_loss(output, target)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
