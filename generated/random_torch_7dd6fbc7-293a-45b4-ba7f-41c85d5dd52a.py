
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'GLU', 'LazyBatchNorm1d', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.glu2 = nn.GLU(dim=1)
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()
        self.container = nn.Sequential(
            nn.LazyBatchNorm1d(),
            nn.GLU(dim=1),
            nn.LazyBatchNorm1d(),
            nn.GLU(dim=1),
        )
        self.loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Reshape input to have a channel dimension
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = x.unsqueeze(1)  # Add a channel dimension

        # Apply GLU and BatchNorm
        x = self.glu1(x)
        x = self.bn1(x)
        x = self.glu2(x)
        x = self.bn2(x)

        # Pass through the container
        x = self.container(x)

        # Reshape for loss calculation
        x = x.squeeze(1)  # Remove the channel dimension
        target = torch.zeros_like(x)  # Dummy target for loss calculation
        loss = self.loss(x, target)

        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Arbitrary input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
