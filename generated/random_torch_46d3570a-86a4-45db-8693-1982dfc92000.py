
# This is a random torch model generated by the following modules: ['ModuleDict', 'Conv2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5),
            'bn1': nn.BatchNorm3d(20),
            'conv3': nn.Conv2d(20, 30, kernel_size=5),
            'bn2': nn.BatchNorm3d(30),
        })

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.module_dict['conv1'](x)
        x = F.relu(x)
        
        x = self.module_dict['conv2'](x)
        x = F.relu(x)
        
        # Reshape to 5D for BatchNorm3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.module_dict['bn1'](x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        
        x = self.module_dict['conv3'](x)
        x = F.relu(x)
        
        # Reshape to 5D for BatchNorm3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.module_dict['bn2'](x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
