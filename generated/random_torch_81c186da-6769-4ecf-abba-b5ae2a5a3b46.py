
# This is a random torch model generated by the following modules: ['Unflatten', 'InstanceNorm3d', 'Dropout', 'AdaptiveAvgPool2d', 'LazyConv3d', 'Hardswish', 'TransformerDecoderLayer', 'NLLLoss2d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 1, 1))
        self.instance_norm = nn.InstanceNorm3d(1)
        self.dropout = nn.Dropout(0.5)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((16, 16))
        self.lazy_conv3d = nn.LazyConv3d(10, kernel_size=3)
        self.hardswish = nn.Hardswish()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.nll_loss2d = nn.NLLLoss2d()
        self.circular_pad3d = nn.CircularPad3d(1)

    def forward(self, x):
        # Unflatten the input to add extra dimensions
        x = self.unflatten(x)
        
        # Apply InstanceNorm3d
        x = self.instance_norm(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.adaptive_avg_pool(x)
        
        # Reshape for LazyConv3d
        x = x.unsqueeze(1)
        x = self.lazy_conv3d(x)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Reshape for TransformerDecoderLayer
        x = x.view(x.size(0), x.size(1), -1)
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), x.size(1), 1, -1)
        x = self.nll_loss2d(x, torch.zeros_like(x).long())
        
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
