
# This is a random torch model generated by the following modules: ['MaxPool1d', 'Hardsigmoid', 'RNN', 'InstanceNorm1d', 'MSELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.rnn = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.instance_norm1d = nn.InstanceNorm1d(num_features=128)
        self.mseloss = nn.MSELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.maxpool1d(x)  # Apply MaxPool1d
        x = self.hardsigmoid(x)  # Apply Hardsigmoid
        
        # Reshape for RNN: (batch_size, sequence_length, features)
        x = x.permute(0, 2, 1)
        x, _ = self.rnn(x)  # Apply RNN
        
        # Reshape back for InstanceNorm1d: (batch_size, features, sequence_length)
        x = x.permute(0, 2, 1)
        x = self.instance_norm1d(x)  # Apply InstanceNorm1d
        
        # Compute MSELoss with a dummy target (for demonstration purposes)
        dummy_target = torch.zeros_like(x)
        loss = self.mseloss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 128).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

