
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'ReLU', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.relu = nn.ReLU()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)

    def forward(self, x):
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply Hardsigmoid again
        x = self.hardsigmoid(x)
        
        # Apply ReLU again
        x = self.relu(x)
        
        # Apply FeatureAlphaDropout again
        x = self.feature_alpha_dropout(x)
        
        # Reshape the output to match the input shape
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

