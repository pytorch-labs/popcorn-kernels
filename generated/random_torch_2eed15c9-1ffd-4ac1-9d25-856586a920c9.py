
# This is a random torch model generated by the following modules: ['AvgPool2d', 'BatchNorm2d', 'ReflectionPad1d', 'Unflatten', 'Dropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.batchnorm1 = nn.BatchNorm2d(3)
        self.batchnorm2 = nn.BatchNorm2d(6)
        self.reflectionpad = nn.ReflectionPad1d(2)
        self.unflatten = nn.Unflatten(1, (3, 8))
        self.dropout = nn.Dropout(p=0.5)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.batchnorm1(x)
        x = self.avgpool(x)
        x = self.batchnorm2(x)
        
        # Reshape to 1D for ReflectionPad1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height * width)
        x = x.unsqueeze(2)  # Add a dimension for ReflectionPad1d
        x = self.reflectionpad(x)
        
        # Reshape back to 4D for Unflatten
        x = x.squeeze(2)
        x = x.view(batch_size, -1)
        x = self.unflatten(x)
        
        # Apply dropout
        x = self.dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
