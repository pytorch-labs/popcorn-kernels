
# This is a random torch model generated by the following modules: ['ReLU6', 'RMSNorm', 'Container', 'PixelUnshuffle', 'BatchNorm3d', 'FractionalMaxPool3d', 'ReplicationPad1d', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.batch_norm3d = nn.BatchNorm3d(16)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.rms_norm = nn.LayerNorm(64)
        self.relu6 = nn.ReLU6()
        self.container = nn.Sequential(
            nn.Linear(64, 128),
            nn.ReLU(),
            nn.Linear(128, 64)
        )

    def forward(self, x):
        # Assume x is a 1D tensor for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for PixelUnshuffle
        x = x.view(-1, 1, 8, 8)
        x = self.pixel_unshuffle(x)
        
        # Reshape for BatchNorm3d
        x = x.view(-1, 16, 4, 4, 4)
        x = self.batch_norm3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(-1, 16, 64)
        x = self.replication_pad1d(x)
        
        # Reshape for RMSNorm
        x = x.view(-1, 64)
        x = self.rms_norm(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Pass through the container
        x = self.container(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

