
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'AdaptiveMaxPool1d', 'InstanceNorm2d', 'RNNBase', 'LSTM', 'Unfold', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.instance_norm2d = nn.InstanceNorm2d(num_features=10)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.lstm = nn.LSTM(input_size=20, hidden_size=30, num_layers=2, batch_first=True)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.circular_pad1d = nn.CircularPad1d(padding=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, channels, 4, 4, 4)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 4*4*4)
        x = self.adaptive_max_pool1d(x)  # Shape: (batch_size, channels, 10)
        
        # Reshape for InstanceNorm2d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, channels, 10, 1, 1)
        x = x.view(x.size(0), x.size(1), 10, 1)  # Shape: (batch_size, channels, 10, 1)
        x = self.instance_norm2d(x)  # Shape: (batch_size, channels, 10, 1)
        
        # Reshape for RNN
        x = x.squeeze(-1).permute(0, 2, 1)  # Shape: (batch_size, 10, channels)
        x, _ = self.rnn(x)  # Shape: (batch_size, 10, 20)
        
        # Pass through LSTM
        x, _ = self.lstm(x)  # Shape: (batch_size, 10, 30)
        
        # Reshape for Unfold
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, 10, 30, 1, 1)
        x = x.view(x.size(0), x.size(1), 30, 1)  # Shape: (batch_size, 10, 30, 1)
        x = self.unfold(x)  # Shape: (batch_size, 10*2*2, 30*1)
        
        # Reshape for CircularPad1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 30*1, 10*2*2)
        x = self.circular_pad1d(x)  # Shape: (batch_size, 30*1, 10*2*2 + 2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 8, 8, 8).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

