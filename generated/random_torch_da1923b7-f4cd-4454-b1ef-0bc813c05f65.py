
# This is a random torch model generated by the following modules: ['Transformer', 'PReLU', 'CircularPad3d', 'LayerNorm', 'Module', 'SyncBatchNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.circular_pad = nn.CircularPad3d(1)
        self.layer_norm = nn.LayerNorm(64)
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.fc = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # Transformer expects input of shape (seq_len, batch_size, d_model)
        x = x.permute(1, 0, 2)
        x = self.transformer(x, x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, d_model)
        
        # Apply PReLU
        x = self.prelu1(x)
        
        # Reshape for CircularPad3d (batch_size, channels, depth, height, width)
        x = x.view(batch_size, 1, seq_len, d_model, 1)
        x = self.circular_pad(x)
        
        # Reshape back to (batch_size, seq_len, d_model)
        x = x.view(batch_size, seq_len, d_model)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Apply SyncBatchNorm
        x = x.permute(0, 2, 1)  # SyncBatchNorm expects (batch_size, channels, seq_len)
        x = self.sync_batch_norm(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, seq_len, d_model)
        
        # Apply PReLU
        x = self.prelu2(x)
        
        # Global average pooling over the sequence length
        x = x.mean(dim=1)
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(32, 10, 64).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

