
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'LazyConvTranspose1d', 'LazyConv1d', 'LazyBatchNorm1d', 'PReLU', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.conv_transpose1d_1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv1d_1 = nn.LazyConv1d(out_channels=64, kernel_size=3, stride=1)
        self.batch_norm1d_1 = nn.LazyBatchNorm1d()
        self.prelu_1 = nn.PReLU()
        self.conv_transpose3d_1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.conv1d_2 = nn.LazyConv1d(out_channels=128, kernel_size=3, stride=1)
        self.batch_norm1d_2 = nn.LazyBatchNorm1d()
        self.prelu_2 = nn.PReLU()
        self.conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, *dims)
        x = self.channel_shuffle(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        x = self.conv_transpose1d_1(x)
        x = self.conv1d_1(x)
        x = self.batch_norm1d_1(x)
        x = self.prelu_1(x)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Arbitrary reshape for 3D conv
        
        x = self.conv_transpose3d_1(x)
        
        # Reshape back for 1D operations
        x = x.view(x.size(0), x.size(1), -1)
        
        x = self.conv_transpose1d_2(x)
        x = self.conv1d_2(x)
        x = self.batch_norm1d_2(x)
        x = self.prelu_2(x)
        
        # Reshape for final 3D operations
        x = x.view(x.size(0), x.size(1), 16, 16, 16)  # Arbitrary reshape for 3D conv
        
        x = self.conv_transpose3d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

