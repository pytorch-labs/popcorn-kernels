
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'SyncBatchNorm', 'LPPool1d', 'Softmin', 'PoissonNLLLoss', 'SmoothL1Loss', 'TripletMarginWithDistanceLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.sync_bn1 = nn.SyncBatchNorm(10)
        self.lp_pool1 = nn.LPPool1d(norm_type=2, kernel_size=2)
        self.softmin = nn.Softmin(dim=1)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.triplet_margin_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.sync_bn1(x)
        x = self.lp_pool1(x)
        x = self.softmin(x)
        
        # For loss functions, we need to create some dummy targets
        target = torch.randint(0, 10, (x.size(0), x.size(1), x.size(2)), device=x.device)
        poisson_loss = self.poisson_nll_loss(x, target)
        
        smooth_l1_target = torch.randn_like(x)
        smooth_l1_loss = self.smooth_l1_loss(x, smooth_l1_target)
        
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        negative = torch.randn_like(x)
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return the losses as part of the output
        return x, poisson_loss, smooth_l1_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
