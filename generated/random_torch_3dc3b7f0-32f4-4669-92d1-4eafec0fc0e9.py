
# This is a random torch model generated by the following modules: ['BatchNorm2d', 'AdaptiveMaxPool1d', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm2d(3)  # Assuming input has 3 channels
        self.bn2 = nn.BatchNorm2d(3)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply BatchNorm2d
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Reshape to fit AdaptiveMaxPool1d input requirements
        # Assuming the input is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)  # Reshape to (batch_size, channels*height, width)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Reshape back to a 2D tensor for Softmin
        x = x.view(batch_size, -1)  # Reshape to (batch_size, channels*output_size)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

