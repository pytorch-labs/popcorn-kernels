
# This is a random torch model generated by the following modules: ['Fold', 'NLLLoss2d', 'Identity', 'KLDivLoss', 'LazyBatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.lazy_bn1 = nn.LazyBatchNorm2d()
        self.lazy_bn2 = nn.LazyBatchNorm2d()
        self.identity = nn.Identity()
        self.nll_loss = nn.NLLLoss2d()
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.lazy_bn1(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1, 1)
        
        # Apply Fold
        x = self.fold(x)
        
        # Apply LazyBatchNorm2d again
        x = self.lazy_bn2(x)
        
        # Compute NLLLoss2d (requires target, so we generate a dummy target)
        target = torch.randint(0, 10, (x.size(0), x.size(2), x.size(3)), device=x.device)
        nll_loss = self.nll_loss(x, target)
        
        # Compute KLDivLoss (requires log-probabilities and probabilities, so we generate dummy inputs)
        log_probs = F.log_softmax(x, dim=1)
        probs = F.softmax(torch.randn_like(x), dim=1)
        kl_div_loss = self.kl_div_loss(log_probs, probs)
        
        # Return both losses as a tuple
        return nll_loss, kl_div_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
