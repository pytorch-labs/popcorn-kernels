
# This is a random torch model generated by the following modules: ['GroupNorm', 'AdaptiveAvgPool3d', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm1 = nn.GroupNorm(2, 4)  # GroupNorm with 2 groups and 4 channels
        self.group_norm2 = nn.GroupNorm(4, 8)  # GroupNorm with 4 groups and 8 channels
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((4, 4, 4))  # AdaptiveAvgPool3d to (4, 4, 4)
        self.threshold1 = nn.Threshold(0.1, 0.5)  # Threshold with threshold=0.1 and value=0.5
        self.threshold2 = nn.Threshold(0.2, 0.3)  # Threshold with threshold=0.2 and value=0.3

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.group_norm1(x)
        x = self.threshold1(x)
        x = self.adaptive_avg_pool3d(x)
        x = self.group_norm2(x)
        x = self.threshold2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 8, 16, 16).cuda()  # Example input shape: (batch_size=1, channels=4, depth=8, height=16, width=16)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

