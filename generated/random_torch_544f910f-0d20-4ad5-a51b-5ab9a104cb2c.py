
# This is a random torch model generated by the following modules: ['Dropout', 'CELU', 'LSTM', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.dropout1 = nn.Dropout(p=0.2)
        self.celu1 = nn.CELU()
        self.lstm1 = nn.LSTM(input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.dropout2 = nn.Dropout(p=0.2)
        self.celu2 = nn.CELU()
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.dropout3 = nn.Dropout(p=0.2)
        self.celu3 = nn.CELU()
        self.lstm2 = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.dropout4 = nn.Dropout(p=0.2)
        self.celu4 = nn.CELU()
        self.conv3 = nn.LazyConv1d(out_channels=128, kernel_size=3)
        self.dropout5 = nn.Dropout(p=0.2)
        self.celu5 = nn.CELU()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, features)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, features, sequence_length) for Conv1d
        x = self.conv1(x)
        x = self.dropout1(x)
        x = self.celu1(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, sequence_length, features) for LSTM
        x, _ = self.lstm1(x)
        x = self.dropout2(x)
        x = self.celu2(x)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, features, sequence_length) for Conv1d
        x = self.conv2(x)
        x = self.dropout3(x)
        x = self.celu3(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, sequence_length, features) for LSTM
        x, _ = self.lstm2(x)
        x = self.dropout4(x)
        x = self.celu4(x)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, features, sequence_length) for Conv1d
        x = self.conv3(x)
        x = self.dropout5(x)
        x = self.celu5(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100, 64).cuda()  # Example input shape (batch_size=1, sequence_length=100, features=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

