
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'LogSoftmax', 'LazyInstanceNorm3d', 'AdaptiveMaxPool1d', 'MaxPool2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.adaptive_log_softmax_with_loss = nn.AdaptiveLogSoftmaxWithLoss(in_features=10, n_classes=5, cutoffs=[2])

    def forward(self, x):
        # Apply LazyInstanceNorm3d
        x = self.lazy_instance_norm3d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for MaxPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to 2D
        x = self.max_pool2d(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)  # Flatten to 1D
        x = self.pairwise_distance(x, x)  # Pairwise distance with itself
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Ensure correct shape
        x = self.adaptive_log_softmax_with_loss(x, torch.zeros(x.size(0), dtype=torch.long))  # Dummy target
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

