
# This is a random torch model generated by the following modules: ['LazyConv2d', 'MultiLabelSoftMarginLoss', 'ZeroPad2d', 'ZeroPad1d', 'NLLLoss2d', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.zero_pad2d = nn.ZeroPad2d(1)
        self.zero_pad1d = nn.ZeroPad1d(1)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.multi_label_loss = nn.MultiLabelSoftMarginLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply LazyConv2d
        x = self.conv1(x)
        x = F.relu(x)
        
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Apply LazyConv2d again
        x = self.conv2(x)
        x = F.relu(x)
        
        # Apply ZeroPad1d (requires reshaping to 1D)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.zero_pad1d(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        
        # Apply MaxUnpool3d (requires reshaping to 3D)
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        
        # Apply MultiLabelSoftMarginLoss (requires reshaping and target)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float().to(x.device)
        x = x.view(x.size(0), -1)  # Flatten for loss calculation
        loss1 = self.multi_label_loss(x, target)
        
        # Apply NLLLoss2d (requires reshaping and target)
        x = x.view(x.size(0), x.size(1), 1, 1)  # Reshape to 2D for NLLLoss2d
        target = torch.randint(0, x.size(1), (x.size(0), 1, 1)).to(x.device)
        loss2 = self.nll_loss2d(F.log_softmax(x, dim=1), target)
        
        # Return the sum of losses (for demonstration purposes)
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
