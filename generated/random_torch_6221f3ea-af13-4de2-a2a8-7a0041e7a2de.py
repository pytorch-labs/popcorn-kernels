
# This is a random torch model generated by the following modules: ['Unfold', 'Unflatten', 'FeatureAlphaDropout', 'UpsamplingBilinear2d', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.unflatten = nn.Unflatten(1, (1, 64))
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assume input is a 4D tensor (batch_size, channels, height, width)
        x = self.unfold(x)  # Unfold the input into patches
        x = x.permute(0, 2, 1)  # Permute to (batch_size, num_patches, channels * kernel_size * kernel_size)
        x = self.max_pool1d(x)  # Apply MaxPool1d along the patches dimension
        x = x.permute(0, 2, 1)  # Permute back to (batch_size, channels * kernel_size * kernel_size, num_patches)
        x = self.unflatten(x)  # Unflatten to (batch_size, 1, 64, num_patches)
        x = self.feature_alpha_dropout(x)  # Apply FeatureAlphaDropout
        x = x.permute(0, 3, 1, 2)  # Permute to (batch_size, num_patches, 1, 64)
        x = self.upsampling_bilinear2d(x)  # Upsample using bilinear interpolation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input: (batch_size, channels, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
