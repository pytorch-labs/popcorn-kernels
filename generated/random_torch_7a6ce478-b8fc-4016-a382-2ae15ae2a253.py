
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'MaxUnpool1d', 'PixelUnshuffle', 'AdaptiveMaxPool1d', 'ChannelShuffle', 'Hardsigmoid', 'CircularPad2d', 'SiLU', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0.5)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2, padding=0)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.circular_pad2d = nn.CircularPad2d(padding=1)
        self.silu = nn.SiLU()
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply CircularPad2d
        x = self.circular_pad2d(x)
        
        # Apply SiLU
        x = self.silu(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

