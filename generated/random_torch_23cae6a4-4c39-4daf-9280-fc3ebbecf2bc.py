
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'Hardshrink', 'LazyConvTranspose3d', 'Module', 'LeakyReLU', 'ReLU6', 'Sequential', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.hardshrink = nn.Hardshrink()
        self.conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.leaky_relu = nn.LeakyReLU()
        self.relu6 = nn.ReLU6()
        self.rnn_cell = nn.RNNCellBase(input_size=16, hidden_size=32)
        self.sequential = nn.Sequential(
            nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=1),
            nn.LeakyReLU(),
            nn.ChannelShuffle(groups=2),
            nn.ReLU6(),
            nn.Hardshrink()
        )

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.channel_shuffle(x)
        x = self.hardshrink(x)
        x = self.conv_transpose3d(x)
        x = self.leaky_relu(x)
        x = self.relu6(x)
        
        # Reshape for RNNCellBase
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1, channels)  # Reshape to (batch_size, seq_len, input_size)
        hx = torch.zeros(batch_size, 32).to(x.device)  # Initialize hidden state
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        x = hx
        
        # Pass through Sequential
        x = x.unsqueeze(2).unsqueeze(3).unsqueeze(4)  # Reshape to (batch_size, 32, 1, 1, 1)
        x = self.sequential(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 8, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

