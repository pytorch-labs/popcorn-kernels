
# This is a random torch model generated by the following modules: ['RNN', 'Upsample', 'NLLLoss2d', 'ZeroPad1d', 'PairwiseDistance', 'FractionalMaxPool2d', 'MultiLabelSoftMarginLoss', 'NLLLoss', 'MultiMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.nll_loss = nn.NLLLoss()
        self.nll_loss2d = nn.NLLLoss2d()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.rnn(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        
        # Reshape for Upsample
        x = x.unsqueeze(1)  # Add channel dimension: (batch_size, 1, sequence_length, hidden_size)
        x = self.upsample(x)  # Output shape: (batch_size, 1, sequence_length*2, hidden_size*2)
        
        # Reshape for ZeroPad1d
        x = x.squeeze(1)  # Remove channel dimension: (batch_size, sequence_length*2, hidden_size*2)
        x = self.zero_pad1d(x)  # Output shape: (batch_size, sequence_length*2, hidden_size*2 + 4)
        
        # Reshape for FractionalMaxPool2d
        x = x.unsqueeze(1)  # Add channel dimension: (batch_size, 1, sequence_length*2, hidden_size*2 + 4)
        x = self.fractional_max_pool2d(x)  # Output shape: (batch_size, 1, 14, 14)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)  # Flatten: (batch_size, 1*14*14)
        x = self.pairwise_distance(x, x)  # Output shape: (batch_size,)
        
        # Compute losses (dummy targets for demonstration)
        target = torch.randint(0, 10, (x.size(0),)).long()
        target2d = torch.randint(0, 10, (x.size(0), 14, 14)).long()
        target_multi_label = torch.randint(0, 2, (x.size(0), 10)).float()
        
        nll_loss = self.nll_loss(F.log_softmax(x, dim=0), target)
        nll_loss2d = self.nll_loss2d(F.log_softmax(x.view(x.size(0), 1, 14, 14), dim=1), target2d)
        multi_label_soft_margin_loss = self.multi_label_soft_margin_loss(x, target_multi_label)
        multi_margin_loss = self.multi_margin_loss(x, target)
        
        # Return a combination of losses for demonstration
        return nll_loss + nll_loss2d + multi_label_soft_margin_loss + multi_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

