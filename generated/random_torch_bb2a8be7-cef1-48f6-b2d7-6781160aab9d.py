
# This is a random torch model generated by the following modules: ['AvgPool1d', 'ConvTranspose3d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1d = nn.AvgPool1d(kernel_size=2)
        self.convtranspose3d1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2)
        self.batchnorm3d1 = nn.BatchNorm3d(10)
        self.convtranspose3d2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2)
        self.batchnorm3d2 = nn.BatchNorm3d(20)
        self.convtranspose3d3 = nn.ConvTranspose3d(20, 30, kernel_size=3, stride=2)
        self.batchnorm3d3 = nn.BatchNorm3d(30)

    def forward(self, x):
        # Assuming input is 1D, we first apply AvgPool1d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, sequence_length)
        x = self.avgpool1d(x)
        
        # Reshape to 5D tensor for ConvTranspose3d
        x = x.view(x.size(0), 1, x.size(1), x.size(2), 1)  # Reshape to (batch_size, 1, depth, height, width)
        
        # Apply ConvTranspose3d and BatchNorm3d layers
        x = F.relu(self.batchnorm3d1(self.convtranspose3d1(x)))
        x = F.relu(self.batchnorm3d2(self.convtranspose3d2(x)))
        x = F.relu(self.batchnorm3d3(self.convtranspose3d3(x)))
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Arbitrary 1D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
