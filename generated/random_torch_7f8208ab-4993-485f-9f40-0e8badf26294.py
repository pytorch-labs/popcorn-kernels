
# This is a random torch model generated by the following modules: ['AlphaDropout', 'AdaptiveMaxPool2d', 'LSTM']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((5, 5))
        self.lstm = nn.LSTM(input_size=25, hidden_size=128, num_layers=2, batch_first=True)
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Reshape for LSTM input
        batch_size = x.size(0)
        x = x.view(batch_size, -1, 25)  # Reshape to (batch_size, sequence_length, input_size)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Take the output of the last time step
        x = x[:, -1, :]
        
        # Apply a fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

