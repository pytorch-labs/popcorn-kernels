
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'ReplicationPad3d', 'Container', 'EmbeddingBag', 'ReLU', 'GroupNorm', 'Bilinear', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(3)
        self.replication_pad = nn.ReplicationPad3d(1)
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.relu = nn.ReLU()
        self.group_norm = nn.GroupNorm(4, 64)
        self.bilinear = nn.Bilinear(64, 64, 128)
        self.conv_transpose = nn.ConvTranspose3d(128, 64, kernel_size=3, stride=2, padding=1)
        self.container = nn.Sequential(
            nn.InstanceNorm2d(64),
            nn.ReLU(),
            nn.GroupNorm(4, 64),
            nn.ConvTranspose3d(64, 32, kernel_size=3, stride=2, padding=1)
        )

    def forward(self, x):
        # Assuming input x is a 4D tensor (batch, channels, height, width)
        x = self.instance_norm(x)
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.replication_pad(x)
        
        # Reshape back to 4D for EmbeddingBag
        x = x.squeeze(2)
        x = x.view(x.size(0), -1)  # Flatten spatial dimensions
        x = self.embedding_bag(x.long())
        
        # Apply ReLU and GroupNorm
        x = self.relu(x)
        x = self.group_norm(x.unsqueeze(-1).unsqueeze(-1))  # Add spatial dimensions
        
        # Reshape for Bilinear
        x = x.view(x.size(0), -1)
        x = self.bilinear(x, x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(-1).unsqueeze(-1).unsqueeze(-1)  # Add spatial dimensions
        x = self.conv_transpose(x)
        
        # Pass through the container
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
