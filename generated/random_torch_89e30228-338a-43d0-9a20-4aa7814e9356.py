
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'CircularPad3d', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.circular_pad = nn.CircularPad3d((1, 1, 1, 1, 1, 1))
        self.rms_norm1 = RMSNorm(20)
        self.rms_norm2 = RMSNorm(20)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.rms_norm1(x)
        
        # Reshape to 3D for CircularPad3d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, 10, length, 1, 1)
        x = self.circular_pad(x)
        
        # Reshape back to 1D for ConvTranspose1d
        x = x.squeeze(-1).squeeze(-1)  # Shape: (batch_size, 10, length + 2)
        
        x = self.conv_transpose2(x)
        x = self.rms_norm2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
