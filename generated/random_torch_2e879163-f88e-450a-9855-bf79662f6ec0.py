
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'Tanhshrink', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ReflectionPad1d(2)
        self.pool1 = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.tanhshrink1 = nn.Tanhshrink()
        self.pad2 = nn.ReflectionPad1d(1)
        self.pool2 = nn.AdaptiveMaxPool3d((3, 3, 3))
        self.tanhshrink2 = nn.Tanhshrink()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        # First, pad the input along the depth dimension
        x = self.pad1(x)
        # Apply adaptive max pooling to reduce spatial dimensions
        x = self.pool1(x)
        # Apply Tanhshrink activation
        x = self.tanhshrink1(x)
        # Pad the input again
        x = self.pad2(x)
        # Apply another adaptive max pooling
        x = self.pool2(x)
        # Apply Tanhshrink activation again
        x = self.tanhshrink2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    # Assuming input is of shape (batch_size, channels, depth, height, width)
    x = torch.randn(1, 3, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
