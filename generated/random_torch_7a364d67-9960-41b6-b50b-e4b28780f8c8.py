
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'Softsign', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.softsign = nn.Softsign()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming x is a batch of tensors, we split it into two tensors for PairwiseDistance
        x1, x2 = x.chunk(2, dim=1)
        x1 = x1.view(x1.size(0), -1)  # Flatten x1
        x2 = x2.view(x2.size(0), -1)  # Flatten x2
        
        # Apply PairwiseDistance
        x = self.pairwise_distance(x1, x2)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply PoissonNLLLoss (assuming target is a tensor of ones for simplicity)
        target = torch.ones_like(x)
        x = self.poisson_nll_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 2, 64, 64).cuda()  # Input shape adjusted for PairwiseDistance
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

