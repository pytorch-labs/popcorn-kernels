
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'CircularPad2d', 'Dropout', 'InstanceNorm1d', 'RReLU', 'CircularPad1d', 'ConvTranspose1d', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.circular_pad2d = nn.CircularPad2d(2)
        self.dropout = nn.Dropout(p=0.5)
        self.instance_norm1d = nn.InstanceNorm1d(10)
        self.rrelu = nn.RReLU()
        self.circular_pad1d = nn.CircularPad1d(1)
        self.conv_transpose1d = nn.ConvTranspose1d(10, 20, kernel_size=3, stride=2, padding=1)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.conv_transpose3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for CircularPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.circular_pad2d(x)
        
        # Reshape back to 5D for Dropout
        x = x.view(x.size(0), x.size(1), -1, x.size(2), x.size(3))
        x = self.dropout(x)
        
        # Reshape to 3D (batch, channels, length) for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.instance_norm1d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape to 3D (batch, channels, length) for CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

