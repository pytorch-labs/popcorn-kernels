
# This is a random torch model generated by the following modules: ['GRU', 'ReplicationPad1d', 'ELU', 'TripletMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.pad = nn.ReplicationPad1d(padding=2)
        self.elu = nn.ELU(alpha=1.0)
        self.loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Pass through the first GRU
        x, _ = self.gru1(x)  # Output shape: (batch_size, seq_len, hidden_size=256)
        
        # Apply ReplicationPad1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size=256, seq_len)
        x = self.pad(x)  # Shape: (batch_size, hidden_size=256, seq_len + 4)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, seq_len + 4, hidden_size=256)
        
        # Pass through the second GRU
        x, _ = self.gru2(x)  # Output shape: (batch_size, seq_len + 4, hidden_size=128)
        
        # Apply ELU activation
        x = self.elu(x)  # Shape: (batch_size, seq_len + 4, hidden_size=128)
        
        # Compute TripletMarginLoss (dummy anchors and positives for demonstration)
        anchor = x[:, 0, :]  # Shape: (batch_size, hidden_size=128)
        positive = x[:, 1, :]  # Shape: (batch_size, hidden_size=128)
        negative = x[:, 2, :]  # Shape: (batch_size, hidden_size=128)
        
        loss = self.loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Shape: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

