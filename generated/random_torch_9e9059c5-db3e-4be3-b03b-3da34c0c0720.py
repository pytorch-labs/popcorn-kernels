
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'Unflatten', 'LazyConvTranspose1d', 'AvgPool1d', 'BatchNorm1d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose_3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(16, 8, 8, 8))
        self.conv_transpose_1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.avg_pool_1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.batch_norm_1d = nn.BatchNorm1d(32)
        
        # Using ModuleList to repeat some layers
        self.module_list = nn.ModuleList([
            nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2),
            nn.AvgPool1d(kernel_size=2, stride=2),
            nn.BatchNorm1d(32)
        ])

    def forward(self, x):
        # Apply LazyConvTranspose3d
        x = self.conv_transpose_3d(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        # Apply LazyConvTranspose1d
        x = self.conv_transpose_1d(x)
        
        # Apply AvgPool1d
        x = self.avg_pool_1d(x)
        
        # Apply BatchNorm1d
        x = self.batch_norm_1d(x)
        
        # Apply layers from ModuleList
        for layer in self.module_list:
            x = layer(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
