
# This is a random torch model generated by the following modules: ['TransformerDecoderLayer', 'ParameterList', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=512, nhead=8)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(512, 512)) for _ in range(3)])
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, feature_dim)
        batch_size, sequence_length, feature_dim = x.shape
        
        # Reshape x to fit the TransformerDecoderLayer input shape
        x = x.permute(1, 0, 2)  # (sequence_length, batch_size, feature_dim)
        
        # Pass through TransformerDecoderLayer
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape back to (batch_size, sequence_length, feature_dim)
        x = x.permute(1, 0, 2)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = torch.matmul(x, param)
        
        # Reshape to fit AdaptiveAvgPool3d input shape
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length, feature_dim)
        x = x.unsqueeze(1)  # (batch_size, 1, 1, sequence_length, feature_dim)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten the output
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 512).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

