
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'LayerNorm', 'Dropout3d', 'ConvTranspose1d', 'UpsamplingNearest2d', 'ReLU', 'GRU', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.layer_norm = nn.LayerNorm([8, 8, 8])
        self.dropout3d = nn.Dropout3d(0.5)
        self.conv_transpose1d = nn.ConvTranspose1d(8, 16, kernel_size=3, stride=2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.relu = nn.ReLU()
        self.gru = nn.GRU(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.module_list = nn.ModuleList([
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.Conv2d(64, 128, kernel_size=3, padding=1)
        ])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_max_pool3d(x)  # Shape: (batch_size, channels, 8, 8, 8)
        x = self.layer_norm(x)  # Shape: (batch_size, channels, 8, 8, 8)
        x = self.dropout3d(x)  # Shape: (batch_size, channels, 8, 8, 8)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 8*8*8)
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 16, new_length)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(x.size(0), x.size(1), 8, 8)  # Shape: (batch_size, 16, 8, 8)
        x = self.upsampling_nearest2d(x)  # Shape: (batch_size, 16, 16, 16)
        x = self.relu(x)  # Shape: (batch_size, 16, 16, 16)
        
        # Reshape for GRU
        x = x.view(x.size(0), x.size(1), -1).permute(0, 2, 1)  # Shape: (batch_size, 16*16, 16)
        x, _ = self.gru(x)  # Shape: (batch_size, 16*16, 32)
        
        # Reshape for ModuleList
        x = x.permute(0, 2, 1).view(x.size(0), 32, 16, 16)  # Shape: (batch_size, 32, 16, 16)
        for layer in self.module_list:
            x = layer(x)  # Shape: (batch_size, 128, 16, 16)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
