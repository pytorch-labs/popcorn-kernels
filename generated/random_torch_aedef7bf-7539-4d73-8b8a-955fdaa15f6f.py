
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'TripletMarginLoss', 'PixelShuffle', 'Bilinear', 'Dropout1d', 'AlphaDropout', 'Softplus', 'Fold', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.bilinear = nn.Bilinear(10, 10, 20)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.softplus = nn.Softplus()
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=(2, 2))
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for Bilinear
        x = x.view(-1, 10, 10)
        x = self.bilinear(x, x)
        
        # Apply Dropout1d
        x = x.unsqueeze(1)
        x = self.dropout1d(x)
        x = x.squeeze(1)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for Fold
        x = x.view(-1, 16, 14, 14)
        x = self.fold(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.unsqueeze(1)
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape for TripletMarginLoss
        x = x.view(-1, 16, 28, 28)
        anchor = x[:, :8, :, :]
        positive = x[:, 8:, :, :]
        negative = torch.flip(anchor, [1])
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
