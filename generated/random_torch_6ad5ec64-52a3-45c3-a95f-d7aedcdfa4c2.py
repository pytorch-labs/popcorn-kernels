
# This is a random torch model generated by the following modules: ['Conv1d', 'UpsamplingBilinear2d', 'NLLLoss', 'ConstantPad2d', 'Tanh', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.pad = nn.ConstantPad2d(2, 3.14)
        self.tanh = nn.Tanh()
        self.dropout = nn.AlphaDropout(p=0.5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 10, length - 4)
        
        # Reshape to 2D for UpsamplingBilinear2d
        x = x.unsqueeze(-1)  # Shape: (batch_size, 10, length - 4, 1)
        x = self.upsample(x)  # Shape: (batch_size, 10, 2*(length - 4), 2)
        
        # Apply padding
        x = self.pad(x)  # Shape: (batch_size, 10, 2*(length - 4) + 4, 2 + 4)
        
        # Apply Tanh activation
        x = self.tanh(x)  # Shape remains the same
        
        # Apply AlphaDropout
        x = self.dropout(x)  # Shape remains the same
        
        # Reshape back to 1D for Conv1d
        x = x.squeeze(-1)  # Shape: (batch_size, 10, 2*(length - 4) + 4)
        
        # Apply second Conv1d
        x = self.conv2(x)  # Shape: (batch_size, 20, 2*(length - 4) + 4 - 4)
        
        # Apply log_softmax for NLLLoss
        x = F.log_softmax(x, dim=1)  # Shape remains the same
        
        # Assuming target is provided externally for NLLLoss
        # For demonstration, we'll return the output directly
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

