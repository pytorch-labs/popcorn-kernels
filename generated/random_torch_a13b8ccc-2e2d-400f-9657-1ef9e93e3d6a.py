
# This is a random torch model generated by the following modules: ['CELU', 'Linear', 'SyncBatchNorm', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.sync_bn1 = nn.SyncBatchNorm(256)
        self.celu1 = nn.CELU()
        self.linear2 = nn.Linear(256, 128)
        self.hardswish1 = nn.Hardswish()
        self.linear3 = nn.Linear(128, 64)
        self.sync_bn2 = nn.SyncBatchNorm(64)
        self.celu2 = nn.CELU()
        self.linear4 = nn.Linear(64, 32)
        self.hardswish2 = nn.Hardswish()
        self.linear5 = nn.Linear(32, 10)

    def forward(self, x):
        # Flatten the input to accommodate any arbitrary shape
        x = x.view(x.size(0), -1)
        
        # Apply the first set of layers
        x = self.linear1(x)
        x = self.sync_bn1(x)
        x = self.celu1(x)
        
        # Apply the second set of layers
        x = self.linear2(x)
        x = self.hardswish1(x)
        
        # Apply the third set of layers
        x = self.linear3(x)
        x = self.sync_bn2(x)
        x = self.celu2(x)
        
        # Apply the fourth set of layers
        x = self.linear4(x)
        x = self.hardswish2(x)
        
        # Final layer to produce the output
        x = self.linear5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Example input shape, can be adjusted
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

