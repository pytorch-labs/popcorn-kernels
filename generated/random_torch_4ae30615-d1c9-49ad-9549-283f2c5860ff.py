
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'Hardsigmoid', 'LazyConvTranspose3d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.hardsigmoid = nn.Hardsigmoid()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2)
        self.gelu = nn.GELU()

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        # Reshape to 3D tensor for ConvTranspose3d
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = x.unsqueeze(1)  # Add a dummy depth dimension
        
        # Apply first ConvTranspose3d
        x = self.conv_transpose1(x)
        x = self.gelu(x)
        
        # Apply second ConvTranspose3d
        x = self.conv_transpose2(x)
        x = self.gelu(x)
        
        # Reshape back to 2D tensor
        x = x.squeeze(1)  # Remove the depth dimension
        x = x.squeeze(1)  # Remove the dummy channel dimension
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

