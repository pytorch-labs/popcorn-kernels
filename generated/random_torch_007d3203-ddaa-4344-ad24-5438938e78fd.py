
# This is a random torch model generated by the following modules: ['Mish', 'ConstantPad2d', 'LazyConv1d', 'LogSigmoid', 'LazyBatchNorm1d', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(1, 0.5)
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm1d()
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.LazyBatchNorm1d()
        self.conv3 = nn.LazyConv1d(out_channels=128, kernel_size=3)
        self.bn3 = nn.LazyBatchNorm1d()
        self.conv4 = nn.LazyConv1d(out_channels=256, kernel_size=3)
        self.bn4 = nn.LazyBatchNorm1d()
        self.conv5 = nn.LazyConv1d(out_channels=512, kernel_size=3)
        self.bn5 = nn.LazyBatchNorm1d()

    def forward(self, x):
        x = self.pad(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, sequence_length)
        
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.mish(x)
        
        x = self.conv2(x)
        x = self.bn2(x)
        x = F.hardswish(x)
        
        x = self.conv3(x)
        x = self.bn3(x)
        x = F.mish(x)
        
        x = self.conv4(x)
        x = self.bn4(x)
        x = F.hardswish(x)
        
        x = self.conv5(x)
        x = self.bn5(x)
        x = F.logsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
