
# This is a random torch model generated by the following modules: ['LeakyReLU', 'ReplicationPad2d', 'Softplus', 'MaxPool1d', 'KLDivLoss', 'ZeroPad1d', 'PReLU', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.replication_pad2d = nn.ReplicationPad2d(padding=1)
        self.softplus = nn.Softplus()
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')
        self.zero_pad1d = nn.ZeroPad1d(padding=1)
        self.prelu = nn.PReLU(num_parameters=1)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        # Apply MaxPool1d
        x = self.max_pool1d(x)
        
        # Reshape back to original spatial dimensions
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply ZeroPad1d (after reshaping to 1D)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.zero_pad1d(x)
        
        # Reshape back to original spatial dimensions
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Compute KLDivLoss (dummy target for demonstration)
        target = torch.rand_like(x)
        loss = self.kl_div_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

