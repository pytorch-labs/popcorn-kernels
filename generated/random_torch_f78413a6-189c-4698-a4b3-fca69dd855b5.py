
# This is a random torch model generated by the following modules: ['CELU', 'ConstantPad3d', 'Mish', 'LazyInstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad3d(padding=1, value=0.5)
        self.norm1 = nn.LazyInstanceNorm2d()
        self.celu1 = nn.CELU(alpha=1.0)
        self.mish1 = nn.Mish()
        self.pad2 = nn.ConstantPad3d(padding=2, value=0.25)
        self.norm2 = nn.LazyInstanceNorm2d()
        self.celu2 = nn.CELU(alpha=0.5)
        self.mish2 = nn.Mish()

    def forward(self, x):
        x = self.pad1(x)
        x = self.norm1(x)
        x = self.celu1(x)
        x = self.mish1(x)
        x = self.pad2(x)
        x = self.norm2(x)
        x = self.celu2(x)
        x = self.mish2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for 3D data
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
