
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'AdaptiveMaxPool2d', 'Identity', 'CosineSimilarity', 'InstanceNorm1d', 'TripletMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((10, 10))
        self.identity = nn.Identity()
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.instance_norm1d = nn.InstanceNorm1d(10)
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Reshape input to fit ConvTranspose1d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, sequence_length)
        x = self.conv_transpose1d(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.unsqueeze(1)  # Add a dummy dimension to make it 4D
        x = self.adaptive_max_pool2d(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, sequence_length)
        x = self.instance_norm1d(x)
        
        # Reshape for CosineSimilarity
        x1 = x[:, :, :x.size(2)//2]  # Split the tensor into two halves
        x2 = x[:, :, x.size(2)//2:]
        x = self.cosine_similarity(x1, x2)
        
        # TripletMarginLoss requires three inputs: anchor, positive, negative
        anchor = x
        positive = torch.rand_like(anchor)
        negative = torch.rand_like(anchor)
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

