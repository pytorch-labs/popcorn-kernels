
# This is a random torch model generated by the following modules: ['Softmin', 'RNN', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.rnn2 = nn.RNN(input_size=20, hidden_size=10, num_layers=1, batch_first=True)
        self.softmin = nn.Softmin(dim=1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # If not, reshape it accordingly
        batch_size = x.size(0)
        sequence_length = x.size(1)
        input_size = x.size(2)
        
        # Reshape input to fit RNN input requirements
        x = x.view(batch_size, sequence_length, input_size)
        
        # Pass through first RNN
        x, _ = self.rnn1(x)
        
        # Apply Softmin to the output of the first RNN
        x = self.softmin(x)
        
        # Pass through second RNN
        x, _ = self.rnn2(x)
        
        # Apply Sigmoid to the output of the second RNN
        x = self.sigmoid(x)
        
        # Reshape output to match input shape
        x = x.view(batch_size, sequence_length, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 5, 10).cuda()  # Example input: (batch_size=1, sequence_length=5, input_size=10)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

