
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'PixelUnshuffle', 'RNNCell', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm1 = nn.InstanceNorm2d(3)
        self.pixel_unshuffle1 = nn.PixelUnshuffle(2)
        self.rnn_cell1 = nn.RNNCell(48, 64)
        self.relu1 = nn.ReLU()
        self.instance_norm2 = nn.InstanceNorm2d(12)
        self.pixel_unshuffle2 = nn.PixelUnshuffle(2)
        self.rnn_cell2 = nn.RNNCell(192, 128)
        self.relu2 = nn.ReLU()
        self.instance_norm3 = nn.InstanceNorm2d(48)
        self.pixel_unshuffle3 = nn.PixelUnshuffle(2)
        self.rnn_cell3 = nn.RNNCell(768, 256)
        self.relu3 = nn.ReLU()

    def forward(self, x):
        # Apply InstanceNorm2d
        x = self.instance_norm1(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle1(x)
        
        # Reshape for RNNCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 64).to(x.device)
        x = self.rnn_cell1(x, hx)
        
        # Apply ReLU
        x = self.relu1(x)
        
        # Reshape back to 4D tensor
        x = x.view(batch_size, 12, height // 2, width // 2)
        
        # Apply InstanceNorm2d
        x = self.instance_norm2(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle2(x)
        
        # Reshape for RNNCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 128).to(x.device)
        x = self.rnn_cell2(x, hx)
        
        # Apply ReLU
        x = self.relu2(x)
        
        # Reshape back to 4D tensor
        x = x.view(batch_size, 48, height // 2, width // 2)
        
        # Apply InstanceNorm2d
        x = self.instance_norm3(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle3(x)
        
        # Reshape for RNNCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 256).to(x.device)
        x = self.rnn_cell3(x, hx)
        
        # Apply ReLU
        x = self.relu3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

