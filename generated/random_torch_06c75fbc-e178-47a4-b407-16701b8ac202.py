
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'AdaptiveLogSoftmaxWithLoss', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad3d(1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=10, n_classes=5, cutoffs=[2, 4])
        self.multi_label_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply circular padding
        x = self.circular_pad(x)
        
        # Reshape the input to fit the AdaptiveLogSoftmaxWithLoss module
        x = x.view(-1, 10)  # Assuming the input can be reshaped to (batch_size * seq_len, 10)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output, _ = self.adaptive_log_softmax(x, torch.randint(0, 5, (x.size(0),)))
        
        # Apply MultiLabelSoftMarginLoss
        target = torch.randint(0, 2, (x.size(0), 5)).float()  # Random target for demonstration
        loss = self.multi_label_loss(output, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 5, 5).cuda()  # Arbitrary shape for demonstration
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

