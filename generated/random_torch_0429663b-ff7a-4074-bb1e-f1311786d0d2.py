
# This is a random torch model generated by the following modules: ['LazyConv1d', 'LazyLinear', 'GRUCell', 'Embedding', 'PixelUnshuffle', 'BCEWithLogitsLoss', 'Unfold', 'CrossEntropyLoss', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming vocab size of 1000
        self.conv1d = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=128)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=1)
        self.fractional_maxpool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.fc1 = nn.LazyLinear(out_features=256)
        self.fc2 = nn.LazyLinear(out_features=10)
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.ce_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming x is a tensor of arbitrary shape
        if x.dim() == 4:  # If input is 4D (e.g., image), convert to 2D for embedding
            x = x.view(-1, x.size(-1))  # Flatten to (batch_size * height * width, channels)
        
        x = self.embedding(x.long())  # Convert to long for embedding
        x = x.permute(0, 2, 1)  # Permute for Conv1d: (batch_size, channels, sequence_length)
        x = F.relu(self.conv1d(x))
        x = x.permute(0, 2, 1)  # Permute back for GRUCell: (batch_size, sequence_length, channels)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 128).to(x.device)  # Initialize hidden state
        for i in range(x.size(1)):
            hx = self.gru_cell(x[:, i, :], hx)
        x = hx
        
        # Reshape for PixelUnshuffle
        x = x.view(x.size(0), 1, 16, 8)  # Reshape to (batch_size, 1, 16, 8)
        x = self.pixel_unshuffle(x)
        
        # Apply Unfold
        x = self.unfold(x)
        x = x.view(x.size(0), -1, 14, 14)  # Reshape back to 4D
        
        # Apply FractionalMaxPool2d
        x = self.fractional_maxpool(x)
        
        # Flatten for Linear layers
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        
        # Compute losses (dummy targets for illustration)
        bce_target = torch.randint(0, 2, (x.size(0), 10)).float().to(x.device)
        ce_target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        bce_loss = self.bce_loss(x, bce_target)
        ce_loss = self.ce_loss(x, ce_target)
        
        return x, bce_loss, ce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
