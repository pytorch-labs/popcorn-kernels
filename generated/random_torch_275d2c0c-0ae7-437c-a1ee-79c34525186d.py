
# This is a random torch model generated by the following modules: ['MaxUnpool1d', 'ModuleDict', 'Dropout2d', 'Softmax', 'ConvTranspose2d', 'CircularPad2d', 'ReflectionPad2d', 'Dropout3d', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.circular_pad = nn.CircularPad2d(2)
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.softmax = nn.Softmax(dim=1)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.module_dict = nn.ModuleDict({
            'conv_transpose3': nn.ConvTranspose2d(20, 30, kernel_size=5),
            'dropout2d_2': nn.Dropout2d(p=0.5)
        })
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.dropout2d(x)
        x = self.circular_pad(x)
        x = self.reflection_pad(x)
        x = self.conv_transpose2(x)
        x = self.dropout3d(x)
        x = self.softmax(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x, _ = self.max_unpool1d(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(2))  # Reshape back to 4D
        
        x = self.module_dict['conv_transpose3'](x)
        x = self.module_dict['dropout2d_2'](x)
        
        # Assuming the target is provided externally for NLLLoss2d
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3)))
        loss = self.nll_loss2d(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

