
# This is a random torch model generated by the following modules: ['MaxPool2d', 'ReLU', 'LogSoftmax', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(32 * 16 * 16, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool(x)  # Applies MaxPool2d
        x = F.relu(self.conv2(x))
        x = self.pool(x)  # Applies MaxPool2d
        x = x.view(x.size(0), -1)  # Reshape for fully connected layer
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64)  # Example input for an image with 3 channels (RGB)
    return [x]
