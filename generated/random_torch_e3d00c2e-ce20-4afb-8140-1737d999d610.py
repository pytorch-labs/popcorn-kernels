
# This is a random torch model generated by the following modules: ['LPPool1d', 'Conv2d', 'Dropout1d', 'CircularPad3d', 'ReplicationPad1d', 'LSTM', 'AlphaDropout', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.circular_pad3d = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.prelu = nn.PReLU()

    def forward(self, x):
        # Apply Conv2d
        x = self.conv1(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.lp_pool1d(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Reshape for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Reshape to (batch_size, channels, height, 1, 1)
        x = self.circular_pad3d(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.replication_pad1d(x)
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, seq_len, features)
        x, _ = self.lstm(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
