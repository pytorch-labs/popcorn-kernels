
# This is a random torch model generated by the following modules: ['Softsign', 'RNNCellBase', 'Container', 'NLLLoss2d', 'RMSNorm', 'RReLU', 'LazyInstanceNorm2d', 'Threshold', 'Conv3d', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.rnn_cell = nn.RNNCellBase(input_size=64, hidden_size=128)
        self.container = nn.Sequential(
            nn.Conv3d(1, 10, kernel_size=3),
            nn.RReLU(),
            nn.LazyInstanceNorm2d(),
            nn.Threshold(0.1, 0.5)
        )
        self.rms_norm = RMSNorm(128)
        self.circular_pad = nn.CircularPad2d(1)
        self.conv3d = nn.Conv3d(10, 20, kernel_size=3)
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Reshape for RNNCellBase
        batch_size = x.size(0)
        x = x.view(batch_size, -1, 64)
        hx = torch.zeros(batch_size, 128).to(x.device)
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        x = hx
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Reshape for Conv3d
        x = x.view(batch_size, 1, 10, 10, 10)
        
        # Apply Container (Conv3d, RReLU, LazyInstanceNorm2d, Threshold)
        x = self.container(x)
        
        # Apply CircularPad2d
        x = x.permute(0, 2, 1, 3, 4)  # Swap dimensions for 2D padding
        x = self.circular_pad(x)
        x = x.permute(0, 2, 1, 3, 4)  # Swap back
        
        # Apply Conv3d
        x = self.conv3d(x)
        
        # Reshape for NLLLoss2d
        x = x.view(batch_size, 20, -1)
        x = x.permute(0, 2, 1)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # For demonstration, we'll just return the output without loss calculation
        return x

class RMSNorm(nn.Module):
    def __init__(self, dim, eps=1e-8):
        super().__init__()
        self.scale = dim ** -0.5
        self.eps = eps
        self.g = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, dim=-1, keepdim=True) * self.scale
        return x / norm.clamp(min=self.eps) * self.g

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
