
# This is a random torch model generated by the following modules: ['Container', 'FractionalMaxPool2d', 'SiLU', 'LazyConv3d', 'UpsamplingBilinear2d', 'Softplus', 'AdaptiveAvgPool3d', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.LazyConv3d(out_channels=16, kernel_size=3),
            nn.SiLU(),
            nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14)),
            nn.UpsamplingBilinear2d(scale_factor=2),
            nn.Softplus(),
            nn.AdaptiveAvgPool3d(output_size=(8, 8, 8)),
            nn.Tanh()
        )
        self.fc = nn.Linear(8 * 8 * 8 * 16, 10)  # Assuming 10 output classes

    def forward(self, x):
        # Ensure the input is 5D (batch, channels, depth, height, width) for LazyConv3d
        if x.dim() == 4:
            x = x.unsqueeze(2)  # Add a depth dimension
        x = self.container(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
