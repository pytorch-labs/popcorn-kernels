
# This is a random torch model generated by the following modules: ['ReLU', 'ConvTranspose2d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose2d_1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2, padding=2)
        self.conv_transpose2d_2 = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2, padding=2)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=30, kernel_size=3, stride=1, padding=1)
        self.relu = nn.ReLU()

    def forward(self, x):
        # Apply ConvTranspose2d layers with ReLU activations
        x = self.relu(self.conv_transpose2d_1(x))
        x = self.relu(self.conv_transpose2d_2(x))
        
        # Reshape the tensor to fit the input shape of LazyConvTranspose1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten the spatial dimensions
        
        # Apply LazyConvTranspose1d with ReLU activation
        x = self.relu(self.lazy_conv_transpose1d(x))
        
        # Reshape back to a 4D tensor (batch_size, channels, height, width)
        x = x.view(batch_size, -1, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

