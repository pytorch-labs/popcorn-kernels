
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'MaxPool2d', 'ConstantPad3d', 'Softplus', 'LazyInstanceNorm1d', 'PixelUnshuffle', 'MaxUnpool2d', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.softplus = nn.Softplus()
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming x is a 1D tensor for EmbeddingBag
        if x.dim() == 1:
            x = self.embedding_bag(x)
        
        # Reshape to 4D tensor for MaxPool2d
        x = x.view(-1, 1, 8, 8)
        x = self.max_pool2d(x)
        
        # Reshape to 5D tensor for ConstantPad3d
        x = x.unsqueeze(0)
        x = self.constant_pad3d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape to 3D tensor for LazyInstanceNorm1d
        x = x.view(-1, 8, 8)
        x = self.lazy_instance_norm1d(x)
        
        # Reshape to 4D tensor for PixelUnshuffle
        x = x.view(-1, 1, 8, 8)
        x = self.pixel_unshuffle(x)
        
        # Reshape to 4D tensor for MaxUnpool2d
        x = x.view(-1, 1, 16, 16)
        x = self.max_unpool2d(x)
        
        # Reshape to 2D tensor for LogSoftmax
        x = x.view(-1, 256)
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

