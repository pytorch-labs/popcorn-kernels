
# This is a random torch model generated by the following modules: ['LazyConv1d', 'ReplicationPad3d', 'FractionalMaxPool3d', 'Softmin', 'EmbeddingBag', 'HuberLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.pad1 = nn.ReplicationPad3d(padding=1)
        self.pool1 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.softmin = nn.Softmin(dim=1)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=100, embedding_dim=32, mode='mean')
        self.loss = nn.HuberLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 32, length - 2)
        
        # Reshape and pad for 3D operations
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 32, 1, 1, length - 2)
        x = self.pad1(x)  # Shape: (batch_size, 32, 3, 3, length)
        
        # Apply 3D pooling
        x = self.pool1(x)  # Shape: (batch_size, 32, 10, 10, 10)
        
        # Flatten for embedding bag
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 32 * 10 * 10 * 10)
        
        # Apply softmin
        x = self.softmin(x)  # Shape: (batch_size, 32 * 10 * 10 * 10)
        
        # Convert to indices for embedding bag
        indices = torch.argmax(x, dim=1).unsqueeze(0)  # Shape: (1, batch_size)
        x = self.embedding_bag(indices)  # Shape: (batch_size, 32)
        
        # Compute loss (dummy target for demonstration)
        target = torch.zeros_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape: (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

