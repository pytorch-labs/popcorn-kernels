
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'GRU', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.gru1 = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.conv_transpose3d1 = nn.ConvTranspose3d(256, 128, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d2 = nn.ConvTranspose3d(128, 64, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d3 = nn.ConvTranspose3d(64, 32, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        batch_size, channels, depth, height, width = x.shape
        
        # Reshape input to fit GRU (batch_size, sequence_length, input_size)
        x = x.view(batch_size, channels, -1)  # Flatten depth, height, width
        x = x.permute(0, 2, 1)  # Swap dimensions to (batch_size, sequence_length, input_size)
        
        # Pass through GRU layers
        x, _ = self.gru1(x)
        x, _ = self.gru2(x)
        
        # Reshape back to 3D tensor for ConvTranspose3d
        x = x.permute(0, 2, 1)  # Swap dimensions to (batch_size, input_size, sequence_length)
        x = x.view(batch_size, 256, depth, height, width)  # Reshape to (batch_size, 256, depth, height, width)
        
        # Pass through ConvTranspose3d layers
        x = self.conv_transpose3d1(x)
        x = self.conv_transpose3d2(x)
        x = self.conv_transpose3d3(x)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 16, 16, 16).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

