
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'Upsample', 'PixelShuffle', 'Softmin', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReplicationPad2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.softmin = nn.Softmin(dim=1)
        self.bn1 = nn.LazyBatchNorm3d()
        self.bn2 = nn.LazyBatchNorm3d()
        self.bn3 = nn.LazyBatchNorm3d()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.pad(x)  # Apply padding
        x = self.upsample(x)  # Upsample the input
        x = self.pixel_shuffle(x)  # Apply pixel shuffle
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for BatchNorm3d
        x = self.bn1(x)  # Apply BatchNorm3d
        x = self.bn2(x)  # Apply BatchNorm3d again
        x = self.bn3(x)  # Apply BatchNorm3d one more time
        x = x.squeeze(2)  # Remove the added dimension
        x = self.softmin(x)  # Apply Softmin
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

