
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'Mish', 'PReLU', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm1 = nn.InstanceNorm2d(3)
        self.mish1 = nn.Mish()
        self.prelu1 = nn.PReLU()
        self.adaptive_max_pool3d1 = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.instance_norm2 = nn.InstanceNorm2d(5)
        self.mish2 = nn.Mish()
        self.prelu2 = nn.PReLU()
        self.adaptive_max_pool3d2 = nn.AdaptiveMaxPool3d((3, 3, 3))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.instance_norm1(x)
        x = self.mish1(x)
        x = self.prelu1(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AdaptiveMaxPool3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.adaptive_max_pool3d1(x)
        
        # Reshape back to 4D for InstanceNorm2d
        x = x.squeeze(2)
        x = self.instance_norm2(x)
        x = self.mish2(x)
        x = self.prelu2(x)
        
        # Reshape to 5D again for AdaptiveMaxPool3d
        x = x.unsqueeze(2)
        x = self.adaptive_max_pool3d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

