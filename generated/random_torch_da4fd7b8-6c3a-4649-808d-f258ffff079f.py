
# This is a random torch model generated by the following modules: ['MaxPool3d', 'Softmax2d', 'Hardtanh', 'SyncBatchNorm', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.softmax2d = nn.Softmax2d()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.sync_batchnorm = nn.SyncBatchNorm(10)  # Assuming 10 channels after some processing
        self.nllloss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.maxpool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for Softmax2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        x = self.softmax2d(x)
        
        # Reshape back to 5D for Hardtanh
        x = x.view(batch_size, channels, depth, height, width)
        x = self.hardtanh(x)
        
        # Reshape to 4D for SyncBatchNorm
        x = x.view(batch_size, channels * depth, height, width)
        x = self.sync_batchnorm(x)
        
        # Reshape back to 5D for NLLLoss2d
        x = x.view(batch_size, channels, depth, height, width)
        
        # Assuming target is provided externally for NLLLoss2d
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, channels, (batch_size, depth, height, width)).long().cuda()
        loss = self.nllloss2d(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

