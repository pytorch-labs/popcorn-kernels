
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'UpsamplingBilinear2d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.pad1 = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.pad2 = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Apply batch normalization
        x = self.bn1(x)
        
        # Upsample the input
        x = self.upsample1(x)
        
        # Apply circular padding
        x = self.pad1(x)
        
        # Apply batch normalization again
        x = self.bn2(x)
        
        # Upsample the input again
        x = self.upsample2(x)
        
        # Apply circular padding again
        x = self.pad2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

