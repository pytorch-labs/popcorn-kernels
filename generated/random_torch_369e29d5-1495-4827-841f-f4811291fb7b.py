
# This is a random torch model generated by the following modules: ['Softsign', 'ELU', 'RNNCell', 'LazyConvTranspose1d', 'LPPool2d', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.elu = nn.ELU()
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=128)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape for RNNCell
        batch_size = x.size(0)
        x = x.view(batch_size, -1, 64)  # Assuming input is reshaped to (batch_size, seq_len, input_size)
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x[:, 0, :], hx)  # Process first sequence element
        
        # Reshape for LazyConvTranspose1d
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.conv_transpose1d(x)
        
        # Reshape for LPPool2d
        x = x.unsqueeze(1)  # Add height dimension
        x = self.lp_pool2d(x)
        
        # Apply ParameterList (just summing for demonstration)
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1)  # Add each parameter to the output
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

