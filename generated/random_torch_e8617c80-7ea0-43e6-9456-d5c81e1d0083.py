
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'TripletMarginLoss', 'Bilinear', 'Flatten', 'AdaptiveMaxPool1d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.adaptive_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.bilinear = nn.Bilinear(in1_features=32, in2_features=32, out_features=64)
        self.flatten = nn.Flatten()
        self.hardsigmoid = nn.Hardsigmoid()
        self.triplet_loss = nn.TripletMarginLoss(margin=1.0)

    def forward(self, x):
        # Apply LazyConv2d layers
        x = self.conv1(x)
        x = self.conv2(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.adaptive_pool(x)
        
        # Apply Bilinear layer
        x1 = x[:, :16, :]  # Split the tensor for bilinear input
        x2 = x[:, 16:, :]
        x = self.bilinear(x1, x2)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        # Compute TripletMarginLoss (dummy example)
        anchor = x[:1]  # First sample as anchor
        positive = x[1:2]  # Second sample as positive
        negative = x[2:3]  # Third sample as negative
        loss = self.triplet_loss(anchor, positive, negative)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 3, 64, 64).cuda()  # Example input with batch size 10, 3 channels, 64x64 image
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

