
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'Softsign', 'RReLU', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.softsign = nn.Softsign()
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Ensure the input is 5D (batch, channels, depth, height, width)
        if x.dim() == 4:
            x = x.unsqueeze(1)  # Add a channel dimension if necessary
        elif x.dim() == 3:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if necessary
        
        x = self.fractional_max_pool3d(x)
        x = self.softsign(x)
        x = self.rrelu1(x)
        x = self.rrelu2(x)
        x = self.tanhshrink(x)
        
        # Flatten the output for compatibility with any downstream layers
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

