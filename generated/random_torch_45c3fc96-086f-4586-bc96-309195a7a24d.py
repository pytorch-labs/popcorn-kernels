
# This is a random torch model generated by the following modules: ['Upsample', 'LazyLinear', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.Upsample(scale_factor=2, mode='nearest')
        self.reflection_pad1 = nn.ReflectionPad3d(1)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.upsample2 = nn.Upsample(scale_factor=2, mode='nearest')
        self.reflection_pad2 = nn.ReflectionPad3d(1)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.upsample3 = nn.Upsample(scale_factor=2, mode='nearest')
        self.reflection_pad3 = nn.ReflectionPad3d(1)
        self.lazy_linear3 = nn.LazyLinear(32)

    def forward(self, x):
        x = self.upsample1(x)
        x = self.reflection_pad1(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor for linear layer
        x = F.relu(self.lazy_linear1(x))
        x = x.view(x.size(0), 1, -1)  # Reshape back to 3D for upsampling
        x = self.upsample2(x)
        x = self.reflection_pad2(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor for linear layer
        x = F.relu(self.lazy_linear2(x))
        x = x.view(x.size(0), 1, -1)  # Reshape back to 3D for upsampling
        x = self.upsample3(x)
        x = self.reflection_pad3(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor for linear layer
        x = self.lazy_linear3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape for 3D data
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

