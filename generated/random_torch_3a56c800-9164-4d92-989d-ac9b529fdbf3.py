
# This is a random torch model generated by the following modules: ['Bilinear', 'LPPool1d', 'ParameterDict', 'Sigmoid', 'LazyConv1d', 'FractionalMaxPool3d', 'L1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.lppool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(20))
        })
        self.sigmoid = nn.Sigmoid()
        self.lazy_conv1d = nn.LazyConv1d(out_channels=10, kernel_size=3)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, length)
        x = self.lazy_conv1d(x)  # Shape: (batch_size, 10, length - 2)
        x = self.lppool1d(x)  # Shape: (batch_size, 10, (length - 2) // 2)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, 10 * ((length - 2) // 2))
        x = self.bilinear(x, x)  # Shape: (batch_size, 30)
        
        # Apply Sigmoid
        x = self.sigmoid(x)  # Shape: (batch_size, 30)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1).unsqueeze(1)  # Shape: (batch_size, 1, 1, 30)
        x = x.expand(-1, 5, 5, -1)  # Shape: (batch_size, 5, 5, 30)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 5, 5, 30)
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, 1, 5, 5, 5)
        
        # Apply L1Loss (assuming target is zeros)
        target = torch.zeros_like(x)
        loss = self.l1_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
