
# This is a random torch model generated by the following modules: ['LogSoftmax', 'Hardsigmoid', 'AvgPool1d', 'GELU', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.gelu = nn.GELU()
        self.hardsigmoid = nn.Hardsigmoid()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.nll_loss_2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.avg_pool(x)  # Apply AvgPool1d
        x = self.gelu(x)  # Apply GELU
        x = self.hardsigmoid(x)  # Apply Hardsigmoid
        
        # Reshape for LogSoftmax and NLLLoss2d
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.log_softmax(x)  # Apply LogSoftmax
        
        # For NLLLoss2d, we need a target tensor of the same shape as x
        # Here, we assume the target is a dummy tensor for demonstration purposes
        target = torch.randint(0, x.size(1), (x.size(0),)).long().to(x.device)
        loss = self.nll_loss_2d(x, target)  # Apply NLLLoss2d
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

