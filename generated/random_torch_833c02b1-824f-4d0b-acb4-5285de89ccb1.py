
# This is a random torch model generated by the following modules: ['Hardswish', 'Softmax2d', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardswish = nn.Hardswish()
        self.softmax2d = nn.Softmax2d()
        self.logsigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Reshape the input to have at least 2 spatial dimensions for Softmax2d
        if x.dim() == 2:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        elif x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Reshape back to the original shape (excluding the added dimensions)
        if x.dim() == 4:
            x = x.squeeze(1)  # Remove channel dimension if it was added
        elif x.dim() == 2:
            x = x.squeeze(0)  # Remove batch dimension if it was added
        
        # Apply LogSigmoid
        x = self.logsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with batch size 1, 3 channels, 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

