
# This is a random torch model generated by the following modules: ['AvgPool3d', 'Hardsigmoid', 'AdaptiveMaxPool2d', 'LazyBatchNorm1d', 'TransformerDecoder', 'MSELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(16, 16))
        self.batch_norm1d = nn.LazyBatchNorm1d()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=512, nhead=8), num_layers=3
        )
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        
        # Reduce to 4D by averaging over depth
        x = torch.mean(x, dim=2)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool2d(x)
        
        # Flatten to 2D (batch, features)
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Reshape for TransformerDecoder (batch, sequence_length, features)
        x = x.view(x.size(0), -1, 512)
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # Flatten output for MSELoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for MSELoss (same shape as x)
        target = torch.zeros_like(x)
        
        # Compute MSELoss
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 64, 64).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

