
# This is a random torch model generated by the following modules: ['LeakyReLU', 'ReLU6', 'Sigmoid', 'LazyBatchNorm3d', 'AdaptiveAvgPool3d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.bn2 = nn.LazyBatchNorm3d()
        self.bn3 = nn.LazyBatchNorm3d()
        self.pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.leaky_relu = nn.LeakyReLU()
        self.relu6 = nn.ReLU6()
        self.sigmoid = nn.Sigmoid()
        self.celu = nn.CELU()

    def forward(self, x):
        x = self.bn1(x)
        x = self.leaky_relu(x)
        x = self.bn2(x)
        x = self.relu6(x)
        x = self.bn3(x)
        x = self.celu(x)
        x = self.pool(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.sigmoid(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
