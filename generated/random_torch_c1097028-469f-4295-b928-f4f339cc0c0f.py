
# This is a random torch model generated by the following modules: ['HingeEmbeddingLoss', 'Tanhshrink', 'ReplicationPad2d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.tanhshrink = nn.Tanhshrink()
        self.hinge_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Flatten the tensor for HingeEmbeddingLoss
        x = x.view(x.size(0), -1)
        
        # Create a dummy target tensor for HingeEmbeddingLoss
        target = torch.ones(x.size(0), dtype=torch.float32, device=x.device)
        
        # Apply HingeEmbeddingLoss
        loss = self.hinge_loss(x, target)
        
        # Return the loss as the output
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

