
# This is a random torch model generated by the following modules: ['L1Loss', 'AdaptiveLogSoftmaxWithLoss', 'Dropout3d', 'UpsamplingNearest2d', 'Conv1d', 'AdaptiveMaxPool3d', 'HuberLoss', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.l1_loss = nn.L1Loss()
        self.huber_loss = nn.HuberLoss()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=20, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv1d(x)  # Shape: (batch_size, 10, sequence_length - kernel_size + 1)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(2)  # Shape: (batch_size, 10, 1, sequence_length - kernel_size + 1)
        x = self.dropout3d(x)
        x = x.squeeze(2)  # Shape: (batch_size, 10, sequence_length - kernel_size + 1)
        
        # Reshape for UpsamplingNearest2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 10, sequence_length - kernel_size + 1)
        x = self.upsample(x)  # Shape: (batch_size, 1, 20, 2*(sequence_length - kernel_size + 1))
        x = x.squeeze(1)  # Shape: (batch_size, 20, 2*(sequence_length - kernel_size + 1))
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 2*(sequence_length - kernel_size + 1), 20)
        x, _ = self.lstm(x)  # Shape: (batch_size, 2*(sequence_length - kernel_size + 1), 20)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 2*(sequence_length - kernel_size + 1), 20, 1)
        x = self.adaptive_max_pool3d(x)  # Shape: (batch_size, 1, 5, 5, 5)
        x = x.squeeze(1)  # Shape: (batch_size, 5, 5, 5)
        
        # Compute L1 Loss and Huber Loss (assuming target is a tensor of zeros)
        target = torch.zeros_like(x)
        l1_loss = self.l1_loss(x, target)
        huber_loss = self.huber_loss(x, target)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 5*5*5)
        x = x[:, :20]  # Shape: (batch_size, 20)
        output = self.adaptive_log_softmax(x, target[:, 0, 0, 0].long())  # Assuming target is a class index tensor
        
        return output.output, l1_loss, huber_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
