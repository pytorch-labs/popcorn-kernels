
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'AdaptiveAvgPool2d', 'NLLLoss2d', 'AvgPool2d', 'Flatten', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_batchnorm = nn.SyncBatchNorm(64)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((7, 7))
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.flatten = nn.Flatten()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply ZeroPad2d to the input
        x = self.zero_pad2d(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batchnorm(x)
        
        # Apply AvgPool2d
        x = self.avg_pool2d(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # Note: NLLLoss2d is typically used in the loss function, not in the forward pass.
        # For the sake of using the module, we will apply it here, but in practice, this is not common.
        # Assuming a dummy target for demonstration purposes.
        target = torch.randint(0, 10, (x.size(0), 7, 7), device=x.device)
        x = self.nll_loss2d(x.view(-1, 10, 7, 7), target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
