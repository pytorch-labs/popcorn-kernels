
# This is a random torch model generated by the following modules: ['Conv2d', 'MaxPool2d', 'ModuleDict', 'PixelUnshuffle', 'Softplus', 'LSTM', 'GLU', 'BatchNorm1d', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.module_dict = nn.ModuleDict({
            'softplus': nn.Softplus(),
            'glu': nn.GLU(dim=1)
        })
        self.batch_norm1d = nn.BatchNorm1d(256)
        self.lstm = nn.LSTM(input_size=256, hidden_size=128, num_layers=2, batch_first=True)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=128, nhead=8)
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Conv2d and MaxPool2d
        x = self.conv1(x)
        x = self.maxpool1(x)
        
        # PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Conv2d
        x = self.conv2(x)
        
        # Reshape for ModuleDict
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)
        
        # ModuleDict (Softplus and GLU)
        x = self.module_dict['softplus'](x)
        x = x.view(batch_size, channels * 2, -1)
        x = self.module_dict['glu'](x)
        
        # BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Reshape for LSTM
        x = x.view(batch_size, -1, 256)
        
        # LSTM
        x, _ = self.lstm(x)
        
        # TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # (seq_len, batch_size, feature_dim)
        x = self.transformer_encoder_layer(x)
        x = x.permute(1, 0, 2)  # (batch_size, seq_len, feature_dim)
        
        # Global average pooling
        x = x.mean(dim=1)
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
