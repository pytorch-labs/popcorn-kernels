
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'AdaptiveAvgPool2d', 'ParameterDict', 'ZeroPad1d', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.param_dict = nn.ParameterDict({
            'weight': nn.Parameter(torch.randn(10)),
            'bias': nn.Parameter(torch.randn(10))
        })
        self.pad = nn.ZeroPad1d(2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.bn2 = nn.LazyBatchNorm3d()
        self.bn3 = nn.LazyBatchNorm3d()
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.pad2 = nn.ZeroPad1d(1)

    def forward(self, x):
        # Assuming input is 3D, we add a dummy dimension to make it 4D for LazyBatchNorm3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.bn1(x)
        
        # Reshape to 2D for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.avg_pool(x)
        
        # Apply ParameterDict (just for demonstration, not directly used in forward pass)
        weight = self.param_dict['weight']
        bias = self.param_dict['bias']
        
        # Reshape to 1D for ZeroPad1d
        x = x.view(x.size(0), -1)
        x = self.pad(x)
        
        # Reshape back to 2D for UpsamplingBilinear2d
        x = x.view(x.size(0), 1, -1, x.size(-1))
        x = self.upsample(x)
        
        # Apply LazyBatchNorm3d again
        x = x.unsqueeze(1)
        x = self.bn2(x)
        
        # Reshape to 2D for another UpsamplingBilinear2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.upsample2(x)
        
        # Apply LazyBatchNorm3d again
        x = x.unsqueeze(1)
        x = self.bn3(x)
        
        # Reshape to 1D for ZeroPad1d
        x = x.view(x.size(0), -1)
        x = self.pad2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

