
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'Fold', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.fold = nn.Fold(output_size=(16, 16), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Apply AdaptiveAvgPool3d to reduce spatial dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Apply AvgPool3d to further reduce spatial dimensions
        x = self.avg_pool3d(x)
        
        # Reshape the tensor to fit the input requirements of Fold
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width)
        
        # Apply Fold to reconstruct the spatial dimensions
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

