
# This is a random torch model generated by the following modules: ['Container', 'AvgPool2d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.AvgPool2d(kernel_size=2, stride=2),
            nn.Flatten(),
            nn.AvgPool2d(kernel_size=2, stride=2),
            nn.Flatten(),
            nn.AvgPool2d(kernel_size=2, stride=2)
        )

    def forward(self, x):
        # Ensure the input has at least 3 dimensions (batch, height, width)
        if x.dim() == 2:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        elif x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension
        
        # Pass through the container
        x = self.container(x)
        
        # Flatten the output if necessary
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
