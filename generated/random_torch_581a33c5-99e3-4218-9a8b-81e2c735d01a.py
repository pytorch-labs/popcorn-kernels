
# This is a random torch model generated by the following modules: ['Softplus', 'AdaptiveLogSoftmaxWithLoss', 'ConstantPad3d', 'Tanhshrink', 'Bilinear', 'Container', 'Identity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(10, 5, [2, 3])
        self.constant_pad_3d = nn.ConstantPad3d(1, 0.5)
        self.tanhshrink = nn.Tanhshrink()
        self.bilinear = nn.Bilinear(10, 10, 5)
        self.container = nn.Sequential(
            nn.Identity(),
            nn.Identity(),
            nn.Identity()
        )
        self.identity = nn.Identity()

    def forward(self, x):
        # Apply ConstantPad3d to the input
        x = self.constant_pad_3d(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape the input for Bilinear layer
        x = x.view(-1, 10, 10)
        
        # Apply Bilinear layer
        x = self.bilinear(x, x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Pass through the container (which contains Identity layers)
        x = self.container(x)
        
        # Apply Identity layer
        x = self.identity(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(-1, 10)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.randint(0, 5, (x.size(0),)))
        
        return output.log_prob


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
