
# This is a random torch model generated by the following modules: ['NLLLoss', 'LazyBatchNorm2d', 'ReplicationPad1d', 'FractionalMaxPool2d', 'Softsign', 'Softmax2d', 'Hardswish', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.pad1 = nn.ReplicationPad1d(2)
        self.pool1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softsign1 = nn.Softsign()
        self.softmax2d1 = nn.Softmax2d()
        self.hardswish1 = nn.Hardswish()
        self.lrn1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.bn2 = nn.LazyBatchNorm2d()
        self.pad2 = nn.ReplicationPad1d(2)
        self.pool2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.softsign2 = nn.Softsign()
        self.softmax2d2 = nn.Softmax2d()
        self.hardswish2 = nn.Hardswish()
        self.lrn2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.bn1(x)
        x = x.squeeze(2)  # Remove height dimension to apply 1d padding
        x = self.pad1(x)
        x = x.unsqueeze(2)  # Add height dimension back
        x = self.pool1(x)
        x = self.softsign1(x)
        x = self.softmax2d1(x)
        x = self.hardswish1(x)
        x = self.lrn1(x)
        x = self.bn2(x)
        x = x.squeeze(2)  # Remove height dimension to apply 1d padding
        x = self.pad2(x)
        x = x.unsqueeze(2)  # Add height dimension back
        x = self.pool2(x)
        x = self.softsign2(x)
        x = self.softmax2d2(x)
        x = self.hardswish2(x)
        x = self.lrn2(x)
        # Assuming we have a target tensor for NLLLoss
        target = torch.randint(0, x.size(1), (x.size(0),), device=x.device)
        x = x.view(x.size(0), -1)  # Flatten for NLLLoss
        x = F.log_softmax(x, dim=1)  # Apply log_softmax for NLLLoss
        loss = self.loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
