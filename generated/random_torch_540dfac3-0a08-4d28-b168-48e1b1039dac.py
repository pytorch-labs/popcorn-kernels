
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'CrossEntropyLoss', 'AvgPool1d', 'Flatten', 'LogSoftmax', 'ReflectionPad1d', 'RReLU', 'ParameterList', 'ReLU6', 'TransformerDecoder']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(16)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.flatten = nn.Flatten()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.rrelu = nn.RReLU()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])
        self.relu6 = nn.ReLU6()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        
        # Reshape to (batch_size, channels * depth, height * width)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Apply ReflectionPad1d
        x = self.reflection_pad1d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Flatten the tensor
        x = self.flatten(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for TransformerDecoder
        x = x.view(batch_size, -1, 64)  # Assuming d_model=64
        
        # Apply TransformerDecoder
        memory = torch.randn(batch_size, 10, 64)  # Random memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # Flatten again
        x = self.flatten(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

