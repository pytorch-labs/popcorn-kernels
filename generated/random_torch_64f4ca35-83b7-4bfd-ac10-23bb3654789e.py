
# This is a random torch model generated by the following modules: ['Fold', 'Hardtanh', 'Softshrink', 'CircularPad1d', 'ReLU6', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.hardtanh = nn.Hardtanh(min_val=-1, max_val=1)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.circular_pad1d = nn.CircularPad1d(padding=2)
        self.relu6 = nn.ReLU6()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Reshape to fit Fold input requirements
        x = x.view(x.size(0), -1, x.size(2) * x.size(3))
        x = self.fold(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.circular_pad1d(x)
        
        # Reshape back to 4D for ReLU6
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.relu6(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 8, 8).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

