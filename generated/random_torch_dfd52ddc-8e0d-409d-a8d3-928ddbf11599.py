
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'Hardsigmoid', 'AdaptiveAvgPool3d', 'Module', 'BatchNorm1d', 'ZeroPad2d', 'ConstantPad2d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn2d = nn.LazyBatchNorm2d()
        self.hardsigmoid = nn.Hardsigmoid()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.bn1d = nn.BatchNorm1d(128)
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.constant_pad2d = nn.ConstantPad2d(1, 0.5)
        self.param_dict = nn.ParameterDict({
            'weight': nn.Parameter(torch.randn(128, 128)),
            'bias': nn.Parameter(torch.randn(128))
        })

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lazy_bn2d(x)
        x = self.zero_pad2d(x)
        x = self.constant_pad2d(x)
        x = self.hardsigmoid(x)
        
        # Reshape to 5D for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.bn1d(x)
        
        # Apply ParameterDict
        weight = self.param_dict['weight']
        bias = self.param_dict['bias']
        x = F.linear(x, weight, bias)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

