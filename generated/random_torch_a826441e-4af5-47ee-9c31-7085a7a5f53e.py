
# This is a random torch model generated by the following modules: ['GLU', 'LeakyReLU', 'FractionalMaxPool2d', 'ZeroPad3d', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.leaky_relu1 = nn.LeakyReLU(negative_slope=0.1)
        self.fractional_max_pool2d1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.zero_pad3d1 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.glu2 = nn.GLU(dim=1)
        self.leaky_relu2 = nn.LeakyReLU(negative_slope=0.1)
        self.fractional_max_pool2d2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.zero_pad3d2 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.glu1(x)
        x = self.leaky_relu1(x)
        x = self.fractional_max_pool2d1(x)
        
        # Reshape to 5D for ZeroPad3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.zero_pad3d1(x)
        x = x.squeeze(2)  # Remove the depth dimension
        
        x = self.alpha_dropout1(x)
        x = self.glu2(x)
        x = self.leaky_relu2(x)
        x = self.fractional_max_pool2d2(x)
        
        # Reshape to 5D for ZeroPad3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.zero_pad3d2(x)
        x = x.squeeze(2)  # Remove the depth dimension
        
        x = self.alpha_dropout2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

