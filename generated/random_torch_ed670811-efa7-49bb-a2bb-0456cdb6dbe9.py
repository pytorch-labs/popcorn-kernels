
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'SyncBatchNorm', 'Upsample', 'AdaptiveAvgPool1d', 'MultiLabelMarginLoss', 'LazyConvTranspose3d', 'Sigmoid', 'Tanhshrink', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.sync_bn = nn.SyncBatchNorm(128)
        self.upsample = nn.Upsample(scale_factor=2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(64)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2)
        self.sigmoid = nn.Sigmoid()
        self.tanhshrink = nn.Tanhshrink()
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.zero_pad2d(x)  # ZeroPad2d: (batch_size, channels, height+4, width+4)
        x = x.view(x.size(0), -1, x.size(2) * x.size(3))  # Reshape to (batch_size, channels, height*width)
        x = self.bn1(x)  # BatchNorm1d: (batch_size, channels, height*width)
        x = self.sync_bn(x)  # SyncBatchNorm: (batch_size, channels, height*width)
        x = self.upsample(x)  # Upsample: (batch_size, channels, 2*height*width)
        x = self.adaptive_avg_pool(x)  # AdaptiveAvgPool1d: (batch_size, channels, 64)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Reshape to (batch_size, channels, 64, 1, 1)
        x = self.lazy_conv_transpose3d(x)  # LazyConvTranspose3d: (batch_size, 64, 64, 3, 3)
        x = x.squeeze(-1).squeeze(-1)  # Reshape to (batch_size, 64, 64)
        x = self.sigmoid(x)  # Sigmoid: (batch_size, 64, 64)
        x = self.tanhshrink(x)  # Tanhshrink: (batch_size, 64, 64)
        return x

    def compute_loss(self, output, target):
        # MultiLabelMarginLoss requires specific target format
        return self.multi_label_margin_loss(output, target)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

