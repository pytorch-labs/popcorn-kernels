
# This is a random torch model generated by the following modules: ['Tanhshrink', 'ReLU', 'SiLU', 'AdaptiveAvgPool3d', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink = nn.Tanhshrink()
        self.relu = nn.ReLU()
        self.silu = nn.SiLU()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply SiLU
        x = self.silu(x)
        
        # Reshape to 5D tensor for AdaptiveAvgPool3d
        x = x.view(x.size(0), 1, x.size(1), x.size(2), x.size(3))
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape back to 4D tensor for NLLLoss2d
        x = x.view(x.size(0), x.size(2), x.size(3), x.size(4))
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # Note: NLLLoss2d is typically used in the loss function, not in the forward pass.
        # For the sake of this example, we will just return the output before NLLLoss2d.
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

