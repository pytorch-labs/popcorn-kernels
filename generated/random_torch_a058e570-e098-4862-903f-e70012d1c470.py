
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'SELU', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.selu = nn.SELU()
        self.instance_norm3d = nn.InstanceNorm3d(20)
        self.instance_norm2d_2 = nn.InstanceNorm2d(30)
        self.selu_2 = nn.SELU()
        self.instance_norm3d_2 = nn.InstanceNorm3d(40)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.instance_norm2d(x)
        x = self.selu(x)
        
        # Reshape to 5D for InstanceNorm3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.instance_norm3d(x)
        
        # Reshape back to 4D
        x = x.squeeze(2)
        x = self.instance_norm2d_2(x)
        x = self.selu_2(x)
        
        # Reshape to 5D again for the second InstanceNorm3d
        x = x.unsqueeze(2)
        x = self.instance_norm3d_2(x)
        
        # Reshape back to 4D
        x = x.squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

