
# This is a random torch model generated by the following modules: ['Fold', 'AdaptiveLogSoftmaxWithLoss', 'BatchNorm2d', 'AvgPool3d', 'LazyConv1d', 'SiLU', 'PixelUnshuffle', 'AdaptiveMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv1d = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=64)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.silu = nn.SiLU()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(8, 8))
        self.fold = nn.Fold(output_size=(16, 16), kernel_size=2, stride=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=256, n_classes=10)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = x.unsqueeze(1)  # Add a dummy dimension for 3D operations
        x = self.avg_pool3d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Reshape for 1D convolution
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch, channels, length)
        x = self.lazy_conv1d(x)
        
        # Reshape back to 4D for 2D operations
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        x = self.batch_norm2d(x)
        x = self.silu(x)
        x = self.pixel_unshuffle(x)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for Fold operation
        x = x.view(x.size(0), -1, x.size(-1) * x.size(-2))
        x = self.fold(x)
        
        # Flatten for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        x = self.adaptive_log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

