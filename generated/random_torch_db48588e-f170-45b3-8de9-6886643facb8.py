
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'Container', 'MultiMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.container = nn.Sequential(
            nn.Linear(128, 64),
            nn.Linear(64, 32),
            nn.Linear(32, 16)
        )
        self.loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        # Flatten the input to fit the container's input shape
        x = x.view(x.size(0), -1)
        
        # Pass through the container (a sequence of Linear layers)
        x = self.container(x)
        
        # Compute the loss (assuming some target is provided)
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, 16, (x.size(0),), device=x.device)
        loss = self.loss(x, target)
        
        # Return both the output and the loss
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

