
# This is a random torch model generated by the following modules: ['Conv1d', 'Sequential', 'Softshrink', 'TransformerEncoderLayer', 'AdaptiveMaxPool1d', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.sequential = nn.Sequential(
            nn.Conv2d(10, 20, kernel_size=5),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=20, nhead=4)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.conv2d = nn.Conv2d(20, 30, kernel_size=3)

    def forward(self, x):
        # Assuming input is 1D, reshape to 2D for Conv1d
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension
        x = self.conv1d(x)
        
        # Reshape for Conv2d in Sequential
        x = x.unsqueeze(-1)  # Add height dimension
        x = self.sequential(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for TransformerEncoderLayer
        x = x.flatten(2)  # Flatten height and width
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, d_model)
        x = self.transformer_encoder_layer(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.permute(1, 2, 0)  # (batch_size, d_model, seq_len)
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for Conv2d
        x = x.unsqueeze(-1)  # Add height dimension
        x = self.conv2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Arbitrary 1D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

