
# This is a random torch model generated by the following modules: ['Hardtanh', 'LazyConvTranspose1d', 'SyncBatchNorm', 'Mish', 'InstanceNorm3d', 'AvgPool2d', 'CosineEmbeddingLoss', 'Hardsigmoid', 'BatchNorm2d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh()
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.sync_batch_norm = nn.SyncBatchNorm(32)
        self.mish = nn.Mish()
        self.instance_norm3d = nn.InstanceNorm3d(32)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.batch_norm2d = nn.BatchNorm2d(32)
        self.silu = nn.SiLU()
        
        # Repeat some modules up to 5 times
        self.lazy_conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.sync_batch_norm_2 = nn.SyncBatchNorm(64)
        self.mish_2 = nn.Mish()
        self.instance_norm3d_2 = nn.InstanceNorm3d(64)
        self.avg_pool2d_2 = nn.AvgPool2d(kernel_size=2)

    def forward(self, x):
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.size(0), -1, x.size(-1))
        x = self.lazy_conv_transpose1d(x)
        x = self.sync_batch_norm(x)
        x = self.mish(x)
        
        # Reshape for InstanceNorm3d
        x = x.view(x.size(0), 32, 1, x.size(-2), x.size(-1))
        x = self.instance_norm3d(x)
        
        # Reshape for AvgPool2d
        x = x.view(x.size(0), 32, x.size(-2), x.size(-1))
        x = self.avg_pool2d(x)
        x = self.hardsigmoid(x)
        x = self.batch_norm2d(x)
        x = self.silu(x)
        
        # Repeat some modules
        x = x.view(x.size(0), -1, x.size(-1))
        x = self.lazy_conv_transpose1d_2(x)
        x = self.sync_batch_norm_2(x)
        x = self.mish_2(x)
        
        x = x.view(x.size(0), 64, 1, x.size(-2), x.size(-1))
        x = self.instance_norm3d_2(x)
        
        x = x.view(x.size(0), 64, x.size(-2), x.size(-1))
        x = self.avg_pool2d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
