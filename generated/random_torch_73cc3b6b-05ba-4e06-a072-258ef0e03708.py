
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'BatchNorm1d', 'ConvTranspose3d', 'L1Loss', 'FractionalMaxPool3d', 'Tanhshrink', 'HingeEmbeddingLoss', 'ReflectionPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2)
        self.batch_norm1d = nn.BatchNorm1d(10)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.tanhshrink = nn.Tanhshrink()
        self.l1_loss = nn.L1Loss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(1)  # Add a channel dimension for 3D convolution
        x = self.conv_transpose3d(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.batch_norm1d(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape to 2D
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension for 3D pooling
        x = self.fractional_max_pool3d(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Compute L1Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        l1_loss = self.l1_loss(x, dummy_target)
        
        # Compute HingeEmbeddingLoss with a dummy target
        dummy_target = torch.ones_like(x).sign()  # HingeEmbeddingLoss requires targets to be -1 or 1
        hinge_loss = self.hinge_embedding_loss(x, dummy_target)
        
        # Return the sum of losses as the final output
        return l1_loss + hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
