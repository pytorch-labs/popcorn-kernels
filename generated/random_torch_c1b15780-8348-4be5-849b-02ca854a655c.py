
# This is a random torch model generated by the following modules: ['ParameterDict', 'Unflatten', 'CELU', 'Softplus', 'GELU', 'FractionalMaxPool2d', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.params = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.unflatten = nn.Unflatten(1, (2, 5))
        self.celu = nn.CELU()
        self.softplus = nn.Softplus()
        self.gelu = nn.GELU()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply Unflatten to reshape the input
        x = self.unflatten(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape the output to match the expected input shape for PoissonNLLLoss
        x = x.view(x.size(0), -1)
        
        # Apply PoissonNLLLoss (assuming target is the same as input for simplicity)
        loss = self.poisson_nll_loss(x, x)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
