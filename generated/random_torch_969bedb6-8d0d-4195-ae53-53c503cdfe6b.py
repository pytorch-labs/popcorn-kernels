
# This is a random torch model generated by the following modules: ['MaxUnpool1d', 'Softplus', 'AdaptiveMaxPool3d', 'ReflectionPad2d', 'Softsign', 'NLLLoss', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((10, 10, 10))
        self.reflection_pad2d = nn.ReflectionPad2d(2)
        self.softplus = nn.Softplus()
        self.softsign = nn.Softsign()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channel, depth, height, width)
        x = self.conv_transpose3d(x)
        x = self.adaptive_max_pool3d(x)
        
        # Convert to 4D (batch, channel, height, width) for ReflectionPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.reflection_pad2d(x)
        
        # Convert back to 5D for further processing
        x = x.view(x.size(0), x.size(1), 10, x.size(2), x.size(3))
        
        x = self.softplus(x)
        x = self.softsign(x)
        
        # Convert to 3D (batch, channel, length) for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Convert back to 5D for final output
        x = x.view(x.size(0), x.size(1), 10, 10, 10)
        
        # Assuming we have a target for NLLLoss
        target = torch.randint(0, 10, (x.size(0), 10, 10, 10))
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
