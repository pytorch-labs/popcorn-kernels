
# This is a random torch model generated by the following modules: ['TripletMarginLoss', 'FractionalMaxPool2d', 'Upsample', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Generate anchor, positive, and negative samples for TripletMarginLoss
        anchor = x[:, :, :x.size(2)//2, :x.size(3)//2]
        positive = x[:, :, :x.size(2)//2, x.size(3)//2:]
        negative = x[:, :, x.size(2)//2:, :x.size(3)//2]
        
        # Compute TripletMarginLoss
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
