
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'SiLU', 'Softmax', 'NLLLoss2d', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm1 = nn.InstanceNorm1d(10)
        self.instance_norm2 = nn.InstanceNorm1d(20)
        self.silu = nn.SiLU()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.softmax = nn.Softmax(dim=1)
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.instance_norm1(x)
        x = self.silu(x)
        
        # Reshape to 3D for AdaptiveMaxPool3d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, channels, length, 1, 1)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape back to 2D for InstanceNorm1d
        x = x.squeeze(-1).squeeze(-1)  # Shape: (batch_size, channels, length)
        x = self.instance_norm2(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Reshape for NLLLoss2d (assuming 2D input for NLLLoss2d)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, channels, length)
        
        # Dummy target for NLLLoss2d (since NLLLoss2d requires a target)
        target = torch.zeros(x.size(0), x.size(2), x.size(3), dtype=torch.long)
        loss = self.nll_loss2d(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

