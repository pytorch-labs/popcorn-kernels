
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'FractionalMaxPool2d', 'KLDivLoss', 'ModuleDict', 'SyncBatchNorm', 'Module', 'LocalResponseNorm', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.sync_batch_norm = nn.SyncBatchNorm(10)
        self.local_response_norm = nn.LocalResponseNorm(2)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))
        self.module_dict = nn.ModuleDict({
            'conv3d_3': nn.Conv3d(20, 30, kernel_size=3),
            'conv3d_4': nn.Conv3d(30, 40, kernel_size=3)
        })
        self.kldiv_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Apply Conv3d, SyncBatchNorm, and LocalResponseNorm
        x = self.conv3d_1(x)
        x = self.sync_batch_norm(x)
        x = self.local_response_norm(x)
        
        # Apply another Conv3d
        x = self.conv3d_2(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten the last two dimensions
        x = self.fractional_max_pool2d(x)
        
        # Apply ModuleDict
        x = self.module_dict['conv3d_3'](x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1))
        x = self.module_dict['conv3d_4'](x)
        
        # Compute KLDivLoss (assuming a target distribution is provided)
        target = torch.softmax(torch.randn_like(x), dim=1)
        loss = self.kldiv_loss(F.log_softmax(x, dim=1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
