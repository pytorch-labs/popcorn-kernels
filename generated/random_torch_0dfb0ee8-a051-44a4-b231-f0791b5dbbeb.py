
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'Unflatten', 'ChannelShuffle', 'FractionalMaxPool3d', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.unflatten = nn.Unflatten(1, (2, 3))
        self.channel_shuffle = nn.ChannelShuffle(2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Pad the input tensor
        x = self.pad(x)
        
        # Unflatten the tensor
        x = self.unflatten(x)
        
        # Shuffle the channels
        x = self.channel_shuffle(x)
        
        # Reshape the tensor to 5D for FractionalMaxPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape the tensor back to 2D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 6, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
