
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'SiLU', 'RNN', 'FractionalMaxPool3d', 'PixelShuffle', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.silu = nn.SiLU()
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.circular_pad3d = nn.ConstantPad3d(padding=1, value=0)

    def forward(self, x):
        # Apply ConstantPad1d
        x = self.pad1d(x)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 10)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(x.size(0), 1, 20, 5, 5)  # Reshape to (batch_size, channels, depth, height, width)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for PixelShuffle
        x = x.view(x.size(0), 20, 5, 5)  # Reshape to (batch_size, channels, height, width)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for CircularPad3d
        x = x.view(x.size(0), 1, 20, 10, 10)  # Reshape to (batch_size, channels, depth, height, width)
        
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10).cuda()  # Input shape (batch_size, channels, seq_len)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
