
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'Softsign', 'Linear', 'GLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.glu1 = nn.GLU(dim=1)
        self.linear2 = nn.Linear(128, 64)
        self.softsign = nn.Softsign()
        self.linear3 = nn.Linear(64, 32)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.linear4 = nn.Linear(32, 10)

    def forward(self, x):
        # Flatten the input to a 2D tensor
        x = x.view(x.size(0), -1)
        
        # Apply the first linear layer
        x = self.linear1(x)
        
        # Apply GLU
        x = self.glu1(x)
        
        # Apply the second linear layer
        x = self.linear2(x)
        
        # Apply Softsign activation
        x = self.softsign(x)
        
        # Apply the third linear layer
        x = self.linear3(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply the final linear layer
        x = self.linear4(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
