
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'CircularPad2d', 'AvgPool2d', 'LSTM', 'Hardtanh', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.circular_pad = nn.CircularPad2d(2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Reshape for LSTM
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Reshape back to 4D tensor
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply Fold
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

