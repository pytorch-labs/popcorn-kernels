
# This is a random torch model generated by the following modules: ['LeakyReLU', 'LazyConv2d', 'FractionalMaxPool2d', 'Conv1d', 'RNNCellBase', 'PixelUnshuffle', 'Dropout1d', 'AdaptiveAvgPool2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.conv1d = nn.Conv1d(in_channels=32, out_channels=64, kernel_size=3)
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=128)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((7, 7))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10)

    def forward(self, x):
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Reshape for RNNCell
        x = x.permute(2, 0, 1)  # Reshape to (seq_len, batch_size, features)
        hx = torch.zeros(x.size(1), 128).to(x.device)  # Initialize hidden state
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        
        # Reshape for PixelUnshuffle
        x = x.permute(1, 2, 0).unsqueeze(1)  # Reshape to (batch_size, 1, features, seq_len)
        x = self.pixel_unshuffle(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Flatten for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 input size
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
