
# This is a random torch model generated by the following modules: ['MaxPool3d', 'Conv2d', 'Softmax2d', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv2d_1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.maxpool3d_1 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        self.conv2d_2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.softmax2d = nn.Softmax2d()
        self.lazyconv1d_1 = nn.LazyConv1d(out_channels=64, kernel_size=3, stride=1)
        self.lazyconv1d_2 = nn.LazyConv1d(out_channels=128, kernel_size=3, stride=1)
        self.maxpool3d_2 = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv2d_1(x)
        x = F.relu(x)
        
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.maxpool3d_1(x)
        
        # Reshape back to 4D for Conv2d
        x = x.squeeze(2)
        x = self.conv2d_2(x)
        x = F.relu(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Reshape to 3D for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.lazyconv1d_1(x)
        x = F.relu(x)
        x = self.lazyconv1d_2(x)
        x = F.relu(x)
        
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Add depth and height dimensions
        x = self.maxpool3d_2(x)
        
        # Final output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

