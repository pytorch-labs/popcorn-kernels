
# This is a random torch model generated by the following modules: ['SELU', 'Softsign', 'TransformerDecoderLayer', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu = nn.SELU()
        self.softsign = nn.Softsign()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.fc1 = nn.Linear(64, 32)
        self.fc2 = nn.Linear(32, 10)

    def forward(self, x):
        # Apply ReflectionPad1d to the input
        x = self.reflection_pad1d(x)
        
        # Apply SELU activation
        x = self.selu(x)
        
        # Reshape the input to fit the TransformerDecoderLayer
        x = x.view(x.size(0), -1, 64)  # Assuming d_model=64
        
        # Apply TransformerDecoderLayer
        x = self.transformer_decoder_layer(x, x)
        
        # Apply Softsign activation
        x = self.softsign(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        # Apply fully connected layers
        x = self.fc1(x)
        x = self.fc2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Example input shape: (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

