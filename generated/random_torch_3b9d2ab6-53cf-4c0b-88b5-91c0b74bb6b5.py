
# This is a random torch model generated by the following modules: ['Sequential', 'Linear', 'Upsample', 'ReLU', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.Linear(128, 256),
            nn.ReLU(),
            nn.Linear(256, 512),
            nn.ReLU()
        )
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(512, 256)),
            nn.Parameter(torch.randn(256, 128))
        ])
        self.final_linear = nn.Linear(128, 10)

    def forward(self, x):
        # Flatten the input to fit the Linear layers in the Sequential module
        x = x.view(x.size(0), -1)
        x = self.sequential(x)
        
        # Reshape for Upsample
        x = x.view(x.size(0), 512, 1, 1)
        x = self.upsample(x)
        
        # Flatten again for ParameterList
        x = x.view(x.size(0), -1)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = F.relu(x @ param)
        
        # Final Linear layer
        x = self.final_linear(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
