
# This is a random torch model generated by the following modules: ['Tanh', 'ZeroPad1d', 'GRU', 'LPPool3d', 'Module', 'AdaptiveMaxPool2d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.flatten = nn.Flatten()
        self.tanh = nn.Tanh()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.zero_pad1d(x)  # Shape: (batch_size, channels, sequence_length + 4)
        
        # Reshape for GRU: (batch_size, sequence_length + 4, channels)
        x = x.permute(0, 2, 1)
        x, _ = self.gru(x)  # Shape: (batch_size, sequence_length + 4, hidden_size)
        
        # Reshape for LPPool3d: (batch_size, hidden_size, sequence_length + 4, 1, 1)
        x = x.unsqueeze(3).unsqueeze(4)
        x = self.lp_pool3d(x)  # Shape: (batch_size, hidden_size, (sequence_length + 4)/2, 1, 1)
        
        # Reshape for AdaptiveMaxPool2d: (batch_size, hidden_size, (sequence_length + 4)/2, 1)
        x = x.squeeze(4)
        x = self.adaptive_max_pool2d(x)  # Shape: (batch_size, hidden_size, 5, 5)
        
        x = self.flatten(x)  # Shape: (batch_size, hidden_size * 5 * 5)
        x = self.tanh(x)  # Shape: (batch_size, hidden_size * 5 * 5)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape: (batch_size=1, channels=10, sequence_length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

