
# This is a random torch model generated by the following modules: ['Softsign', 'ConstantPad2d', 'TripletMarginLoss', 'FeatureAlphaDropout', 'MaxPool2d', 'AdaptiveMaxPool2d', 'LogSigmoid', 'Container', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3)
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((5, 5))
        self.dropout = nn.FeatureAlphaDropout(p=0.5)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3)
        self.softsign = nn.Softsign()
        self.log_sigmoid = nn.LogSigmoid()
        self.container = nn.Sequential(
            nn.LazyConvTranspose2d(out_channels=128, kernel_size=3),
            nn.Softsign(),
            nn.LazyConvTranspose2d(out_channels=256, kernel_size=3),
            nn.LogSigmoid()
        )
        self.triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        x = self.pad(x)
        x = self.conv_transpose1(x)
        x = self.max_pool(x)
        x = self.adaptive_max_pool(x)
        x = self.dropout(x)
        x = self.conv_transpose2(x)
        x = self.softsign(x)
        x = self.log_sigmoid(x)
        x = self.container(x)
        
        # For TripletMarginLoss, we need three inputs: anchor, positive, and negative
        # Here, we use the same input for simplicity, but in practice, they should be different
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
