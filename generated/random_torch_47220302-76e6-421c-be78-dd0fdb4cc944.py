
# This is a random torch model generated by the following modules: ['Sigmoid', 'LayerNorm', 'SiLU', 'AdaptiveLogSoftmaxWithLoss', 'HuberLoss', 'HingeEmbeddingLoss', 'InstanceNorm1d', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.instance_norm = nn.InstanceNorm1d(num_features=16)
        self.layer_norm = nn.LayerNorm(16)
        self.silu = nn.SiLU()
        self.sigmoid = nn.Sigmoid()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=16, n_classes=10, cutoffs=[2, 4])
        self.huber_loss = nn.HuberLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply LazyConvTranspose3d
        x = self.conv_transpose(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.instance_norm(x)
        
        # Reshape back for LayerNorm
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Reshape back to 5D
        x = self.layer_norm(x)
        
        # Apply SiLU
        x = self.silu(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = x.mean(dim=2)  # Average over spatial dimensions
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Compute HuberLoss (dummy target for demonstration)
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        huber_loss = self.huber_loss(x, target.float())
        
        # Compute HingeEmbeddingLoss (dummy target for demonstration)
        hinge_target = torch.ones(x.size(0)).to(x.device)
        hinge_loss = self.hinge_embedding_loss(x, hinge_target)
        
        # Return the final output and losses
        return x, huber_loss, hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for LazyConvTranspose3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
