
# This is a random torch model generated by the following modules: ['RReLU', 'CTCLoss', 'TripletMarginLoss', 'LazyConvTranspose2d', 'LazyInstanceNorm1d', 'LeakyReLU', 'Conv3d', 'Hardsigmoid', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=20, kernel_size=3)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.leaky_relu = nn.LeakyReLU()
        self.rrelu = nn.RReLU()
        self.hardsigmoid = nn.Hardsigmoid()
        self.ctc_loss = nn.CTCLoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d(x)
        
        # Reshape to 2D for LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape to 1D for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyInstanceNorm1d
        x = self.lazy_instance_norm1d(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for loss functions (dummy targets for demonstration)
        x = x.view(x.size(0), -1)
        target = torch.randint(0, x.size(1), (x.size(0),))
        
        # Apply CTCLoss (dummy input for demonstration)
        input_lengths = torch.full((x.size(0),), x.size(1), dtype=torch.long)
        target_lengths = torch.randint(1, x.size(1), (x.size(0),))
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Apply TripletMarginLoss (dummy input for demonstration)
        anchor = x
        positive = torch.randn_like(anchor)
        negative = torch.randn_like(anchor)
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Apply NLLLoss (dummy input for demonstration)
        log_probs = F.log_softmax(x, dim=1)
        nll_loss = self.nll_loss(log_probs, target)
        
        # Return the losses (for demonstration purposes)
        return ctc_loss, triplet_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

