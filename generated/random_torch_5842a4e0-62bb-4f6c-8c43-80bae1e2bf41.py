
# This is a random torch model generated by the following modules: ['Hardtanh', 'Dropout1d', 'GaussianNLLLoss', 'BatchNorm1d', 'Container', 'EmbeddingBag', 'CrossMapLRN2d', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.batchnorm1d = nn.BatchNorm1d(128)
        self.container = nn.Sequential(
            nn.Linear(128, 256),
            nn.ReLU(),
            nn.Linear(256, 128)
        )
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=128, mode='mean')
        self.crossmaplrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazybatchnorm3d = nn.LazyBatchNorm3d()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming x is a 1D tensor for simplicity
        x = x.view(-1)  # Flatten the input to 1D
        x = self.hardtanh(x)
        x = x.unsqueeze(0).unsqueeze(0)  # Reshape to (1, 1, N) for Dropout1d
        x = self.dropout1d(x)
        x = x.squeeze(0).squeeze(0)  # Reshape back to 1D
        x = x.unsqueeze(0)  # Reshape to (1, N) for BatchNorm1d
        x = self.batchnorm1d(x)
        x = x.squeeze(0)  # Reshape back to 1D
        x = self.container(x)
        x = x.unsqueeze(0)  # Reshape to (1, N) for EmbeddingBag
        x = self.embedding_bag(x.long())  # Convert to long for EmbeddingBag
        x = x.unsqueeze(0).unsqueeze(0)  # Reshape to (1, 1, 1, N) for CrossMapLRN2d
        x = self.crossmaplrn2d(x)
        x = x.unsqueeze(0)  # Reshape to (1, 1, 1, 1, N) for LazyBatchNorm3d
        x = self.lazybatchnorm3d(x)
        x = x.squeeze(0).squeeze(0).squeeze(0).squeeze(0)  # Reshape back to 1D
        # GaussianNLLLoss requires a target and variance, so we'll just return x for now
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

