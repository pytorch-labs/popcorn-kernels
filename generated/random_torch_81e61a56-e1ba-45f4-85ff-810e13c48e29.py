
# This is a random torch model generated by the following modules: ['Transformer', 'AdaptiveMaxPool2d', 'Hardsigmoid', 'AvgPool1d', 'Unflatten', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.hardsigmoid = nn.Hardsigmoid()
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.unflatten = nn.Unflatten(1, (8, 8))
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, d_model)
        x = self.transformer(x, x)  # Apply Transformer
        x = x.unsqueeze(1)  # Add a channel dimension for AdaptiveMaxPool2d
        x = self.adaptive_max_pool(x)  # Apply AdaptiveMaxPool2d
        x = x.squeeze(1)  # Remove the channel dimension
        x = self.hardsigmoid(x)  # Apply Hardsigmoid
        x = x.mean(dim=2)  # Reduce to 1D for AvgPool1d
        x = self.avg_pool(x)  # Apply AvgPool1d
        x = self.unflatten(x)  # Apply Unflatten
        # For PoissonNLLLoss, we need a target, so we'll just return the output for now
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 32, 64).cuda()  # (batch_size, sequence_length, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
