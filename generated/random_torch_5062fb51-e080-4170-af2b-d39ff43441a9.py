
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'BatchNorm1d', 'LogSoftmax', 'GaussianNLLLoss', 'PairwiseDistance', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.batch_norm = nn.BatchNorm1d(128)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Flatten the output for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Generate a random target for GaussianNLLLoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        loss = self.gaussian_nll_loss(x, target, var)
        
        # Compute PairwiseDistance between x and a random tensor
        random_tensor = torch.randn_like(x)
        distance = self.pairwise_distance(x, random_tensor)
        
        # Apply Softmin to the distance
        distance = distance.unsqueeze(1)
        output = self.softmin(distance)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

