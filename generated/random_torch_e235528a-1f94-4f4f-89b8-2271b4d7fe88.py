
# This is a random torch model generated by the following modules: ['LogSoftmax', 'LazyConv3d', 'Dropout1d', 'LazyConv2d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.conv3d_2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.conv2d_1 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.conv2d_2 = nn.LazyConv2d(out_channels=128, kernel_size=3)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input is 3D, reshape to 5D for Conv3d
        if x.dim() == 3:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        elif x.dim() == 4:
            x = x.unsqueeze(1)  # Add channel dimension
        
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.softshrink(x)
        x = self.conv3d_2(x)
        x = self.softshrink(x)
        
        # Reshape to 4D for Conv2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        # Apply Conv2d layers
        x = self.conv2d_1(x)
        x = self.softshrink(x)
        x = self.conv2d_2(x)
        x = self.softshrink(x)
        
        # Reshape to 2D for Dropout1d
        x = x.view(x.size(0), -1)
        x = self.dropout1d(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()  # Example 3D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

