
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'PReLU', 'Linear', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.prelu1 = nn.PReLU()
        self.linear1 = nn.Linear(128, 256)
        self.transformer_encoder1 = nn.TransformerEncoderLayer(d_model=256, nhead=8)
        self.bn2 = nn.LazyBatchNorm2d()
        self.prelu2 = nn.PReLU()
        self.linear2 = nn.Linear(256, 128)
        self.transformer_encoder2 = nn.TransformerEncoderLayer(d_model=128, nhead=8)
        self.bn3 = nn.LazyBatchNorm2d()
        self.prelu3 = nn.PReLU()
        self.linear3 = nn.Linear(128, 64)
        self.transformer_encoder3 = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.bn4 = nn.LazyBatchNorm2d()
        self.prelu4 = nn.PReLU()
        self.linear4 = nn.Linear(64, 32)
        self.transformer_encoder4 = nn.TransformerEncoderLayer(d_model=32, nhead=8)
        self.bn5 = nn.LazyBatchNorm2d()
        self.prelu5 = nn.PReLU()
        self.linear5 = nn.Linear(32, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.bn1(x)
        x = self.prelu1(x)
        
        # Flatten the spatial dimensions
        x = x.view(x.size(0), -1)
        
        # Apply linear layer
        x = self.linear1(x)
        
        # Reshape for transformer encoder
        x = x.unsqueeze(1)  # Add sequence dimension
        x = self.transformer_encoder1(x)
        x = x.squeeze(1)  # Remove sequence dimension
        
        x = self.bn2(x)
        x = self.prelu2(x)
        x = self.linear2(x)
        
        x = x.unsqueeze(1)
        x = self.transformer_encoder2(x)
        x = x.squeeze(1)
        
        x = self.bn3(x)
        x = self.prelu3(x)
        x = self.linear3(x)
        
        x = x.unsqueeze(1)
        x = self.transformer_encoder3(x)
        x = x.squeeze(1)
        
        x = self.bn4(x)
        x = self.prelu4(x)
        x = self.linear4(x)
        
        x = x.unsqueeze(1)
        x = self.transformer_encoder4(x)
        x = x.squeeze(1)
        
        x = self.bn5(x)
        x = self.prelu5(x)
        x = self.linear5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
