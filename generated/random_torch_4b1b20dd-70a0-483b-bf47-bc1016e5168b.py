
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'LazyInstanceNorm2d', 'UpsamplingBilinear2d', 'ZeroPad2d', 'PReLU', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.inst_norm1 = nn.LazyInstanceNorm2d()
        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.zero_pad1 = nn.ZeroPad2d(2)
        self.prelu1 = nn.PReLU()
        self.sigmoid1 = nn.Sigmoid()
        self.bn2 = nn.BatchNorm1d(64)
        self.inst_norm2 = nn.LazyInstanceNorm2d()
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.zero_pad2 = nn.ZeroPad2d(1)
        self.prelu2 = nn.PReLU()
        self.sigmoid2 = nn.Sigmoid()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, flatten the input to apply BatchNorm1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten to (batch_size, channels * height * width)
        x = self.bn1(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back to original shape
        
        # Apply LazyInstanceNorm2d
        x = self.inst_norm1(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample1(x)
        
        # Apply ZeroPad2d
        x = self.zero_pad1(x)
        
        # Apply PReLU
        x = self.prelu1(x)
        
        # Apply Sigmoid
        x = self.sigmoid1(x)
        
        # Flatten again for the second BatchNorm1d
        x = x.view(batch_size, -1)
        x = self.bn2(x)
        x = x.view(batch_size, channels, height * 2, width * 2)  # Reshape back after upsampling
        
        # Apply LazyInstanceNorm2d again
        x = self.inst_norm2(x)
        
        # Apply UpsamplingBilinear2d again
        x = self.upsample2(x)
        
        # Apply ZeroPad2d again
        x = self.zero_pad2(x)
        
        # Apply PReLU again
        x = self.prelu2(x)
        
        # Apply Sigmoid again
        x = self.sigmoid2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size=1, channels=3, height=32, width=32)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

