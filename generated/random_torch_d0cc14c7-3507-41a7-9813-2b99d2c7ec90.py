
# This is a random torch model generated by the following modules: ['MultiheadAttention', 'AdaptiveMaxPool3d', 'ReLU6', 'AdaptiveLogSoftmaxWithLoss', 'BCELoss', 'ZeroPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.multihead_attn = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.relu6 = nn.ReLU6()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=64, n_classes=10, cutoffs=[2, 4])
        self.bce_loss = nn.BCELoss()
        self.zero_pad1d = nn.ZeroPad1d(2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, embed_dim)
        x = x.permute(1, 0, 2)  # MultiheadAttention expects (seq_len, batch_size, embed_dim)
        x, _ = self.multihead_attn(x, x, x)
        x = x.permute(1, 0, 2)  # Revert back to (batch_size, seq_len, embed_dim)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten the last two dimensions
        x = self.adaptive_max_pool3d(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Apply ZeroPad1d
        x = x.unsqueeze(1)  # Add a channel dimension for ZeroPad1d
        x = self.zero_pad1d(x)
        
        # Apply BCELoss (assuming we have a target tensor)
        target = torch.rand_like(x)  # Random target for demonstration
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 16, 64).cuda()  # (batch_size, seq_len, embed_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

