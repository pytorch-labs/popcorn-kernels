
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'HingeEmbeddingLoss', 'CircularPad3d', 'BatchNorm1d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Reshape for BatchNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width)
        x = self.batch_norm1d(x)
        
        # Reshape back to 4D for CrossMapLRN2d
        x = x.view(batch_size, channels, depth, height, width)
        x = x[:, :, 0, :, :]  # Reduce to 4D by selecting the first depth slice
        x = self.cross_map_lrn2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Compute HingeEmbeddingLoss (requires target, so we generate a dummy target)
        target = torch.ones(x.size(0), dtype=torch.float32, device=x.device)
        loss = self.hinge_embedding_loss(x.mean(dim=(1, 2, 3)), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

