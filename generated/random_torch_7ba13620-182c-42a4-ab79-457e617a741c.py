
# This is a random torch model generated by the following modules: ['Threshold', 'LazyConv3d', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold1 = nn.Threshold(0.5, 1.0)
        self.lazy_conv3d1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.replication_pad1d1 = nn.ReplicationPad1d(padding=2)
        self.threshold2 = nn.Threshold(0.5, 1.0)
        self.lazy_conv3d2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.replication_pad1d2 = nn.ReplicationPad1d(padding=1)

    def forward(self, x):
        x = self.threshold1(x)
        x = x.unsqueeze(1)  # Add a channel dimension for 3D convolution
        x = self.lazy_conv3d1(x)
        x = x.squeeze(2)  # Remove the depth dimension for 1D padding
        x = self.replication_pad1d1(x)
        x = x.unsqueeze(2)  # Add the depth dimension back for 3D convolution
        x = self.threshold2(x)
        x = self.lazy_conv3d2(x)
        x = x.squeeze(2)  # Remove the depth dimension for 1D padding
        x = self.replication_pad1d2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Arbitrary input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

