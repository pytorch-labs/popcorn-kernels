
# This is a random torch model generated by the following modules: ['LeakyReLU', 'Dropout1d', 'GRU', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.leaky_relu1 = nn.LeakyReLU(negative_slope=0.1)
        self.dropout1d1 = nn.Dropout1d(p=0.5)
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.leaky_relu2 = nn.LeakyReLU(negative_slope=0.1)
        self.dropout1d2 = nn.Dropout1d(p=0.5)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape to (batch_size, channels * height, width) for Dropout1d
        x = x.view(batch_size, channels * height, width)
        x = self.dropout1d1(x)
        
        # Reshape back to (batch_size, channels, height, width)
        x = x.view(batch_size, channels, height, width)
        x = self.leaky_relu1(x)
        
        # Reshape to (batch_size, height, width * channels) for GRU
        x = x.view(batch_size, height, width * channels)
        x, _ = self.gru1(x)
        
        # Reshape to (batch_size, 256, height, 1) for UpsamplingNearest2d
        x = x.view(batch_size, 256, height, 1)
        x = self.upsample1(x)
        
        # Apply LeakyReLU and Dropout1d again
        x = x.view(batch_size, 256 * height, 1)
        x = self.dropout1d2(x)
        x = x.view(batch_size, 256, height, 1)
        x = self.leaky_relu2(x)
        
        # Reshape to (batch_size, height, 256) for GRU
        x = x.view(batch_size, height, 256)
        x, _ = self.gru2(x)
        
        # Reshape to (batch_size, 128, height, 1) for UpsamplingNearest2d
        x = x.view(batch_size, 128, height, 1)
        x = self.upsample2(x)
        
        # Reshape to (batch_size, 128, height * 2, 1)
        x = x.view(batch_size, 128, height * 2, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
