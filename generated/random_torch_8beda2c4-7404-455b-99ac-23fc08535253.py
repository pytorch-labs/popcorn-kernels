
# This is a random torch model generated by the following modules: ['Module', 'Embedding', 'SELU', 'LPPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.lppool3d_1 = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)  # LPPool3d layer
        self.lppool3d_2 = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)  # LPPool3d layer
        self.selu = nn.SELU()  # SELU activation

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Embedding: (batch_size, sequence_length) -> (batch_size, sequence_length, embedding_dim)
        x = x.unsqueeze(1)  # Add a channel dimension: (batch_size, sequence_length, embedding_dim) -> (batch_size, 1, sequence_length, embedding_dim)
        x = x.unsqueeze(-1)  # Add a depth dimension: (batch_size, 1, sequence_length, embedding_dim) -> (batch_size, 1, sequence_length, embedding_dim, 1)
        x = self.lppool3d_1(x)  # LPPool3d: (batch_size, 1, sequence_length, embedding_dim, 1) -> (batch_size, 1, sequence_length//2, embedding_dim//2, 1)
        x = self.selu(x)  # SELU activation
        x = self.lppool3d_2(x)  # LPPool3d: (batch_size, 1, sequence_length//2, embedding_dim//2, 1) -> (batch_size, 1, sequence_length//4, embedding_dim//4, 1)
        x = x.squeeze(-1).squeeze(1)  # Remove channel and depth dimensions: (batch_size, 1, sequence_length//4, embedding_dim//4, 1) -> (batch_size, sequence_length//4, embedding_dim//4)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 32)).cuda()  # Example input: (batch_size=1, sequence_length=32)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

