
# This is a random torch model generated by the following modules: ['ModuleList', 'AdaptiveMaxPool2d', 'Threshold', 'ChannelShuffle', 'PixelUnshuffle', 'RNN', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_list = nn.ModuleList([
            nn.AdaptiveMaxPool2d((16, 16)),
            nn.Threshold(0.5, 1.0),
            nn.ChannelShuffle(4),
            nn.PixelUnshuffle(2),
            nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True),
            RMSNorm(128),
            nn.AdaptiveMaxPool2d((8, 8)),
            nn.Threshold(0.3, 0.7),
            nn.ChannelShuffle(2),
            nn.PixelUnshuffle(4),
            nn.RNN(input_size=128, hidden_size=256, num_layers=1, batch_first=True),
            RMSNorm(256)
        ])

    def forward(self, x):
        for i, module in enumerate(self.module_list):
            if isinstance(module, nn.RNN):
                # Reshape for RNN
                batch_size, channels, height, width = x.shape
                x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # (batch, seq_len, input_size)
                x, _ = module(x)
                x = x.permute(0, 2, 1).view(batch_size, -1, height, width)  # Reshape back
            else:
                x = module(x)
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, p=2, dim=-1, keepdim=True) / self.scale
        return x / norm * self.gamma


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
