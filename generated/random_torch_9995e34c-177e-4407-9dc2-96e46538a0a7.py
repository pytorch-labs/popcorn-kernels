
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'LazyConv3d', 'CircularPad2d', 'CTCLoss', 'ReplicationPad1d', 'Bilinear', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.circular_pad2d = nn.CircularPad2d(padding=1)
        self.replication_pad1d = nn.ReplicationPad1d(padding=1)
        self.bilinear = nn.Bilinear(in1_features=16, in2_features=16, out_features=32)
        self.selu = nn.SELU()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        
        # Reshape to 2D for CircularPad2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.circular_pad2d(x)
        
        # Reshape back to 3D
        x = x.view(x.size(0), x.size(1), x.size(2), -1, x.size(-1))
        
        # Apply ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d(x)
        
        # Reshape back to 3D
        x = x.view(x.size(0), x.size(1), x.size(2), -1, x.size(-1))
        
        # Apply Bilinear
        x = x.view(x.size(0), x.size(1), -1)
        x = self.bilinear(x, x)
        
        # Apply SELU
        x = self.selu(x)
        
        # Apply CTC Loss (assuming input is log probabilities and targets are provided)
        # Note: CTC Loss requires specific input shapes and targets, so this is just a placeholder
        # In practice, you would need to provide the correct input and target tensors
        log_probs = F.log_softmax(x, dim=2)
        targets = torch.randint(1, 16, (x.size(1), x.size(0)), dtype=torch.long)
        input_lengths = torch.full((x.size(1),), x.size(0), dtype=torch.long)
        target_lengths = torch.randint(1, 16, (x.size(1),), dtype=torch.long)
        loss = self.ctc_loss(log_probs, targets, input_lengths, target_lengths)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

