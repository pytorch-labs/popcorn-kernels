
# This is a random torch model generated by the following modules: ['SmoothL1Loss', 'Hardsigmoid', 'BatchNorm2d', 'ZeroPad2d', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm2d(3)
        self.bn2 = nn.BatchNorm2d(6)
        self.bn3 = nn.BatchNorm2d(12)
        self.zero_pad = nn.ZeroPad2d(2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply BatchNorm2d
        x = self.bn1(x)
        x = self.bn2(x)
        x = self.bn3(x)
        
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), -1, x.size(2), x.size(3))
        
        # Apply NLLLoss2d (assuming a target tensor is provided)
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3)))
        loss = self.nll_loss2d(x, target)
        
        # Apply SmoothL1Loss (assuming a target tensor is provided)
        target_smooth_l1 = torch.randn_like(x)
        loss_smooth_l1 = self.smooth_l1_loss(x, target_smooth_l1)
        
        # Return both losses
        return loss, loss_smooth_l1


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
