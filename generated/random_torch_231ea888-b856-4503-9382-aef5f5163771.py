
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'Softplus', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.softplus = nn.Softplus()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Ensure input is 3D (batch_size, channels, length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if necessary
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if necessary

        x = self.conv_transpose1(x)
        x = self.softplus(x)
        x = self.conv_transpose2(x)
        x = self.softplus(x)
        
        # For PoissonNLLLoss, we need a target, so we'll just return the output for now
        # and assume the loss will be computed outside the model.
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input with shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

