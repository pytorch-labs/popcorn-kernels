
# This is a random torch model generated by the following modules: ['Linear', 'CrossEntropyLoss', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.linear3 = nn.Linear(32, 10)
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(128, 128)),
            nn.Parameter(torch.randn(64, 64)),
            nn.Parameter(torch.randn(32, 32))
        ])
        self.criterion = nn.CrossEntropyLoss()

    def forward(self, x):
        # Reshape input to match the first linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the first linear layer
        x = F.relu(self.linear1(x))
        
        # Apply the second linear layer
        x = F.relu(self.linear2(x))
        
        # Apply the third linear layer
        x = self.linear3(x)
        
        # Apply the parameter list (just for demonstration, not typical usage)
        for param in self.parameter_list:
            x = x @ param  # Matrix multiplication with parameters
        
        # Compute the loss (assuming target is provided externally)
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss = self.criterion(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
