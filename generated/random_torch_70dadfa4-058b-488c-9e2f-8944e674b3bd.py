
# This is a random torch model generated by the following modules: ['ReLU6', 'TransformerDecoderLayer', 'ParameterList', 'Hardswish', 'TransformerDecoder', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(64)) for _ in range(5)])
        self.hardswish = nn.Hardswish()
        self.transformer_decoder = nn.TransformerDecoder(self.transformer_decoder_layer, num_layers=3)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)

    def forward(self, x):
        # Apply ConstantPad1d to the input
        x = self.constant_pad1d(x)
        
        # Reshape the input to fit the TransformerDecoderLayer
        x = x.view(-1, 64, 64)
        
        # Apply TransformerDecoder
        x = self.transformer_decoder(x, x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = x + param.unsqueeze(0).unsqueeze(0)
        
        # Reshape the output to match the input shape
        x = x.view(-1, 64)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
