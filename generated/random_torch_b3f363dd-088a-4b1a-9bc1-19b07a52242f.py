
# This is a random torch model generated by the following modules: ['Embedding', 'AdaptiveAvgPool2d', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer with vocab size 1000 and embedding dim 128
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))  # Adaptive average pooling to reduce spatial dimensions to 1x1
        self.lazy_linear1 = nn.LazyLinear(256)  # Lazy linear layer that infers input size
        self.lazy_linear2 = nn.LazyLinear(10)  # Lazy linear layer that outputs 10 classes

    def forward(self, x):
        # Assuming x is a tensor of indices for the embedding layer
        x = self.embedding(x)  # (batch_size, seq_len, embedding_dim)
        
        # Reshape to add a channel dimension for pooling
        x = x.unsqueeze(1)  # (batch_size, 1, seq_len, embedding_dim)
        
        # Apply adaptive average pooling
        x = self.adaptive_avg_pool(x)  # (batch_size, 1, 1, embedding_dim)
        
        # Flatten the tensor for the linear layer
        x = x.view(x.size(0), -1)  # (batch_size, embedding_dim)
        
        # Apply the first lazy linear layer
        x = F.relu(self.lazy_linear1(x))  # (batch_size, 256)
        
        # Apply the second lazy linear layer
        x = self.lazy_linear2(x)  # (batch_size, 10)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # (batch_size, seq_len)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
