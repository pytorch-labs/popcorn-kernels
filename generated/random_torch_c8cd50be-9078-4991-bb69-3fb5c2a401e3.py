
# This is a random torch model generated by the following modules: ['Unflatten', 'GRUCell', 'Softmin', 'ReplicationPad3d', 'InstanceNorm1d', 'MultiMarginLoss', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 128))  # Unflatten to (batch_size, 1, 128)
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=64)
        self.softmin = nn.Softmin(dim=1)
        self.replication_pad3d = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.instance_norm1d = nn.InstanceNorm1d(num_features=64)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(64, 64)) for _ in range(5)])
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assume input x is of shape (batch_size, *), where * is any arbitrary shape
        x = x.view(x.size(0), -1)  # Flatten the input to (batch_size, -1)
        x = self.unflatten(x)  # Unflatten to (batch_size, 1, 128)
        x = x.squeeze(1)  # Squeeze to (batch_size, 128)
        
        # Initialize hidden state for GRUCell
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.gru_cell(x, hx)  # GRUCell output shape: (batch_size, 64)
        
        x = self.instance_norm1d(x)  # InstanceNorm1d output shape: (batch_size, 64)
        
        # Apply ReplicationPad3d (requires 5D input)
        x = x.unsqueeze(1).unsqueeze(1)  # Shape: (batch_size, 1, 1, 64, 1)
        x = self.replication_pad3d(x)  # Shape: (batch_size, 1, 1, 64, 3)
        x = x.squeeze(1).squeeze(1).squeeze(-1)  # Shape: (batch_size, 64)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = torch.matmul(x, param)  # Shape: (batch_size, 64)
        
        x = self.softmin(x)  # Softmin output shape: (batch_size, 64)
        
        # Dummy target for MultiMarginLoss
        target = torch.randint(0, 64, (x.size(0),)).to(x.device)
        loss = self.multi_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
