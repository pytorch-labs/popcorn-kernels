
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'PairwiseDistance', 'TripletMarginWithDistanceLoss', 'GaussianNLLLoss', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.bilinear = nn.Bilinear(10, 10, 20)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=self.pairwise_distance)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Reshape for Bilinear layer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)
        x = x.reshape(-1, channels)
        
        # Apply Bilinear transformation
        x = self.bilinear(x, x)
        
        # Reshape back to original dimensions
        x = x.view(batch_size, -1, 20)
        x = x.permute(0, 2, 1).reshape(batch_size, 20, height, width)
        
        # Compute pairwise distance
        x_flat = x.view(batch_size, -1)
        dist = self.pairwise_distance(x_flat, x_flat)
        
        # Compute triplet loss (using the same tensor as anchor, positive, and negative for simplicity)
        triplet_loss = self.triplet_loss(x_flat, x_flat, x_flat)
        
        # Compute Gaussian NLL loss (using random mean and variance)
        mean = torch.randn_like(x_flat)
        var = torch.ones_like(x_flat)
        gaussian_loss = self.gaussian_nll_loss(x_flat, mean, var)
        
        # Return the final output (distance) and the losses
        return dist, triplet_loss, gaussian_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

