
# This is a random torch model generated by the following modules: ['Dropout2d', 'Conv2d', 'Hardtanh', 'ZeroPad1d', 'ELU', 'ConvTranspose3d', 'CircularPad1d', 'LazyConv3d', 'AvgPool2d', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.conv2d = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.zeropad1d = nn.ZeroPad1d(padding=2)
        self.elu = nn.ELU(alpha=1.0)
        self.convtranspose3d = nn.ConvTranspose3d(16, 8, kernel_size=3, stride=1, padding=1)
        self.circularpad1d = nn.CircularPad1d(padding=2)
        self.lazyconv3d = nn.LazyConv3d(out_channels=16, kernel_size=3, stride=1, padding=1)
        self.avgpool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.dropout2d(x)
        x = self.conv2d(x)
        x = self.hardtanh(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.zeropad1d(x)
        x = self.elu(x)
        x = self.circularpad1d(x)
        
        # Reshape back to 4D for Conv2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.avgpool2d(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.convtranspose3d(x)
        x = self.lazyconv3d(x)
        
        # Reshape back to 4D for final operations
        x = x.squeeze(2)  # Remove depth dimension
        x = self.hardsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

