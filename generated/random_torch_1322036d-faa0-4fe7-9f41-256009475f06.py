
# This is a random torch model generated by the following modules: ['Softmin', 'RReLU', 'LPPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softmin = nn.Softmin(dim=1)
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()
        self.lppool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.rrelu1(x)  # Apply RReLU
        x = self.lppool1d(x)  # Apply LPPool1d
        x = self.rrelu2(x)  # Apply RReLU again
        x = self.softmin(x)  # Apply Softmin
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 100).cuda()  # Example input shape (batch_size=1, channels=10, length=100)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
