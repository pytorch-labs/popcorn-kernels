
# This is a random torch model generated by the following modules: ['ELU', 'Softsign', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU(alpha=1.0)
        self.elu2 = nn.ELU(alpha=1.0)
        self.softsign1 = nn.Softsign()
        self.softsign2 = nn.Softsign()
        self.circular_pad1 = nn.CircularPad2d(1)
        self.circular_pad2 = nn.CircularPad2d(2)
        self.circular_pad3 = nn.CircularPad2d(3)

    def forward(self, x):
        x = self.circular_pad1(x)
        x = self.elu1(x)
        x = self.softsign1(x)
        x = self.circular_pad2(x)
        x = self.elu2(x)
        x = self.softsign2(x)
        x = self.circular_pad3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
