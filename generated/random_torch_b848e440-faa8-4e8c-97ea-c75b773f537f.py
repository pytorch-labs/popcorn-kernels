
# This is a random torch model generated by the following modules: ['LeakyReLU', 'LazyBatchNorm2d', 'LazyInstanceNorm1d', 'Softsign', 'AdaptiveAvgPool1d', 'RNNCellBase', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.leaky_relu1 = nn.LeakyReLU()
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.bn2 = nn.LazyBatchNorm2d()
        self.softsign = nn.Softsign()
        self.rnn_cell = nn.RNNCellBase(25, 10)  # Assuming input size 25 and hidden size 10
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(5)
        self.instance_norm = nn.LazyInstanceNorm1d()
        self.leaky_relu2 = nn.LeakyReLU()

    def forward(self, x):
        # Apply LazyBatchNorm2d and LeakyReLU
        x = self.leaky_relu1(self.bn1(x))
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Apply LazyBatchNorm2d and Softsign
        x = self.softsign(self.bn2(x))
        
        # Reshape for RNNCellBase
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        
        # Apply RNNCellBase
        hx = torch.zeros(batch_size, 10).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x, hx)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.unsqueeze(1)  # Add a dummy dimension for pooling
        x = self.adaptive_avg_pool1d(x)
        
        # Apply LazyInstanceNorm1d and LeakyReLU
        x = self.leaky_relu2(self.instance_norm(x))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

