
# This is a random torch model generated by the following modules: ['MaxPool3d', 'PixelShuffle', 'GLU', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.pixelshuffle = nn.PixelShuffle(upscale_factor=2)
        self.glu = nn.GLU(dim=1)
        self.nllloss = nn.NLLLoss()

    def forward(self, x):
        # Apply MaxPool3d
        x = self.maxpool3d(x)
        
        # Reshape to 4D tensor for PixelShuffle
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply PixelShuffle
        x = self.pixelshuffle(x)
        
        # Reshape back to 5D tensor for GLU
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels // 2, 2, height, width)
        
        # Apply GLU
        x = self.glu(x)
        
        # Reshape to 2D tensor for NLLLoss
        x = x.view(batch_size, -1)
        
        # Apply NLLLoss (assuming target is provided externally)
        # Note: NLLLoss requires a target, which is not part of the input tensor.
        # For the purpose of this model, we will return the log probabilities.
        # In practice, you would compute the loss using the target.
        log_probs = F.log_softmax(x, dim=1)
        return log_probs


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

