
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'Flatten', 'MSELoss', 'AvgPool2d', 'Hardswish', 'UpsamplingNearest2d', 'RReLU', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.hardswish = nn.Hardswish()
        self.rrelu = nn.RReLU()
        self.tanh = nn.Tanh()
        self.flatten = nn.Flatten()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # Reshape to 1D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.rrelu(x)
        x = self.conv_transpose2(x)
        x = self.hardswish(x)
        
        # Reshape back to 2D for AvgPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to (batch_size, channels, height, width)
        
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Compute MSE loss with a dummy target (for demonstration purposes)
        dummy_target = torch.zeros_like(x)
        loss = self.mse_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

