
# This is a random torch model generated by the following modules: ['CosineSimilarity', 'AdaptiveMaxPool2d', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Flatten the tensor for linear layers
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear layers
        x = F.relu(self.lazy_linear1(x))
        x = F.relu(self.lazy_linear2(x))
        
        # Split the output into two tensors for CosineSimilarity
        x1, x2 = x.chunk(2, dim=1)
        
        # Apply CosineSimilarity
        x = self.cosine_similarity(x1, x2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

