
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'LPPool2d', 'TransformerDecoderLayer', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.pool1 = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.transformer_decoder_layer1 = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.transformer_decoder_layer2 = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.bn2 = nn.LazyBatchNorm3d()
        self.pool2 = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.transformer_decoder_layer3 = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply LazyBatchNorm3d
        x = self.bn1(x)
        
        # Reshape for LPPool2d (assuming input is 5D, reshape to 4D)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        
        # Apply LPPool2d
        x = self.pool1(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, depth, channels, x.shape[2], x.shape[3])
        
        # Reshape for TransformerDecoderLayer (flatten spatial dimensions)
        x = x.view(batch_size, depth, -1)
        
        # Apply TransformerDecoderLayer
        x = self.transformer_decoder_layer1(x, x)
        x = self.transformer_decoder_layer2(x, x)
        
        # Reshape back to 5D
        x = x.view(batch_size, depth, channels, x.shape[2], x.shape[3])
        
        # Apply LazyBatchNorm3d again
        x = self.bn2(x)
        
        # Reshape for LPPool2d again
        x = x.view(batch_size * depth, channels, x.shape[3], x.shape[4])
        
        # Apply LPPool2d again
        x = self.pool2(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, depth, channels, x.shape[2], x.shape[3])
        
        # Reshape for TransformerDecoderLayer again
        x = x.view(batch_size, depth, -1)
        
        # Apply TransformerDecoderLayer again
        x = self.transformer_decoder_layer3(x, x)
        
        # Reshape for NLLLoss (assuming output is log probabilities)
        x = x.view(batch_size, -1)
        
        # Apply NLLLoss (assuming target is provided externally)
        # Note: NLLLoss requires target, which is not part of the input.
        # For the sake of this example, we'll return the log probabilities.
        return F.log_softmax(x, dim=1)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
