
# This is a random torch model generated by the following modules: ['LazyInstanceNorm2d', 'AdaptiveMaxPool1d', 'MaxPool2d', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm2d()
        self.pool1 = nn.AdaptiveMaxPool1d(output_size=64)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(16, 8))
        self.norm2 = nn.LazyInstanceNorm2d()
        self.pool3 = nn.AdaptiveMaxPool1d(output_size=32)
        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.unflatten2 = nn.Unflatten(dim=1, unflattened_size=(8, 4))

    def forward(self, x):
        # Apply LazyInstanceNorm2d
        x = self.norm1(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.pool1(x)
        
        # Reshape back for MaxPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.pool2(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        # Apply LazyInstanceNorm2d again
        x = self.norm2(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.pool3(x)
        
        # Reshape back for MaxPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.pool4(x)
        
        # Apply Unflatten again
        x = self.unflatten2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128, 128).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

