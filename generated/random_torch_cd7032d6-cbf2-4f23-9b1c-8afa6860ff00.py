
# This is a random torch model generated by the following modules: ['KLDivLoss', 'AdaptiveAvgPool3d', 'ReplicationPad2d', 'MaxUnpool3d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.replication_pad2d = nn.ReplicationPad2d(2)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1, 8, 8, 8)),
            'param2': nn.Parameter(torch.randn(1, 8, 8, 8))
        })
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to 4D for ReplicationPad2d
        x = x.view(-1, 8, 8, 8)
        x = self.replication_pad2d(x)
        
        # Reshape back to 5D for MaxUnpool3d
        x = x.view(-1, 1, 12, 12, 12)
        indices = torch.randint(0, 12, (x.shape[0], 1, 12, 12, 12), device=x.device)
        x = self.max_unpool3d(x, indices)
        
        # Use ParameterDict
        param1 = self.parameter_dict['param1']
        param2 = self.parameter_dict['param2']
        x = x + param1 + param2
        
        # Apply KLDivLoss
        target = torch.softmax(torch.randn_like(x), dim=1)
        loss = self.kldivloss(F.log_softmax(x, dim=1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
