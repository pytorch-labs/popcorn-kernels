
# This is a random torch model generated by the following modules: ['MaxUnpool1d', 'Conv1d', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.maxpool1 = nn.MaxPool1d(kernel_size=2, return_indices=True)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.maxpool2 = nn.MaxPool1d(kernel_size=2, return_indices=True)
        self.maxunpool1 = nn.MaxUnpool1d(kernel_size=2)
        self.maxunpool2 = nn.MaxUnpool1d(kernel_size=2)

    def forward(self, x):
        # Assuming input shape is (batch_size, channels, sequence_length)
        x = self.conv1(x)
        x, indices1 = self.maxpool1(x)
        x = self.conv2(x)
        x, indices2 = self.maxpool2(x)
        x = self.maxunpool2(x, indices2)
        x = self.maxunpool1(x, indices1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input shape: (batch_size=1, channels=1, sequence_length=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
