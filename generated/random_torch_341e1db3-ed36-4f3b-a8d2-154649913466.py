
# This is a random torch model generated by the following modules: ['Hardtanh', 'Dropout2d', 'Dropout', 'AdaptiveMaxPool1d', 'PReLU', 'NLLLoss', 'LazyBatchNorm1d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.dropout = nn.Dropout(p=0.5)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.prelu = nn.PReLU()
        self.nll_loss = nn.NLLLoss()
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        
        # Using ModuleList to repeat some modules
        self.module_list = nn.ModuleList([
            nn.PReLU(),
            nn.Dropout(p=0.5),
            nn.Hardtanh(),
            nn.LazyBatchNorm1d(),
            nn.AdaptiveMaxPool1d(output_size=10)
        ])

    def forward(self, x):
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply Dropout2d (assuming input is 4D)
        if x.dim() == 4:
            x = self.dropout2d(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Reshape for AdaptiveMaxPool1d
        if x.dim() == 4:
            x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool1d(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)
        
        # Apply modules from ModuleList
        for module in self.module_list:
            x = module(x)
        
        # Reshape for NLLLoss (assuming output is 2D)
        x = x.view(x.size(0), -1)
        
        # Apply NLLLoss (assuming target is provided externally)
        # Note: NLLLoss requires a target, so it's not applied here in the forward pass.
        # Instead, it should be used during training.
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

