
# This is a random torch model generated by the following modules: ['Module', 'Dropout3d', 'LazyInstanceNorm1d', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        
        # Repeat modules up to 5 times
        self.dropout3d_2 = nn.Dropout3d(p=0.5)
        self.lazy_instance_norm1d_2 = nn.LazyInstanceNorm1d()
        self.max_pool2d_2 = nn.MaxPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.dropout3d(x)
        
        # Reshape to 3D (batch, channels, depth*height*width) for LazyInstanceNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        x = self.lazy_instance_norm1d(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply MaxPool2d on the last two dimensions (height, width)
        x = x.view(batch_size * channels * depth, 1, height, width)
        x = self.max_pool2d(x)
        
        # Reshape back to 5D
        height_pooled = x.shape[2]
        width_pooled = x.shape[3]
        x = x.view(batch_size, channels, depth, height_pooled, width_pooled)
        
        # Repeat the process with the second set of modules
        x = self.dropout3d_2(x)
        
        # Reshape to 3D for LazyInstanceNorm1d
        x = x.view(batch_size, channels, -1)
        x = self.lazy_instance_norm1d_2(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height_pooled, width_pooled)
        
        # Apply MaxPool2d on the last two dimensions (height, width)
        x = x.view(batch_size * channels * depth, 1, height_pooled, width_pooled)
        x = self.max_pool2d_2(x)
        
        # Reshape back to 5D
        height_pooled_final = x.shape[2]
        width_pooled_final = x.shape[3]
        x = x.view(batch_size, channels, depth, height_pooled_final, width_pooled_final)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

