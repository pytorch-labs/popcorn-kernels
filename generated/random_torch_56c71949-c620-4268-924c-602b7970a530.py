
# This is a random torch model generated by the following modules: ['Softmax', 'LazyLinear', 'Conv3d', 'Softmin', 'ReLU6', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 16, kernel_size=3, stride=1, padding=1)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.transformer_encoder = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.relu6 = nn.ReLU6()
        self.softmax = nn.Softmax(dim=1)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear and ReLU6
        x = self.relu6(self.lazy_linear1(x))
        x = self.relu6(self.lazy_linear2(x))
        
        # Reshape for TransformerEncoderLayer
        x = x.unsqueeze(1)
        x = self.transformer_encoder(x)
        
        # Apply Softmax and Softmin
        x = self.softmax(x)
        x = self.softmin(x)
        
        # Final reshape to match output shape
        x = x.view(x.size(0), -1)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input for Conv3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
