
# This is a random torch model generated by the following modules: ['CircularPad2d', 'Dropout2d', 'ReplicationPad2d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(2)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.replication_pad = nn.ReplicationPad2d(1)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        
        # Repeating some modules up to 5 times
        self.circular_pad2 = nn.CircularPad2d(1)
        self.dropout2d2 = nn.Dropout2d(p=0.3)
        self.replication_pad2 = nn.ReplicationPad2d(2)
        self.adaptive_avg_pool1d2 = nn.AdaptiveAvgPool1d(output_size=5)

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Apply CircularPad2d again
        x = x.unsqueeze(-1)  # Add a dummy dimension for CircularPad2d
        x = self.circular_pad2(x)
        
        # Apply Dropout2d again
        x = self.dropout2d2(x)
        
        # Apply ReplicationPad2d again
        x = self.replication_pad2(x)
        
        # Reshape for AdaptiveAvgPool1d again
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

