
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'BatchNorm3d', 'ConstantPad2d', 'Identity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.pad1 = nn.ConstantPad2d(2, 3.5)
        self.pad2 = nn.ConstantPad2d(1, 2.5)
        self.hardsigmoid = nn.Hardsigmoid()
        self.identity = nn.Identity()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        # If not, reshape it to 5D
        if len(x.shape) == 4:
            x = x.unsqueeze(2)  # Add depth dimension
        
        # Apply BatchNorm3d
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Remove depth dimension to make it 4D for ConstantPad2d
        x = x.squeeze(2)
        
        # Apply ConstantPad2d
        x = self.pad1(x)
        x = self.pad2(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply Identity
        x = self.identity(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # 4D input (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
