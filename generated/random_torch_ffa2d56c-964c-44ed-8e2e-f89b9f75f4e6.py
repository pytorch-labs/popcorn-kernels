
# This is a random torch model generated by the following modules: ['RNNBase', 'CosineSimilarity', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNNBase(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=256, nhead=8)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Pass through RNN
        x, _ = self.rnn(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        
        # Reshape for TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # Shape: (sequence_length, batch_size, hidden_size)
        
        # Pass through TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)  # Output shape: (sequence_length, batch_size, hidden_size)
        
        # Reshape back to (batch_size, sequence_length, hidden_size)
        x = x.permute(1, 0, 2)
        
        # Compute cosine similarity between the first and last sequence elements
        x_first = x[:, 0, :]  # Shape: (batch_size, hidden_size)
        x_last = x[:, -1, :]  # Shape: (batch_size, hidden_size)
        output = self.cosine_similarity(x_first, x_last)  # Shape: (batch_size,)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
