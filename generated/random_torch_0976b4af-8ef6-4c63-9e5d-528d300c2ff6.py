
# This is a random torch model generated by the following modules: ['LazyLinear', 'ConstantPad3d', 'RReLU', 'Conv2d', 'LPPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.conv1 = nn.Conv2d(1, 10, kernel_size=3)
        self.rrelu = nn.RReLU()
        self.lppool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.lazy_linear = nn.LazyLinear(out_features=50)
        self.lazy_linear2 = nn.LazyLinear(out_features=10)

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Reshape to 4D for Conv2d
        x = x.view(x.size(0), 1, x.size(2), x.size(3))
        
        # Apply Conv2d
        x = self.conv1(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply LPPool2d
        x = self.lppool(x)
        
        # Flatten the tensor for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear
        x = self.lazy_linear(x)
        
        # Apply RReLU again
        x = self.rrelu(x)
        
        # Apply LazyLinear again
        x = self.lazy_linear2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
