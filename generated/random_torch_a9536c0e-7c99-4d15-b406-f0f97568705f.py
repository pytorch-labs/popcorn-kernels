
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'Mish', 'Conv1d', 'BatchNorm2d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.conv1d = nn.Conv1d(in_channels=1, out_channels=10, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=10)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.mish = nn.Mish()

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Reshape to fit Conv1d
        x = x.view(x.size(0), 1, -1)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Reshape back to fit BatchNorm2d
        x = x.view(x.size(0), 10, 14, 14)
        
        # Apply BatchNorm2d
        x = self.batch_norm2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

