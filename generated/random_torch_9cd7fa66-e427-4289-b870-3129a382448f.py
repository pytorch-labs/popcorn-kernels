
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'CosineSimilarity', 'LayerNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.layer_norm1 = nn.LayerNorm(64)
        self.layer_norm2 = nn.LayerNorm(32)
        self.layer_norm3 = nn.LayerNorm(16)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Normalize the input using LayerNorm
        x = self.layer_norm1(x)
        
        # Reshape the input to match the expected shape for CosineSimilarity
        x = x.view(-1, 64)
        
        # Apply CosineSimilarity between the input and a learned weight
        weight = torch.randn_like(x)
        x = self.cosine_sim(x, weight)
        
        # Normalize the output using LayerNorm
        x = self.layer_norm2(x)
        
        # Reshape the output to match the expected shape for BCEWithLogitsLoss
        x = x.view(-1, 32)
        
        # Apply BCEWithLogitsLoss between the output and a target tensor
        target = torch.randint(0, 2, (x.size(0), 32)).float()
        loss = self.bce_loss(x, target)
        
        # Normalize the loss using LayerNorm
        loss = self.layer_norm3(loss.unsqueeze(0))
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
