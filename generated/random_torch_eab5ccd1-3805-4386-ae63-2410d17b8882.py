
# This is a random torch model generated by the following modules: ['TripletMarginWithDistanceLoss', 'PixelUnshuffle', 'Upsample', 'LazyBatchNorm3d', 'LazyInstanceNorm2d', 'LazyConvTranspose3d', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.lazy_in2d = nn.LazyInstanceNorm2d()
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.lazy_bn1d = nn.LazyBatchNorm1d()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Apply PixelUnshuffle to reduce spatial dimensions and increase channels
        x = self.pixel_unshuffle(x)
        
        # Reshape to 5D tensor for LazyBatchNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_bn3d(x)
        
        # Reshape back to 4D tensor for LazyInstanceNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.lazy_in2d(x)
        
        # Reshape to 5D tensor for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape to 2D tensor for LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.lazy_bn1d(x)
        
        # Apply Upsample to increase spatial dimensions
        x = x.view(x.size(0), -1, 1, 1)
        x = self.upsample(x)
        
        # Compute triplet loss using the model's output as anchor, positive, and negative
        anchor = x
        positive = torch.roll(anchor, shifts=1, dims=0)
        negative = torch.roll(anchor, shifts=2, dims=0)
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
