
# This is a random torch model generated by the following modules: ['Identity', 'AdaptiveMaxPool3d', 'Softmin', 'CircularPad3d', 'ChannelShuffle', 'ZeroPad2d', 'GRU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.softmin = nn.Softmin(dim=1)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.channel_shuffle = nn.ChannelShuffle(2)
        self.zero_pad2d = nn.ZeroPad2d(1)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Reshape to 5D for AdaptiveMaxPool3d
        x = x.view(x.size(0), x.size(1), -1, x.size(2), x.size(3))
        x = self.adaptive_max_pool3d(x)
        
        # Reshape back to 4D for Softmin
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.softmin(x)
        
        # Reshape to 5D for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.circular_pad3d(x)
        
        # Reshape back to 4D for ChannelShuffle
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.channel_shuffle(x)
        
        # Reshape to 4D for ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.zero_pad2d(x)
        
        # Reshape to 3D for GRU
        x = x.view(x.size(0), x.size(1), -1)
        x, _ = self.gru(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

