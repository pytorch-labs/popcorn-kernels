
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'BCEWithLogitsLoss', 'AvgPool2d', 'ZeroPad1d', 'Fold', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.zero_pad = nn.ZeroPad1d(padding=2)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2), stride=(2, 2))
        self.batch_norm = nn.BatchNorm1d(num_features=128)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ConvTranspose3d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape to 2D for AvgPool2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.avg_pool(x)
        
        # Reshape to 1D for ZeroPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.zero_pad(x)
        
        # Reshape back to 2D for Fold
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.fold(x)
        
        # Flatten for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm(x)
        
        # Compute loss (dummy target for demonstration)
        target = torch.zeros_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for ConvTranspose3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

