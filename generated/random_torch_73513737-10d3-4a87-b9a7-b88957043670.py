
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'Unflatten', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn1 = nn.LocalResponseNorm(size=5)
        self.lrn2 = nn.LocalResponseNorm(size=5)
        self.unflatten = nn.Unflatten(1, (1, 64))
        self.fmp3d1 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(32, 32, 32))
        self.fmp3d2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(16, 16, 16))

    def forward(self, x):
        # Apply LocalResponseNorm
        x = self.lrn1(x)
        x = self.lrn2(x)
        
        # Reshape the input to fit the Unflatten module
        x = x.view(x.size(0), -1)  # Flatten the input
        x = self.unflatten(x)  # Unflatten to (batch_size, 1, 64)
        
        # Reshape the input to fit the FractionalMaxPool3d module
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.fmp3d1(x)
        x = self.fmp3d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
