
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'BatchNorm1d', 'ReplicationPad1d', 'Fold', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.batch_norm1 = nn.BatchNorm1d(128)
        self.replication_pad = nn.ReplicationPad1d(2)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.instance_norm = nn.InstanceNorm3d(64)
        self.batch_norm2 = nn.BatchNorm1d(64)
        self.batch_norm3 = nn.BatchNorm1d(32)
        self.batch_norm4 = nn.BatchNorm1d(16)
        self.batch_norm5 = nn.BatchNorm1d(8)

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm1(x)
        
        # Reshape back for ReplicationPad1d
        x = x.view(x.size(0), 128, -1)
        x = self.replication_pad(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 4, 4)
        x = self.fold(x)
        
        # Reshape for InstanceNorm3d
        x = x.view(x.size(0), 64, 8, 8, 8)
        x = self.instance_norm(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm2(x)
        x = self.batch_norm3(x)
        x = self.batch_norm4(x)
        x = self.batch_norm5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

