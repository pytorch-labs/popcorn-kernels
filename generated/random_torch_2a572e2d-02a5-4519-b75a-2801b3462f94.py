
# This is a random torch model generated by the following modules: ['CircularPad2d', 'ReflectionPad3d', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad2d = nn.CircularPad2d(1)
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.circular_pad2d_2 = nn.CircularPad2d(1)
        self.reflection_pad3d_2 = nn.ReflectionPad3d(1)
        self.fractional_max_pool3d_2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.circular_pad2d(x)
        # Reshape to 5D (batch, channels, depth, height, width) for 3D operations
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.reflection_pad3d(x)
        x = self.fractional_max_pool3d(x)
        x = x.squeeze(2)  # Remove depth dimension
        x = self.circular_pad2d_2(x)
        x = x.unsqueeze(2)  # Add depth dimension again
        x = self.reflection_pad3d_2(x)
        x = self.fractional_max_pool3d_2(x)
        x = x.squeeze(2)  # Remove depth dimension
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input: batch_size=1, channels=3, height=32, width=32
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

