
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'AdaptiveMaxPool1d', 'FeatureAlphaDropout', 'CrossMapLRN2d', 'InstanceNorm1d', 'Softplus', 'LazyConvTranspose1d', 'Upsample']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5)
        self.instance_norm1d = nn.InstanceNorm1d(num_features=10)
        self.softplus = nn.Softplus()
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=20, kernel_size=5)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')

    def forward(self, x):
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape back to 2D for CrossMapLRN2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape for Upsample
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply Upsample
        x = self.upsample(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
