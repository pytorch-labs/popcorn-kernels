
# This is a random torch model generated by the following modules: ['LazyConv1d', 'AvgPool3d', 'LSTMCell', 'TripletMarginWithDistanceLoss', 'Softmax', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.avgpool1 = nn.AvgPool3d(kernel_size=2)
        self.lstm_cell1 = nn.LSTMCell(input_size=32, hidden_size=64)
        self.lstm_cell2 = nn.LSTMCell(input_size=64, hidden_size=128)
        self.softmax = nn.Softmax(dim=1)
        self.loss_fn = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Reshape input to fit LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        x = self.conv1(x)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Add a dimension to make it 4D (batch_size, 1, channels, sequence_length)
        x = x.unsqueeze(2)  # Add another dimension to make it 5D (batch_size, 1, 1, channels, sequence_length)
        x = self.avgpool1(x)
        
        # Reshape for LSTMCell
        x = x.squeeze(1).squeeze(1)  # Remove the extra dimensions
        x = x.permute(2, 0, 1)  # Reshape to (sequence_length, batch_size, channels)
        
        hx = torch.zeros(x.size(1), 64).to(x.device)
        cx = torch.zeros(x.size(1), 64).to(x.device)
        for i in range(x.size(0)):
            hx, cx = self.lstm_cell1(x[i], (hx, cx))
        
        hx2 = torch.zeros(x.size(1), 128).to(x.device)
        cx2 = torch.zeros(x.size(1), 128).to(x.device)
        for i in range(x.size(0)):
            hx2, cx2 = self.lstm_cell2(hx, (hx2, cx2))
        
        # Apply Softmax
        x = self.softmax(hx2)
        
        # TripletMarginWithDistanceLoss requires three inputs: anchor, positive, negative
        anchor = x[0:1]  # First sample as anchor
        positive = x[1:2]  # Second sample as positive
        negative = x[2:3]  # Third sample as negative
        
        loss = self.loss_fn(anchor, positive, negative)
        
        return x, loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 1, 64).cuda()  # (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
