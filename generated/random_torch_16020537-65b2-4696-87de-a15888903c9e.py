
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'LazyBatchNorm3d', 'Softmax', 'RReLU', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ReplicationPad1d(2)
        self.bn1 = nn.LazyBatchNorm3d()
        self.dropout1 = nn.Dropout1d(0.5)
        self.rrelu1 = nn.RReLU()
        self.softmax = nn.Softmax(dim=1)
        self.pad2 = nn.ReplicationPad1d(1)
        self.bn2 = nn.LazyBatchNorm3d()
        self.dropout2 = nn.Dropout1d(0.3)
        self.rrelu2 = nn.RReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.pad1(x)  # Apply ReplicationPad1d
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to (batch_size, channels, 1, 1, length)
        x = self.bn1(x)  # Apply LazyBatchNorm3d
        x = x.squeeze(3).squeeze(2)  # Reshape back to (batch_size, channels, length)
        x = self.dropout1(x)  # Apply Dropout1d
        x = self.rrelu1(x)  # Apply RReLU
        x = self.softmax(x)  # Apply Softmax
        x = self.pad2(x)  # Apply ReplicationPad1d again
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to (batch_size, channels, 1, 1, length)
        x = self.bn2(x)  # Apply LazyBatchNorm3d again
        x = x.squeeze(3).squeeze(2)  # Reshape back to (batch_size, channels, length)
        x = self.dropout2(x)  # Apply Dropout1d again
        x = self.rrelu2(x)  # Apply RReLU again
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

