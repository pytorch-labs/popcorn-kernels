
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'RNN', 'MultiLabelMarginLoss', 'ReLU', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((10, 10))
        self.rnn = nn.RNN(input_size=100, hidden_size=50, num_layers=2, batch_first=True)
        self.lstm = nn.LSTM(input_size=50, hidden_size=25, num_layers=2, batch_first=True)
        self.relu = nn.ReLU()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Reshape for RNN input
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels * height, width)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply ReLU activation
        x = self.relu(x)
        
        # Reshape for MultiLabelMarginLoss
        x = x.view(batch_size, -1)
        
        # Dummy target for MultiLabelMarginLoss (assuming 2 classes)
        target = torch.randint(0, 2, (batch_size, 2)).long()
        
        # Apply MultiLabelMarginLoss
        loss = self.multi_label_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

