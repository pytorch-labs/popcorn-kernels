
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'Softmin', 'Upsample', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=5, stride=2, padding=2)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=5, stride=2, padding=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply ConvTranspose3d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape to 4D for CrossMapLRN2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

