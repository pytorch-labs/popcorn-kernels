
# This is a random torch model generated by the following modules: ['MultiLabelMarginLoss', 'CrossEntropyLoss', 'LazyBatchNorm2d', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.bn3 = nn.LazyBatchNorm2d()
        self.channel_shuffle1 = nn.ChannelShuffle(2)
        self.channel_shuffle2 = nn.ChannelShuffle(4)
        self.loss1 = nn.MultiLabelMarginLoss()
        self.loss2 = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply batch normalization and channel shuffle
        x = self.bn1(x)
        x = self.channel_shuffle1(x)
        x = self.bn2(x)
        x = self.channel_shuffle2(x)
        x = self.bn3(x)
        
        # Flatten the tensor for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss computation
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        target_labels = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Compute losses
        loss1 = self.loss1(x, target)
        loss2 = self.loss2(x, target_labels)
        
        # Return the sum of losses
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

