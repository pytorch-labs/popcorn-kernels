
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'Flatten', 'Threshold', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.bn2 = nn.LazyBatchNorm3d()
        self.bn3 = nn.LazyBatchNorm3d()
        self.flatten = nn.Flatten()
        self.threshold1 = nn.Threshold(0.1, 0.5)
        self.threshold2 = nn.Threshold(0.2, 0.5)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        x = self.bn1(x)
        x = self.threshold1(x)
        x = self.bn2(x)
        x = self.threshold2(x)
        x = self.bn3(x)
        x = self.flatten(x)
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape for 3D data
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

