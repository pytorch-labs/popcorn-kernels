
# This is a random torch model generated by the following modules: ['PReLU', 'Conv3d', 'ModuleList', 'Unfold', 'CrossMapLRN2d', 'AdaptiveMaxPool3d', 'MSELoss', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.prelu = nn.PReLU()
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.unfold = nn.Unfold(kernel_size=(2, 2, 2))
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.module_list = nn.ModuleList([
            nn.Sequential(
                nn.Conv3d(20, 30, kernel_size=3),
                nn.PReLU(),
                nn.Conv3d(30, 40, kernel_size=3)
            ),
            nn.Sequential(
                nn.Conv3d(40, 50, kernel_size=3),
                nn.PReLU(),
                nn.Conv3d(50, 60, kernel_size=3)
            )
        ])
        self.mseloss = nn.MSELoss()

    def forward(self, x):
        x = self.conv3d_1(x)
        x = self.prelu(x)
        x = self.conv3d_2(x)
        x = self.unfold(x)
        x = x.view(x.size(0), 20, -1, x.size(2))  # Reshape for CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        x = x.view(x.size(0), 20, 5, 5, 5)  # Reshape back to 3D
        x = self.adaptive_max_pool3d(x)
        for module in self.module_list:
            x = module(x)
        target = torch.randn_like(x)  # Random target for MSELoss
        loss = self.mseloss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

