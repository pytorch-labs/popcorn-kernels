
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'LeakyReLU', 'Linear', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.linear1 = nn.Linear(16 * 16 * 3, 128)  # Assuming 3 channels after pooling
        self.linear2 = nn.Linear(128, 10)
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Flatten the tensor for the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the first Linear layer
        x = self.linear1(x)
        
        # Apply LeakyReLU again
        x = self.leaky_relu(x)
        
        # Apply the second Linear layer
        x = self.linear2(x)
        
        # Apply log_softmax for NLLLoss2d compatibility
        x = F.log_softmax(x, dim=1)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), -1, 1, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels and 64x64 input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
