
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'LazyConvTranspose2d', 'Dropout1d', 'GRU', 'GLU', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad1d(2, 3.0)
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3)
        self.dropout1 = nn.Dropout1d(p=0.5)
        self.gru = nn.GRU(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.glu = nn.GLU(dim=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=8, kernel_size=3)
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.pad(x)  # Apply ConstantPad1d
        x = self.conv_transpose1(x)  # Apply LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for Dropout1d
        x = self.dropout1(x)  # Apply Dropout1d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)  # Reshape back for GRU
        x = x.squeeze(-1)  # Remove last dimension for GRU
        x, _ = self.gru(x)  # Apply GRU
        x = x.unsqueeze(-1)  # Add last dimension back
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))  # Reshape for GLU
        x = self.glu(x)  # Apply GLU
        x = self.conv_transpose2(x)  # Apply LazyConvTranspose2d
        x = F.log_softmax(x, dim=1)  # Apply log_softmax for NLLLoss2d
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(*inputs)
