
# This is a random torch model generated by the following modules: ['RNN', 'Threshold', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.hardtanh1 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.rnn2 = nn.RNN(input_size=20, hidden_size=30, num_layers=1, batch_first=True)
        self.threshold2 = nn.Threshold(threshold=0.2, value=0.0)
        self.hardtanh2 = nn.Hardtanh(min_val=-0.5, max_val=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # If not, reshape it accordingly
        if len(x.shape) == 2:
            x = x.unsqueeze(0)  # Add batch dimension if missing
        elif len(x.shape) == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and sequence dimensions if missing

        # Pass through the first RNN
        x, _ = self.rnn1(x)
        
        # Apply Threshold
        x = self.threshold1(x)
        
        # Apply Hardtanh
        x = self.hardtanh1(x)
        
        # Pass through the second RNN
        x, _ = self.rnn2(x)
        
        # Apply Threshold again
        x = self.threshold2(x)
        
        # Apply Hardtanh again
        x = self.hardtanh2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 5, 10).cuda()  # Example input: (batch_size=1, sequence_length=5, input_size=10)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

