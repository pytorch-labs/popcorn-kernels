
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'MaxPool3d', 'LazyConvTranspose1d', 'ReflectionPad2d', 'Softsign', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=1)
        self.reflection_pad2d = nn.ReflectionPad2d(padding=1)
        self.softsign = nn.Softsign()
        self.logsigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for MaxPool3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.maxpool3d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.shape[0], x.shape[1], -1)
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape for ReflectionPad2d
        x = x.view(x.shape[0], x.shape[1], x.shape[2], 1)
        x = self.reflection_pad2d(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply LogSigmoid
        x = self.logsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

