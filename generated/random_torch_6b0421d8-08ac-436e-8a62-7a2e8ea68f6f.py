
# This is a random torch model generated by the following modules: ['RReLU', 'Hardswish', 'TripletMarginWithDistanceLoss', 'AdaptiveAvgPool1d', 'TransformerDecoderLayer', 'CELU', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rrelu = nn.RReLU()
        self.hardswish = nn.Hardswish()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.celu = nn.CELU()
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        
        # Repeat some modules up to 5 times
        self.rrelu2 = nn.RReLU()
        self.hardswish2 = nn.Hardswish()
        self.celu2 = nn.CELU()
        self.celu3 = nn.CELU()
        self.celu4 = nn.CELU()

    def forward(self, x):
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for TransformerDecoderLayer
        x = x.view(x.size(0), -1, 64)  # Reshape to (batch_size, seq_len, d_model)
        x = self.transformer_decoder_layer(x, x)  # Self-attention
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply Fold
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.fold(x)
        
        # Apply repeated modules
        x = self.rrelu2(x)
        x = self.hardswish2(x)
        x = self.celu2(x)
        x = self.celu3(x)
        x = self.celu4(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
