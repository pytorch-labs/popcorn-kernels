
# This is a random torch model generated by the following modules: ['Conv3d', 'ReplicationPad2d', 'Fold', 'ReplicationPad1d', 'PixelUnshuffle', 'CircularPad3d', 'RMSNorm', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.replication_pad2d_1 = nn.ReplicationPad2d(1)
        self.fold_1 = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.replication_pad1d_1 = nn.ReplicationPad1d(1)
        self.pixel_unshuffle_1 = nn.PixelUnshuffle(2)
        self.circular_pad3d_1 = nn.CircularPad3d(1)
        self.rms_norm_1 = RMSNorm(10)
        self.circular_pad2d_1 = nn.CircularPad2d(1)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.replication_pad2d_2 = nn.ReplicationPad2d(1)
        self.fold_2 = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.replication_pad1d_2 = nn.ReplicationPad1d(1)
        self.pixel_unshuffle_2 = nn.PixelUnshuffle(2)
        self.circular_pad3d_2 = nn.CircularPad3d(1)
        self.rms_norm_2 = RMSNorm(20)
        self.circular_pad2d_2 = nn.CircularPad2d(1)

    def forward(self, x):
        # Initial 3D convolution
        x = self.conv3d_1(x)
        
        # Reshape to 2D for ReplicationPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.replication_pad2d_1(x)
        
        # Fold operation
        x = self.fold_1(x)
        
        # Reshape to 1D for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d_1(x)
        
        # PixelUnshuffle
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.pixel_unshuffle_1(x)
        
        # Reshape back to 3D for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.circular_pad3d_1(x)
        
        # RMSNorm
        x = self.rms_norm_1(x)
        
        # Reshape to 2D for CircularPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.circular_pad2d_1(x)
        
        # Second 3D convolution
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.conv3d_2(x)
        
        # Reshape to 2D for ReplicationPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.replication_pad2d_2(x)
        
        # Fold operation
        x = self.fold_2(x)
        
        # Reshape to 1D for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d_2(x)
        
        # PixelUnshuffle
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.pixel_unshuffle_2(x)
        
        # Reshape back to 3D for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.circular_pad3d_2(x)
        
        # RMSNorm
        x = self.rms_norm_2(x)
        
        # Reshape to 2D for CircularPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.circular_pad2d_2(x)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
