
# This is a random torch model generated by the following modules: ['Conv3d', 'LazyInstanceNorm2d', 'LazyInstanceNorm3d', 'Unflatten', 'Softsign', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.lazy_instance_norm3d_1 = nn.LazyInstanceNorm3d()
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.lazy_instance_norm3d_2 = nn.LazyInstanceNorm3d()
        self.unflatten = nn.Unflatten(1, (20, 1, 1))
        self.softsign = nn.Softsign()
        self.bilinear = nn.Bilinear(20, 20, 10)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()

    def forward(self, x):
        # Apply Conv3d and LazyInstanceNorm3d
        x = self.conv3d_1(x)
        x = self.lazy_instance_norm3d_1(x)
        x = self.conv3d_2(x)
        x = self.lazy_instance_norm3d_2(x)
        
        # Reshape and apply Unflatten
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.unflatten(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), 20, -1)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, 1, 20)
        x = self.bilinear(x, x)  # Apply Bilinear
        
        # Apply LazyInstanceNorm2d
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = self.lazy_instance_norm2d(x)
        x = x.squeeze(1)  # Remove the dummy channel dimension
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Arbitrary 3D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

