
# This is a random torch model generated by the following modules: ['Sequential', 'ZeroPad1d', 'ModuleList', 'SELU', 'Tanhshrink', 'HuberLoss', 'ParameterList', 'NLLLoss', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.ZeroPad1d(2),
            nn.SELU(),
            nn.Tanhshrink(),
            nn.ZeroPad1d(2),
            nn.SELU()
        )
        self.module_list = nn.ModuleList([
            nn.SELU(),
            nn.Tanhshrink(),
            nn.SELU()
        ])
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])
        self.huber_loss = nn.HuberLoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Sequential
        x = self.sequential(x)
        
        # Apply ModuleList
        for module in self.module_list:
            x = module(x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = x + param.unsqueeze(0).expand_as(x)
        
        # Reshape for loss calculation
        x = x.view(-1, 10)
        
        # Dummy target for loss calculation
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        
        # Calculate HuberLoss
        huber_loss = self.huber_loss(x, target.float())
        
        # Calculate NLLLoss
        log_softmax = F.log_softmax(x, dim=1)
        nll_loss = self.nll_loss(log_softmax, target)
        
        # Return both losses
        return huber_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

