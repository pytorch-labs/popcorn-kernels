
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'AvgPool1d', 'BatchNorm1d', 'ConvTranspose3d', 'TripletMarginWithDistanceLoss', 'LazyBatchNorm1d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad3d(1)
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3)
        self.batch_norm1d = nn.BatchNorm1d(10)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(5)
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad(x)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape to 1D for BatchNorm1d and LazyBatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = x.mean(dim=2)  # Reduce to 1D
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)
        
        # Reshape back to 2D for AvgPool1d and AdaptiveAvgPool1d
        x = x.unsqueeze(2)  # Add a dummy dimension
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        
        # Compute TripletMarginWithDistanceLoss (dummy computation)
        anchor = x
        positive = x + torch.randn_like(x) * 0.1
        negative = x + torch.randn_like(x) * 0.2
        loss = self.triplet_loss(anchor, positive, negative)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Arbitrary 3D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

