
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'LazyBatchNorm1d', 'Sequential', 'NLLLoss', 'GRU', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1d = nn.LazyBatchNorm1d()
        self.bn3d = nn.LazyBatchNorm3d()
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.sequential = nn.Sequential(
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 16)
        )
        self.nll_loss = nn.NLLLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.bn3d(x)  # Apply LazyBatchNorm3d
        x = x.view(x.size(0), -1)  # Flatten for LazyBatchNorm1d
        x = self.bn1d(x)  # Apply LazyBatchNorm1d
        x = x.view(x.size(0), -1, 128)  # Reshape for GRU
        x, _ = self.gru(x)  # Apply GRU
        x = x[:, -1, :]  # Take the last hidden state
        x = self.sequential(x)  # Apply Sequential
        x = F.log_softmax(x, dim=1)  # Apply log_softmax for NLLLoss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

