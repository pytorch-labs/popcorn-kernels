
# This is a random torch model generated by the following modules: ['LeakyReLU', 'ModuleList', 'AdaptiveAvgPool1d', 'AdaptiveAvgPool3d', 'Threshold', 'NLLLoss2d', 'ConvTranspose3d', 'FractionalMaxPool2d', 'HingeEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.module_list = nn.ModuleList([
            nn.LeakyReLU(negative_slope=0.1),
            nn.Threshold(threshold=0.5, value=1.0),
            nn.AdaptiveAvgPool1d(output_size=10),
            nn.AdaptiveAvgPool3d(output_size=(5, 5, 5)),
            nn.FractionalMaxPool2d(kernel_size=2, output_size=(10, 10))
        ])
        self.nll_loss2d = nn.NLLLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Apply ModuleList layers
        for layer in self.module_list:
            if isinstance(layer, nn.AdaptiveAvgPool1d):
                # Reshape for AdaptiveAvgPool1d
                x = x.view(x.size(0), x.size(1), -1)
                x = layer(x)
                x = x.view(x.size(0), x.size(1), 1, 1, 1)  # Reshape back
            elif isinstance(layer, nn.AdaptiveAvgPool3d):
                x = layer(x)
            elif isinstance(layer, nn.FractionalMaxPool2d):
                # Reshape for FractionalMaxPool2d
                x = x.view(x.size(0), x.size(1), x.size(2), -1)
                x = layer(x)
                x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), 1)  # Reshape back
            else:
                x = layer(x)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        target = torch.randint(0, 10, (x.size(0), x.size(2), x.size(3))).long()
        x = x.view(x.size(0), x.size(1), -1)
        x = F.log_softmax(x, dim=1)
        x = self.nll_loss2d(x, target)
        
        # Apply HingeEmbeddingLoss (assuming target is provided externally)
        target_hinge = torch.ones(x.size(0)).long()
        x = self.hinge_embedding_loss(x, target_hinge)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
