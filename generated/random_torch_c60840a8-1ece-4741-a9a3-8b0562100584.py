
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'GaussianNLLLoss', 'Tanhshrink', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(padding=1)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.tanhshrink = nn.Tanhshrink()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply ZeroPad3d to the input
        x = self.zero_pad(x)
        
        # Reshape the tensor to fit the UpsamplingBilinear2d input requirements
        # Assuming the input is 5D (batch, channels, depth, height, width), we need to convert it to 4D (batch, channels, height, width)
        # by selecting a specific depth slice or averaging over depth
        x = x.mean(dim=2)  # Average over the depth dimension to get a 4D tensor
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape the tensor to fit the GaussianNLLLoss input requirements
        # GaussianNLLLoss expects input of shape (N, *) and target of shape (N, *)
        # For simplicity, we'll assume the target is a tensor of zeros with the same shape as x
        target = torch.zeros_like(x)
        
        # Apply GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, torch.ones_like(x))
        
        # Return the loss as the output (since GaussianNLLLoss returns a scalar)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

