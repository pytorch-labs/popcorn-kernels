
# This is a random torch model generated by the following modules: ['ReLU6', 'Threshold', 'Fold', 'MultiLabelMarginLoss', 'MaxUnpool2d', 'CircularPad2d', 'Sequential', 'AdaptiveAvgPool3d', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.threshold = nn.Threshold(0.5, 1.0)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.circular_pad2d = nn.CircularPad2d(1)
        self.sequential = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=3),
            nn.ReLU(),
            nn.Conv2d(10, 20, kernel_size=3),
            nn.ReLU()
        )
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad2d(x)
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply MaxUnpool2d (requires indices from a previous MaxPool2d)
        # Assuming we have a MaxPool2d layer to get indices
        pool = nn.MaxPool2d(kernel_size=2, stride=2, return_indices=True)
        x, indices = pool(x)
        x = self.max_unpool2d(x, indices)
        
        # Apply Fold
        x = x.view(x.size(0), -1, 1)  # Reshape for Fold
        x = self.fold(x)
        
        # Apply AdaptiveAvgPool3d (reshape to 3D first)
        x = x.unsqueeze(0)  # Add a dummy dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Apply MultiLabelMarginLoss (requires target)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        x = self.multi_label_margin_loss(x.squeeze(), target)
        
        # Apply GaussianNLLLoss (requires target and variance)
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        x = self.gaussian_nll_loss(x, target, var)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
