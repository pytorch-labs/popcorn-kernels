
# This is a random torch model generated by the following modules: ['CircularPad2d', 'GRUCell', 'LazyConv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.gru_cell = nn.GRUCell(64, 128)  # Assuming input size 64 and hidden size 128
        self.lazy_conv3d = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.lazy_conv3d_2 = nn.LazyConv3d(out_channels=64, kernel_size=3)
        self.gru_cell_2 = nn.GRUCell(128, 64)  # Assuming input size 128 and hidden size 64

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for GRUCell
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        
        # Apply GRUCell
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Reshape for LazyConv3d
        x = x.view(batch_size, 1, 128, 1, 1)  # Reshape to 5D tensor for Conv3d
        
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        x = F.relu(x)
        
        # Apply second LazyConv3d
        x = self.lazy_conv3d_2(x)
        x = F.relu(x)
        
        # Reshape for second GRUCell
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        
        # Apply second GRUCell
        hx = torch.zeros(batch_size, 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell_2(x, hx)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

