
# This is a random torch model generated by the following modules: ['Dropout', 'AdaptiveAvgPool3d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.flatten = nn.Flatten()
        self.dropout2 = nn.Dropout(p=0.5)

    def forward(self, x):
        # Apply dropout to the input
        x = self.dropout1(x)
        
        # Apply adaptive average pooling to reduce the spatial dimensions to 1x1x1
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten the output to a 1D tensor
        x = self.flatten(x)
        
        # Apply dropout again
        x = self.dropout2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
