
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'Dropout1d', 'LPPool3d', 'ZeroPad1d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.zeropad1d = nn.ZeroPad1d(padding=2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[4, 8])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.zeropad1d(x)  # Apply ZeroPad1d to the input
        x = self.dropout1d(x)  # Apply Dropout1d to the padded input
        
        # Reshape to 3D for LPPool3d and Dropout3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, channels, 1, 1, length)
        x = self.lppool3d(x)  # Apply LPPool3d
        x = self.dropout3d(x)  # Apply Dropout3d
        
        # Reshape back to 2D for AdaptiveLogSoftmaxWithLoss
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, channels, length)
        x = x.mean(dim=2)  # Reduce along the length dimension
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax.log_prob(x)
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

