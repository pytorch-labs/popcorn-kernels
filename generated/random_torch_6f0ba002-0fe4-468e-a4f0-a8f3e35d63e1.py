
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'RMSNorm', 'FractionalMaxPool3d', 'MultiheadAttention', 'ChannelShuffle', 'GRU', 'TransformerEncoder', 'LazyBatchNorm1d', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.rms_norm = RMSNorm(64)  # Assuming input channels are 64
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(32, 32, 32))
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.channel_shuffle = nn.ChannelShuffle(4)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.lazy_batch_norm = nn.LazyBatchNorm1d()
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # ZeroPad3d
        x = self.zero_pad(x)
        
        # RMSNorm
        x = self.rms_norm(x)
        
        # FractionalMaxPool3d
        x = self.fractional_max_pool(x)
        
        # MultiheadAttention
        x = x.permute(0, 2, 1)  # Reshape for MultiheadAttention
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(0, 2, 1)  # Reshape back
        
        # ChannelShuffle
        x = self.channel_shuffle(x)
        
        # GRU
        x = x.permute(0, 2, 1)  # Reshape for GRU
        x, _ = self.gru(x)
        x = x.permute(0, 2, 1)  # Reshape back
        
        # TransformerEncoder
        x = x.permute(1, 0, 2)  # Reshape for TransformerEncoder
        x = self.transformer_encoder(x)
        x = x.permute(1, 0, 2)  # Reshape back
        
        # LazyBatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten for BatchNorm1d
        x = self.lazy_batch_norm(x)
        
        # CosineSimilarity
        x = x.view(x.size(0), 2, -1)  # Reshape for CosineSimilarity
        x = self.cosine_similarity(x[:, 0], x[:, 1])
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
