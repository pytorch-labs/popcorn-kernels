
# This is a random torch model generated by the following modules: ['Identity', 'Hardswish', 'FractionalMaxPool2d', 'FractionalMaxPool3d', 'GELU', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.hardswish = nn.Hardswish()
        self.fractional_maxpool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.fractional_maxpool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(7, 7, 7))
        self.gelu = nn.GELU()
        self.lazy_batchnorm3d = nn.LazyBatchNorm3d()
        
        # Repeat some modules up to 5 times
        self.hardswish2 = nn.Hardswish()
        self.gelu2 = nn.GELU()
        self.lazy_batchnorm3d2 = nn.LazyBatchNorm3d()
        self.fractional_maxpool2d2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.fractional_maxpool3d2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(3, 3, 3))

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for FractionalMaxPool2d
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension if necessary
        x = self.fractional_maxpool2d(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Reshape for FractionalMaxPool3d
        if x.dim() == 4:
            x = x.unsqueeze(1)  # Add depth dimension if necessary
        x = self.fractional_maxpool3d(x)
        
        # Apply LazyBatchNorm3d
        x = self.lazy_batchnorm3d(x)
        
        # Apply Hardswish again
        x = self.hardswish2(x)
        
        # Apply GELU again
        x = self.gelu2(x)
        
        # Apply LazyBatchNorm3d again
        x = self.lazy_batchnorm3d2(x)
        
        # Reshape for FractionalMaxPool2d again
        if x.dim() == 5:
            x = x.squeeze(1)  # Remove depth dimension if necessary
        x = self.fractional_maxpool2d2(x)
        
        # Reshape for FractionalMaxPool3d again
        if x.dim() == 4:
            x = x.unsqueeze(1)  # Add depth dimension if necessary
        x = self.fractional_maxpool3d2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

