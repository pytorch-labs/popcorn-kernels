
# This is a random torch model generated by the following modules: ['GRU', 'PixelShuffle', 'Linear', 'ModuleDict', 'LogSoftmax', 'Hardsigmoid', 'BCEWithLogitsLoss', 'AdaptiveMaxPool3d', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 128)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5)
        })
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.hardsigmoid = nn.Hardsigmoid()
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape for GRU
        x = x.view(batch_size, -1, 64)  # Reshape to (batch_size, seq_len, input_size)
        x, _ = self.gru(x)  # Output shape: (batch_size, seq_len, hidden_size)
        
        # Reshape for PixelShuffle
        x = x.view(batch_size, -1, height, width)  # Reshape to (batch_size, channels, height, width)
        x = self.pixel_shuffle(x)  # Output shape: (batch_size, channels / 4, height * 2, width * 2)
        
        # Apply Linear layers
        x = x.view(batch_size, -1)  # Flatten for Linear
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Apply ModuleDict layers
        x = x.view(batch_size, 1, -1, 1)  # Reshape for Conv2d
        x = self.module_dict['conv1'](x)
        x = self.max_pool2d(x)
        x = self.module_dict['conv2'](x)
        x = self.max_pool2d(x)
        
        # Apply AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Add a dummy dimension for 3D pooling
        x = self.adaptive_max_pool3d(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply LogSoftmax
        x = x.view(batch_size, -1)  # Flatten for LogSoftmax
        x = self.log_softmax(x)
        
        # Apply BCEWithLogitsLoss (assuming target is provided externally)
        # Note: BCEWithLogitsLoss is typically used in the loss computation, not in the forward pass.
        # Here, we just return the logits for the loss computation.
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
