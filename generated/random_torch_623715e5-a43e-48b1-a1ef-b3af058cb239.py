
# This is a random torch model generated by the following modules: ['CircularPad2d', 'MaxPool3d', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)  # Padding of 1 on all sides
        self.max_pool3d = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((4, 4, 4))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width), we need to reshape it to 5D for 3D pooling
        # Add a dummy depth dimension to make it 5D (batch, channels, depth, height, width)
        x = x.unsqueeze(2)  # Shape: (batch, channels, 1, height, width)
        
        # Apply CircularPad2d to the last two dimensions (height, width)
        x = self.circular_pad(x)  # Shape: (batch, channels, 1, height + 2, width + 2)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)  # Shape: (batch, channels, 1, (height + 2)//2, (width + 2)//2)
        
        # Apply AdaptiveMaxPool3d to get a fixed output size
        x = self.adaptive_max_pool3d(x)  # Shape: (batch, channels, 4, 4, 4)
        
        # Remove the dummy depth dimension to return to 4D
        x = x.squeeze(2)  # Shape: (batch, channels, 4, 4)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch size 1, 3 channels, 64x64 image
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
