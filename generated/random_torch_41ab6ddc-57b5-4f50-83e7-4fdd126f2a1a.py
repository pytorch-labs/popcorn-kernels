
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'CosineSimilarity', 'AvgPool3d', 'BatchNorm3d', 'ParameterDict', 'InstanceNorm1d', 'Tanh', 'ReplicationPad2d', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)
        self.avg_pool = nn.AvgPool3d(kernel_size=2, stride=2)
        self.batch_norm3d = nn.BatchNorm3d(32)
        self.instance_norm1d = nn.InstanceNorm1d(64)
        self.tanh = nn.Tanh()
        self.replication_pad = nn.ReplicationPad2d(padding=1)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1, 128)),
            'param2': nn.Parameter(torch.randn(1, 128))
        })
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply ConvTranspose3d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply AvgPool3d
        x = self.avg_pool(x)
        
        # Apply BatchNorm3d
        x = self.batch_norm3d(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), -1, x.size(-1))  # Flatten spatial dimensions
        x = self.instance_norm1d(x)
        
        # Apply Tanh
        x = self.tanh(x)
        
        # Reshape for ReplicationPad2d
        x = x.view(x.size(0), -1, x.size(-1), x.size(-1))  # Reshape to 4D
        x = self.replication_pad(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten to 2D
        x = self.batch_norm1d(x)
        
        # Apply ParameterDict
        param1 = self.parameter_dict['param1']
        param2 = self.parameter_dict['param2']
        x = x * param1 + param2
        
        # Apply CosineSimilarity
        x = self.cosine_similarity(x, param1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

