
# This is a random torch model generated by the following modules: ['ReLU', 'Hardshrink', 'FractionalMaxPool3d', 'BCEWithLogitsLoss', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu = nn.ReLU()
        self.hardshrink = nn.Hardshrink()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.hardswish = nn.Hardswish()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ReLU
        x = self.relu(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape to 5D tensor for FractionalMaxPool3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3]) if len(x.shape) == 4 else x
        x = self.fractional_max_pool3d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape back to 2D tensor for BCEWithLogitsLoss
        x = x.view(x.shape[0], -1)
        
        # Apply BCEWithLogitsLoss (assuming target is provided externally)
        # For demonstration, we'll create a dummy target tensor
        target = torch.ones_like(x)
        loss = self.bce_with_logits_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

