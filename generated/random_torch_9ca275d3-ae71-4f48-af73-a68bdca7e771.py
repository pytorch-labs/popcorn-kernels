
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'ReLU6', 'Hardshrink', 'CircularPad1d', 'AdaptiveMaxPool2d', 'Identity', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.relu6 = nn.ReLU6()
        self.hardshrink = nn.Hardshrink()
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((10, 10))
        self.identity = nn.Identity()
        self.gelu = nn.GELU()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.upsample(x)
        x = self.relu6(x)
        x = self.hardshrink(x)
        
        # Convert to 3D (batch, channels, length) for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.circular_pad1d(x)
        
        # Convert back to 4D for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.adaptive_max_pool2d(x)
        
        x = self.identity(x)
        x = self.gelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
