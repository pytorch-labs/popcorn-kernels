
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'Softmin', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=10)
        self.softmin = nn.Softmin(dim=1)
        self.hardshrink = nn.Hardshrink(lambd=0.5)

    def forward(self, x):
        # Reshape input to have a single channel for AdaptiveAvgPool1d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, sequence_length)
        x = self.adaptive_avg_pool(x)  # Apply AdaptiveAvgPool1d
        x = x.view(x.size(0), -1)  # Flatten the output
        x = self.softmin(x)  # Apply Softmin
        x = self.hardshrink(x)  # Apply Hardshrink
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Example input with shape (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
