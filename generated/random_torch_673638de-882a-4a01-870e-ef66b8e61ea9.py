
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'LeakyReLU', 'AdaptiveAvgPool1d', 'RNNCell', 'Dropout1d', 'L1Loss', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.leaky_relu = nn.LeakyReLU()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.rnn_cell = nn.RNNCell(input_size=10, hidden_size=20)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.l1_loss = nn.L1Loss()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        x = self.hardsigmoid(x)
        x = self.leaky_relu(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, feature_dim, sequence_length)
        x = self.adaptive_avg_pool1d(x)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, feature_dim)
        
        # Process through RNNCell
        batch_size, seq_len, feature_dim = x.size()
        hx = torch.zeros(batch_size, 20).to(x.device)  # Initialize hidden state
        outputs = []
        for i in range(seq_len):
            hx = self.rnn_cell(x[:, i, :], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=1)  # (batch_size, sequence_length, hidden_size)
        
        # Apply Dropout1d
        x = x.permute(0, 2, 1)  # (batch_size, hidden_size, sequence_length)
        x = self.dropout1d(x)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, hidden_size)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Compute L1 Loss (dummy target for demonstration)
        target = torch.zeros_like(x)
        loss = self.l1_loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20, 10).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
