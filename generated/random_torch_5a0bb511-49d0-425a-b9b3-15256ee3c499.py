
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'GRU', 'AdaptiveAvgPool1d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=64)
        self.linear1 = nn.Linear(256, 128)
        self.linear2 = nn.Linear(128, 64)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Pass through GRU
        x, _ = self.gru1(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        
        # Transpose for AdaptiveAvgPool1d
        x = x.transpose(1, 2)  # Shape: (batch_size, hidden_size, sequence_length)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool(x)  # Shape: (batch_size, hidden_size, output_size)
        
        # Transpose back
        x = x.transpose(1, 2)  # Shape: (batch_size, output_size, hidden_size)
        
        # Reshape for Linear layers
        x = x.reshape(batch_size, -1)  # Shape: (batch_size, output_size * hidden_size)
        
        # Pass through Linear layers
        x = F.relu(self.linear1(x))  # Shape: (batch_size, 128)
        x = self.linear2(x)  # Shape: (batch_size, 64)
        
        # PoissonNLLLoss is typically used for loss computation, not in the forward pass
        # So we return the output and let the user compute the loss if needed
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

