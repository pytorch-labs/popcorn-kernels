
# This is a random torch model generated by the following modules: ['LayerNorm', 'Dropout1d', 'Hardtanh', 'SoftMarginLoss', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.layer_norm1 = nn.LayerNorm(64)
        self.layer_norm2 = nn.LayerNorm(32)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply LayerNorm
        x = self.layer_norm1(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.dropout1d(x)
        
        # Reshape back and apply Hardtanh
        x = x.view(x.size(0), -1)
        x = self.hardtanh(x)
        
        # Apply LayerNorm again
        x = self.layer_norm2(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 4, 4)
        x = self.fold(x)
        
        # Compute SoftMarginLoss (assuming a target tensor for demonstration)
        target = torch.ones_like(x)
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

