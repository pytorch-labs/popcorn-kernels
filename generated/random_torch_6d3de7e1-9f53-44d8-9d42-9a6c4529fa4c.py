
# This is a random torch model generated by the following modules: ['AvgPool3d', 'LazyConvTranspose1d', 'SoftMarginLoss', 'AdaptiveMaxPool3d', 'AvgPool2d', 'BatchNorm3d', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.batch_norm3d = nn.BatchNorm3d(num_features=32)
        self.lazy_linear = nn.LazyLinear(out_features=10)
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        x = self.batch_norm3d(x)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 3D (batch, channels, depth*height*width)
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply ConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape back to 4D (batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply AvgPool2d
        x = self.avg_pool2d(x)
        
        # Flatten for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear
        x = self.lazy_linear(x)
        
        # Apply SoftMarginLoss (assuming target is provided externally)
        # For demonstration, we create a dummy target
        target = torch.ones_like(x)
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
