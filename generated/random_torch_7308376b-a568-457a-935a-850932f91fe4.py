
# This is a random torch model generated by the following modules: ['Sigmoid', 'ReplicationPad3d', 'ConvTranspose3d', 'Conv1d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.conv_transpose3d = nn.ConvTranspose3d(10, 20, kernel_size=3)
        self.module_list = nn.ModuleList([
            nn.Conv1d(20, 30, kernel_size=3),
            nn.Conv1d(30, 40, kernel_size=3),
            nn.Conv1d(40, 50, kernel_size=3)
        ])
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1d(x)
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 10, 1, 1, length)
        x = self.replication_pad3d(x)
        
        # Reshape for ConvTranspose3d
        x = self.conv_transpose3d(x)  # Shape: (batch_size, 20, 3, 3, length)
        
        # Reshape back to 1D for Conv1d in ModuleList
        x = x.squeeze(2).squeeze(2)  # Shape: (batch_size, 20, length)
        
        # Apply Conv1d layers from ModuleList
        for conv1d in self.module_list:
            x = conv1d(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

