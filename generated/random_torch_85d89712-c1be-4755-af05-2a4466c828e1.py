
# This is a random torch model generated by the following modules: ['Hardtanh', 'GRUCell', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=256)
        self.module_dict = nn.ModuleDict({
            'fc1': nn.Linear(256, 128),
            'fc2': nn.Linear(128, 64),
            'fc3': nn.Linear(64, 10)
        })

    def forward(self, x):
        # Flatten the input to fit GRUCell input size
        x = x.view(x.size(0), -1)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Initialize hidden state for GRUCell
        hx = torch.zeros(x.size(0), 256).to(x.device)
        
        # Apply GRUCell
        x = self.gru_cell(x, hx)
        
        # Apply layers from ModuleDict
        x = self.module_dict['fc1'](x)
        x = self.module_dict['fc2'](x)
        x = self.module_dict['fc3'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

