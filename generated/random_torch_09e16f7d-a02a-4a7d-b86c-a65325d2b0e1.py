
# This is a random torch model generated by the following modules: ['LPPool3d', 'Module', 'LazyConvTranspose3d', 'GELU', 'Hardswish', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.lazy_conv_transpose1 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=1)
        self.gelu = nn.GELU()
        self.hardswish = nn.Hardswish()
        self.conv_transpose1 = nn.ConvTranspose3d(in_channels=32, out_channels=64, kernel_size=3, stride=1)
        self.conv_transpose2 = nn.ConvTranspose3d(in_channels=64, out_channels=128, kernel_size=3, stride=1)
        self.conv_transpose3 = nn.ConvTranspose3d(in_channels=128, out_channels=256, kernel_size=3, stride=1)

    def forward(self, x):
        x = self.lp_pool(x)
        x = self.lazy_conv_transpose1(x)
        x = self.gelu(x)
        x = self.conv_transpose1(x)
        x = self.hardswish(x)
        x = self.conv_transpose2(x)
        x = self.gelu(x)
        x = self.conv_transpose3(x)
        x = self.hardswish(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
