
# This is a random torch model generated by the following modules: ['ELU', 'Softsign', 'Threshold', 'ConvTranspose1d', 'BatchNorm2d', 'InstanceNorm3d', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.batch_norm2d = nn.BatchNorm2d(10)
        self.instance_norm3d = nn.InstanceNorm3d(10)
        self.elu = nn.ELU()
        self.softsign = nn.Softsign()
        self.threshold = nn.Threshold(0.1, 0.5)
        self.mish = nn.Mish()

    def forward(self, x):
        # Reshape input to fit ConvTranspose1d
        x = x.view(x.size(0), 1, -1)
        x = self.conv_transpose1d(x)
        
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), 10, 1, -1)
        x = self.batch_norm2d(x)
        
        # Reshape for InstanceNorm3d
        x = x.view(x.size(0), 10, 1, 1, -1)
        x = self.instance_norm3d(x)
        
        # Reshape back to 2D for ELU
        x = x.view(x.size(0), 10, -1)
        x = self.elu(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for Mish
        x = x.view(x.size(0), -1)
        x = self.mish(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
