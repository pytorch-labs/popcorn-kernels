
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'Hardtanh', 'Softmin', 'UpsamplingNearest2d', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.softmin = nn.Softmin(dim=1)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            'conv2': nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
        })

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply the first convolution from ModuleDict
        x = self.module_dict['conv1'](x)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Apply the second convolution from ModuleDict
        x = self.module_dict['conv2'](x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
