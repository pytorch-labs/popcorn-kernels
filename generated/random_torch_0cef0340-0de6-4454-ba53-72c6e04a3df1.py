
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'MultiheadAttention', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=10, num_heads=2)
        self.parameter_dict = nn.ParameterDict({
            'weight': nn.Parameter(torch.randn(10, 10)),
            'bias': nn.Parameter(torch.randn(10))
        })

    def forward(self, x):
        # Reshape input to fit AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, sequence_length)
        x = self.adaptive_max_pool(x)
        
        # Prepare input for MultiheadAttention
        x = x.permute(2, 0, 1)  # Reshape to (sequence_length, batch_size, embed_dim)
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(1, 2, 0)  # Reshape back to (batch_size, embed_dim, sequence_length)
        
        # Apply ParameterDict
        weight = self.parameter_dict['weight']
        bias = self.parameter_dict['bias']
        x = torch.matmul(x, weight) + bias.unsqueeze(0).unsqueeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 100).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
