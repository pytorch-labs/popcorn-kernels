
# This is a random torch model generated by the following modules: ['Softplus', 'LSTMCell', 'AdaptiveAvgPool2d', 'Container', 'PReLU', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.lstm_cell = nn.LSTMCell(input_size=64, hidden_size=128)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self.container = nn.Sequential(
            nn.PReLU(),
            nn.Mish(),
            nn.PReLU(),
            nn.Mish(),
            nn.PReLU()
        )
        self.prelu = nn.PReLU()
        self.mish = nn.Mish()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size = x.size(0)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for LSTMCell
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        hx = torch.zeros(batch_size, 128).to(x.device)
        cx = torch.zeros(batch_size, 128).to(x.device)
        x, _ = self.lstm_cell(x, (hx, cx))
        
        # Reshape back to 4D for AdaptiveAvgPool2d
        x = x.view(batch_size, 128, 1, 1)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Apply Container (Sequential of PReLU and Mish)
        x = self.container(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply Mish
        x = self.mish(x)
        
        # Flatten the output
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

