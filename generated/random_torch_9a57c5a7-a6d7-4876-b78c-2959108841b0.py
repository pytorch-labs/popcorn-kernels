
# This is a random torch model generated by the following modules: ['ReLU', 'Conv2d', 'Linear', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)  # From 3 channels to 16 channels
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)  # From 16 to 32 channels
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)  # 2x2 max pooling
        self.fc1 = nn.Linear(32 * 16 * 16, 120)  # Assume input is 64x64, pooled feature map size is reduced
        self.fc2 = nn.Linear(120, 84)  # From 120 to 84 features

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))  # Apply Conv2d, ReLU, and MaxPool2d
        x = self.pool(F.relu(self.conv2(x)))  # Another Conv2d, ReLU, and MaxPool2d
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = F.relu(self.fc1(x))  # Fully connected layer with ReLU
        x = self.fc2(x)  # Final fully connected layer
        return x  # No softmax, for raw class scores


def get_random_inputs():
    # Randomly generate input tensors assuming input has 3 color channels
    x = torch.randn(1, 3, 64, 64)  # Example input with shape: (batch_size, channels, height, width)
    return [x]

