
# This is a random torch model generated by the following modules: ['Unflatten', 'ConstantPad1d', 'AvgPool3d', 'ReflectionPad2d', 'Sigmoid', 'Softplus', 'LazyConvTranspose1d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 1))
        self.pad1d = nn.ConstantPad1d(2, 3.0)
        self.avgpool3d = nn.AvgPool3d(kernel_size=2)
        self.reflectionpad2d = nn.ReflectionPad2d(2)
        self.sigmoid = nn.Sigmoid()
        self.softplus = nn.Softplus()
        self.convtranspose1d = nn.LazyConvTranspose1d(out_channels=10, kernel_size=3)
        self.dropout3d = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Unflatten the input to add extra dimensions
        x = self.unflatten(x)
        
        # Reshape to 1D for ConstantPad1d
        x = x.view(x.size(0), -1)
        x = self.pad1d(x)
        
        # Reshape to 3D for AvgPool3d
        x = x.view(x.size(0), 1, 1, -1)
        x = self.avgpool3d(x)
        
        # Reshape to 2D for ReflectionPad2d
        x = x.view(x.size(0), 1, -1, x.size(-1))
        x = self.reflectionpad2d(x)
        
        # Apply Sigmoid activation
        x = self.sigmoid(x)
        
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Reshape to 1D for LazyConvTranspose1d
        x = x.view(x.size(0), -1)
        x = self.convtranspose1d(x)
        
        # Reshape to 3D for Dropout3d
        x = x.view(x.size(0), 1, 1, -1)
        x = self.dropout3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
