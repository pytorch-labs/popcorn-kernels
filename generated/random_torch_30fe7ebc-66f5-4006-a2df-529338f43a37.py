
# This is a random torch model generated by the following modules: ['L1Loss', 'ConvTranspose3d', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = F.relu(self.conv_transpose1(x))
        x = F.relu(self.conv_transpose2(x))
        
        # Convert 5D tensor to 4D for AvgPool2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        
        x = self.avg_pool(x)
        
        # Convert back to 5D tensor
        x = x.view(batch_size, depth, channels, x.shape[2], x.shape[3])
        
        # Dummy target for L1Loss (same shape as x)
        target = torch.zeros_like(x)
        loss = self.l1_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

