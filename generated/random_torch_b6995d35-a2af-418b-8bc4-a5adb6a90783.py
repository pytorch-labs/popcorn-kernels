
# This is a random torch model generated by the following modules: ['Linear', 'ELU', 'AlphaDropout', 'ZeroPad2d', 'Softmin', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.elu1 = nn.ELU()
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.zero_pad2d1 = nn.ZeroPad2d(2)
        self.linear2 = nn.Linear(256, 128)
        self.softmin1 = nn.Softmin(dim=1)
        self.softmax2d1 = nn.Softmax2d()
        self.linear3 = nn.Linear(128, 64)
        self.elu2 = nn.ELU()
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.zero_pad2d2 = nn.ZeroPad2d(1)
        self.linear4 = nn.Linear(64, 32)
        self.softmin2 = nn.Softmin(dim=1)
        self.softmax2d2 = nn.Softmax2d()

    def forward(self, x):
        # Flatten the input to fit the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the first set of layers
        x = self.linear1(x)
        x = self.elu1(x)
        x = self.alpha_dropout1(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), 16, 16)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.zero_pad2d1(x)
        
        # Flatten again for the next Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear2(x)
        x = self.softmin1(x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), 8, 16)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.softmax2d1(x)
        
        # Flatten again for the next Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear3(x)
        x = self.elu2(x)
        x = self.alpha_dropout2(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), 8, 8)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.zero_pad2d2(x)
        
        # Flatten again for the next Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear4(x)
        x = self.softmin2(x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), 4, 8)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.softmax2d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

