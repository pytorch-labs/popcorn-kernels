
# This is a random torch model generated by the following modules: ['Identity', 'Softshrink', 'MaxPool1d', 'ConvTranspose1d', 'PoissonNLLLoss', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.convtranspose1d = nn.ConvTranspose1d(in_channels=16, out_channels=32, kernel_size=3, stride=2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Reshape to 3D tensor for MaxPool1d and ConvTranspose1d
        x = x.view(x.size(0), 16, -1)  # Assuming input channels are 16
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply MaxPool1d
        x = self.maxpool1d(x)
        
        # Apply ConvTranspose1d
        x = self.convtranspose1d(x)
        
        # Reshape to 5D tensor for Dropout3d
        x = x.view(x.size(0), 32, 1, 1, -1)  # Assuming output channels are 32
        
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Reshape back to 2D tensor for PoissonNLLLoss
        x = x.view(x.size(0), -1)
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # Note: PoissonNLLLoss is typically used in the loss function, not in the forward pass
        # For the sake of using the module, we will compute the loss here
        target = torch.randint(0, 10, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 64).cuda()  # Assuming input shape is (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

