
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'InstanceNorm2d', 'AdaptiveAvgPool1d', 'PReLU', 'CrossEntropyLoss', 'Dropout3d', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.prelu = nn.PReLU()
        self.dropout3d = nn.Dropout3d(0.5)
        self.hardshrink = nn.Hardshrink()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.replication_pad1d(x.view(x.size(0), x.size(1), -1))  # Reshape to 1D for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape back to 2D for InstanceNorm2d
        x = self.instance_norm2d(x)
        x = self.prelu(x)
        x = self.dropout3d(x)
        x = self.hardshrink(x)
        x = self.adaptive_avg_pool1d(x.view(x.size(0), x.size(1), -1))  # Reshape to 1D for AdaptiveAvgPool1d
        x = x.view(x.size(0), -1)  # Flatten for CrossEntropyLoss
        # Assuming we have a target tensor for CrossEntropyLoss
        target = torch.randint(0, 10, (x.size(0),)).long().to(x.device)
        loss = self.cross_entropy_loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

