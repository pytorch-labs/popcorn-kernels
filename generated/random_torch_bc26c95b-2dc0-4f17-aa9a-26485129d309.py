
# This is a random torch model generated by the following modules: ['Hardswish', 'ModuleList', 'LogSigmoid', 'LazyBatchNorm2d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.bn3 = nn.LazyBatchNorm2d()
        
        self.activation_layers = nn.ModuleList([
            nn.Hardswish(),
            nn.SiLU(),
            nn.LogSigmoid(),
            nn.Hardswish(),
            nn.SiLU()
        ])
        
        self.fc1 = nn.LazyLinear(128)
        self.fc2 = nn.LazyLinear(64)
        self.fc3 = nn.LazyLinear(10)

    def forward(self, x):
        x = self.bn1(x)
        x = self.activation_layers[0](x)
        
        x = self.bn2(x)
        x = self.activation_layers[1](x)
        
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.fc1(x)
        x = self.activation_layers[2](x)
        
        x = self.fc2(x)
        x = self.activation_layers[3](x)
        
        x = self.fc3(x)
        x = self.activation_layers[4](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 resolution
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
