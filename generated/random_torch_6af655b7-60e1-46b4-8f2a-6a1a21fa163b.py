
# This is a random torch model generated by the following modules: ['LazyConv1d', 'LazyConvTranspose1d', 'AvgPool1d', 'Softmax', 'ModuleDict', 'LazyConv3d', 'BatchNorm2d', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.softmax = nn.Softmax(dim=1)
        self.module_dict = nn.ModuleDict({
            'conv3d': nn.LazyConv3d(out_channels=16, kernel_size=3),
            'batch_norm2d': nn.BatchNorm2d(num_features=32),
            'upsampling_bilinear2d': nn.UpsamplingBilinear2d(scale_factor=2)
        })
        self.conv3d = nn.LazyConv3d(out_channels=8, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=16)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)

    def forward(self, x):
        # Apply LazyConv1d
        x = self.conv1d(x)
        
        # Apply LazyConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Reshape for 3D convolution
        x = x.view(x.size(0), -1, 1, 1, 1)
        
        # Apply LazyConv3d from ModuleDict
        x = self.module_dict['conv3d'](x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), -1, 1, 1)
        
        # Apply BatchNorm2d from ModuleDict
        x = self.module_dict['batch_norm2d'](x)
        
        # Apply UpsamplingBilinear2d from ModuleDict
        x = self.module_dict['upsampling_bilinear2d'](x)
        
        # Apply LazyConv3d
        x = self.conv3d(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), -1, 1, 1)
        
        # Apply BatchNorm2d
        x = self.batch_norm2d(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsampling_bilinear2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
