
# This is a random torch model generated by the following modules: ['Bilinear', 'Sigmoid', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(10, 10, 20)
        self.bilinear2 = nn.Bilinear(20, 20, 30)
        self.rms_norm1 = RMSNorm(20)
        self.rms_norm2 = RMSNorm(30)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, *), we reshape it to fit the Bilinear layers
        batch_size = x.shape[0]
        x = x.view(batch_size, -1)  # Flatten the input
        x1 = x[:, :10]  # Split into two parts for Bilinear
        x2 = x[:, 10:20]
        
        x = self.bilinear1(x1, x2)
        x = self.rms_norm1(x)
        x = self.sigmoid(x)
        
        x1 = x[:, :10]  # Split again for the second Bilinear
        x2 = x[:, 10:20]
        
        x = self.bilinear2(x1, x2)
        x = self.rms_norm2(x)
        x = self.sigmoid(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20)  # Arbitrary input shape, flattened to fit the model
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
