
# This is a random torch model generated by the following modules: ['Transformer', 'AvgPool1d', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=2, num_decoder_layers=2)
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.conv_transpose = nn.ConvTranspose1d(in_channels=64, out_channels=32, kernel_size=3, stride=2, padding=1)
        self.fc = nn.Linear(32, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # Reshape for Transformer
        x = x.permute(1, 0, 2)  # Transformer expects (seq_len, batch_size, d_model)
        x = self.transformer(x, x)  # Self-attention
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, d_model)
        
        # Reshape for AvgPool1d
        x = x.permute(0, 2, 1)  # AvgPool1d expects (batch_size, d_model, seq_len)
        x = self.avg_pool(x)
        
        # Reshape for ConvTranspose1d
        x = self.conv_transpose(x)
        
        # Global average pooling
        x = x.mean(dim=2)  # Average over the sequence length
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

