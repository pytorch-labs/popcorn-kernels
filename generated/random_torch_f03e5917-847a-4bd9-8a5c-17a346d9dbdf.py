
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'RNNBase', 'FractionalMaxPool2d', 'Hardtanh', 'Upsample']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.rnn1 = nn.RNNBase(input_size=128, hidden_size=256, num_layers=2)
        self.fmp1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.htanh1 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.upsample1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.bn2 = nn.LazyBatchNorm1d()
        self.rnn2 = nn.RNNBase(input_size=256, hidden_size=128, num_layers=1)
        self.fmp2 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(7, 7))
        self.htanh2 = nn.Hardtanh(min_val=-0.5, max_val=0.5)
        self.upsample2 = nn.Upsample(scale_factor=2, mode='nearest')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = x.view(x.size(0), -1)  # Flatten the input for LazyBatchNorm1d
        x = self.bn1(x)
        x = x.view(x.size(0), -1, 128)  # Reshape for RNN
        x, _ = self.rnn1(x)
        x = x.view(x.size(0), 256, 28, 28)  # Reshape for FractionalMaxPool2d
        x = self.fmp1(x)
        x = self.htanh1(x)
        x = self.upsample1(x)
        x = x.view(x.size(0), -1)  # Flatten for LazyBatchNorm1d
        x = self.bn2(x)
        x = x.view(x.size(0), -1, 256)  # Reshape for RNN
        x, _ = self.rnn2(x)
        x = x.view(x.size(0), 128, 14, 14)  # Reshape for FractionalMaxPool2d
        x = self.fmp2(x)
        x = self.htanh2(x)
        x = self.upsample2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

