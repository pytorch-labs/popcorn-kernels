
# This is a random torch model generated by the following modules: ['Conv2d', 'Dropout1d', 'ReplicationPad2d', 'LazyConv3d', 'ZeroPad2d', 'CircularPad2d', 'Bilinear', 'LeakyReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.replication_pad2d = nn.ReplicationPad2d(2)
        self.lazy_conv3d = nn.LazyConv3d(out_channels=32, kernel_size=3, stride=1, padding=1)
        self.zero_pad2d = nn.ZeroPad2d(1)
        self.circular_pad2d = nn.CircularPad2d(1)
        self.bilinear = nn.Bilinear(32, 32, 64)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)

    def forward(self, x):
        # Conv2d
        x = self.conv1(x)
        
        # ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # ZeroPad2d
        x = self.zero_pad2d(x)
        
        # CircularPad2d
        x = self.circular_pad2d(x)
        
        # Reshape for LazyConv3d
        x = x.unsqueeze(2)  # Add a new dimension for 3D convolution
        x = self.lazy_conv3d(x)
        
        # Reshape back to 2D for Dropout1d
        x = x.squeeze(2)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.dropout1d(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), -1)
        x1 = x[:, :32]  # Split into two tensors for Bilinear
        x2 = x[:, 32:64]
        x = self.bilinear(x1, x2)
        
        # LeakyReLU
        x = self.leaky_relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

