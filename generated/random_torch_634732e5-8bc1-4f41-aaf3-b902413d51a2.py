
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'LogSoftmax', 'LazyConvTranspose3d', 'LazyInstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.instance_norm1 = nn.LazyInstanceNorm2d()
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.instance_norm2 = nn.LazyInstanceNorm2d()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=32, n_classes=10, cutoffs=[5, 10])

    def forward(self, x):
        # Assuming input is 3D (e.g., batch_size, channels, depth, height, width)
        x = self.conv_transpose1(x)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to 4D for InstanceNorm2d
        x = self.instance_norm1(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)  # Reshape back to 5D
        x = self.conv_transpose2(x)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to 4D for InstanceNorm2d
        x = self.instance_norm2(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)  # Reshape back to 5D
        x = x.mean(dim=[2, 3, 4])  # Global average pooling to reduce to 2D (batch_size, channels)
        x = self.log_softmax(x)
        x = self.adaptive_log_softmax.log_prob(x)  # Use log_prob for inference
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
