
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'Hardsigmoid', 'TransformerEncoder', 'EmbeddingBag', 'LazyBatchNorm2d', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_batch_norm = nn.LazyBatchNorm2d()
        self.rms_norm = nn.LayerNorm(64)  # RMSNorm is not directly available in PyTorch, using LayerNorm as a substitute
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        # Assume input is a 2D tensor (batch_size, sequence_length)
        x = self.embedding_bag(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(x.size(0), 1, 8, 8)  # Reshape to (batch_size, 1, 8, 8)
        x = self.fractional_max_pool(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm(x)
        
        # Reshape for TransformerEncoder
        x = x.view(x.size(0), -1, 64)  # Reshape to (batch_size, sequence_length, 64)
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, d_model)
        x = self.transformer_encoder(x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, sequence_length, d_model)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 32)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

