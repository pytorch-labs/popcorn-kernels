
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'PixelUnshuffle', 'LazyConv1d', 'AdaptiveAvgPool1d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.avg_pool = nn.AdaptiveAvgPool1d(output_size=10)
        self.flatten = nn.Flatten()

    def forward(self, x):
        # Apply ConstantPad3d to add padding
        x = self.pad(x)
        
        # Apply PixelUnshuffle to rearrange spatial dimensions
        x = self.unshuffle(x)
        
        # Reshape to fit LazyConv1d input requirements
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d layers
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        
        # Apply AdaptiveAvgPool1d
        x = self.avg_pool(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

