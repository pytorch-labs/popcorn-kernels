
# This is a random torch model generated by the following modules: ['Mish', 'ConvTranspose3d', 'Fold', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.mish = nn.Mish()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.circular_pad1d = nn.CircularPad1d(2)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Apply Mish activation
        x = self.mish(x)
        
        # Reshape to 5D tensor for ConvTranspose3d
        x = x.view(-1, 1, 4, 4, 4)  # Assuming input can be reshaped to (batch_size, 1, 4, 4, 4)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape to 3D tensor for CircularPad1d
        x = x.view(-1, 10, 8)  # Assuming output from ConvTranspose3d can be reshaped to (batch_size, 10, 8)
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Reshape to 2D tensor for Fold
        x = x.view(-1, 10 * 12)  # Assuming output from CircularPad1d can be reshaped to (batch_size, 10 * 12)
        
        # Apply Fold
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Assuming input is 1D with 64 features
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

