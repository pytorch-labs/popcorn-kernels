
# This is a random torch model generated by the following modules: ['TripletMarginLoss', 'AdaptiveAvgPool1d', 'LazyConvTranspose1d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=128)
        self.conv_transpose_layers = nn.ModuleList([
            nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2),
            nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2),
            nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=2)
        ])
        self.triplet_loss = nn.TripletMarginLoss(margin=1.0)

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, sequence_length)
        x = self.adaptive_avg_pool(x)
        
        for conv_transpose in self.conv_transpose_layers:
            x = conv_transpose(x)
            x = F.relu(x)
        
        # For demonstration, let's create anchor, positive, and negative samples
        anchor = x[:, :, :x.size(2)//2]
        positive = x[:, :, x.size(2)//2:]
        negative = torch.roll(positive, shifts=1, dims=2)
        
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 256).cuda()  # Example input shape (batch_size=1, channels=3, sequence_length=256)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
