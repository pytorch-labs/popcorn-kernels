
# This is a random torch model generated by the following modules: ['Unfold', 'PixelUnshuffle', 'UpsamplingNearest2d', 'SiLU', 'Hardshrink', 'Hardsigmoid', 'Upsample', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.silu = nn.SiLU()
        self.hardshrink = nn.Hardshrink()
        self.hardsigmoid = nn.Hardsigmoid()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Unfold the input
        x = self.unfold(x)
        # Reshape to 4D tensor for PixelUnshuffle
        batch_size, channels, height, width = x.shape[0], 1, int(x.shape[1] ** 0.5), int(x.shape[1] ** 0.5)
        x = x.view(batch_size, channels, height, width)
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        # Apply SiLU activation
        x = self.silu(x)
        # Apply Hardshrink
        x = self.hardshrink(x)
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        # Apply Upsample
        x = self.upsample(x)
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
