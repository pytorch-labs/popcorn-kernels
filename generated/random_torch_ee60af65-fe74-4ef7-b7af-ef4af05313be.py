
# This is a random torch model generated by the following modules: ['GLU', 'LazyLinear', 'Sequential', 'MaxUnpool1d', 'GRU', 'MultiMarginLoss', 'MaxUnpool2d', 'LazyInstanceNorm1d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu = nn.GLU(dim=1)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.sequential = nn.Sequential(
            nn.LazyLinear(32),
            nn.ReLU(),
            nn.LazyLinear(16)
        )
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply GLU
        x = self.glu(x)
        
        # Apply LazyLinear
        x = self.lazy_linear1(x)
        x = self.lazy_linear2(x)
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)
        indices = torch.arange(0, x.size(2), 2).repeat(x.size(0), x.size(1), 1)
        x = self.max_unpool1d(x, indices)
        
        # Apply GRU
        x = x.view(x.size(0), x.size(2), x.size(1))
        x, _ = self.gru(x)
        
        # Apply MultiMarginLoss (requires target, so we skip it in forward pass)
        # Apply MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        indices = torch.arange(0, x.size(2), 2).repeat(x.size(0), x.size(1), 1, 1)
        x = self.max_unpool2d(x, indices)
        
        # Apply LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lazy_instance_norm1d(x)
        
        # Apply BCELoss (requires target, so we skip it in forward pass)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
