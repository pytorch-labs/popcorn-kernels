
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'LazyConv2d', 'ReLU6', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3, stride=1, padding=1)
        self.relu6 = nn.ReLU6()
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.LazyConv2d(out_channels=64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.LazyConv2d(out_channels=128, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        x = self.pixel_unshuffle(x)
        x = self.conv1(x)
        x = self.relu6(x)
        x = self.avg_pool(x)
        x = self.conv2(x)
        x = self.relu6(x)
        x = self.avg_pool(x)
        x = self.conv3(x)
        x = self.relu6(x)
        x = self.avg_pool(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

