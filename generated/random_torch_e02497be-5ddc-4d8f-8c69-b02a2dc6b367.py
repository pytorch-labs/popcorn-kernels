
# This is a random torch model generated by the following modules: ['Mish', 'RNNCellBase', 'ConstantPad2d', 'AvgPool3d', 'GRU', 'LazyConv1d', 'KLDivLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.mish = nn.Mish()
        self.rnn_cell = nn.RNNCellBase(input_size=32, hidden_size=64)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), -1, x.size(-1))
        x = self.conv1(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Reshape for RNNCellBase
        x = x.permute(0, 2, 1)
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Reshape for GRU
        x = x.unsqueeze(1)
        h0 = torch.zeros(2, x.size(0), 128).to(x.device)
        x, _ = self.gru(x, h0)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1).unsqueeze(1)
        x = self.avg_pool3d(x)
        
        # Compute KLDivLoss (assuming a target distribution)
        target = torch.softmax(torch.randn_like(x), dim=1)
        loss = self.kl_div_loss(F.log_softmax(x, dim=1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
