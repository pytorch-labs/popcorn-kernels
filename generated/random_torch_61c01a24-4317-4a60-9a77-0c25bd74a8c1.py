
# This is a random torch model generated by the following modules: ['Unfold', 'BCEWithLogitsLoss', 'CrossEntropyLoss', 'ZeroPad1d', 'ZeroPad2d', 'FractionalMaxPool2d', 'Tanh', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), padding=1)
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.tanh = nn.Tanh()
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape to 4D tensor for further processing
        x = x.view(x.size(0), -1, 14, 14)
        
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply Tanh
        x = self.tanh(x)
        
        # Reshape to 5D tensor for ReplicationPad3d
        x = x.unsqueeze(2)
        x = self.replication_pad3d(x)
        
        # Reshape back to 4D tensor
        x = x.squeeze(2)
        
        # Apply ZeroPad1d (requires 3D input)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.zero_pad1d(x)
        
        # Reshape back to 4D tensor
        x = x.view(x.size(0), x.size(1), 14, 14)
        
        # Apply BCEWithLogitsLoss (requires specific input format)
        # For demonstration, we'll create a dummy target tensor
        target_bce = torch.randint(0, 2, (x.size(0), x.size(1), x.size(2), x.size(3)), dtype=torch.float32).to(x.device)
        bce_loss = self.bce_with_logits_loss(x, target_bce)
        
        # Apply CrossEntropyLoss (requires specific input format)
        # For demonstration, we'll create a dummy target tensor
        target_ce = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3))).to(x.device)
        x = x.view(x.size(0), x.size(1), -1)
        ce_loss = self.cross_entropy_loss(x, target_ce.view(-1))
        
        # Return the losses for demonstration purposes
        return bce_loss, ce_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
