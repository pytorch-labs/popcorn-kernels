
# This is a random torch model generated by the following modules: ['LeakyReLU', 'MaxPool1d', 'ConvTranspose1d', 'EmbeddingBag', 'Softmax2d', 'ParameterDict', 'FractionalMaxPool2d', 'Fold', 'LogSoftmax', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.circular_pad1d = nn.CircularPad1d(2)
        self.conv_transpose1d = nn.ConvTranspose1d(64, 32, kernel_size=3, stride=2)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(10, 10))
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2), stride=(2, 2))
        self.softmax2d = nn.Softmax2d()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(32, 10, 10)),
            'param2': nn.Parameter(torch.randn(32, 10, 10))
        })

    def forward(self, x):
        # Assume x is a 1D tensor for EmbeddingBag
        x = self.embedding_bag(x)
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.circular_pad1d(x)
        x = self.conv_transpose1d(x)
        x = self.max_pool1d(x)
        x = self.leaky_relu(x)
        
        # Reshape for 2D operations
        x = x.unsqueeze(2)  # Add height dimension
        x = x.unsqueeze(3)  # Add width dimension
        x = self.fractional_max_pool2d(x)
        x = self.fold(x)
        x = self.softmax2d(x)
        
        # Use ParameterDict
        x = x + self.parameter_dict['param1'] + self.parameter_dict['param2']
        
        # Final log softmax
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

