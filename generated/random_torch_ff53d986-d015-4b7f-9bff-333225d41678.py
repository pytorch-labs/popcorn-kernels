
# This is a random torch model generated by the following modules: ['Tanhshrink', 'Hardswish', 'Dropout1d', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink1 = nn.Tanhshrink()
        self.hardswish1 = nn.Hardswish()
        self.dropout1d1 = nn.Dropout1d(p=0.5)
        self.logsigmoid1 = nn.LogSigmoid()
        self.tanhshrink2 = nn.Tanhshrink()
        self.hardswish2 = nn.Hardswish()
        self.dropout1d2 = nn.Dropout1d(p=0.5)
        self.logsigmoid2 = nn.LogSigmoid()

    def forward(self, x):
        # Apply the first sequence of modules
        x = self.tanhshrink1(x)
        x = self.hardswish1(x)
        x = x.view(x.size(0), -1)  # Flatten the input for Dropout1d
        x = self.dropout1d1(x)
        x = self.logsigmoid1(x)
        
        # Apply the second sequence of modules
        x = self.tanhshrink2(x)
        x = self.hardswish2(x)
        x = x.view(x.size(0), -1)  # Flatten the input for Dropout1d
        x = self.dropout1d2(x)
        x = self.logsigmoid2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

