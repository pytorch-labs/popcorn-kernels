
# This is a random torch model generated by the following modules: ['ConvTranspose2d', 'ReplicationPad3d', 'CrossMapLRN2d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2)
        self.replication_pad3d1 = nn.ReplicationPad3d(padding=1)
        self.cross_map_lrn2d1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.rnn_cell_base1 = nn.RNNCellBase(input_size=10, hidden_size=20)
        self.conv_transpose2 = nn.ConvTranspose2d(20, 30, kernel_size=5, stride=2)
        self.replication_pad3d2 = nn.ReplicationPad3d(padding=1)
        self.cross_map_lrn2d2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.rnn_cell_base2 = nn.RNNCellBase(input_size=30, hidden_size=40)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.conv_transpose1(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for ReplicationPad3d
        x = self.replication_pad3d1(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.cross_map_lrn2d1(x)
        
        # Reshape for RNNCellBase
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, input_size)
        hx = torch.zeros(batch_size, 20).to(x.device)  # Initialize hidden state
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell_base1(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        x = x.permute(1, 2, 0).view(batch_size, 20, height, width)  # Reshape back to 4D
        
        x = self.conv_transpose2(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for ReplicationPad3d
        x = self.replication_pad3d2(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.cross_map_lrn2d2(x)
        
        # Reshape for RNNCellBase
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, input_size)
        hx = torch.zeros(batch_size, 40).to(x.device)  # Initialize hidden state
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell_base2(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        x = x.permute(1, 2, 0).view(batch_size, 40, height, width)  # Reshape back to 4D
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
