
# This is a random torch model generated by the following modules: ['LPPool1d', 'ZeroPad3d', 'AvgPool2d', 'Hardshrink', 'ConvTranspose2d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.zero_pad3d = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.hardshrink = nn.Hardshrink()
        self.conv_transpose2d = nn.ConvTranspose2d(in_channels=10, out_channels=5, kernel_size=3, stride=2)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # First, apply ZeroPad3d to add padding
        x = self.zero_pad3d(x)
        
        # Reshape to apply LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.lp_pool1d(x)
        
        # Reshape back to 4D for AvgPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.avg_pool2d(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Reshape to apply AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.adaptive_avg_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

