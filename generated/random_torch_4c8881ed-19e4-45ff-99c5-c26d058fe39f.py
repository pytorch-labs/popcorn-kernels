
# This is a random torch model generated by the following modules: ['LogSigmoid', 'BCELoss', 'Softsign', 'FractionalMaxPool3d', 'AdaptiveLogSoftmaxWithLoss', 'Dropout3d', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=512, n_classes=10, cutoffs=[2, 4])
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.softsign = nn.Softsign()
        self.log_sigmoid = nn.LogSigmoid()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(-1, 512)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Reshape for CosineSimilarity
        x = x.view(-1, 10, 10)
        
        # Apply CosineSimilarity
        x = self.cosine_similarity(x[:, 0], x[:, 1])
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Apply BCELoss (assuming a target tensor is provided)
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape for 3D operations
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
