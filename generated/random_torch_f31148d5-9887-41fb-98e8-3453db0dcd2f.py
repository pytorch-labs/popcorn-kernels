
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'TransformerEncoderLayer', 'GRU']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(3)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, height, width)
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Reshape for TransformerEncoderLayer: (batch_size, seq_len, d_model)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # (batch_size, height*width, channels)
        
        # Apply TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)
        
        # Reshape for GRU: (batch_size, seq_len, input_size)
        x = x.permute(1, 0, 2)  # (seq_len, batch_size, d_model)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Reshape back to original shape (batch_size, channels, height, width)
        x = x.permute(1, 0, 2)  # (batch_size, seq_len, hidden_size)
        x = x.view(batch_size, -1, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: (batch_size=1, channels=3, height=64, width=64)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
