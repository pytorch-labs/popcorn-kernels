
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'Embedding', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad1d(padding=2, value=0)
        self.embedding = nn.Embedding(num_embeddings=100, embedding_dim=16)
        self.avgpool = nn.AvgPool1d(kernel_size=3, stride=2)
        self.pad2 = nn.ConstantPad1d(padding=1, value=0)
        self.avgpool2 = nn.AvgPool1d(kernel_size=2, stride=1)

    def forward(self, x):
        # Assuming x is a 1D tensor (e.g., sequence of token indices)
        x = self.embedding(x)  # (batch_size, seq_len) -> (batch_size, seq_len, embedding_dim)
        x = x.permute(0, 2, 1)  # (batch_size, embedding_dim, seq_len)
        x = self.pad(x)  # Pad the sequence
        x = self.avgpool(x)  # Apply average pooling
        x = self.pad2(x)  # Pad again
        x = self.avgpool2(x)  # Apply another average pooling
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 100, (1, 10)).cuda()  # (batch_size, seq_len)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

