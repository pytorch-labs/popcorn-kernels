
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'LazyConv1d', 'RNNCellBase', 'Softmin', 'Dropout1d', 'L1Loss', 'CrossEntropyLoss', 'Container', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad1d(2)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.rnn_cell = nn.RNNCell(input_size=16, hidden_size=32)
        self.softmin = nn.Softmin(dim=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.l1_loss = nn.L1Loss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.container = nn.Sequential(
            nn.Linear(32, 64),
            nn.ReLU(),
            nn.Linear(64, 10)
        )
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, sequence_length)
        x = self.zero_pad(x)  # Shape: (batch_size, channels, sequence_length + 4)
        x = self.lazy_conv1d(x)  # Shape: (batch_size, 16, sequence_length + 2)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length + 2, 16)
        
        # Initialize hidden state for RNNCell
        hx = torch.zeros(x.size(0), 32).to(x.device)  # Shape: (batch_size, 32)
        
        # Apply RNNCell to each time step
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        
        x = hx  # Shape: (batch_size, 32)
        x = self.softmin(x)  # Shape: (batch_size, 32)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 32)
        x = self.dropout1d(x)  # Shape: (batch_size, 1, 32)
        x = x.squeeze(1)  # Shape: (batch_size, 32)
        
        # Pass through the container (Sequential)
        x = self.container(x)  # Shape: (batch_size, 10)
        
        # Compute losses (dummy targets for demonstration)
        target_l1 = torch.randn_like(x)
        target_ce = torch.randint(0, 10, (x.size(0),)).to(x.device)
        target_poisson = torch.poisson(torch.ones_like(x))
        
        l1_loss = self.l1_loss(x, target_l1)
        ce_loss = self.cross_entropy_loss(x, target_ce)
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Return the final output and the computed losses
        return x, l1_loss, ce_loss, poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 50).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
