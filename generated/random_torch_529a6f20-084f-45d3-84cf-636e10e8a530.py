
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'CircularPad3d', 'RNN', 'ZeroPad2d', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.LocalResponseNorm(size=5)
        self.circular_pad = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.zero_pad = nn.ZeroPad2d(padding=(1, 1, 1, 1))
        self.prelu = nn.PReLU()

    def forward(self, x):
        # Apply LocalResponseNorm
        x = self.lrn(x)
        
        # Reshape for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.circular_pad(x)
        
        # Reshape back for RNN
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.zero_pad(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

