
# This is a random torch model generated by the following modules: ['GLU', 'FractionalMaxPool3d', 'ParameterList', 'AdaptiveAvgPool1d', 'Dropout2d', 'LazyConv1d', 'Softsign', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.glu = nn.GLU(dim=1)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=16)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.softsign = nn.Softsign()
        self.gelu = nn.GELU()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(32)) for _ in range(5)])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, *dims)
        x = self.conv1(x)  # Apply LazyConv1d
        x = self.glu(x)  # Apply GLU
        x = x.unsqueeze(1)  # Add a dimension to make it 3D for FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)  # Apply FractionalMaxPool3d
        x = x.squeeze(1)  # Remove the added dimension
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        x = x.unsqueeze(1)  # Add a dimension to make it 2D for Dropout2d
        x = self.dropout2d(x)  # Apply Dropout2d
        x = x.squeeze(1)  # Remove the added dimension
        x = self.softsign(x)  # Apply Softsign
        x = self.gelu(x)  # Apply GELU
        
        # Apply ParameterList (just for demonstration, not typically used in forward)
        for param in self.parameter_list:
            x = x + param.unsqueeze(0).unsqueeze(-1)  # Add parameter to each channel
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 64).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

