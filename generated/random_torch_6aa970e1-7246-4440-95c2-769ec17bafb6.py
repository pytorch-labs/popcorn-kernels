
# This is a random torch model generated by the following modules: ['Container', 'LazyBatchNorm1d', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.LazyBatchNorm1d(),
            nn.MaxPool1d(kernel_size=2),
            nn.LazyBatchNorm1d(),
            nn.MaxPool1d(kernel_size=2),
            nn.LazyBatchNorm1d()
        )

    def forward(self, x):
        # Ensure the input is at least 3D (batch, channels, length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add a channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing
        
        x = self.container(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

