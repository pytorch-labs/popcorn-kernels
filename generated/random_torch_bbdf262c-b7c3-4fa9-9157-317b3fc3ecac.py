
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'Conv2d', 'RNNCellBase', 'Dropout', 'ConstantPad3d', 'CosineEmbeddingLoss', 'ReLU6', 'AvgPool2d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.dropout = nn.Dropout(0.5)
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.rnn_cell = nn.RNNCellBase(input_size=32, hidden_size=64)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.relu6 = nn.ReLU6()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply Conv2d layers
        x = self.conv1(x)
        x = self.relu6(x)
        x = self.conv2(x)
        x = self.relu6(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Apply ConstantPad3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D padding
        x = self.pad(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape for RNNCellBase
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # Reshape to (seq_len, batch, input_size)
        
        # Initialize hidden state for RNNCellBase
        hx = torch.zeros(batch_size, 64).to(x.device)
        
        # Apply RNNCellBase
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, -1, height, width)
        
        # Apply GaussianNLLLoss (assuming we have target and var)
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        loss1 = self.gaussian_nll_loss(x, target, var)
        
        # Apply CosineEmbeddingLoss (assuming we have input2 and target)
        input2 = torch.randn_like(x)
        target_cosine = torch.ones(batch_size).to(x.device)
        loss2 = self.cosine_embedding_loss(x.view(batch_size, -1), input2.view(batch_size, -1), target_cosine)
        
        # Return the final output and losses
        return x, loss1, loss2

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
