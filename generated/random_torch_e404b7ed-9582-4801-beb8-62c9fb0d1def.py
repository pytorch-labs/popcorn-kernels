
# This is a random torch model generated by the following modules: ['ReflectionPad1d', 'ConstantPad2d', 'BatchNorm3d', 'GroupNorm', 'Sequential', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.constant_pad = nn.ConstantPad2d(1, 0.5)
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.group_norm = nn.GroupNorm(2, 20)
        self.sequential = nn.Sequential(
            nn.Conv2d(20, 30, kernel_size=3),
            nn.GELU(),
            nn.Conv2d(30, 40, kernel_size=3),
            nn.GELU()
        )
        self.gelu = nn.GELU()

    def forward(self, x):
        # Assuming input is 3D (batch, channels, length)
        x = self.reflection_pad(x)
        
        # Reshape to 4D (batch, channels, height, width) for ConstantPad2d
        x = x.unsqueeze(2).unsqueeze(3)
        x = self.constant_pad(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for BatchNorm3d
        x = x.unsqueeze(2)
        x = self.batch_norm3d(x)
        
        # Reshape back to 4D (batch, channels, height, width) for GroupNorm
        x = x.squeeze(2)
        x = self.group_norm(x)
        
        # Pass through Sequential
        x = self.sequential(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Flatten the output for a generic output shape
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

