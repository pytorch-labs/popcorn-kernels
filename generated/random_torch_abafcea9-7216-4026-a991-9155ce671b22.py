
# This is a random torch model generated by the following modules: ['MaxUnpool3d', 'ConstantPad2d', 'CircularPad2d', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.constant_pad2d = nn.ConstantPad2d(padding=2, value=0)
        self.circular_pad2d = nn.CircularPad2d(padding=1)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=3),
            'conv2': nn.Conv2d(10, 20, kernel_size=3),
        })

    def forward(self, x):
        # Assuming x is a 4D tensor (batch, channels, height, width)
        # First, apply ConstantPad2d
        x = self.constant_pad2d(x)
        
        # Then, apply CircularPad2d
        x = self.circular_pad2d(x)
        
        # Pass through the first convolution in ModuleDict
        x = F.relu(self.module_dict['conv1'](x))
        
        # Reshape to 5D tensor for MaxUnpool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = x.permute(0, 1, 3, 4, 2)  # Rearrange dimensions to (batch, channels, depth, height, width)
        
        # Apply MaxUnpool3d
        # For MaxUnpool3d, we need indices from a previous MaxPool3d operation
        # Since we don't have a MaxPool3d, we'll create dummy indices
        _, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        
        # Reshape back to 4D tensor
        x = x.permute(0, 1, 4, 2, 3)  # Rearrange dimensions back to (batch, channels, height, width, depth)
        x = x.squeeze(2)  # Remove the depth dimension
        
        # Pass through the second convolution in ModuleDict
        x = F.relu(self.module_dict['conv2'](x))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
