
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'AvgPool2d', 'MaxUnpool3d', 'Unfold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.avg_pool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.max_unpool1 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.unfold1 = nn.Unfold(kernel_size=3, stride=1, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.avg_pool2 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.unfold2 = nn.Unfold(kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        # Apply first ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Apply first AvgPool2d
        x = self.avg_pool1(x)
        
        # Reshape for MaxUnpool3d (assuming 3D input is needed)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 3D
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1(x, indices)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply first Unfold
        x = self.unfold1(x)
        x = x.view(x.size(0), -1, x.size(2), x.size(3))  # Reshape back to 4D
        
        # Apply second ConvTranspose2d
        x = self.conv_transpose2(x)
        
        # Apply second AvgPool2d
        x = self.avg_pool2(x)
        
        # Apply second Unfold
        x = self.unfold2(x)
        x = x.view(x.size(0), -1, x.size(2), x.size(3))  # Reshape back to 4D
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
