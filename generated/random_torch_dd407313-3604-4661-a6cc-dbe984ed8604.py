
# This is a random torch model generated by the following modules: ['LazyLinear', 'Embedding', 'Fold', 'MaxPool2d', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.lazy_linear1 = nn.LazyLinear(256)    # LazyLinear layer
        self.lazy_linear2 = nn.LazyLinear(128)    # LazyLinear layer
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)  # MaxPool2d layer
        self.fold = nn.Fold(output_size=(14, 14), kernel_size=(2, 2))  # Fold layer
        self.relu = nn.ReLU()  # ReLU activation

    def forward(self, x):
        # Assume input x is of arbitrary shape
        x = self.embedding(x.long())  # Embedding expects integer input
        x = x.view(x.size(0), -1)  # Flatten the tensor for LazyLinear
        x = self.relu(self.lazy_linear1(x))  # Apply LazyLinear and ReLU
        x = self.relu(self.lazy_linear2(x))  # Apply LazyLinear and ReLU
        x = x.view(x.size(0), 128, 14, 14)  # Reshape for MaxPool2d
        x = self.maxpool(x)  # Apply MaxPool2d
        x = self.fold(x)  # Apply Fold
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 10)).cuda()  # Random integer input for Embedding
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

