
# This is a random torch model generated by the following modules: ['AlphaDropout', 'Dropout2d', 'BCEWithLogitsLoss', 'BatchNorm3d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        # Apply BatchNorm3d
        x = self.batch_norm3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for 2D operations
        x = x.view(x.size(0), x.size(1) * x.size(2), x.size(3), x.size(4))
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Reshape back to 5D for AlphaDropout
        x = x.view(x.size(0), 10, x.size(1) // 10, x.size(2), x.size(3))
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Flatten for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for BCEWithLogitsLoss
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        
        # Compute loss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

