
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'ReplicationPad1d', 'CrossMapLRN2d', 'CircularPad3d', 'PReLU', 'TransformerEncoder', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=128, mode='mean')
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.circular_pad3d = nn.CircularPad3d(padding=1)
        self.prelu = nn.PReLU(num_parameters=1, init=0.25)
        self.transformer_encoder = nn.TransformerEncoder(
            encoder_layer=nn.TransformerEncoderLayer(d_model=128, nhead=8),
            num_layers=3
        )
        self.hardshrink = nn.Hardshrink(lambd=0.5)

    def forward(self, x):
        # Assume x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for ReplicationPad1d
        x = x.unsqueeze(1)  # Add a dummy dimension
        x = self.replication_pad1d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Reshape for CrossMapLRN2d
        x = x.view(-1, 16, 8, 8)  # Reshape to 4D tensor
        x = self.cross_map_lrn2d(x)
        
        # Reshape for CircularPad3d
        x = x.unsqueeze(1)  # Add a dummy dimension
        x = self.circular_pad3d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Reshape for TransformerEncoder
        x = x.view(-1, 128, 8)  # Reshape to 3D tensor (seq_len, batch_size, d_model)
        x = self.transformer_encoder(x)
        
        # Reshape for Hardshrink
        x = x.view(-1, 128 * 8)  # Flatten
        x = self.hardshrink(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

