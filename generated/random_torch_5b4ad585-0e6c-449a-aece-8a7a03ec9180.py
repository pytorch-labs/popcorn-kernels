
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'PixelUnshuffle', 'LazyConv1d', 'MaxPool3d', 'LPPool1d', 'ZeroPad2d', 'CrossMapLRN2d', 'LazyConvTranspose1d', 'ReLU', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=2, stride=2)
        self.zero_pad2d = nn.ZeroPad2d(padding=1)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.relu = nn.ReLU()
        self.elu = nn.ELU()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape to 1D for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Reshape to 3D for MaxPool3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Reshape to 1D for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LPPool1d
        x = self.lp_pool1d(x)
        
        # Reshape to 2D for ZeroPad2d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        
        # Reshape to 1D for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape to 2D for GaussianNLLLoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for GaussianNLLLoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        
        # Apply GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
