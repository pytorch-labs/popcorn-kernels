
# This is a random torch model generated by the following modules: ['Softmin', 'PoissonNLLLoss', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.inst_norm1 = nn.InstanceNorm2d(3)  # Assuming 3 channels for InstanceNorm2d
        self.inst_norm2 = nn.InstanceNorm2d(3)  # Repeating InstanceNorm2d
        self.softmin = nn.Softmin(dim=1)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.inst_norm1(x)
        x = self.inst_norm2(x)
        
        # Apply Softmin along the channel dimension
        x = self.softmin(x)
        
        # PoissonNLLLoss requires target and input to be of the same shape
        # Here, we generate a dummy target tensor for demonstration purposes
        target = torch.randint(0, 10, x.shape).float()  # Random target tensor
        loss = self.poisson_nll_loss(x, target)
        
        # Return the loss as the output (this is unusual but fits the module usage)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for InstanceNorm2d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
