
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'GELU', 'ConvTranspose3d', 'LPPool1d', 'LazyInstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.gelu = nn.GELU()
        self.conv_transpose3d = nn.ConvTranspose3d(3, 6, kernel_size=3, stride=2, padding=1)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.conv_transpose3d_2 = nn.ConvTranspose3d(6, 3, kernel_size=3, stride=2, padding=1)
        self.lp_pool1d_2 = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.lazy_instance_norm2d_2 = nn.LazyInstanceNorm2d()

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D convolution
        x = self.conv_transpose3d(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape for LPPool1d
        x = x.squeeze(2)  # Remove the dummy dimension
        x = x.permute(0, 2, 1)  # Swap dimensions for LPPool1d
        x = self.lp_pool1d(x)
        
        # Apply LazyInstanceNorm2d
        x = x.permute(0, 2, 1)  # Swap back dimensions
        x = x.unsqueeze(2)  # Add a dummy dimension for 2D normalization
        x = self.lazy_instance_norm2d(x)
        
        # Apply ConvTranspose3d again
        x = self.conv_transpose3d_2(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape for LPPool1d again
        x = x.squeeze(2)  # Remove the dummy dimension
        x = x.permute(0, 2, 1)  # Swap dimensions for LPPool1d
        x = self.lp_pool1d_2(x)
        
        # Apply LazyInstanceNorm2d again
        x = x.permute(0, 2, 1)  # Swap back dimensions
        x = x.unsqueeze(2)  # Add a dummy dimension for 2D normalization
        x = self.lazy_instance_norm2d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
