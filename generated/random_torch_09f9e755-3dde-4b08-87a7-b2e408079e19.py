
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'AvgPool1d', 'Softshrink', 'ParameterDict', 'SmoothL1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool1d(kernel_size=3, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Ensure the input is at least 1D
        if x.dim() == 0:
            x = x.unsqueeze(0)
        
        # Reshape input to be compatible with AvgPool1d
        if x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Shape: (1, 1, L)
        elif x.dim() == 2:
            x = x.unsqueeze(1)  # Shape: (N, 1, L)
        
        # Apply AvgPool1d
        x = self.avg_pool(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Use ParameterDict parameters
        param1 = self.parameter_dict['param1']
        param2 = self.parameter_dict['param2']
        
        # Combine parameters with the input
        x = x.mean(dim=-1)  # Reduce to (N, 1)
        x = x * param1 + param2
        
        # Compute loss (for demonstration, we use the input as target)
        loss = self.loss(x, torch.zeros_like(x))
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10).cuda()  # Example input of shape (10,)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

