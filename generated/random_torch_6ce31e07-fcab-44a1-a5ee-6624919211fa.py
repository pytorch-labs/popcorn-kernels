
# This is a random torch model generated by the following modules: ['Hardtanh', 'ZeroPad2d', 'AdaptiveLogSoftmaxWithLoss', 'LPPool2d', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1, max_val=1)
        self.zero_pad = nn.ZeroPad2d(2)
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.circular_pad = nn.CircularPad2d(1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Flatten the tensor for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.randint(0, 10, (x.size(0),)).to(x.device))
        
        return output.log_prob


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
