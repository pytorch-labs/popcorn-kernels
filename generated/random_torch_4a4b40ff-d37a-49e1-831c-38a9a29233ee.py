
# This is a random torch model generated by the following modules: ['ModuleDict', 'InstanceNorm3d', 'TripletMarginWithDistanceLoss', 'AdaptiveMaxPool1d', 'RReLU', 'ZeroPad3d', 'CrossMapLRN2d', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'instance_norm': nn.InstanceNorm3d(10),
            'adaptive_max_pool': nn.AdaptiveMaxPool1d(output_size=10),
            'rrelu': nn.RReLU(),
            'zero_pad': nn.ZeroPad3d(1),
            'cross_map_lrn': nn.CrossMapLRN2d(size=5),
            'circular_pad': nn.CircularPad1d(1)
        })
        self.loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.module_dict['zero_pad'](x)
        
        # Apply InstanceNorm3d
        x = self.module_dict['instance_norm'](x)
        
        # Apply CrossMapLRN2d
        x = self.module_dict['cross_map_lrn'](x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AdaptiveMaxPool1d
        x = self.module_dict['adaptive_max_pool'](x)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        
        # Apply CircularPad1d
        x = self.module_dict['circular_pad'](x.squeeze(-1).squeeze(-1))
        
        # Apply RReLU
        x = self.module_dict['rrelu'](x)
        
        # Compute triplet loss with random anchors and positives
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        negative = torch.randn_like(x)
        loss = self.loss(anchor, positive, negative)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

