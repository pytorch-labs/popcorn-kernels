
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'MultiLabelMarginLoss', 'FractionalMaxPool2d', 'SyncBatchNorm', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn(x)
        
        # Reshape for loss functions
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss functions (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        
        # Apply MultiLabelSoftMarginLoss
        loss1 = self.multi_label_soft_margin_loss(x, target)
        
        # Apply MultiLabelMarginLoss
        loss2 = self.multi_label_margin_loss(x, target.long())
        
        # Return the average of the two losses
        return (loss1 + loss2) / 2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
