
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ParameterList', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Apply AdaptiveAvgPool2d to reduce spatial dimensions to 1x1
        x = self.adaptive_avg_pool(x)
        
        # Flatten the output to match the shape required for the ParameterList
        x = x.view(x.size(0), -1)
        
        # Apply the parameters from the ParameterList
        for param in self.parameter_list:
            x = x + param.unsqueeze(0).expand_as(x)
        
        # Apply LogSoftmax to the final output
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

