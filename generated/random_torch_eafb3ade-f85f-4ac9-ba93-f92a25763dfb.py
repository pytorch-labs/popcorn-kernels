
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'MaxPool2d', 'ModuleList', 'BatchNorm1d', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.module_list = nn.ModuleList([
            nn.BatchNorm1d(128),
            nn.BatchNorm1d(64),
            nn.BatchNorm1d(32)
        ])
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply MaxPool2d
        x = self.max_pool(x)
        
        # Flatten the tensor for BatchNorm1d
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Apply BatchNorm1d layers from ModuleList
        for bn_layer in self.module_list:
            x = bn_layer(x)
        
        # Compute BCEWithLogitsLoss (assuming a target tensor for demonstration)
        # For demonstration, we create a dummy target tensor of the same shape as x
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

