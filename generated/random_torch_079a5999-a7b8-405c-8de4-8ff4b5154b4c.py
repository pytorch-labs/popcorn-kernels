
# This is a random torch model generated by the following modules: ['TransformerEncoder', 'MaxPool2d', 'Conv3d', 'CrossMapLRN2d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        # Define the modules
        self.conv3d = nn.Conv3d(1, 16, kernel_size=(3, 3, 3))
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=16, nhead=2), num_layers=2
        )

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # Apply Conv3d
        x = self.conv3d(x)  # Output shape: (batch_size, 16, depth-2, height-2, width-2)
        
        # Reshape to 2D for CrossMapLRN2d and MaxPool2d
        x = x.view(x.size(0), x.size(1), -1, x.size(4))  # Reshape to (batch_size, 16, (depth-2)*(height-2), width-2)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn2d(x)  # Output shape: (batch_size, 16, (depth-2)*(height-2), width-2)
        
        # Apply MaxPool2d
        x = self.max_pool2d(x)  # Output shape: (batch_size, 16, ((depth-2)*(height-2))//2, (width-2)//2)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)  # Output shape: (batch_size, 16, 14, 14)
        
        # Reshape for TransformerEncoder
        x = x.view(x.size(0), x.size(1), -1).permute(2, 0, 1)  # Reshape to (sequence_length, batch_size, 16)
        
        # Apply TransformerEncoder
        x = self.transformer_encoder(x)  # Output shape: (sequence_length, batch_size, 16)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(x.size(1), x.size(2), 14, 14)  # Reshape to (batch_size, 16, 14, 14)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

