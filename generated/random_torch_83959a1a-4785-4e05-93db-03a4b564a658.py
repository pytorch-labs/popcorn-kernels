
# This is a random torch model generated by the following modules: ['Softplus', 'BCEWithLogitsLoss', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.lazy_linear3 = nn.LazyLinear(32)
        self.lazy_linear4 = nn.LazyLinear(1)
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Flatten the input to make it compatible with LazyLinear layers
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear layers with Softplus activation
        x = self.softplus(self.lazy_linear1(x))
        x = self.softplus(self.lazy_linear2(x))
        x = self.softplus(self.lazy_linear3(x))
        x = self.lazy_linear4(x)
        
        # Return the output (logits) for BCEWithLogitsLoss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

