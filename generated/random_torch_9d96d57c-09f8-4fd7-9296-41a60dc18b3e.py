
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'Conv1d', 'ReplicationPad2d', 'MaxPool2d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(64)
        self.conv1d_1 = nn.Conv1d(64, 128, kernel_size=3, padding=1)
        self.conv1d_2 = nn.Conv1d(128, 256, kernel_size=3, padding=1)
        self.replication_pad = nn.ReplicationPad2d(1)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, sequence_length)
        x = self.instance_norm(x)
        x = F.relu(self.conv1d_1(x))
        x = F.relu(self.conv1d_2(x))
        
        # Reshape to 2D for ReplicationPad2d and MaxPool2d
        x = x.unsqueeze(2)  # Add height dimension
        x = self.replication_pad(x)
        x = self.max_pool2d(x)
        
        # Reshape back to 1D for AdaptiveMaxPool1d
        x = x.squeeze(2)  # Remove height dimension
        x = self.adaptive_max_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 100).cuda()  # (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

