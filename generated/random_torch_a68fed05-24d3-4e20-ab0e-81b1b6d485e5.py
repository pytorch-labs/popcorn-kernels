
# This is a random torch model generated by the following modules: ['PixelShuffle', 'PoissonNLLLoss', 'Softshrink', 'ModuleDict', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.softshrink = nn.Softshrink()
        self.hardsigmoid = nn.Hardsigmoid()
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5),
        })
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply ModuleDict (conv1 and conv2)
        x = self.module_dict['conv1'](x)
        x = self.module_dict['conv2'](x)
        
        # Reshape for PoissonNLLLoss
        x = x.view(-1)
        target = torch.zeros_like(x)  # Dummy target for PoissonNLLLoss
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 64, 64).cuda()  # Input shape adjusted for PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

