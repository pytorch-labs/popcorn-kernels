
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'Threshold', 'CircularPad2d', 'Softsign']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.circular_pad2d = nn.CircularPad2d(padding=2)
        self.threshold2 = nn.Threshold(threshold=0.5, value=0.0)
        self.softsign = nn.Softsign()

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to 2D for CircularPad2d
        x = x.view(-1, 8, 8)
        
        # Apply Threshold
        x = self.threshold1(x)
        
        # Reshape to 4D for CircularPad2d
        x = x.unsqueeze(0).unsqueeze(0)
        
        # Apply CircularPad2d
        x = self.circular_pad2d(x)
        
        # Reshape back to 2D
        x = x.view(-1, 12, 12)
        
        # Apply Threshold again
        x = self.threshold2(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

