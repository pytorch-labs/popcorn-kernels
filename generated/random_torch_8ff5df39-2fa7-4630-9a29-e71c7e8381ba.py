
# This is a random torch model generated by the following modules: ['GELU', 'Upsample', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.Upsample(scale_factor=2, mode='nearest')
        self.upsample2 = nn.Upsample(scale_factor=2, mode='nearest')
        self.upsample3 = nn.Upsample(scale_factor=2, mode='nearest')
        self.gelu1 = nn.GELU()
        self.gelu2 = nn.GELU()
        self.tanh1 = nn.Tanh()
        self.tanh2 = nn.Tanh()

    def forward(self, x):
        x = self.upsample1(x)
        x = self.gelu1(x)
        x = self.upsample2(x)
        x = self.tanh1(x)
        x = self.upsample3(x)
        x = self.gelu2(x)
        x = self.tanh2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
