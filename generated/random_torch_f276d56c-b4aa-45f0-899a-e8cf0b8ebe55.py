
# This is a random torch model generated by the following modules: ['Sequential', 'ReplicationPad2d', 'UpsamplingNearest2d', 'Fold', 'AlphaDropout', 'AvgPool2d', 'MaxUnpool2d', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.ReplicationPad2d(2),
            nn.UpsamplingNearest2d(scale_factor=2),
            nn.AlphaDropout(p=0.5),
            nn.AvgPool2d(kernel_size=2, stride=2)
        )
        self.fold = nn.Fold(output_size=(64, 64), kernel_size=(4, 4), stride=(2, 2))
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Sequential block
        x = self.sequential(x)
        
        # Apply Fold
        x = self.fold(x)
        
        # Apply MaxUnpool2d (requires indices from a previous MaxPool2d)
        # For simplicity, we assume x has been through a MaxPool2d before
        # and we have the indices stored.
        # Here, we simulate this by applying a MaxPool2d and then unpooling.
        pool = nn.MaxPool2d(kernel_size=2, stride=2, return_indices=True)
        x, indices = pool(x)
        x = self.max_unpool(x, indices)
        
        # Apply NLLLoss (requires log probabilities and target)
        # For simplicity, we assume the target is a random tensor of the same shape as x
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3)), device=x.device)
        loss = self.nll_loss(F.log_softmax(x, dim=1), target)
        
        # Return the loss (since NLLLoss is typically used for training)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

