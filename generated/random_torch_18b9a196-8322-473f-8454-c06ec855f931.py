
# This is a random torch model generated by the following modules: ['CircularPad3d', 'LazyLinear', 'ReflectionPad2d', 'RNNBase', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.reflection_pad2d = nn.ReflectionPad2d(1)
        self.reflection_pad1d = nn.ReflectionPad1d(1)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.rnn = nn.RNNBase(input_size=64, hidden_size=32, num_layers=2, batch_first=True)

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Reshape to 4D for ReflectionPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.reflection_pad2d(x)
        
        # Reshape to 3D for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.reflection_pad1d(x)
        
        # Flatten for LazyLinear
        x = x.view(x.size(0), -1)
        x = F.relu(self.lazy_linear1(x))
        x = F.relu(self.lazy_linear2(x))
        
        # Reshape for RNNBase
        x = x.view(x.size(0), -1, 64)
        x, _ = self.rnn(x)
        
        # Final output
        x = x[:, -1, :]  # Take the last time step's output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for CircularPad3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

