
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'Unflatten', 'BCEWithLogitsLoss', 'InstanceNorm1d', 'Container', 'HingeEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.unflatten = nn.Unflatten(1, (2, 3))
        self.instance_norm = nn.InstanceNorm1d(6)
        self.container = nn.Sequential(
            nn.ZeroPad3d(1),
            nn.Unflatten(1, (2, 3)),
            nn.InstanceNorm1d(6),
            nn.ZeroPad3d(1),
            nn.Unflatten(1, (2, 3)),
            nn.InstanceNorm1d(6)
        )
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.hinge_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.instance_norm(x)
        
        # Apply Container
        x = self.container(x)
        
        # Reshape for BCEWithLogitsLoss
        x = x.view(x.size(0), -1)
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        bce_loss = self.bce_loss(x, target)
        
        # Reshape for HingeEmbeddingLoss
        x = x.view(x.size(0), -1)
        hinge_target = torch.randint(0, 2, (x.size(0),), dtype=torch.float32).to(x.device)
        hinge_target[hinge_target == 0] = -1
        hinge_loss = self.hinge_loss(x, hinge_target)
        
        # Return the sum of losses as the output
        return bce_loss + hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 2, 3, 4, 5).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

