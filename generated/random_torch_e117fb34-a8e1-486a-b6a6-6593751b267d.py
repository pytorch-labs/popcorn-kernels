
# This is a random torch model generated by the following modules: ['MaxPool2d', 'MultiLabelSoftMarginLoss', 'Hardsigmoid', 'AvgPool3d', 'ConvTranspose2d', 'InstanceNorm1d', 'PixelShuffle', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.convtranspose2d = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2)
        self.instancenorm1d = nn.InstanceNorm1d(100)
        self.pixelshuffle = nn.PixelShuffle(2)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=5),
            'conv2': nn.Conv2d(10, 20, kernel_size=5),
        })
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply Conv2d from ModuleDict
        x = self.module_dict['conv1'](x)
        x = self.maxpool2d(x)
        x = self.hardsigmoid(x)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D
        x = self.avgpool3d(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Apply ConvTranspose2d
        x = self.convtranspose2d(x)
        
        # Reshape for InstanceNorm1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.instancenorm1d(x)
        x = x.view(batch_size, channels, height, width)  # Restore original shape
        
        # Apply PixelShuffle
        x = self.pixelshuffle(x)
        
        # Apply Conv2d from ModuleDict
        x = self.module_dict['conv2'](x)
        
        # Compute loss (assuming some target tensor)
        target = torch.randint(0, 2, (batch_size, 20)).float()  # Random target for demonstration
        loss = self.loss(x.view(batch_size, -1), target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

