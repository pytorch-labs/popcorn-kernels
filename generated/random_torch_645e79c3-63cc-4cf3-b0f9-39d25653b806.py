
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'PoissonNLLLoss', 'GRU', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()
        self.gru1 = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=64, hidden_size=32, num_layers=1, batch_first=True)
        self.module_dict = nn.ModuleDict({
            'fc1': nn.Linear(32, 16),
            'fc2': nn.Linear(16, 8)
        })
        self.loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        x = self.bn1(x)
        x, _ = self.gru1(x)
        x = self.bn2(x)
        x, _ = self.gru2(x)
        
        # Apply the ModuleDict layers
        x = self.module_dict['fc1'](x)
        x = self.module_dict['fc2'](x)
        
        # Compute the PoissonNLLLoss (assuming target is provided externally)
        # For demonstration, we'll just return the output and the loss can be computed outside
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 20, 128).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
