
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'AdaptiveLogSoftmaxWithLoss', 'MultiLabelSoftMarginLoss', 'Linear', 'Module', 'BatchNorm1d', 'GaussianNLLLoss', 'GRUCell', 'TripletMarginWithDistanceLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.linear1 = nn.Linear(128, 64)
        self.batch_norm = nn.BatchNorm1d(64)
        self.gru_cell = nn.GRUCell(64, 32)
        self.linear2 = nn.Linear(32, 10)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(10, 5, [2, 4, 8])
        self.multi_label_loss = nn.MultiLabelSoftMarginLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Flatten the input for Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply Linear layer
        x = self.linear1(x)
        
        # Apply BatchNorm1d
        x = self.batch_norm(x)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 32).to(x.device)
        x = self.gru_cell(x, hx)
        
        # Apply another Linear layer
        x = self.linear2(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.randint(0, 5, (x.size(0),)).to(x.device))
        
        # Apply MultiLabelSoftMarginLoss
        target = torch.randint(0, 2, (x.size(0), 10)).to(x.device)
        multi_label_loss = self.multi_label_loss(x, target.float())
        
        # Apply GaussianNLLLoss
        target = torch.randn(x.size(0), 10).to(x.device)
        var = torch.ones(x.size(0), 10).to(x.device)
        gaussian_nll_loss = self.gaussian_nll_loss(x, target, var)
        
        # Apply TripletMarginWithDistanceLoss
        anchor = torch.randn(x.size(0), 10).to(x.device)
        positive = torch.randn(x.size(0), 10).to(x.device)
        negative = torch.randn(x.size(0), 10).to(x.device)
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        return output, multi_label_loss, gaussian_nll_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
