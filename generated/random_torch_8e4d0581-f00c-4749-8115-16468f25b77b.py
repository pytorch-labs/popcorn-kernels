
# This is a random torch model generated by the following modules: ['ReLU6', 'ReplicationPad3d', 'ConvTranspose2d', 'Softmin', 'Module', 'LSTMCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.conv_transpose2d = nn.ConvTranspose2d(3, 6, kernel_size=3, stride=2, padding=1)
        self.softmin = nn.Softmin(dim=1)
        self.lstm_cell = nn.LSTMCell(10, 20)

    def forward(self, x):
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.replication_pad3d(x)
        
        # Reshape for ConvTranspose2d
        x = x.squeeze(1)  # Remove the channel dimension
        x = x.unsqueeze(1)  # Add a new channel dimension
        x = self.conv_transpose2d(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape for LSTMCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)  # Flatten the tensor
        hx = torch.zeros(batch_size, 20).to(x.device)
        cx = torch.zeros(batch_size, 20).to(x.device)
        x, _ = self.lstm_cell(x, (hx, cx))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
