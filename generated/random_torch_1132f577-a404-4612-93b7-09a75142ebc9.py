
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'ZeroPad2d', 'InstanceNorm2d', 'Hardsigmoid', 'GaussianNLLLoss', 'ELU', 'FractionalMaxPool2d', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad = nn.ConstantPad2d(2, 3.0)
        self.zero_pad = nn.ZeroPad2d(1)
        self.instance_norm = nn.InstanceNorm2d(3)
        self.hardsigmoid = nn.Hardsigmoid()
        self.elu = nn.ELU()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply padding layers
        x = self.constant_pad(x)
        x = self.zero_pad(x)
        
        # Apply normalization
        x = self.instance_norm(x)
        
        # Apply activation functions
        x = self.hardsigmoid(x)
        x = self.elu(x)
        
        # Apply pooling
        x = self.fractional_max_pool(x)
        
        # Apply pixel shuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for GaussianNLLLoss (assuming target and var are also provided)
        # For simplicity, we'll just return the output without applying the loss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

