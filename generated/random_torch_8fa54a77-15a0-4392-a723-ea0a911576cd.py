
# This is a random torch model generated by the following modules: ['Upsample', 'CrossEntropyLoss', 'NLLLoss2d', 'BatchNorm1d', 'BCELoss', 'ConstantPad3d', 'Hardswish', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.constant_pad3d = nn.ConstantPad3d(1, 1.0)
        self.hardswish = nn.Hardswish()
        self.elu = nn.ELU()
        
        # Loss functions are not typically used in the forward pass of a model
        # but are used during training. However, for the sake of this exercise,
        # we will include them in the forward pass.
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss2d = nn.NLLLoss2d()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Reshape to fit BatchNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width)
        x = x.view(batch_size, -1, 128)  # Reshape to fit BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Reshape back to original dimensions
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Dummy target for loss functions
        target = torch.randint(0, 10, (batch_size, height, width)).long().cuda()
        target2d = torch.randint(0, 10, (batch_size, height, width)).long().cuda()
        target_bce = torch.rand(batch_size, channels, depth, height, width).cuda()
        
        # Apply CrossEntropyLoss
        x_flat = x.view(batch_size, -1)
        target_flat = target.view(batch_size, -1)
        loss1 = self.cross_entropy_loss(x_flat, target_flat)
        
        # Apply NLLLoss2d
        loss2 = self.nll_loss2d(x, target2d)
        
        # Apply BCELoss
        loss3 = self.bce_loss(x, target_bce)
        
        # Return the sum of losses (for demonstration purposes)
        return loss1 + loss2 + loss3


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

