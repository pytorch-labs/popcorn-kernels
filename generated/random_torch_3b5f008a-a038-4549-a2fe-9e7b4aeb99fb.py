
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'LazyInstanceNorm2d', 'BatchNorm2d', 'UpsamplingNearest2d', 'ReLU6', 'ConstantPad1d', 'LSTM', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm3d = nn.InstanceNorm3d(10)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.batch_norm2d = nn.BatchNorm2d(20)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.relu6 = nn.ReLU6()
        self.constant_pad1d = nn.ConstantPad1d(2, 3.0)
        self.lstm = nn.LSTM(input_size=50, hidden_size=100, num_layers=2, batch_first=True)
        self.gru_cell = nn.GRUCell(input_size=100, hidden_size=50)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.instance_norm3d(x)
        
        # Reshape to 2D for LazyInstanceNorm2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.lazy_instance_norm2d(x)
        
        # Reshape back to 3D for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.batch_norm2d(x)
        
        # Upsample
        x = self.upsampling_nearest2d(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape to 1D for ConstantPad1d
        x = x.view(x.size(0), -1)
        x = self.constant_pad1d(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 50)
        x, _ = self.lstm(x)
        
        # Reshape for GRUCell
        x = x.contiguous().view(-1, 100)
        x = self.gru_cell(x)
        
        # Final output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

