
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'AvgPool1d', 'InstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.instance_norm1d = nn.InstanceNorm1d(5)
        self.adaptive_max_pool2d_2 = nn.AdaptiveMaxPool2d((3, 3))
        self.avg_pool1d_2 = nn.AvgPool1d(kernel_size=3)
        self.instance_norm1d_2 = nn.InstanceNorm1d(3)

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to the input
        x = self.adaptive_max_pool2d(x)
        
        # Reshape the tensor to fit AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.avg_pool1d(x)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x)
        
        # Reshape the tensor to fit AdaptiveMaxPool2d again
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape back to 2D
        x = self.adaptive_max_pool2d_2(x)
        
        # Reshape the tensor to fit AvgPool1d again
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.avg_pool1d_2(x)
        
        # Apply InstanceNorm1d again
        x = self.instance_norm1d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

