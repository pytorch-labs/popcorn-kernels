
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'LazyInstanceNorm1d', 'MaxPool3d', 'Softplus', 'Unfold', 'AvgPool2d', 'CELU', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.lazy_instance_norm = nn.LazyInstanceNorm1d()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.softplus = nn.Softplus()
        self.unfold = nn.Unfold(kernel_size=3)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.celu = nn.CELU()
        self.pixel_shuffle = nn.PixelShuffle(2)

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lazy_instance_norm(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        
        # Apply MaxPool3d (requires 5D input)
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D pooling
        x = self.max_pool3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for AvgPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.avg_pool2d(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

