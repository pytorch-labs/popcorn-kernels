
# This is a random torch model generated by the following modules: ['Sigmoid', 'SELU', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.linear3 = nn.Linear(32, 16)
        self.linear4 = nn.Linear(16, 8)
        self.linear5 = nn.Linear(8, 4)

    def forward(self, x):
        # Flatten the input to accommodate arbitrary input shapes
        x = x.view(x.size(0), -1)
        
        # Apply the first Linear layer followed by SELU activation
        x = F.selu(self.linear1(x))
        
        # Apply the second Linear layer followed by Sigmoid activation
        x = torch.sigmoid(self.linear2(x))
        
        # Apply the third Linear layer followed by SELU activation
        x = F.selu(self.linear3(x))
        
        # Apply the fourth Linear layer followed by Sigmoid activation
        x = torch.sigmoid(self.linear4(x))
        
        # Apply the fifth Linear layer
        x = self.linear5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

