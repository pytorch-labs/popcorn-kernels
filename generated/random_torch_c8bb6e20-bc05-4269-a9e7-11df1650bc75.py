
# This is a random torch model generated by the following modules: ['MaxUnpool3d', 'AdaptiveMaxPool1d', 'AvgPool2d', 'Sigmoid', 'Sequential', 'GroupNorm', 'ConvTranspose2d', 'PixelUnshuffle', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.conv_transpose2d = nn.ConvTranspose2d(4, 8, kernel_size=3, stride=2, padding=1)
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=8)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)
        self.sigmoid = nn.Sigmoid()
        self.sequential = nn.Sequential(
            nn.Linear(20, 10),
            nn.ReLU(),
            nn.Linear(10, 5)
        )

    def forward(self, x):
        # PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # GroupNorm
        x = self.group_norm(x)
        
        # AvgPool2d
        x = self.avg_pool2d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        # LSTM
        x = x.permute(0, 2, 1)  # Reshape for LSTM
        x, _ = self.lstm(x)
        
        # Reshape for MaxUnpool3d
        x = x.unsqueeze(1)  # Add dummy dimension for 3D
        x = self.max_unpool3d(x, torch.zeros_like(x))  # Dummy indices
        
        # Sigmoid
        x = self.sigmoid(x)
        
        # Sequential
        x = x.view(x.size(0), -1)  # Flatten
        x = self.sequential(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
