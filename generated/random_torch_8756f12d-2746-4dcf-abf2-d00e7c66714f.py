
# This is a random torch model generated by the following modules: ['ModuleList', 'ChannelShuffle', 'ConvTranspose1d', 'Hardshrink', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_list = nn.ModuleList([
            nn.ConvTranspose1d(1, 10, kernel_size=5),
            nn.ChannelShuffle(2),
            nn.ConvTranspose1d(10, 20, kernel_size=5),
            nn.Hardshrink(),
            nn.AvgPool1d(kernel_size=2),
            nn.ConvTranspose1d(20, 30, kernel_size=5),
            nn.ChannelShuffle(3),
            nn.Hardshrink(),
            nn.AvgPool1d(kernel_size=2)
        ])

    def forward(self, x):
        # Ensure input is 3D (batch_size, channels, sequence_length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing

        for module in self.module_list:
            x = module(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
