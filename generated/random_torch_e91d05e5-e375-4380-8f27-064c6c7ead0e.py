
# This is a random torch model generated by the following modules: ['Sequential', 'ReplicationPad3d', 'Hardswish', 'LPPool2d', 'BatchNorm1d', 'Mish', 'SELU', 'EmbeddingBag', 'RNN']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.rnn = nn.RNN(64, 128, batch_first=True)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.sequential = nn.Sequential(
            nn.ReplicationPad3d(1),
            nn.LPPool2d(2, kernel_size=3, stride=2),
            nn.Hardswish(),
            nn.Mish(),
            nn.SELU()
        )
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x, _ = self.rnn(x.unsqueeze(1))
        x = x.squeeze(1)
        x = self.batch_norm1d(x)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Reshape for 3D padding
        x = self.sequential(x)
        x = x.view(x.size(0), -1)  # Flatten
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

