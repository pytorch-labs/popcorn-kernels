
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'Conv1d', 'Mish', 'TransformerEncoder']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.mish = nn.Mish()
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=20, nhead=5), num_layers=3
        )
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length)
        x = x.unsqueeze(1)  # Add channel dimension for Conv1d
        x = self.mish(self.conv1(x))
        x = self.mish(self.conv2(x))
        x = x.permute(2, 0, 1)  # Transformer expects (sequence_length, batch_size, features)
        x = self.transformer_encoder(x)
        x = x.permute(1, 2, 0)  # Revert back to (batch_size, features, sequence_length)
        x = x.mean(dim=2)  # Global average pooling
        return x

    def compute_loss(self, output, target, var):
        return self.gaussian_nll_loss(output, target, var)

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 100).cuda()  # (batch_size, sequence_length)
    target = torch.randn(10, 20).cuda()  # (batch_size, features)
    var = torch.randn(10, 20).cuda().abs()  # (batch_size, features), variance must be positive
    return [x, target, var]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
