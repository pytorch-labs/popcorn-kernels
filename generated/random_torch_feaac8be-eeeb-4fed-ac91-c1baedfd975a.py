
# This is a random torch model generated by the following modules: ['LazyConv2d', 'Softsign', 'Dropout', 'BatchNorm3d', 'Mish', 'LazyConv3d', 'Bilinear', 'PairwiseDistance', 'ParameterList', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv2d_1 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.conv2d_2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.softsign = nn.Softsign()
        self.dropout = nn.Dropout(p=0.5)
        self.batchnorm3d = nn.BatchNorm3d(num_features=64)
        self.mish = nn.Mish()
        self.conv3d = nn.LazyConv3d(out_channels=128, kernel_size=3)
        self.bilinear = nn.Bilinear(in1_features=128, in2_features=128, out_features=64)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(64)) for _ in range(5)])
        self.avgpool2d = nn.AvgPool2d(kernel_size=2)

    def forward(self, x):
        # Apply LazyConv2d
        x = self.conv2d_1(x)
        x = self.conv2d_2(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Reshape for BatchNorm3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.batchnorm3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply Mish
        x = self.mish(x)
        
        # Reshape for LazyConv3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.conv3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply Bilinear
        x = x.view(x.size(0), -1)  # Flatten for Bilinear
        x = self.bilinear(x, x)
        
        # Apply PairwiseDistance
        x = self.pairwise_distance(x, x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = x + param
        
        # Reshape for AvgPool2d
        x = x.view(x.size(0), 1, int(x.size(1)**0.5), int(x.size(1)**0.5))  # Reshape to 4D
        x = self.avgpool2d(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
