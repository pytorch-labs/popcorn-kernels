
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'Conv3d', 'LazyConvTranspose2d', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(10, kernel_size=3)
        self.embedding_bag = nn.EmbeddingBag(1000, 10, mode='mean')
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming x is a 5D tensor for Conv3d
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reshape to 4D tensor for LazyConvTranspose2d
        x = x.view(-1, 20, 16, 16)
        x = F.relu(self.lazy_conv_transpose2d(x))
        
        # Reshape to 2D tensor for EmbeddingBag
        x = x.view(-1, 10)
        x = self.embedding_bag(x)
        
        # GaussianNLLLoss requires target and var, so we generate dummy ones
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # 5D tensor for Conv3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

