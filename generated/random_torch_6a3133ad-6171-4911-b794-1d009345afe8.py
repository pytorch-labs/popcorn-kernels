
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'UpsamplingBilinear2d', 'AvgPool1d', 'MarginRankingLoss', 'Dropout1d', 'BatchNorm3d', 'FractionalMaxPool3d', 'MSELoss', 'NLLLoss', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((16, 16))
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.mse_loss = nn.MSELoss()
        self.nll_loss = nn.NLLLoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.margin_ranking_loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Assume input x is of arbitrary shape
        # Reshape input to 4D for AdaptiveAvgPool2d
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension
        x = self.adaptive_avg_pool2d(x)
        
        # Upsample the output
        x = self.upsampling_bilinear2d(x)
        
        # Reshape to 3D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool1d(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Reshape to 5D for BatchNorm3d
        x = x.view(x.size(0), 10, -1, 8, 8)  # Reshape to 5D tensor
        x = self.batch_norm3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Compute losses (for demonstration purposes, we'll compute losses on dummy targets)
        target_mse = torch.randn_like(x)
        mse_loss = self.mse_loss(x, target_mse)
        
        target_nll = torch.randint(0, 10, (x.size(0),)).long()
        nll_loss = self.nll_loss(F.log_softmax(x.view(x.size(0), -1), dim=1), target_nll)
        
        target_poisson = torch.randn_like(x)
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        input1 = torch.randn_like(x)
        input2 = torch.randn_like(x)
        target_margin = torch.ones_like(x)
        margin_loss = self.margin_ranking_loss(input1, input2, target_margin)
        
        # Return the sum of all losses for demonstration purposes
        return mse_loss + nll_loss + poisson_loss + margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

