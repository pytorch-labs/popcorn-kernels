
# This is a random torch model generated by the following modules: ['SELU', 'ModuleDict', 'CELU', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'selu1': nn.SELU(),
            'celu1': nn.CELU(),
            'hardsigmoid1': nn.Hardsigmoid(),
            'selu2': nn.SELU(),
            'celu2': nn.CELU(),
        })

    def forward(self, x):
        # Apply SELU
        x = self.module_dict['selu1'](x)
        
        # Apply CELU
        x = self.module_dict['celu1'](x)
        
        # Apply Hardsigmoid
        x = self.module_dict['hardsigmoid1'](x)
        
        # Apply SELU again
        x = self.module_dict['selu2'](x)
        
        # Apply CELU again
        x = self.module_dict['celu2'](x)
        
        # Flatten the output if necessary
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
