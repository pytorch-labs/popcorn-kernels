
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'Embedding', 'ConvTranspose3d', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.conv_transpose1d = nn.ConvTranspose1d(128, 64, kernel_size=5, stride=2)  # ConvTranspose1d layer
        self.conv_transpose3d_1 = nn.ConvTranspose3d(64, 32, kernel_size=3, stride=2)  # ConvTranspose3d layer
        self.conv_transpose3d_2 = nn.ConvTranspose3d(32, 16, kernel_size=3, stride=2)  # ConvTranspose3d layer
        self.dropout2d = nn.Dropout2d(p=0.5)  # Dropout2d layer

    def forward(self, x):
        # Assuming input x is a tensor of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Shape: (batch_size, sequence_length, embedding_dim)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, embedding_dim, sequence_length)
        x = F.relu(self.conv_transpose1d(x))  # Shape: (batch_size, 64, new_sequence_length)
        x = x.unsqueeze(-1).unsqueeze(-1)  # Shape: (batch_size, 64, new_sequence_length, 1, 1)
        x = F.relu(self.conv_transpose3d_1(x))  # Shape: (batch_size, 32, new_sequence_length_2, new_height, new_width)
        x = F.relu(self.conv_transpose3d_2(x))  # Shape: (batch_size, 16, new_sequence_length_3, new_height_2, new_width_2)
        x = x.squeeze(-1).squeeze(-1)  # Shape: (batch_size, 16, new_sequence_length_3)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, new_sequence_length_3, 16)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, new_sequence_length_3, 16)
        x = self.dropout2d(x)  # Shape: (batch_size, 1, new_sequence_length_3, 16)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 50)).cuda()  # Example input tensor of shape (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

