
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'Dropout1d', 'Softshrink', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.rnn = nn.RNNBase(mode='LSTM', input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.fc = nn.LazyLinear(out_features=10)

    def forward(self, x):
        # Apply first ConvTranspose2d
        x = self.conv_transpose1(x)
        x = F.relu(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.dropout1d(x)
        
        # Reshape back to 4D for Softshrink
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.softshrink(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), x.size(1), -1).permute(0, 2, 1)  # (batch, seq_len, features)
        x, _ = self.rnn(x)
        
        # Reshape back to 4D for second ConvTranspose2d
        x = x.permute(0, 2, 1).view(x.size(0), x.size(2), int(x.size(1)**0.5), int(x.size(1)**0.5))
        x = self.conv_transpose2(x)
        x = F.relu(x)
        
        # Global average pooling and flatten for Linear layer
        x = F.adaptive_avg_pool2d(x, (1, 1))
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

