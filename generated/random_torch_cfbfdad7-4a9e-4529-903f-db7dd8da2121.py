
# This is a random torch model generated by the following modules: ['Softmin', 'LSTM', 'GaussianNLLLoss', 'EmbeddingBag', 'MSELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.softmin = nn.Softmin(dim=1)
        self.mse_loss = nn.MSELoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming x is a tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for LSTM input (batch_size, sequence_length, embedding_dim)
        x = x.unsqueeze(1)  # Add sequence length dimension
        
        # LSTM expects input of shape (batch_size, seq_len, input_size)
        x, _ = self.lstm(x)
        
        # Apply Softmin to the output of LSTM
        x = self.softmin(x)
        
        # Reshape for loss computation
        x = x.view(-1, 128)  # Flatten for loss computation
        
        # Dummy target for GaussianNLLLoss and MSELoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)  # Variance for GaussianNLLLoss
        
        # Compute losses (just for demonstration, not typically done in forward pass)
        mse_loss = self.mse_loss(x, target)
        gaussian_nll_loss = self.gaussian_nll_loss(x, target, var)
        
        # Return the losses (or any other output you want)
        return mse_loss, gaussian_nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

