
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'Upsample', 'Hardshrink', 'TransformerEncoderLayer', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3, padding=1)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.hardshrink = nn.Hardshrink()
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=10, nhead=2)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3, padding=1)

    def forward(self, x):
        # Apply Conv3d to the input
        x = self.conv3d_1(x)
        
        # Reshape to 2D for InstanceNorm2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        x = self.instance_norm2d(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for TransformerEncoderLayer
        x = x.permute(0, 2, 1, 3, 4)  # Move depth to the second dimension
        x = x.reshape(batch_size * depth, channels, height * width)
        x = x.permute(1, 0, 2)  # Transformer expects (seq_len, batch_size, feature_dim)
        x = self.transformer_encoder_layer(x)
        
        # Reshape back to 3D
        x = x.permute(1, 2, 0)
        x = x.reshape(batch_size, depth, channels, height, width)
        x = x.permute(0, 2, 1, 3, 4)
        
        # Apply final Conv3d
        x = self.conv3d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
