
# This is a random torch model generated by the following modules: ['ModuleDict', 'LazyConvTranspose2d', 'FractionalMaxPool2d', 'SmoothL1Loss', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'conv_transpose1': nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1),
            'conv_transpose2': nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1),
            'conv_transpose3': nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1),
            'conv_transpose4': nn.LazyConvTranspose2d(out_channels=128, kernel_size=4, stride=2, padding=1),
            'conv_transpose5': nn.LazyConvTranspose2d(out_channels=256, kernel_size=4, stride=2, padding=1),
        })
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply LazyConvTranspose2d layers
        x = self.module_dict['conv_transpose1'](x)
        x = self.module_dict['conv_transpose2'](x)
        x = self.module_dict['conv_transpose3'](x)
        x = self.module_dict['conv_transpose4'](x)
        x = self.module_dict['conv_transpose5'](x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss computation
        target = torch.zeros_like(x)
        
        # Compute SmoothL1Loss
        smooth_l1_loss = self.smooth_l1_loss(x, target)
        
        # Compute PoissonNLLLoss
        poisson_nll_loss = self.poisson_nll_loss(x, target)
        
        # Return both losses as a tuple
        return smooth_l1_loss, poisson_nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

