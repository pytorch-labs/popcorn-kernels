
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'MaxPool1d', 'ModuleDict', 'UpsamplingBilinear2d', 'ReplicationPad1d', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(64)
        self.max_pool = nn.MaxPool1d(kernel_size=2)
        self.module_dict = nn.ModuleDict({
            'upsample': nn.UpsamplingBilinear2d(scale_factor=2),
            'replication_pad': nn.ReplicationPad1d(2),
            'dropout': nn.Dropout2d(p=0.5)
        })
        self.instance_norm2 = nn.InstanceNorm1d(32)
        self.max_pool2 = nn.MaxPool1d(kernel_size=2)
        self.dropout2 = nn.Dropout2d(p=0.3)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.instance_norm(x)
        x = self.max_pool(x)
        
        # Reshape to 2D for UpsamplingBilinear2d
        x = x.unsqueeze(-1)  # Add height dimension
        x = self.module_dict['upsample'](x)
        
        # Reshape back to 1D for ReplicationPad1d
        x = x.squeeze(-1)
        x = self.module_dict['replication_pad'](x)
        
        # Apply dropout
        x = x.unsqueeze(-1).unsqueeze(-1)  # Add height and width dimensions for Dropout2d
        x = self.module_dict['dropout'](x)
        x = x.squeeze(-1).squeeze(-1)  # Remove height and width dimensions
        
        # Apply second instance norm and max pool
        x = self.instance_norm2(x)
        x = self.max_pool2(x)
        
        # Apply second dropout
        x = x.unsqueeze(-1).unsqueeze(-1)  # Add height and width dimensions for Dropout2d
        x = self.dropout2(x)
        x = x.squeeze(-1).squeeze(-1)  # Remove height and width dimensions
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 128).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

