
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'Softmin', 'RNNCell', 'Softmax', 'ReflectionPad2d', 'Dropout1d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.reflection_pad = nn.ReflectionPad2d(padding=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.rnn_cell = nn.RNNCell(input_size=10, hidden_size=20)
        self.softmin = nn.Softmin(dim=1)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.dropout1d(x)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for RNNCell
        x = x.permute(0, 2, 1)  # Swap dimensions for RNNCell
        hx = torch.zeros(x.size(0), 20).to(x.device)  # Initialize hidden state
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        x = hx
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
