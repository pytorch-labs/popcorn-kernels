
# This is a random torch model generated by the following modules: ['CrossEntropyLoss', 'GaussianNLLLoss', 'Conv1d', 'Upsample', 'HingeEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.upsample = nn.Upsample(scale_factor=2)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply Conv1d layers
        x = self.conv1(x)
        x = self.conv2(x)
        
        # Upsample the output
        x = self.upsample(x)
        
        # Reshape for loss functions
        x = x.view(-1, 20)  # Flatten for CrossEntropyLoss
        
        # Dummy target for CrossEntropyLoss
        target = torch.randint(0, 20, (x.size(0),)).to(x.device)
        cross_entropy_loss = self.cross_entropy_loss(x, target)
        
        # Dummy target for GaussianNLLLoss
        var = torch.ones_like(x)
        gaussian_nll_loss = self.gaussian_nll_loss(x, target, var)
        
        # Dummy target for HingeEmbeddingLoss
        hinge_target = torch.ones(x.size(0)).to(x.device)
        hinge_embedding_loss = self.hinge_embedding_loss(x, hinge_target)
        
        # Return the sum of losses for demonstration purposes
        return cross_entropy_loss + gaussian_nll_loss + hinge_embedding_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
