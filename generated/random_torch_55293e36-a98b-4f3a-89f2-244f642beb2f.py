
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'Linear', 'Sigmoid', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ReplicationPad1d(2)
        self.linear1 = nn.Linear(10, 20)
        self.linear2 = nn.Linear(20, 10)
        self.sigmoid = nn.Sigmoid()
        self.flatten = nn.Flatten()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.pad1(x)  # Apply padding
        x = x.permute(0, 2, 1)  # Swap dimensions to (batch_size, length, channels)
        x = self.linear1(x)  # Apply first linear layer
        x = self.sigmoid(x)  # Apply sigmoid activation
        x = self.linear2(x)  # Apply second linear layer
        x = self.flatten(x)  # Flatten the output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10).cuda()  # Example input shape (batch_size=1, channels=3, length=10)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
