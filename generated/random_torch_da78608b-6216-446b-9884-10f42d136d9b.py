
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'FractionalMaxPool3d', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ZeroPad2d(2)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Reshape to 5D tensor for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool(x)
        
        # Reshape back to 4D tensor
        x = x.squeeze(1)  # Remove the depth dimension
        x = x.squeeze(1)  # Remove the channel dimension
        
        # Compute the loss (assuming some target tensor)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()  # Random target for demonstration
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

