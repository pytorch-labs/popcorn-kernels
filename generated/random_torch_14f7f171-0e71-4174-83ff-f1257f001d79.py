
# This is a random torch model generated by the following modules: ['Hardshrink', 'MaxPool3d', 'LocalResponseNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink1 = nn.Hardshrink()
        self.maxpool3d1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.local_response_norm1 = nn.LocalResponseNorm(size=5)
        self.hardshrink2 = nn.Hardshrink()
        self.maxpool3d2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.local_response_norm2 = nn.LocalResponseNorm(size=5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.hardshrink1(x)
        x = self.maxpool3d1(x)
        x = self.local_response_norm1(x)
        x = self.hardshrink2(x)
        x = self.maxpool3d2(x)
        x = self.local_response_norm2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
