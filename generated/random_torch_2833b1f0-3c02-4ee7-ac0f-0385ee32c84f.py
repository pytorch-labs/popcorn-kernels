
# This is a random torch model generated by the following modules: ['LazyLinear', 'Sigmoid', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.lazy_linear3 = nn.LazyLinear(32)
        self.sigmoid = nn.Sigmoid()
        self.container = nn.Sequential(
            nn.LazyLinear(16),
            nn.Sigmoid(),
            nn.LazyLinear(8)
        )

    def forward(self, x):
        # Flatten the input to make it compatible with LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply the first LazyLinear layer followed by Sigmoid
        x = self.sigmoid(self.lazy_linear1(x))
        
        # Apply the second LazyLinear layer followed by Sigmoid
        x = self.sigmoid(self.lazy_linear2(x))
        
        # Apply the third LazyLinear layer followed by Sigmoid
        x = self.sigmoid(self.lazy_linear3(x))
        
        # Pass through the container (Sequential) module
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

