
# This is a random torch model generated by the following modules: ['Softsign', 'Unfold', 'MaxPool1d', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.unflatten = nn.Unflatten(1, (1, -1))

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply Unfold to extract patches
        x = self.unfold(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply MaxPool1d
        x = self.maxpool1d(x)
        
        # Reshape for Unflatten
        x = x.view(x.size(0), -1)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
