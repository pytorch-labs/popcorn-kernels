
# This is a random torch model generated by the following modules: ['Softsign', 'RMSNorm', 'Upsample', 'TransformerDecoder', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.rms_norm1 = RMSNorm(128)
        self.rms_norm2 = RMSNorm(128)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=128, nhead=8), num_layers=3
        )
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Reshape to (seq_len, batch_size, feature_dim)
        x = x.view(-1, x.size(0), x.size(1))
        
        # Apply RMSNorm
        x = self.rms_norm1(x)
        
        # Upsample the sequence length
        x = x.permute(1, 2, 0)  # (batch_size, feature_dim, seq_len)
        x = self.upsample(x)
        x = x.permute(2, 0, 1)  # (seq_len, batch_size, feature_dim)
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for the decoder
        x = self.transformer_decoder(x, memory)
        
        # Apply RMSNorm again
        x = self.rms_norm2(x)
        
        # Reshape to (batch_size, seq_len, feature_dim)
        x = x.permute(1, 0, 2)
        
        # Apply NLLLoss (assuming target is provided externally)
        # For demonstration, we'll just return the output
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 128).cuda()  # (seq_len, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
