
# This is a random torch model generated by the following modules: ['SmoothL1Loss', 'Bilinear', 'EmbeddingBag', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.bilinear1 = nn.Bilinear(64, 64, 128)
        self.bilinear2 = nn.Bilinear(128, 128, 256)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Assuming x is a tensor of shape (batch_size, sequence_length)
        x = self.embedding_bag(x)  # Output shape: (batch_size, 64)
        
        # Apply Bilinear layers
        x = F.relu(self.bilinear1(x, x))  # Output shape: (batch_size, 128)
        x = F.relu(self.bilinear2(x, x))  # Output shape: (batch_size, 256)
        
        # Reshape for ConvTranspose2d
        x = x.view(-1, 256, 1, 1)  # Reshape to (batch_size, 256, 1, 1)
        x = self.lazy_conv_transpose2d(x)  # Output shape: (batch_size, 32, 4, 4)
        
        # Compute SmoothL1Loss with a dummy target
        target = torch.zeros_like(x)
        loss = self.smooth_l1_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20)).cuda()  # Example input: (batch_size=10, sequence_length=20)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

