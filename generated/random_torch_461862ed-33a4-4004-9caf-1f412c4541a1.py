
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'LogSoftmax', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.bn3 = nn.BatchNorm3d(30)
        self.softplus = nn.Softplus()
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # Apply BatchNorm3d
        x = self.bn1(x)
        x = self.bn2(x)
        x = self.bn3(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

