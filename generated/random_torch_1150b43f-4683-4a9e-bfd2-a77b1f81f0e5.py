
# This is a random torch model generated by the following modules: ['Dropout2d', 'CrossEntropyLoss', 'LazyConv1d', 'Sigmoid', 'MaxUnpool1d', 'AvgPool1d', 'EmbeddingBag', 'LPPool1d', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.lazy_conv1d_1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.sigmoid = nn.Sigmoid()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=2, stride=2)
        self.prelu = nn.PReLU()

    def forward(self, x):
        # Apply Dropout2d (assuming input is 4D)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.dropout2d(x)
        x = x.squeeze(1)  # Remove channel dimension

        # Apply LazyConv1d
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.lazy_conv1d_1(x)
        x = self.prelu(x)
        x = self.lazy_conv1d_2(x)
        x = self.prelu(x)

        # Apply MaxUnpool1d (assuming we have indices from a previous max pooling)
        indices = torch.arange(0, x.shape[2], 2).unsqueeze(0).unsqueeze(0).repeat(x.shape[0], x.shape[1], 1)
        x = self.max_unpool1d(x, indices)

        # Apply AvgPool1d
        x = self.avg_pool1d(x)

        # Apply EmbeddingBag (assuming input is a sequence of indices)
        x = x.mean(dim=1)  # Reduce to batch_size x embedding_dim
        x = self.embedding_bag(torch.randint(0, 1000, (x.shape[0], 10)).to(x.device))

        # Apply LPPool1d
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.lp_pool1d(x)
        x = x.squeeze(1)  # Remove channel dimension

        # Apply Sigmoid
        x = self.sigmoid(x)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Arbitrary input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
