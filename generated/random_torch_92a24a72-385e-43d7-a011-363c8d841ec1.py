
# This is a random torch model generated by the following modules: ['CELU', 'L1Loss', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply CELU activation
        x = self.celu1(x)
        
        # Apply PReLU activation
        x = self.prelu1(x)
        
        # Reshape the input to a 1D tensor for L1Loss
        original_shape = x.shape
        x = x.view(-1)
        
        # Create a target tensor of zeros with the same shape as x
        target = torch.zeros_like(x)
        
        # Compute L1Loss
        loss = self.l1_loss(x, target)
        
        # Reshape back to the original shape
        x = x.view(original_shape)
        
        # Apply CELU activation again
        x = self.celu2(x)
        
        # Apply PReLU activation again
        x = self.prelu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
