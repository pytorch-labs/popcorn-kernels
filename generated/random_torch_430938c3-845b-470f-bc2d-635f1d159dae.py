
# This is a random torch model generated by the following modules: ['GLU', 'Container', 'LazyInstanceNorm2d', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.container1 = nn.Sequential(
            nn.LazyInstanceNorm2d(),
            nn.Hardshrink(),
            nn.GLU(dim=1)
        )
        self.container2 = nn.Sequential(
            nn.LazyInstanceNorm2d(),
            nn.Hardshrink(),
            nn.GLU(dim=1)
        )
        self.container3 = nn.Sequential(
            nn.LazyInstanceNorm2d(),
            nn.Hardshrink(),
            nn.GLU(dim=1)
        )
        self.container4 = nn.Sequential(
            nn.LazyInstanceNorm2d(),
            nn.Hardshrink(),
            nn.GLU(dim=1)
        )
        self.container5 = nn.Sequential(
            nn.LazyInstanceNorm2d(),
            nn.Hardshrink(),
            nn.GLU(dim=1)
        )

    def forward(self, x):
        x = self.glu1(x)
        x = self.container1(x)
        x = self.container2(x)
        x = self.container3(x)
        x = self.container4(x)
        x = self.container5(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
