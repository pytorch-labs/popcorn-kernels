
# This is a random torch model generated by the following modules: ['Fold', 'LogSoftmax', 'MaxPool1d', 'MSELoss', 'Sequential', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.sequential = nn.Sequential(
            nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1),
            nn.MaxPool1d(kernel_size=2, stride=2),
            nn.ConvTranspose3d(20, 30, kernel_size=3, stride=2, padding=1)
        )
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.max_pool1d(x)
        
        # Reshape back for Fold
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape to match Fold input
        x = self.fold(x)
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.log_softmax(x)
        
        # Compute MSE Loss (dummy target for demonstration)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

