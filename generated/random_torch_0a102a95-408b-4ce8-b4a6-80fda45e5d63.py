
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'FractionalMaxPool2d', 'Softmax', 'Softplus', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.batch_norm1d = nn.BatchNorm1d(14 * 14)
        self.softmax = nn.Softmax(dim=1)
        self.softplus = nn.Softplus()

    def forward(self, x):
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Flatten the tensor for BatchNorm1d
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape back to a 2D tensor for Softmax
        x = x.view(x.size(0), -1)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

