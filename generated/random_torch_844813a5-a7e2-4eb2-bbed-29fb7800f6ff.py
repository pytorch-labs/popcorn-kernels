
# This is a random torch model generated by the following modules: ['Module', 'Hardswish', 'BatchNorm1d', 'AdaptiveAvgPool2d', 'LazyConvTranspose2d', 'CosineSimilarity', 'Hardsigmoid', 'LSTM', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.bn1 = nn.BatchNorm1d(10)
        self.hardswish = nn.Hardswish()
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=10, kernel_size=3)
        self.adaptive_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.hardsigmoid = nn.Hardsigmoid()
        self.cosine_sim = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv1(x)  # Shape: (batch_size, 10, sequence_length - 4)
        x = self.bn1(x)    # Shape: (batch_size, 10, sequence_length - 4)
        x = self.hardswish(x)  # Shape: (batch_size, 10, sequence_length - 4)
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length - 4, 10)
        x, _ = self.lstm(x)  # Shape: (batch_size, sequence_length - 4, 20)
        
        # Reshape for ConvTranspose2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, sequence_length - 4, 20)
        x = self.conv_transpose(x)  # Shape: (batch_size, 10, sequence_length - 4 + 2, 20 + 2)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_pool(x)  # Shape: (batch_size, 10, 5, 5)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)  # Shape: (batch_size, 10, 5, 5)
        
        # Compute Cosine Similarity along the channel dimension
        x = self.cosine_sim(x, x)  # Shape: (batch_size, 5, 5)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

