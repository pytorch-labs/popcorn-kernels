
# This is a random torch model generated by the following modules: ['Tanhshrink', 'CELU', 'CosineEmbeddingLoss', 'TripletMarginLoss', 'AdaptiveAvgPool3d', 'NLLLoss2d', 'RNNCell', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.adaptive_pool = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.rnn_cell = nn.RNNCell(input_size=125, hidden_size=64)
        self.tanhshrink = nn.Tanhshrink()
        self.celu = nn.CELU()
        self.cosine_loss = nn.CosineEmbeddingLoss()
        self.triplet_loss = nn.TripletMarginLoss()
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Apply adaptive average pooling
        x = self.adaptive_pool(x)
        
        # Reshape for RNNCell
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Apply RNNCell
        hx = torch.zeros(batch_size, 64).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Reshape for NLLLoss2d
        x = x.view(batch_size, 8, 8)
        
        # Dummy target for NLLLoss2d
        target = torch.randint(0, 8, (batch_size, 8, 8)).to(x.device)
        x = self.nll_loss(x, target)
        
        # Dummy inputs for CosineEmbeddingLoss and TripletMarginLoss
        input1 = torch.randn(batch_size, 64).to(x.device)
        input2 = torch.randn(batch_size, 64).to(x.device)
        target_cosine = torch.ones(batch_size).to(x.device)
        anchor = torch.randn(batch_size, 64).to(x.device)
        positive = torch.randn(batch_size, 64).to(x.device)
        negative = torch.randn(batch_size, 64).to(x.device)
        
        # Apply CosineEmbeddingLoss
        cosine_loss = self.cosine_loss(input1, input2, target_cosine)
        
        # Apply TripletMarginLoss
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Combine losses
        total_loss = x + cosine_loss + triplet_loss
        
        return total_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

