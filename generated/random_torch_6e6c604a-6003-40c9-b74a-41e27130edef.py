
# This is a random torch model generated by the following modules: ['Conv3d', 'ELU', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv2 = nn.Conv3d(10, 20, kernel_size=3)
        self.conv3 = nn.Conv3d(20, 30, kernel_size=3)
        self.conv4 = nn.Conv3d(30, 40, kernel_size=3)
        self.conv5 = nn.Conv3d(40, 50, kernel_size=3)
        self.elu = nn.ELU()
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        x = self.elu(self.conv1(x))
        x = self.elu(self.conv2(x))
        x = self.elu(self.conv3(x))
        x = self.elu(self.conv4(x))
        x = self.elu(self.conv5(x))
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.nll_loss(x, torch.zeros(x.size(0), dtype=torch.long).to(x.device))
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

