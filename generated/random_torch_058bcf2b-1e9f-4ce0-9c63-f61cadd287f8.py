
# This is a random torch model generated by the following modules: ['MultiheadAttention', 'PairwiseDistance', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.attention1 = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.attention2 = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.pairwise_distance = nn.PairwiseDistance()
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=32)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, feature_dim)
        batch_size, seq_len, feature_dim = x.shape
        
        # Reshape for MultiheadAttention: (seq_len, batch_size, feature_dim)
        x = x.permute(1, 0, 2)
        
        # Apply first attention layer
        x, _ = self.attention1(x, x, x)
        
        # Apply second attention layer
        x, _ = self.attention2(x, x, x)
        
        # Reshape back to (batch_size, seq_len, feature_dim)
        x = x.permute(1, 0, 2)
        
        # Compute pairwise distance between the first and second sequence elements
        x1 = x[:, 0, :]  # First element in the sequence
        x2 = x[:, 1, :]  # Second element in the sequence
        x = self.pairwise_distance(x1, x2)
        
        # Reshape for AdaptiveMaxPool1d: (batch_size, 1, feature_dim)
        x = x.unsqueeze(1)
        
        # Apply adaptive max pooling
        x = self.adaptive_max_pool(x)
        
        # Flatten the output
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
