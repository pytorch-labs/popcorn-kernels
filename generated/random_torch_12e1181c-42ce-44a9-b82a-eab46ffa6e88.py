
# This is a random torch model generated by the following modules: ['Softmax', 'RReLU', 'EmbeddingBag', 'ConstantPad1d', 'Dropout', 'InstanceNorm1d', 'Hardshrink', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.constant_pad = nn.ConstantPad1d(2, 0)
        self.dropout = nn.Dropout(0.5)
        self.instance_norm = nn.InstanceNorm1d(64)
        self.hardshrink = nn.Hardshrink()
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.rrelu = nn.RReLU()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = x.unsqueeze(1)  # Add a dimension for ConstantPad1d
        x = self.constant_pad(x)
        x = x.squeeze(1)  # Remove the added dimension
        x = self.dropout(x)
        x = x.unsqueeze(1)  # Add a dimension for InstanceNorm1d
        x = self.instance_norm(x)
        x = x.squeeze(1)  # Remove the added dimension
        x = self.hardshrink(x)
        x = x.unsqueeze(0).unsqueeze(0)  # Add dimensions for CrossMapLRN2d
        x = self.cross_map_lrn(x)
        x = x.squeeze(0).squeeze(0)  # Remove the added dimensions
        x = self.rrelu(x)
        x = self.softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
