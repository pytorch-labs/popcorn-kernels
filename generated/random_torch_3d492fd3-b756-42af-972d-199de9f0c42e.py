
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'ParameterDict', 'Flatten', 'AdaptiveLogSoftmaxWithLoss', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.flatten = nn.Flatten()
        self.module_list = nn.ModuleList([
            nn.Linear(10, 20),
            nn.Linear(20, 30),
            nn.Linear(30, 40)
        ])
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(40, 10, [5, 10, 20])

    def forward(self, x):
        x = self.adaptive_avg_pool(x)
        x = self.flatten(x)
        for layer in self.module_list:
            x = layer(x)
        x = self.adaptive_log_softmax.log_prob(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
