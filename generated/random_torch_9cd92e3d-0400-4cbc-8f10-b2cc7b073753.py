
# This is a random torch model generated by the following modules: ['Identity', 'Softmax', 'LazyConv3d', 'TripletMarginWithDistanceLoss', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.softmax = nn.Softmax(dim=1)
        self.loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Apply LazyConv3d layers
        x = self.conv1(x)
        x = self.hardtanh(x)
        x = self.conv2(x)
        x = self.hardtanh(x)
        
        # Reshape for Softmax
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.softmax(x)
        
        # Reshape back to 3D for TripletMarginWithDistanceLoss
        x = x.view(x.size(0), 32, -1)  # Reshape to (batch, channels, -1)
        
        # Generate anchor, positive, and negative samples for TripletMarginWithDistanceLoss
        anchor = x[:, :, :x.size(2)//2]
        positive = x[:, :, x.size(2)//2:]
        negative = torch.roll(positive, shifts=1, dims=0)
        
        # Compute TripletMarginWithDistanceLoss
        loss = self.loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()  # Arbitrary 3D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
