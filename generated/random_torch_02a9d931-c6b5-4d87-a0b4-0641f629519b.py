
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'Hardshrink', 'SyncBatchNorm', 'CircularPad1d', 'ZeroPad3d', 'Conv2d', 'AdaptiveAvgPool1d', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.hardshrink = nn.Hardshrink()
        self.sync_batch_norm = nn.SyncBatchNorm(10)
        self.circular_pad1d = nn.CircularPad1d(padding=2)
        self.zero_pad3d = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.conv2d = nn.Conv2d(3, 10, kernel_size=3, stride=1, padding=1)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.channel_shuffle(x)  # Shuffle channels
        x = self.hardshrink(x)  # Apply Hardshrink activation
        x = self.sync_batch_norm(x)  # Apply SyncBatchNorm
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.circular_pad1d(x)  # Apply CircularPad1d
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        
        # Reshape back to 4D for 3D operations
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.zero_pad3d(x)  # Apply ZeroPad3d
        
        # Reshape back to 4D for Conv2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.conv2d(x)  # Apply Conv2d
        x = self.avg_pool2d(x)  # Apply AvgPool2d
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
