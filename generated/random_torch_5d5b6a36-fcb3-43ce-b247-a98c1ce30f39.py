
# This is a random torch model generated by the following modules: ['ELU', 'Softsign', 'RNN']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU()
        self.softsign1 = nn.Softsign()
        self.rnn1 = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.elu2 = nn.ELU()
        self.softsign2 = nn.Softsign()
        self.rnn2 = nn.RNN(input_size=20, hidden_size=30, num_layers=2, batch_first=True)
        self.elu3 = nn.ELU()
        self.softsign3 = nn.Softsign()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # If not, reshape it accordingly
        if len(x.shape) == 2:
            x = x.unsqueeze(0)  # Add batch dimension if missing
        elif len(x.shape) == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and sequence dimensions if missing

        x = self.elu1(x)
        x = self.softsign1(x)
        
        # Reshape for RNN input
        batch_size, seq_len, input_size = x.size()
        x, _ = self.rnn1(x)
        
        x = self.elu2(x)
        x = self.softsign2(x)
        
        x, _ = self.rnn2(x)
        
        x = self.elu3(x)
        x = self.softsign3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

