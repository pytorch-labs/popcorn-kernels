
# This is a random torch model generated by the following modules: ['LazyInstanceNorm3d', 'CosineEmbeddingLoss', 'ModuleDict', 'EmbeddingBag', 'Hardsigmoid', 'BCEWithLogitsLoss', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm = nn.LazyInstanceNorm3d()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.hardsigmoid = nn.Hardsigmoid()
        self.max_unpool = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.module_dict = nn.ModuleDict({
            'fc1': nn.Linear(64, 32),
            'fc2': nn.Linear(32, 16)
        })
        self.loss_fn1 = nn.CosineEmbeddingLoss()
        self.loss_fn2 = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assume x is of arbitrary shape, reshape to fit LazyInstanceNorm3d
        x = x.view(-1, 1, 8, 8, 8)  # Reshape to 5D tensor
        x = self.norm(x)
        
        # Flatten and use EmbeddingBag
        x = x.view(-1).long()  # Convert to 1D tensor of indices
        x = self.embedding_bag(x.view(1, -1))
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(1, 1, -1)  # Reshape to 3D tensor
        indices = torch.arange(0, x.size(2), 2).view(1, 1, -1)
        x = self.max_unpool(x, indices)
        
        # Pass through ModuleDict layers
        x = self.module_dict['fc1'](x.view(1, -1))
        x = self.module_dict['fc2'](x)
        
        # Compute losses (dummy targets for demonstration)
        target1 = torch.tensor([1.0])
        target2 = torch.tensor([0.5])
        loss1 = self.loss_fn1(x, torch.ones_like(x), target1)
        loss2 = self.loss_fn2(x, target2)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
