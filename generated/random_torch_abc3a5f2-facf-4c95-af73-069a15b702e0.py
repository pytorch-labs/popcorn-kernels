
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'ZeroPad3d', 'LazyConv1d', 'MaxUnpool1d', 'LayerNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad2d = nn.ConstantPad2d(2, 3.0)  # Padding with value 3.0
        self.pad3d = nn.ZeroPad3d((1, 1, 2, 2, 3, 3))  # Zero padding
        self.conv1d_1 = nn.LazyConv1d(out_channels=16, kernel_size=3)  # LazyConv1d
        self.conv1d_2 = nn.LazyConv1d(out_channels=32, kernel_size=5)  # LazyConv1d
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)  # MaxUnpool1d
        self.layer_norm = nn.LayerNorm(32)  # LayerNorm

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.pad2d(x)  # Apply ConstantPad2d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D for ZeroPad3d
        x = self.pad3d(x)  # Apply ZeroPad3d
        x = x.squeeze(1)  # Remove the added dimension to make it 4D again
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.conv1d_1(x)  # Apply LazyConv1d
        x = F.relu(x)  # Apply ReLU
        x = self.conv1d_2(x)  # Apply LazyConv1d
        x = F.relu(x)  # Apply ReLU
        x = x.unsqueeze(2)  # Add a dimension for MaxUnpool1d
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)  # MaxPool1d to get indices
        x = self.max_unpool1d(x, indices)  # Apply MaxUnpool1d
        x = x.squeeze(2)  # Remove the added dimension
        x = self.layer_norm(x)  # Apply LayerNorm
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

