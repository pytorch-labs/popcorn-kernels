
# This is a random torch model generated by the following modules: ['GLU', 'LazyBatchNorm1d', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.bn1 = nn.LazyBatchNorm1d()
        self.zero_pad1 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.glu2 = nn.GLU(dim=1)
        self.bn2 = nn.LazyBatchNorm1d()
        self.zero_pad2 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.glu3 = nn.GLU(dim=1)
        self.bn3 = nn.LazyBatchNorm1d()
        self.zero_pad3 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Apply ZeroPad3d to ensure the input has the correct shape for GLU
        x = self.zero_pad1(x)
        
        # Flatten the input to 2D for LazyBatchNorm1d
        original_shape = x.shape
        x = x.view(original_shape[0], -1)
        
        # Apply GLU and LazyBatchNorm1d
        x = self.glu1(x)
        x = self.bn1(x)
        
        # Reshape back to original shape
        x = x.view(original_shape)
        
        # Apply ZeroPad3d again
        x = self.zero_pad2(x)
        
        # Flatten the input to 2D for LazyBatchNorm1d
        original_shape = x.shape
        x = x.view(original_shape[0], -1)
        
        # Apply GLU and LazyBatchNorm1d
        x = self.glu2(x)
        x = self.bn2(x)
        
        # Reshape back to original shape
        x = x.view(original_shape)
        
        # Apply ZeroPad3d again
        x = self.zero_pad3(x)
        
        # Flatten the input to 2D for LazyBatchNorm1d
        original_shape = x.shape
        x = x.view(original_shape[0], -1)
        
        # Apply GLU and LazyBatchNorm1d
        x = self.glu3(x)
        x = self.bn3(x)
        
        # Reshape back to original shape
        x = x.view(original_shape)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

