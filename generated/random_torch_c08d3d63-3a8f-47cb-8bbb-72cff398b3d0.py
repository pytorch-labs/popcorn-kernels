
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'LPPool2d', 'Flatten', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.bn2 = nn.BatchNorm1d(64)
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.flatten = nn.Flatten()
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.lp_pool(x)  # Apply LPPool2d
        x = x.view(x.size(0), -1)  # Flatten the tensor for BatchNorm1d
        x = self.bn1(x)  # Apply BatchNorm1d
        x = x.view(x.size(0), 64, -1)  # Reshape for another BatchNorm1d
        x = self.bn2(x)  # Apply BatchNorm1d again
        x = x.view(x.size(0), 64, 8, 8)  # Reshape for Fold
        x = self.fold(x)  # Apply Fold
        x = self.flatten(x)  # Flatten the output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
