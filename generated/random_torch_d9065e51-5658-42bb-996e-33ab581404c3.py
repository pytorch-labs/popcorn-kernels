
# This is a random torch model generated by the following modules: ['Sigmoid', 'Linear', 'LazyBatchNorm2d', 'Identity', 'Upsample', 'AdaptiveMaxPool1d', 'MSELoss', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.linear1 = nn.Linear(10, 20)
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.upsample = nn.Upsample(scale_factor=2)
        self.linear2 = nn.Linear(20, 10)
        self.sigmoid = nn.Sigmoid()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        x = self.identity(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.reflection_pad1d(x)
        x = self.adaptive_max_pool1d(x)
        x = x.view(x.size(0), -1)  # Flatten for Linear layer
        x = self.linear1(x)
        x = x.view(x.size(0), x.size(1), 1, 1)  # Reshape for LazyBatchNorm2d
        x = self.lazy_batch_norm2d(x)
        x = x.view(x.size(0), x.size(1))  # Flatten again
        x = self.upsample(x.unsqueeze(2)).squeeze(2)  # Upsample and remove extra dimension
        x = self.linear2(x)
        x = self.sigmoid(x)
        target = torch.zeros_like(x)  # Dummy target for MSELoss
        loss = self.mse_loss(x, target)
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

