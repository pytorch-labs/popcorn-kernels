
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'Conv2d', 'LazyConvTranspose3d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1)
        self.instance_norm1 = nn.InstanceNorm3d(16)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.instance_norm2 = nn.InstanceNorm3d(32)
        self.lazy_conv_transpose1 = nn.LazyConvTranspose3d(64, kernel_size=3, stride=1, padding=1)
        self.lazy_conv_transpose2 = nn.LazyConvTranspose3d(128, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(128 * 8 * 8, 256)
        self.fc2 = nn.Linear(256, 10)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv1(x)
        x = x.unsqueeze(2)  # Add a dummy depth dimension for InstanceNorm3d
        x = self.instance_norm1(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        x = F.relu(x)
        
        x = self.conv2(x)
        x = x.unsqueeze(2)  # Add a dummy depth dimension for InstanceNorm3d
        x = self.instance_norm2(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        x = F.relu(x)
        
        x = x.unsqueeze(2)  # Add a dummy depth dimension for LazyConvTranspose3d
        x = self.lazy_conv_transpose1(x)
        x = F.relu(x)
        
        x = self.lazy_conv_transpose2(x)
        x = F.relu(x)
        
        # Flatten the output for the linear layer
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
