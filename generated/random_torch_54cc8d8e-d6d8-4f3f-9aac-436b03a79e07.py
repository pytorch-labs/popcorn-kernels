
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'PairwiseDistance', 'LSTMCell', 'ReplicationPad3d', 'FractionalMaxPool2d', 'GELU', 'AlphaDropout', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.pairwise_distance = nn.PairwiseDistance()
        self.lstm_cell = nn.LSTMCell(128, 64)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(16, 16))
        self.gelu = nn.GELU()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.constant_pad3d = nn.ConstantPad3d(1, 0.5)

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Apply ReplicationPad3d
        x = self.replication_pad3d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Reshape for LSTMCell
        batch_size, channels, height, width, depth = x.shape
        x = x.view(batch_size, -1)
        
        # Initialize hidden and cell states for LSTMCell
        hx = torch.zeros(batch_size, 64).to(x.device)
        cx = torch.zeros(batch_size, 64).to(x.device)
        
        # Apply LSTMCell
        hx, cx = self.lstm_cell(x, (hx, cx))
        
        # Compute PairwiseDistance between hx and cx
        output = self.pairwise_distance(hx, cx)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

