
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'Linear', 'RNNBase', 'Sequential', 'NLLLoss', 'CELU', 'RNNCell', 'AdaptiveMaxPool2d', 'Unfold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.unfold = nn.Unfold(kernel_size=(2, 2), stride=(1, 1))
        self.linear1 = nn.Linear(25, 50)
        self.linear2 = nn.Linear(50, 10)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.rnn_cell = nn.RNNCell(input_size=20, hidden_size=10)
        self.sequential = nn.Sequential(
            nn.CELU(),
            nn.Linear(10, 5)
        )
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool2d(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = F.celu(self.linear1(x))
        x = self.linear2(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 10)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Apply RNNCell
        hx = torch.zeros(x.size(0), 10).to(x.device)
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        x = hx
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Apply AdaptiveMaxPool1d
        x = x.unsqueeze(1)
        x = self.adaptive_max_pool1d(x)
        x = x.squeeze(1)
        
        # Apply NLLLoss (assuming target is provided externally)
        # Note: NLLLoss is typically used in the loss computation, not in the forward pass
        # So, we return the output and let the user handle the loss computation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

