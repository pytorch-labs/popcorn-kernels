
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'Dropout2d', 'LazyConvTranspose1d', 'MSELoss', 'NLLLoss2d', 'InstanceNorm2d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.dropout2d = nn.Dropout2d(0.5)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.instance_norm2d = nn.InstanceNorm2d(64)
        self.silu = nn.SiLU()
        self.mse_loss = nn.MSELoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # ZeroPad3d
        x = self.zero_pad(x)
        
        # Reshape to 4D for Dropout2d and InstanceNorm2d
        x = x.view(-1, 64, x.shape[2], x.shape[3])
        
        # Dropout2d
        x = self.dropout2d(x)
        
        # InstanceNorm2d
        x = self.instance_norm2d(x)
        
        # Reshape to 3D for LazyConvTranspose1d
        x = x.view(-1, 64, x.shape[2] * x.shape[3])
        
        # LazyConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # SiLU activation
        x = self.silu(x)
        
        # Reshape back to 4D for NLLLoss2d
        x = x.view(-1, 64, x.shape[2], 1)
        
        # NLLLoss2d requires log probabilities, so we apply log_softmax
        x = F.log_softmax(x, dim=1)
        
        # MSELoss and NLLLoss2d are typically used during training, not in the forward pass
        # So we return the output for further processing
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

