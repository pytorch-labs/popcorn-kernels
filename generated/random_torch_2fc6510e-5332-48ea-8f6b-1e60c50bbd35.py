
# This is a random torch model generated by the following modules: ['HuberLoss', 'AdaptiveLogSoftmaxWithLoss', 'Sigmoid', 'UpsamplingNearest2d', 'MultiLabelMarginLoss', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self, input_dim: int = 128, num_classes: int = 10) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.sigmoid = nn.Sigmoid()
        self.unflatten = nn.Unflatten(1, (input_dim, 1, 1))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(input_dim, num_classes, [input_dim // 2, input_dim // 4])
        self.huber_loss = nn.HuberLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Apply sigmoid activation
        x = self.sigmoid(x)
        
        # Unflatten the input to match the expected shape for AdaptiveLogSoftmaxWithLoss
        x = self.unflatten(x.view(x.size(0), -1))
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax(x.view(x.size(0), -1))
        
        # Compute Huber Loss (dummy target for demonstration)
        target = torch.randn_like(x.output)
        huber_loss = self.huber_loss(x.output, target)
        
        # Compute MultiLabelMarginLoss (dummy target for demonstration)
        target = torch.randint(0, 2, (x.output.size(0), x.output.size(1)), dtype=torch.float32)
        multi_label_loss = self.multi_label_margin_loss(x.output, target)
        
        # Return the losses for demonstration purposes
        return huber_loss, multi_label_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
