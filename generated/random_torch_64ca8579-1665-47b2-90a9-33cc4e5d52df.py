
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'TripletMarginWithDistanceLoss', 'ModuleDict', 'SELU', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.module_dict = nn.ModuleDict({
            'selu1': nn.SELU(),
            'selu2': nn.SELU(),
            'selu3': nn.SELU(),
            'selu4': nn.SELU(),
            'selu5': nn.SELU()
        })
        self.avg_pool = nn.AdaptiveAvgPool1d(10)
        self.loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Flatten the input to 1D for AdaptiveAvgPool1d
        x = x.view(x.size(0), -1)
        
        # Apply AdaptiveAvgPool1d
        x = self.avg_pool(x)
        
        # Apply SELU activations from ModuleDict
        for i in range(1, 6):
            x = self.module_dict[f'selu{i}'](x)
        
        # Generate anchor, positive, and negative samples for TripletMarginWithDistanceLoss
        anchor = x
        positive = x + torch.randn_like(x) * 0.1
        negative = x + torch.randn_like(x) * 0.2
        
        # Compute the triplet loss
        loss = self.loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
