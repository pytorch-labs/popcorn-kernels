
# This is a random torch model generated by the following modules: ['Conv3d', 'Conv1d', 'Flatten', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=(3, 3, 3))
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=(3, 3, 3))
        self.conv1d_1 = nn.Conv1d(20, 30, kernel_size=3)
        self.conv1d_2 = nn.Conv1d(30, 40, kernel_size=3)
        self.flatten = nn.Flatten()
        self.gru_cell_1 = nn.GRUCell(40, 50)
        self.gru_cell_2 = nn.GRUCell(50, 10)

    def forward(self, x):
        # Apply Conv3d layers
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reshape for Conv1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = x.permute(0, 2, 1)  # Swap dimensions for Conv1d
        
        # Apply Conv1d layers
        x = F.relu(self.conv1d_1(x))
        x = F.relu(self.conv1d_2(x))
        
        # Flatten the output
        x = self.flatten(x)
        
        # Apply GRUCell layers
        hx1 = torch.zeros(x.size(0), 50).to(x.device)
        x = self.gru_cell_1(x, hx1)
        
        hx2 = torch.zeros(x.size(0), 10).to(x.device)
        x = self.gru_cell_2(x, hx2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Arbitrary 3D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

