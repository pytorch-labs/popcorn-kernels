
# This is a random torch model generated by the following modules: ['GRUCell', 'KLDivLoss', 'AdaptiveLogSoftmaxWithLoss', 'ZeroPad3d', 'AdaptiveAvgPool1d', 'BatchNorm3d', 'Hardswish', 'LazyConvTranspose1d', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=256)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.batch_norm3d = nn.BatchNorm3d(num_features=64)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=64)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(32, 32))
        self.hardswish = nn.Hardswish()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=256, n_classes=10, cutoffs=[5])
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.zero_pad3d(x)  # Apply ZeroPad3d
        x = self.batch_norm3d(x)  # Apply BatchNorm3d
        
        # Reshape for GRUCell
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten to (batch_size, channels * depth * height * width)
        hx = torch.zeros(batch_size, 256).to(x.device)  # Initialize hidden state for GRUCell
        x = self.gru_cell(x, hx)  # Apply GRUCell
        
        # Reshape for LazyConvTranspose1d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.lazy_conv_transpose1d(x)  # Apply LazyConvTranspose1d
        
        # Reshape for AdaptiveAvgPool1d
        x = x.squeeze(1)  # Remove the channel dimension
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(batch_size, 1, 32, 32)  # Reshape to (batch_size, 1, 32, 32)
        x = self.adaptive_avg_pool2d(x)  # Apply AdaptiveAvgPool2d
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)  # Flatten to (batch_size, 1024)
        x = self.adaptive_log_softmax.log_prob(x)  # Apply AdaptiveLogSoftmaxWithLoss
        
        # Apply KLDivLoss (assuming target is provided externally)
        target = torch.randint(0, 10, (batch_size,)).to(x.device)
        loss = self.kl_div_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(2, 64, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
