
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'LazyConvTranspose2d', 'Container', 'AdaptiveAvgPool1d', 'CircularPad2d', 'FractionalMaxPool2d', 'Softsign', 'AdaptiveMaxPool2d', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm3d(1)
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.container = nn.Sequential(
            nn.AdaptiveAvgPool1d(output_size=64),
            nn.CircularPad2d(padding=2),
            nn.FractionalMaxPool2d(kernel_size=3, output_size=(32, 32)),
            nn.Softsign(),
            nn.AdaptiveMaxPool2d(output_size=(16, 16)),
            nn.Dropout2d(p=0.5)
        )
        self.conv_transpose3 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.conv_transpose4 = nn.LazyConvTranspose2d(out_channels=128, kernel_size=3, stride=2)
        self.conv_transpose5 = nn.LazyConvTranspose2d(out_channels=256, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.instance_norm(x)
        
        # Reduce to 4D (batch, channels, height, width) by averaging over depth
        x = x.mean(dim=2)
        
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply container with multiple layers
        x = self.container(x)
        
        x = self.conv_transpose3(x)
        x = self.conv_transpose4(x)
        x = self.conv_transpose5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 64, 64).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
