
# This is a random torch model generated by the following modules: ['LazyConv1d', 'LPPool3d', 'Hardtanh', 'LSTM', 'LogSoftmax', 'FeatureAlphaDropout', 'MultiheadAttention', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.lstm = nn.LSTM(input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.reflection_pad(x)  # Shape: (batch_size, channels, length + 4)
        x = self.lazy_conv1d(x)  # Shape: (batch_size, 32, length + 2)
        x = self.hardtanh(x)  # Shape: (batch_size, 32, length + 2)
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)  # Shape: (batch_size, length + 2, 32)
        x, _ = self.lstm(x)  # Shape: (batch_size, length + 2, 64)
        
        # Reshape for MultiheadAttention
        x = x.permute(1, 0, 2)  # Shape: (length + 2, batch_size, 64)
        x, _ = self.multihead_attention(x, x, x)  # Shape: (length + 2, batch_size, 64)
        x = x.permute(1, 0, 2)  # Shape: (batch_size, length + 2, 64)
        
        # Reshape for LPPool3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, length + 2, 64, 1)
        x = self.lp_pool3d(x)  # Shape: (batch_size, 1, (length + 2)/2, 32, 1)
        x = x.squeeze(1).squeeze(-1)  # Shape: (batch_size, (length + 2)/2, 32)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)  # Shape: (batch_size, (length + 2)/2, 32)
        
        # Reshape for LogSoftmax
        x = x.mean(dim=1)  # Shape: (batch_size, 32)
        x = self.log_softmax(x)  # Shape: (batch_size, 32)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
