
# This is a random torch model generated by the following modules: ['GRU', 'Dropout', 'Dropout3d', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout3d1 = nn.Dropout3d(p=0.3)
        self.dropout1d1 = nn.Dropout1d(p=0.2)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.dropout2 = nn.Dropout(p=0.4)
        self.dropout3d2 = nn.Dropout3d(p=0.3)
        self.dropout1d2 = nn.Dropout1d(p=0.1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # Reshape if necessary to fit GRU input
        if len(x.shape) == 2:
            x = x.unsqueeze(0)  # Add batch dimension if missing
        elif len(x.shape) == 4:
            x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions for GRU

        # First GRU layer
        x, _ = self.gru1(x)
        x = self.dropout1(x)
        
        # Reshape for Dropout3d (assuming x is of shape (batch_size, sequence_length, hidden_size))
        x = x.unsqueeze(2).unsqueeze(3)  # Add dummy spatial dimensions
        x = self.dropout3d1(x)
        x = x.squeeze(3).squeeze(2)  # Remove dummy spatial dimensions
        
        # Apply Dropout1d
        x = x.permute(0, 2, 1)  # Swap sequence_length and hidden_size for Dropout1d
        x = self.dropout1d1(x)
        x = x.permute(0, 2, 1)  # Swap back
        
        # Second GRU layer
        x, _ = self.gru2(x)
        x = self.dropout2(x)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(2).unsqueeze(3)
        x = self.dropout3d2(x)
        x = x.squeeze(3).squeeze(2)
        
        # Apply Dropout1d
        x = x.permute(0, 2, 1)
        x = self.dropout1d2(x)
        x = x.permute(0, 2, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

