
# This is a random torch model generated by the following modules: ['Unfold', 'PixelUnshuffle', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold1 = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.pixel_unshuffle1 = nn.PixelUnshuffle(downscale_factor=2)
        self.relu1 = nn.ReLU()
        self.unfold2 = nn.Unfold(kernel_size=(2, 2), stride=(1, 1))
        self.pixel_unshuffle2 = nn.PixelUnshuffle(downscale_factor=2)
        self.relu2 = nn.ReLU()

    def forward(self, x):
        # Apply the first Unfold
        x = self.unfold1(x)
        x = x.view(x.size(0), -1, x.size(2), x.size(3))  # Reshape to 4D tensor
        
        # Apply the first PixelUnshuffle
        x = self.pixel_unshuffle1(x)
        
        # Apply the first ReLU
        x = self.relu1(x)
        
        # Apply the second Unfold
        x = self.unfold2(x)
        x = x.view(x.size(0), -1, x.size(2), x.size(3))  # Reshape to 4D tensor
        
        # Apply the second PixelUnshuffle
        x = self.pixel_unshuffle2(x)
        
        # Apply the second ReLU
        x = self.relu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

