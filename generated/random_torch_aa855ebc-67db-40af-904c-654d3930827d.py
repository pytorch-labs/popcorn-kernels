
# This is a random torch model generated by the following modules: ['CircularPad3d', 'Softmax2d', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1 = nn.CircularPad3d(1)
        self.circular_pad2 = nn.CircularPad3d(2)
        self.softmax2d = nn.Softmax2d()
        self.hardtanh1 = nn.Hardtanh(min_val=-1, max_val=1)
        self.hardtanh2 = nn.Hardtanh(min_val=-0.5, max_val=0.5)

    def forward(self, x):
        # Apply the first circular padding
        x = self.circular_pad1(x)
        
        # Apply the first Hardtanh
        x = self.hardtanh1(x)
        
        # Apply the second circular padding
        x = self.circular_pad2(x)
        
        # Apply the Softmax2d
        x = self.softmax2d(x)
        
        # Apply the second Hardtanh
        x = self.hardtanh2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

