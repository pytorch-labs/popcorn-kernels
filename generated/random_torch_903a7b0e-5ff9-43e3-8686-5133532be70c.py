
# This is a random torch model generated by the following modules: ['Dropout3d', 'CTCLoss', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Apply AvgPool3d
        x = self.avgpool3d(x)
        
        # Reshape the tensor to fit the CTC loss requirements
        # CTC loss expects input of shape (T, N, C) where T is the sequence length,
        # N is the batch size, and C is the number of classes.
        # Here, we assume the input is of shape (N, C, D, H, W) after AvgPool3d.
        # We need to reshape it to (T, N, C).
        N, C, D, H, W = x.shape
        x = x.permute(2, 0, 1, 3, 4)  # Shape: (D, N, C, H, W)
        x = x.reshape(D, N, -1)  # Shape: (T=D, N, C*H*W)
        
        # Dummy target for CTC loss (assuming random target for demonstration)
        target = torch.randint(1, C, (N, 10), dtype=torch.long)  # Shape: (N, S)
        target_lengths = torch.full((N,), 10, dtype=torch.long)  # Shape: (N,)
        input_lengths = torch.full((N,), D, dtype=torch.long)  # Shape: (N,)
        
        # Apply CTC loss
        loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Return the loss as the output (since CTC loss is typically used for training)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16, 16).cuda()  # Shape: (N, C, D, H, W)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

