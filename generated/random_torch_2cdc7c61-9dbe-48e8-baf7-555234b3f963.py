
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'ReflectionPad3d', 'AvgPool3d', 'PixelShuffle', 'RNNBase', 'Conv1d', 'AdaptiveMaxPool2d', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.softmax2d = nn.Softmax2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1d(x)  # Shape: (batch_size, 10, length - kernel_size + 1)
        x = self.adaptive_avg_pool1d(x)  # Shape: (batch_size, 10, 10)
        
        # Reshape for ReflectionPad3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 10, 1, 1, 10)
        x = self.reflection_pad3d(x)  # Shape: (batch_size, 10, 3, 3, 12)
        x = self.avg_pool3d(x)  # Shape: (batch_size, 10, 1, 1, 6)
        
        # Reshape for PixelShuffle
        x = x.squeeze(2).squeeze(2)  # Shape: (batch_size, 10, 6)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 10, 6)
        x = self.pixel_shuffle(x)  # Shape: (batch_size, 4, 5, 3)
        
        # Reshape for RNN
        x = x.permute(0, 2, 3, 1)  # Shape: (batch_size, 5, 3, 4)
        x = x.reshape(x.size(0), x.size(1), -1)  # Shape: (batch_size, 5, 12)
        x, _ = self.rnn(x)  # Shape: (batch_size, 5, 20)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 5, 20)
        x = self.adaptive_max_pool2d(x)  # Shape: (batch_size, 1, 5, 5)
        
        # Apply Softmax2d
        x = self.softmax2d(x)  # Shape: (batch_size, 1, 5, 5)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
