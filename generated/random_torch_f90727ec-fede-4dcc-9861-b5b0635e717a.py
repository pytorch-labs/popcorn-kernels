
# This is a random torch model generated by the following modules: ['LogSigmoid', 'ReLU6', 'SyncBatchNorm', 'UpsamplingNearest2d', 'LazyBatchNorm3d', 'Softmin', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn = nn.SyncBatchNorm(64)
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.relu6 = nn.ReLU6()
        self.log_sigmoid = nn.LogSigmoid()
        self.softmin = nn.Softmin(dim=1)
        self.param_dict = nn.ParameterDict({
            'weight': nn.Parameter(torch.randn(64, 64)),
            'bias': nn.Parameter(torch.randn(64))
        })

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.lazy_bn3d(x)  # Apply LazyBatchNorm3d
        x = x.view(x.size(0), -1, x.size(2), x.size(3))  # Reshape to 4D for SyncBatchNorm
        x = self.sync_bn(x)  # Apply SyncBatchNorm
        x = self.upsample(x)  # Upsample using UpsamplingNearest2d
        x = self.relu6(x)  # Apply ReLU6
        x = self.log_sigmoid(x)  # Apply LogSigmoid
        x = x.view(x.size(0), -1)  # Flatten for Softmin
        x = self.softmin(x)  # Apply Softmin
        x = x @ self.param_dict['weight'] + self.param_dict['bias']  # Apply ParameterDict
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

