
# This is a random torch model generated by the following modules: ['MaxPool3d', 'NLLLoss', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.maxpool2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.nll_loss = nn.NLLLoss()
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply MaxPool3d twice
        x = self.maxpool1(x)
        x = self.maxpool2(x)
        
        # Flatten the output for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for NLLLoss (assuming classification task)
        target_nll = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Dummy target for BCEWithLogitsLoss (assuming binary classification task)
        target_bce = torch.randint(0, 2, (x.size(0), x.size(1))).float().to(x.device)
        
        # Compute NLLLoss
        nll_loss = self.nll_loss(F.log_softmax(x, dim=1), target_nll)
        
        # Compute BCEWithLogitsLoss
        bce_loss = self.bce_loss(x, target_bce)
        
        # Return the sum of the losses (for demonstration purposes)
        return nll_loss + bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Arbitrary 3D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
