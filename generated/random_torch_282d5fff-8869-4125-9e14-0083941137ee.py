
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'LocalResponseNorm', 'Dropout3d', 'Tanh', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv3d(1, 10, kernel_size=3, stride=1, padding=1)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.conv2 = nn.Conv3d(10, 20, kernel_size=3, stride=1, padding=1)
        self.tanh = nn.Tanh()

    def forward(self, x):
        x = self.conv1(x)
        x = self.fractional_max_pool(x)
        x = self.local_response_norm(x)
        x = self.dropout3d(x)
        x = self.conv2(x)
        x = self.tanh(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
