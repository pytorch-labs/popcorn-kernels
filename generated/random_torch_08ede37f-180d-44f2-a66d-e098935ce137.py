
# This is a random torch model generated by the following modules: ['MSELoss', 'Sigmoid', 'AdaptiveMaxPool1d', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.sigmoid = nn.Sigmoid()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply Conv2d layers
        x = self.conv1(x)
        x = self.conv2(x)
        
        # Reshape for AdaptiveMaxPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)  # Reshape to (batch_size, channels*height, width)
        x = self.adaptive_max_pool(x)  # Apply AdaptiveMaxPool1d
        
        # Reshape back to 2D for Sigmoid
        x = x.view(batch_size, -1)  # Flatten for Sigmoid
        x = self.sigmoid(x)
        
        # Compute MSE loss (assuming target is a tensor of zeros for demonstration)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

