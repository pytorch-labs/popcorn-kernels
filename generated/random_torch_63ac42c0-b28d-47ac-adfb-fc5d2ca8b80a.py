
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'AdaptiveMaxPool3d', 'Softmax2d', 'MSELoss', 'Sequential', 'ChannelShuffle', 'TransformerEncoder', 'TransformerDecoderLayer', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.softmax2d = nn.Softmax2d()
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )
        self.channel_shuffle = nn.ChannelShuffle(2)
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=32, nhead=4),
            num_layers=3
        )
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=32, nhead=4)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Reshape input to 5D for AdaptiveMaxPool3d
        x = x.view(-1, 3, 16, 16, 16)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape back to 4D for Softmax2d
        x = x.view(-1, 3, 8, 8)
        x = self.softmax2d(x)
        
        # Apply Sequential layers
        x = self.sequential(x)
        
        # Channel Shuffle
        x = self.channel_shuffle(x)
        
        # Reshape for TransformerEncoder
        x = x.view(-1, 32, 8 * 8)
        x = self.transformer_encoder(x)
        
        # Reshape for TransformerDecoderLayer
        x = x.view(-1, 32, 8 * 8)
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(-1, 32, 8, 8)
        x = self.upsampling_nearest2d(x)
        
        # Compute losses (dummy targets for demonstration)
        target_multi_margin = torch.randint(0, 10, (x.size(0),)).to(x.device)
        target_mse = torch.randn_like(x)
        
        multi_margin_loss = self.multi_margin_loss(x.view(x.size(0), -1), target_multi_margin)
        mse_loss = self.mse_loss(x, target_mse)
        
        return x, multi_margin_loss, mse_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
