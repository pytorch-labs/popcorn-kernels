
# This is a random torch model generated by the following modules: ['ModuleDict', 'TransformerEncoderLayer', 'Hardtanh', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'transformer_encoder_1': nn.TransformerEncoderLayer(d_model=64, nhead=8),
            'transformer_encoder_2': nn.TransformerEncoderLayer(d_model=64, nhead=8),
        })
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=32)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        batch_size, sequence_length, feature_dim = x.shape
        
        # Pass through the first TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, feature_dim)
        x = self.module_dict['transformer_encoder_1'](x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, sequence_length, feature_dim)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Pass through the second TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, feature_dim)
        x = self.module_dict['transformer_encoder_2'](x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, sequence_length, feature_dim)
        
        # Apply AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # AdaptiveAvgPool1d expects (batch_size, feature_dim, sequence_length)
        x = self.adaptive_avg_pool(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, sequence_length, feature_dim)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 64).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

