
# This is a random torch model generated by the following modules: ['GRUCell', 'NLLLoss', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process sequence through GRUCells
        for t in range(sequence_length):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape for FractionalMaxPool3d
        h2 = h2.view(batch_size, 1, 8, 8, 8)
        
        # Apply FractionalMaxPool3d
        pooled = self.fractional_max_pool3d(h2)
        
        # Flatten the output
        pooled = pooled.view(batch_size, -1)
        
        # Dummy target for NLLLoss (assuming classification task)
        target = torch.randint(0, 10, (batch_size,)).to(x.device)
        
        # Apply NLLLoss (assuming log_softmax is applied before NLLLoss)
        output = F.log_softmax(pooled, dim=1)
        loss = self.nll_loss(output, target)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
