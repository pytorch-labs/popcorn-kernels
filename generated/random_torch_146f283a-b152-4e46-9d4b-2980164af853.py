
# This is a random torch model generated by the following modules: ['GLU', 'LazyConvTranspose1d', 'Conv3d', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 16, kernel_size=3, padding=1)
        self.instance_norm2d_1 = nn.InstanceNorm2d(16)
        self.glu_1 = nn.GLU(dim=1)
        self.lazy_conv_transpose1d_1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv3d_2 = nn.Conv3d(32, 64, kernel_size=3, padding=1)
        self.instance_norm2d_2 = nn.InstanceNorm2d(64)
        self.glu_2 = nn.GLU(dim=1)
        self.lazy_conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.conv3d_1(x)
        
        # Reshape to 4D (batch, channels, height, width) for InstanceNorm2d
        batch, channels, depth, height, width = x.shape
        x = x.view(batch * depth, channels, height, width)
        x = self.instance_norm2d_1(x)
        x = x.view(batch, channels, depth, height, width)
        
        # Reshape to 3D (batch, channels, depth * height * width) for GLU
        x = x.view(batch, channels, -1)
        x = self.glu_1(x)
        
        # Reshape back to 5D (batch, channels, depth, height, width)
        x = x.view(batch, -1, depth, height, width)
        
        # Reshape to 3D (batch, channels, depth * height * width) for LazyConvTranspose1d
        x = x.view(batch, -1, depth * height * width)
        x = self.lazy_conv_transpose1d_1(x)
        
        # Reshape back to 5D (batch, channels, depth, height, width)
        x = x.view(batch, -1, depth, height, width)
        x = self.conv3d_2(x)
        
        # Reshape to 4D (batch, channels, height, width) for InstanceNorm2d
        x = x.view(batch * depth, -1, height, width)
        x = self.instance_norm2d_2(x)
        x = x.view(batch, -1, depth, height, width)
        
        # Reshape to 3D (batch, channels, depth * height * width) for GLU
        x = x.view(batch, -1, depth * height * width)
        x = self.glu_2(x)
        
        # Reshape back to 5D (batch, channels, depth, height, width)
        x = x.view(batch, -1, depth, height, width)
        
        # Reshape to 3D (batch, channels, depth * height * width) for LazyConvTranspose1d
        x = x.view(batch, -1, depth * height * width)
        x = self.lazy_conv_transpose1d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
