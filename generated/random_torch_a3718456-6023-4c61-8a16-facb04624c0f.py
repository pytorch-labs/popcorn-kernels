
# This is a random torch model generated by the following modules: ['Tanhshrink', 'NLLLoss', 'NLLLoss2d', 'AvgPool1d', 'Bilinear', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=10, kernel_size=3)
        self.tanhshrink = nn.Tanhshrink()
        self.nll_loss = nn.NLLLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.avg_pool1d(x)  # Shape: (batch_size, channels, length // 2)
        
        # Reshape for Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, channels * (length // 2))
        x = self.bilinear(x, x)  # Shape: (batch_size, 30)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.size(0), -1, 1, 1, 1)  # Shape: (batch_size, 30, 1, 1, 1)
        x = self.lazy_conv_transpose3d(x)  # Shape: (batch_size, 10, 3, 3, 3)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)  # Shape: (batch_size, 10, 3, 3, 3)
        
        # Flatten for NLLLoss
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 10 * 3 * 3 * 3)
        
        # Dummy target for NLLLoss (assuming classification with 10 classes)
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Apply NLLLoss
        loss = self.nll_loss(F.log_softmax(x, dim=1), target)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), 10, 3, 3)  # Shape: (batch_size, 10, 3, 3)
        
        # Dummy target for NLLLoss2d (assuming classification with 10 classes)
        target2d = torch.randint(0, 10, (x.size(0), 3, 3), device=x.device)
        
        # Apply NLLLoss2d
        loss2d = self.nll_loss2d(F.log_softmax(x, dim=1), target2d)
        
        # Return the sum of losses for simplicity
        return loss + loss2d


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

