
# This is a random torch model generated by the following modules: ['Tanh', 'InstanceNorm2d', 'ConvTranspose2d', 'MaxPool3d', 'SiLU', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.instance_norm1 = nn.InstanceNorm2d(10)
        self.max_pool3d1 = nn.MaxPool3d(kernel_size=2)
        self.silu1 = nn.SiLU()
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.instance_norm2 = nn.InstanceNorm2d(20)
        self.max_pool3d2 = nn.MaxPool3d(kernel_size=2)
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.tanh1 = nn.Tanh()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv_transpose1(x)
        x = self.instance_norm1(x)
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.max_pool3d1(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        x = self.silu1(x)
        x = self.conv_transpose2(x)
        x = self.instance_norm2(x)
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.max_pool3d2(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        x = self.hardsigmoid1(x)
        x = self.tanh1(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
