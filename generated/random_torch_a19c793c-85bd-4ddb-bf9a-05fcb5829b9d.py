
# This is a random torch model generated by the following modules: ['GRU', 'HingeEmbeddingLoss', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.hinge_loss = nn.HingeEmbeddingLoss()
        self.gaussian_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Pass through the first GRU
        x, _ = self.gru1(x)
        
        # Pass through the second GRU
        x, _ = self.gru2(x)
        
        # Compute hinge embedding loss (dummy target for illustration)
        target_hinge = torch.ones(batch_size, seq_len, 128).to(x.device)
        hinge_loss = self.hinge_loss(x, target_hinge)
        
        # Compute Gaussian NLL loss (dummy target and var for illustration)
        target_gaussian = torch.ones(batch_size, seq_len, 128).to(x.device)
        var_gaussian = torch.ones(batch_size, seq_len, 128).to(x.device)
        gaussian_loss = self.gaussian_loss(x, target_gaussian, var_gaussian)
        
        # Return the final output and the losses
        return x, hinge_loss, gaussian_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

