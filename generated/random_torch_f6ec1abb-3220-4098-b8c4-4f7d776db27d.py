
# This is a random torch model generated by the following modules: ['MaxPool1d', 'AvgPool3d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.flatten = nn.Flatten()

    def forward(self, x):
        # Assuming input is 3D (batch, channels, length)
        x = self.maxpool1d(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AvgPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Add dummy dimensions
        x = self.avgpool3d(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

