
# This is a random torch model generated by the following modules: ['ReLU6', 'PixelUnshuffle', 'LazyInstanceNorm3d', 'GELU', 'ZeroPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.gelu = nn.GELU()
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.relu6 = nn.ReLU6()

    def forward(self, x):
        # Apply PixelUnshuffle to reduce spatial dimensions and increase channel dimensions
        x = self.pixel_unshuffle(x)
        
        # Reshape to 5D tensor for LazyInstanceNorm3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.lazy_instance_norm3d(x)
        x = x.squeeze(2)  # Remove the dummy depth dimension
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape to 3D tensor for ZeroPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.zero_pad1d(x)
        
        # Reshape back to original shape (excluding the padding)
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        
        # Apply ReLU6 activation
        x = self.relu6(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
