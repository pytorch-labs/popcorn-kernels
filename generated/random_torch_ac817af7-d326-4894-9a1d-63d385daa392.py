
# This is a random torch model generated by the following modules: ['ReflectionPad3d', 'Softmax2d', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad3d(1)
        self.softmax2d = nn.Softmax2d()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.reflection_pad2 = nn.ReflectionPad3d(2)
        self.adaptive_max_pool3d2 = nn.AdaptiveMaxPool3d((4, 4, 4))

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Reshape to 4D for Softmax2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.softmax2d(x)
        
        # Reshape back to 5D for AdaptiveMaxPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.adaptive_max_pool3d(x)
        
        # Apply ReflectionPad3d again
        x = self.reflection_pad2(x)
        
        # Apply AdaptiveMaxPool3d again
        x = self.adaptive_max_pool3d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

