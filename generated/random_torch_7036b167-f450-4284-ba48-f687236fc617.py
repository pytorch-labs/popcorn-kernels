
# This is a random torch model generated by the following modules: ['NLLLoss', 'Hardsigmoid', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.hardsigmoid2 = nn.Hardsigmoid()
        self.elu1 = nn.ELU()
        self.elu2 = nn.ELU()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Hardsigmoid and ELU in sequence
        x = self.hardsigmoid1(x)
        x = self.elu1(x)
        x = self.hardsigmoid2(x)
        x = self.elu2(x)
        
        # Flatten the output to match the expected input shape for NLLLoss
        x = x.view(x.size(0), -1)
        
        # Generate a target tensor for NLLLoss (assuming classification task)
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Apply NLLLoss
        loss = self.nll_loss(F.log_softmax(x, dim=1), target)
        
        # Return the loss (since NLLLoss is typically used for training)
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
