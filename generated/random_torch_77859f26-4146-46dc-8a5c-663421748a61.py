
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'AvgPool2d', 'Hardsigmoid', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ReplicationPad3d(1)
        self.pad2 = nn.ReplicationPad3d(2)
        self.avgpool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.avgpool2 = nn.AvgPool2d(kernel_size=3, stride=1)
        self.hardsigmoid = nn.Hardsigmoid()
        self.dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.dropout2 = nn.FeatureAlphaDropout(p=0.2)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Add a dummy dimension to make it 5D for ReplicationPad3d
        x = x.unsqueeze(2)  # Shape: (batch, channels, 1, height, width)
        
        x = self.pad1(x)  # Shape: (batch, channels, 3, height+2, width+2)
        x = self.pad2(x)  # Shape: (batch, channels, 7, height+6, width+6)
        
        # Remove the dummy dimension to make it 4D again
        x = x.squeeze(2)  # Shape: (batch, channels, height+6, width+6)
        
        x = self.avgpool1(x)  # Shape: (batch, channels, (height+6)/2, (width+6)/2)
        x = self.avgpool2(x)  # Shape: (batch, channels, ((height+6)/2)-2, ((width+6)/2)-2)
        
        x = self.hardsigmoid(x)  # Shape remains the same
        x = self.dropout1(x)  # Shape remains the same
        x = self.dropout2(x)  # Shape remains the same
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

