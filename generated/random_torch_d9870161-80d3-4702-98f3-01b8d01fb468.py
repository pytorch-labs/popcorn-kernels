
# This is a random torch model generated by the following modules: ['HingeEmbeddingLoss', 'CosineSimilarity', 'Softmax', 'EmbeddingBag', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softmax = nn.Softmax(dim=1)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Assuming x is a 2D tensor (batch_size, sequence_length)
        x = self.embedding_bag(x)  # (batch_size, embedding_dim)
        x = x.unsqueeze(1).unsqueeze(1)  # (batch_size, 1, 1, embedding_dim)
        x = self.fractional_max_pool(x)  # (batch_size, 1, 14, 14)
        x = x.view(x.size(0), -1)  # (batch_size, 1*14*14)
        x = self.softmax(x)  # (batch_size, 1*14*14)
        
        # Create a dummy tensor for cosine similarity
        dummy_tensor = torch.ones_like(x)
        x = self.cosine_similarity(x, dummy_tensor)  # (batch_size,)
        
        # Create a dummy target for hinge embedding loss
        target = torch.ones(x.size(0)).to(x.device)
        loss = self.hinge_embedding_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
