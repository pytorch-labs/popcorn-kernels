
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'Softshrink', 'Dropout1d', 'LazyConvTranspose3d', 'UpsamplingBilinear2d', 'Container', 'Softsign', 'L1Loss', 'ParameterDict', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.container = nn.Sequential(
            nn.LazyInstanceNorm1d(),
            nn.Softsign()
        )
        self.l1_loss = nn.L1Loss()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.fractional_max_pool(x)
        x = self.softshrink(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.dropout1d(x)
        
        # Reshape back to 4D for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Add depth and width dimensions
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape back to 4D for UpsamplingBilinear2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))  # Remove depth dimension
        x = self.upsampling_bilinear2d(x)
        
        # Pass through container
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width for LazyInstanceNorm1d
        x = self.container(x)
        
        # Reshape back to 4D for L1Loss
        x = x.view(x.size(0), x.size(1), x.size(2), 1)  # Add width dimension
        target = torch.zeros_like(x)
        x = self.l1_loss(x, target)
        
        # Apply LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.lazy_instance_norm1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

