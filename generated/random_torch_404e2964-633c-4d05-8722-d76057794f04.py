
# This is a random torch model generated by the following modules: ['BCELoss', 'Softmin', 'RNNCellBase', 'Hardshrink', 'ReLU6', 'GaussianNLLLoss', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.hardshrink = nn.Hardshrink()
        self.relu6 = nn.ReLU6()
        self.rrelu = nn.RReLU()
        self.softmin = nn.Softmin(dim=1)
        self.bce_loss = nn.BCELoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Initialize hidden state for RNNCellBase
        hx = torch.zeros(batch_size, 256).to(x.device)
        
        # Process each time step through the RNNCellBase
        for t in range(sequence_length):
            hx = self.rnn_cell(x[:, t, :], hx)
        
        # Apply Hardshrink
        x = self.hardshrink(hx)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Dummy target for BCELoss and GaussianNLLLoss
        target = torch.randint(0, 2, (batch_size, 256)).float().to(x.device)
        var = torch.ones_like(x).to(x.device)
        
        # Compute BCELoss
        bce_loss = self.bce_loss(x, target)
        
        # Compute GaussianNLLLoss
        gaussian_nll_loss = self.gaussian_nll_loss(x, target, var)
        
        # Return both losses as a tuple
        return bce_loss, gaussian_nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

