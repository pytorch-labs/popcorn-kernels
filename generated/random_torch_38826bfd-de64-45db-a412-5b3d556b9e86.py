
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'LazyBatchNorm3d', 'CrossEntropyLoss', 'ReflectionPad2d', 'ReplicationPad2d', 'Hardswish', 'CTCLoss', 'PoissonNLLLoss', 'MultiLabelMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.batch_norm1 = nn.LazyBatchNorm3d()
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)
        self.batch_norm2 = nn.LazyBatchNorm3d()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.replication_pad = nn.ReplicationPad2d(2)
        self.hardswish = nn.Hardswish()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.ctc_loss = nn.CTCLoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose3d and BatchNorm3d
        x = self.conv_transpose1(x)
        x = self.batch_norm1(x)
        x = self.conv_transpose2(x)
        x = self.batch_norm2(x)
        
        # Reshape to 2D for padding layers
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        
        # Apply ReflectionPad2d and ReplicationPad2d
        x = self.reflection_pad(x)
        x = self.replication_pad(x)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Reshape back to original shape
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        
        # Compute losses (for demonstration purposes, we'll compute them but not return them)
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        cross_entropy_loss = self.cross_entropy_loss(x, target)
        
        log_probs = F.log_softmax(x, dim=1)
        input_lengths = torch.full((x.size(0),), x.size(1), dtype=torch.long, device=x.device)
        target_lengths = torch.randint(1, x.size(1), (x.size(0),), dtype=torch.long, device=x.device)
        ctc_loss = self.ctc_loss(log_probs, target, input_lengths, target_lengths)
        
        poisson_nll_loss = self.poisson_nll_loss(x, target.float())
        
        multi_label_target = torch.randint(0, 2, (x.size(0), 10), device=x.device)
        multi_label_margin_loss = self.multi_label_margin_loss(x, multi_label_target)
        
        # Return the final tensor (losses are computed but not returned)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
