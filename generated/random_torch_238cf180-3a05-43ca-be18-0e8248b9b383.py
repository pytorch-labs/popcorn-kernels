
# This is a random torch model generated by the following modules: ['ReLU', 'GRUCell', 'Softsign', 'ChannelShuffle', 'Tanhshrink', 'PoissonNLLLoss', 'Softmax2d', 'AvgPool1d', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=64)
        self.gru_cell2 = nn.GRUCell(input_size=64, hidden_size=32)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.softmax2d = nn.Softmax2d()
        self.softplus = nn.Softplus()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        
    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape for GRUCell
        x = x.view(batch_size, -1)  # Flatten to (batch_size, channels * height * width)
        
        # GRUCell 1
        hx1 = torch.zeros(batch_size, 64).to(x.device)
        x = self.gru_cell1(x, hx1)
        
        # GRUCell 2
        hx2 = torch.zeros(batch_size, 32).to(x.device)
        x = self.gru_cell2(x, hx2)
        
        # Reshape for AvgPool1d
        x = x.unsqueeze(1)  # Add a channel dimension: (batch_size, 1, 32)
        x = self.avg_pool1d(x)
        
        # Reshape for ChannelShuffle
        x = x.unsqueeze(1)  # Add a height dimension: (batch_size, 1, 1, 16)
        x = self.channel_shuffle(x)
        
        # Reshape for Softmax2d
        x = x.view(batch_size, 2, 8, 1)  # Reshape to (batch_size, 2, 8, 1)
        x = self.softmax2d(x)
        
        # Reshape for Softplus
        x = x.view(batch_size, -1)  # Flatten to (batch_size, 16)
        x = self.softplus(x)
        
        # Reshape for Tanhshrink
        x = x.view(batch_size, 1, 16)  # Reshape to (batch_size, 1, 16)
        x = F.tanhshrink(x)
        
        # Reshape for ReLU
        x = x.view(batch_size, -1)  # Flatten to (batch_size, 16)
        x = F.relu(x)
        
        # Reshape for Softsign
        x = x.view(batch_size, 1, 16)  # Reshape to (batch_size, 1, 16)
        x = F.softsign(x)
        
        # Reshape for PoissonNLLLoss
        target = torch.randint(0, 2, (batch_size, 16)).float().to(x.device)
        loss = self.poisson_nll_loss(x.view(batch_size, -1), target)
        
        return x, loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
