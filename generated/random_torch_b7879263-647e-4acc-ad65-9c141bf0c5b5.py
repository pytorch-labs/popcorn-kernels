
# This is a random torch model generated by the following modules: ['ReLU6', 'CELU', 'Dropout1d', 'AdaptiveMaxPool3d', 'AvgPool3d', 'Module', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.celu = nn.CELU()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(10)
        
    def forward(self, x):
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Reshape for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.dropout1d(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(x.size(0), x.size(1), 10, 10, 10)
        x = self.adaptive_max_pool3d(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
