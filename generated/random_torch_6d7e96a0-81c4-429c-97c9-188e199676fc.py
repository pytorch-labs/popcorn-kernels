
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'MaxUnpool2d', 'Softmax2d', 'Embedding', 'BCELoss', 'MaxPool2d', 'UpsamplingBilinear2d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.constant_pad = nn.ConstantPad2d(2, 3.0)  # ConstantPad2d layer
        self.max_pool = nn.MaxPool2d(kernel_size=2, return_indices=True)  # MaxPool2d layer
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2)  # MaxUnpool2d layer
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)  # UpsamplingBilinear2d layer
        self.softmax = nn.Softmax2d()  # Softmax2d layer
        self.circular_pad = nn.CircularPad3d(1)  # CircularPad3d layer
        self.bce_loss = nn.BCELoss()  # BCELoss layer

    def forward(self, x):
        # Assume x is a 4D tensor (batch_size, channels, height, width)
        x = self.constant_pad(x)  # Apply ConstantPad2d
        x, indices = self.max_pool(x)  # Apply MaxPool2d and get indices
        x = self.max_unpool(x, indices)  # Apply MaxUnpool2d using the indices
        x = self.upsample(x)  # Apply UpsamplingBilinear2d
        x = self.softmax(x)  # Apply Softmax2d
        
        # Reshape x to 5D tensor for CircularPad3d
        x = x.unsqueeze(2)  # Add a new dimension
        x = self.circular_pad(x)  # Apply CircularPad3d
        
        # Reshape back to 4D tensor
        x = x.squeeze(2)
        
        # Apply BCELoss (assuming x is the input and we have a target tensor)
        target = torch.rand_like(x)  # Random target tensor for demonstration
        loss = self.bce_loss(x, target)  # Apply BCELoss
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 3, 64, 64)).cuda()  # Random input tensor for Embedding
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

