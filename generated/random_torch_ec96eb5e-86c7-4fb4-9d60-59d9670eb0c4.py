
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'LazyConvTranspose1d', 'ELU', 'GRUCell', 'FeatureAlphaDropout', 'CircularPad3d', 'Sequential', 'NLLLoss', 'ReflectionPad3d', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 16, kernel_size=3)
        self.sync_batchnorm = nn.SyncBatchNorm(16)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.elu = nn.ELU()
        self.gru_cell = nn.GRUCell(32, 64)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.sequential = nn.Sequential(
            nn.Conv3d(16, 32, kernel_size=3),
            nn.ELU(),
            nn.Conv3d(32, 64, kernel_size=3)
        )
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Initial 3D convolution
        x = self.conv3d(x)
        x = self.sync_batchnorm(x)
        
        # Apply padding
        x = self.circular_pad3d(x)
        x = self.reflection_pad3d(x)
        
        # Sequential block
        x = self.sequential(x)
        
        # Reshape for 1D convolution
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lazy_conv_transpose1d(x)
        
        # Apply ELU activation
        x = self.elu(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Apply feature alpha dropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for NLLLoss (assuming classification task)
        x = x.view(x.size(0), -1)  # Flatten for loss calculation
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
