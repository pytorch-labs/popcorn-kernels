
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'ParameterList', 'InstanceNorm2d', 'AdaptiveMaxPool3d', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.feature_alpha_dropout2 = nn.FeatureAlphaDropout(p=0.5)
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])

    def forward(self, x):
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout1(x)
        
        # Reshape to 4D tensor for InstanceNorm2d
        x = x.view(-1, 10, x.size(-2), x.size(-1))
        x = self.instance_norm2d(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Reshape to 5D tensor for AdaptiveMaxPool3d
        x = x.unsqueeze(2)  # Add a new dimension
        x = self.adaptive_max_pool3d(x)
        
        # Apply FeatureAlphaDropout again
        x = self.feature_alpha_dropout2(x)
        
        # Use ParameterList (just summing the parameters for demonstration)
        param_sum = sum(self.parameter_list)
        x = x + param_sum.view(1, -1, 1, 1, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
