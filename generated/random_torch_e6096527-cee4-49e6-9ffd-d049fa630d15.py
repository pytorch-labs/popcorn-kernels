
# This is a random torch model generated by the following modules: ['Conv2d', 'LazyConv3d', 'LogSoftmax', 'ModuleList', 'LazyInstanceNorm3d', 'Hardswish', 'AvgPool1d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv2d = nn.Conv2d(1, 10, kernel_size=5)
        self.lazy_conv3d = nn.LazyConv3d(out_channels=20, kernel_size=3)
        self.module_list = nn.ModuleList([
            nn.LazyInstanceNorm3d(),
            nn.LazyInstanceNorm3d(),
            nn.LazyInstanceNorm3d()
        ])
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.hardswish = nn.Hardswish()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=50, n_classes=10, cutoffs=[5])

    def forward(self, x):
        # Conv2d
        x = self.conv2d(x)
        
        # Reshape for LazyConv3d
        x = x.unsqueeze(2)  # Add a new dimension to make it 5D (batch, channels, depth, height, width)
        x = self.lazy_conv3d(x)
        
        # Apply LazyInstanceNorm3d from ModuleList
        for instance_norm in self.module_list:
            x = instance_norm(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool1d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
