
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'CTCLoss', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assuming input x is 4D (batch, channels, height, width)
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape back to 4D (batch, channels, height, width)
        x = x.squeeze(2)
        
        # For CTC Loss, we need log probabilities and target sequences
        # Here, we just return the pooled output for simplicity
        # In a real scenario, you would need to compute log probabilities and provide target sequences
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch of 1, 3 channels, 64x64 image
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

