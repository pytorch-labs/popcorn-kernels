
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'ZeroPad3d', 'AdaptiveAvgPool2d', 'Container', 'HuberLoss', 'MaxPool3d', 'RReLU', 'L1Loss', 'SiLU', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.zero_pad1 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.adaptive_avg_pool1 = nn.AdaptiveAvgPool2d(output_size=(16, 16))
        self.container1 = nn.Sequential(
            nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=1, padding=1),
            nn.RReLU(),
            nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        )
        self.silu1 = nn.SiLU()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=64, n_classes=10, cutoffs=[2, 4])
        self.huber_loss = nn.HuberLoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Apply ZeroPad3d (reshape to 3D first)
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D (batch, channels, depth, height, width)
        x = self.zero_pad1(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool1(x)
        
        # Apply Container (Sequential)
        x = self.container1(x.unsqueeze(2)).squeeze(2)
        
        # Apply SiLU
        x = self.silu1(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        output, _ = self.adaptive_log_softmax(x, target)
        
        # Apply HuberLoss and L1Loss (just for demonstration, not typically used in forward pass)
        dummy_target = torch.randn_like(output)
        huber_loss = self.huber_loss(output, dummy_target)
        l1_loss = self.l1_loss(output, dummy_target)
        
        return output, huber_loss, l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
