
# This is a random torch model generated by the following modules: ['Softmax', 'Upsample', 'GaussianNLLLoss', 'Dropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout(p=0.5)
        self.upsample1 = nn.Upsample(scale_factor=2, mode='nearest')
        self.upsample2 = nn.Upsample(scale_factor=2, mode='nearest')
        self.softmax = nn.Softmax(dim=1)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply dropout to the input
        x = self.dropout1(x)
        
        # Upsample the input
        x = self.upsample1(x)
        
        # Apply another dropout
        x = self.dropout2(x)
        
        # Upsample again
        x = self.upsample2(x)
        
        # Apply softmax to the output
        x = self.softmax(x)
        
        # Assuming we have a target tensor for GaussianNLLLoss
        # For demonstration, we'll create a dummy target tensor with the same shape as x
        target = torch.randn_like(x)
        var = torch.ones_like(x)  # Variance tensor
        
        # Compute GaussianNLLLoss (this is typically used in loss computation, not in forward pass)
        loss = self.gaussian_nll_loss(x, target, var)
        
        # Return both the output and the loss
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

