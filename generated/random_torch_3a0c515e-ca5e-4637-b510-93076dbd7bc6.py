
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'ModuleDict', 'Tanhshrink', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)  # Padding with value 3.0
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.tanhshrink = nn.Tanhshrink()
        
        # Using ModuleDict to store multiple layers
        self.module_dict = nn.ModuleDict({
            'conv3': nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            'conv4': nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
        })

    def forward(self, x):
        x = self.pad(x)  # Apply ConstantPad2d
        x = self.conv1(x)  # Apply Conv2d
        x = self.tanhshrink(x)  # Apply Tanhshrink
        x = self.conv2(x)  # Apply Conv2d
        x = self.module_dict['conv3'](x)  # Apply Conv2d from ModuleDict
        x = self.module_dict['conv4'](x)  # Apply Conv2d from ModuleDict
        x = x.view(x.size(0), -1)  # Flatten the output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3-channel input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

