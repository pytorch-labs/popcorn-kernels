
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'GRUCell', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((10, 10))
        self.gru_cell1 = nn.GRUCell(100, 50)
        self.gru_cell2 = nn.GRUCell(50, 20)
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        # Apply AdaptiveMaxPool2d to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Flatten the output for GRUCell
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 50).to(x.device)
        h2 = torch.zeros(batch_size, 20).to(x.device)
        
        # Apply GRUCell layers
        h1 = self.gru_cell1(x, h1)
        h2 = self.gru_cell2(h1, h2)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(h2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

