
# This is a random torch model generated by the following modules: ['ConvTranspose2d', 'LPPool1d', 'Softshrink', 'Softmin', 'ConstantPad3d', 'FeatureAlphaDropout', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.lp_pool1d1 = nn.LPPool1d(norm_type=2, kernel_size=3)
        self.softshrink1 = nn.Softshrink(lambd=0.5)
        self.softmin1 = nn.Softmin(dim=1)
        self.constant_pad3d1 = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.feature_alpha_dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.max_pool1d1 = nn.MaxPool1d(kernel_size=3)
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.lp_pool1d2 = nn.LPPool1d(norm_type=2, kernel_size=3)
        self.softshrink2 = nn.Softshrink(lambd=0.5)
        self.softmin2 = nn.Softmin(dim=1)
        self.constant_pad3d2 = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.feature_alpha_dropout2 = nn.FeatureAlphaDropout(p=0.5)
        self.max_pool1d2 = nn.MaxPool1d(kernel_size=3)

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lp_pool1d1(x)
        
        # Apply Softshrink
        x = self.softshrink1(x)
        
        # Reshape for Softmin
        x = x.view(x.size(0), x.size(1), -1)
        x = self.softmin1(x)
        
        # Reshape for ConstantPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.constant_pad3d1(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout1(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.max_pool1d1(x)
        
        # Apply ConvTranspose2d again
        x = x.view(x.size(0), x.size(1), 1, 1)
        x = self.conv_transpose2(x)
        
        # Reshape for LPPool1d again
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lp_pool1d2(x)
        
        # Apply Softshrink again
        x = self.softshrink2(x)
        
        # Reshape for Softmin again
        x = x.view(x.size(0), x.size(1), -1)
        x = self.softmin2(x)
        
        # Reshape for ConstantPad3d again
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.constant_pad3d2(x)
        
        # Apply FeatureAlphaDropout again
        x = self.feature_alpha_dropout2(x)
        
        # Reshape for MaxPool1d again
        x = x.view(x.size(0), x.size(1), -1)
        x = self.max_pool1d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
