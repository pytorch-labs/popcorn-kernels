
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'LazyConv2d', 'FractionalMaxPool2d', 'LayerNorm', 'MSELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.layer_norm = nn.LayerNorm([32, 14, 14])
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply ConstantPad1d to the input
        x = self.pad1d(x)
        
        # Reshape to 2D if necessary (assuming input is 1D)
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension
        
        # Apply LazyConv2d layers
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Flatten the output for MSELoss
        x = x.view(x.size(0), -1)
        
        # Compute MSELoss (assuming target is a zero tensor)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

