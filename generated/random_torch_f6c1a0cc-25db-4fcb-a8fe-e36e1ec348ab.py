
# This is a random torch model generated by the following modules: ['RReLU', 'ConstantPad3d', 'PixelShuffle', 'Transformer', 'FeatureAlphaDropout', 'BatchNorm3d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.bn1 = nn.BatchNorm3d(16)
        self.rrelu1 = nn.RReLU()
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.dropout = nn.FeatureAlphaDropout(p=0.5)
        self.bn2 = nn.BatchNorm3d(32)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.pad(x)  # Apply padding
        x = self.bn1(x)  # Apply BatchNorm3d
        x = self.rrelu1(x)  # Apply RReLU
        
        # Reshape for Transformer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width).permute(2, 0, 1)  # Reshape to (seq_len, batch_size, features)
        x = self.transformer(x, x)  # Apply Transformer
        x = x.permute(1, 2, 0).view(batch_size, -1, depth, height, width)  # Reshape back
        
        x = self.dropout(x)  # Apply FeatureAlphaDropout
        x = self.bn2(x)  # Apply BatchNorm3d
        
        # Reshape for PixelShuffle
        x = x.view(batch_size, -1, height, width)  # Flatten depth into channels
        x = self.pixel_shuffle(x)  # Apply PixelShuffle
        
        # Reshape for Linear layers
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        x = self.linear1(x)  # Apply first Linear layer
        x = self.rrelu1(x)  # Apply RReLU
        x = self.linear2(x)  # Apply second Linear layer
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 8, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

