
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'MSELoss', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape to fit LazyConvTranspose1d input requirements
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)  # Reshape to (batch_size, channels*height, width)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape back to 2D for MSELoss (assuming target is the same shape)
        x = x.view(batch_size, -1, height, width)
        
        # Compute MSELoss (assuming target is the same as input for simplicity)
        loss = self.mse_loss(x, torch.zeros_like(x))
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

