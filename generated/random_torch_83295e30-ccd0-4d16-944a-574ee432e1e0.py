
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'ZeroPad1d', 'CosineSimilarity', 'ELU', 'LPPool3d', 'LogSigmoid', 'AlphaDropout', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.zero_pad = nn.ZeroPad1d(padding=2)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.elu = nn.ELU(alpha=1.0)
        self.lp_pool = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.log_sigmoid = nn.LogSigmoid()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.rms_norm = RMSNorm(64)  # Assuming RMSNorm is a custom layer

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # ZeroPad1d requires a 3D tensor (batch, channels, length)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 3D
        x = self.zero_pad(x)
        
        # Reshape back to 4D for further processing
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply ELU activation
        x = self.elu(x)
        
        # Apply LPPool3d (requires 5D input: batch, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.lp_pool(x)
        x = x.squeeze(2)  # Remove depth dimension
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Compute cosine similarity with a random tensor
        random_tensor = torch.randn_like(x)
        x = self.cosine_sim(x, random_tensor)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
