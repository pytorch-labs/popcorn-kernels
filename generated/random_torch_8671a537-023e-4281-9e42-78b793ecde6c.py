
# This is a random torch model generated by the following modules: ['Unflatten', 'Softmax', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten1 = nn.Unflatten(1, (1, 28, 28))  # Assuming input is flattened 1D tensor
        self.hardshrink1 = nn.Hardshrink()
        self.softmax1 = nn.Softmax(dim=1)
        self.hardshrink2 = nn.Hardshrink()
        self.unflatten2 = nn.Unflatten(1, (1, 28, 28))  # Reshape back to original shape

    def forward(self, x):
        # Assuming input is a flattened 1D tensor
        x = self.unflatten1(x)  # Unflatten to a 2D shape (e.g., 1x28x28)
        x = self.hardshrink1(x)  # Apply Hardshrink
        x = x.view(x.size(0), -1)  # Flatten again for Softmax
        x = self.softmax1(x)  # Apply Softmax
        x = self.hardshrink2(x)  # Apply Hardshrink again
        x = self.unflatten2(x)  # Reshape back to original shape
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 784).cuda()  # Flattened input (e.g., 1x784 for a 28x28 image)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
