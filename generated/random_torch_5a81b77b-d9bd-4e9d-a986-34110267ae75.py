
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'ParameterDict', 'LazyConvTranspose1d', 'AlphaDropout', 'LPPool3d', 'UpsamplingNearest2d', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(64, 128)),
            'param2': nn.Parameter(torch.randn(128, 256))
        })
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)

    def forward(self, x):
        # Assuming x is a 1D tensor for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Apply ParameterDict transformations
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Reshape for LazyConvTranspose1d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.lazy_conv_transpose1d(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Reshape for LPPool3d
        x = x.unsqueeze(1)  # Add a batch dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        x = self.lp_pool3d(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.squeeze(1)  # Remove depth dimension
        x = x.squeeze(1)  # Remove batch dimension
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.upsampling_nearest2d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
