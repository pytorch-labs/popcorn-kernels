
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'BatchNorm3d', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.batch_norm3d1 = nn.BatchNorm3d(10)
        self.prelu1 = nn.PReLU()
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5)
        self.batch_norm3d2 = nn.BatchNorm3d(20)
        self.prelu2 = nn.PReLU()
        self.conv_transpose3 = nn.ConvTranspose1d(20, 30, kernel_size=5)
        self.batch_norm3d3 = nn.BatchNorm3d(30)
        self.prelu3 = nn.PReLU()

    def forward(self, x):
        # Reshape input to fit ConvTranspose1d
        x = x.view(x.size(0), 1, -1)
        x = self.conv_transpose1(x)
        # Reshape to fit BatchNorm3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        x = self.batch_norm3d1(x)
        x = self.prelu1(x)
        # Reshape back to fit ConvTranspose1d
        x = x.squeeze(-1).squeeze(-1)
        x = self.conv_transpose2(x)
        # Reshape to fit BatchNorm3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        x = self.batch_norm3d2(x)
        x = self.prelu2(x)
        # Reshape back to fit ConvTranspose1d
        x = x.squeeze(-1).squeeze(-1)
        x = self.conv_transpose3(x)
        # Reshape to fit BatchNorm3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        x = self.batch_norm3d3(x)
        x = self.prelu3(x)
        # Reshape to output
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
