
# This is a random torch model generated by the following modules: ['GroupNorm', 'AdaptiveMaxPool3d', 'Softshrink', 'MaxUnpool2d', 'MultiMarginLoss', 'LeakyReLU', 'Sigmoid', 'LazyBatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=16)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.sigmoid = nn.Sigmoid()
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.group_norm(x)
        x = self.adaptive_max_pool3d(x)
        x = self.softshrink(x)
        
        # Reshape to 2D for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        x = self.leaky_relu(x)
        x = self.sigmoid(x)
        x = self.lazy_batch_norm2d(x)
        
        # Compute loss (assuming target is provided)
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss = self.multi_margin_loss(x.view(x.size(0), -1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

