
# This is a random torch model generated by the following modules: ['Bilinear', 'FractionalMaxPool2d', 'MaxUnpool2d', 'RMSNorm', 'InstanceNorm2d', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.instance_norm = nn.InstanceNorm2d(20)
        self.rms_norm = RMSNorm(20)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.bilinear = nn.Bilinear(20, 20, 10)

    def forward(self, x):
        # Assuming input is 5D (batch, channel, depth, height, width)
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reduce to 4D by averaging over the depth dimension
        x = x.mean(dim=2)
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply FractionalMaxPool2d
        x, _ = self.fractional_max_pool(x)
        
        # Apply MaxUnpool2d (assuming we have the indices from the pooling)
        # For simplicity, we'll just pass the same tensor as input and indices
        x = self.max_unpool(x, torch.zeros_like(x).long())
        
        # Reshape for Bilinear layer
        x = x.view(x.size(0), -1)
        x = self.bilinear(x, x)
        
        return x

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

