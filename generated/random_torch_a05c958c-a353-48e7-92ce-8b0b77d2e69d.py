
# This is a random torch model generated by the following modules: ['RNNBase', 'PixelShuffle', 'FractionalMaxPool3d', 'KLDivLoss', 'LogSigmoid', 'AvgPool3d', 'LPPool3d', 'Dropout2d', 'Hardswish', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.hardswish = nn.Hardswish()
        self.module_list = nn.ModuleList([
            nn.Linear(128, 64),
            nn.Linear(64, 32),
            nn.Linear(32, 16)
        ])
        self.log_sigmoid = nn.LogSigmoid()
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Reshape input for RNN
        x = x.view(x.size(0), -1, 64)
        x, _ = self.rnn(x)
        
        # Reshape for PixelShuffle
        x = x.view(x.size(0), 128, 8, 8)
        x = self.pixel_shuffle(x)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), 1, 32, 32, 32)
        x = self.fractional_max_pool3d(x)
        x = self.avg_pool3d(x)
        x = self.lp_pool3d(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), 1, 16, 16)
        x = self.dropout2d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Flatten for linear layers
        x = x.view(x.size(0), -1)
        
        # Apply ModuleList layers
        for layer in self.module_list:
            x = layer(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Compute KLDivLoss (assuming a target distribution)
        target = torch.softmax(torch.randn_like(x), dim=1)
        loss = self.kl_div_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
