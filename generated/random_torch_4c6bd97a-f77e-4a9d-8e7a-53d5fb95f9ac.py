
# This is a random torch model generated by the following modules: ['BatchNorm1d', 'GRUCell', 'SoftMarginLoss', 'PairwiseDistance', 'CircularPad1d', 'MaxPool1d', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.bn1 = nn.BatchNorm1d(10)
        self.maxpool1 = nn.MaxPool1d(kernel_size=2)
        self.circular_pad1 = nn.CircularPad1d(2)
        self.gru_cell1 = nn.GRUCell(10, 20)
        self.gru_cell2 = nn.GRUCell(20, 30)
        self.pairwise_distance = nn.PairwiseDistance()
        self.softmargin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 1, sequence_length)
        x = self.conv1(x)  # Shape: (batch_size, 10, sequence_length - 4)
        x = self.bn1(x)    # Shape: (batch_size, 10, sequence_length - 4)
        x = self.maxpool1(x)  # Shape: (batch_size, 10, (sequence_length - 4) // 2)
        x = self.circular_pad1(x)  # Shape: (batch_size, 10, (sequence_length - 4) // 2 + 4)
        
        # Reshape for GRUCell
        batch_size, channels, seq_len = x.size()
        x = x.permute(2, 0, 1)  # Shape: (seq_len, batch_size, channels)
        
        hx1 = torch.zeros(batch_size, 20).to(x.device)
        hx2 = torch.zeros(batch_size, 30).to(x.device)
        
        for i in range(seq_len):
            hx1 = self.gru_cell1(x[i], hx1)
            hx2 = self.gru_cell2(hx1, hx2)
        
        # Compute pairwise distance between hx1 and hx2
        distance = self.pairwise_distance(hx1, hx2)
        
        # Compute SoftMarginLoss (dummy target for demonstration)
        target = torch.ones_like(distance)
        loss = self.softmargin_loss(distance, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input shape: (batch_size, 1, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

