
# This is a random torch model generated by the following modules: ['MaxPool1d', 'Container', 'AdaptiveAvgPool2d', 'LPPool3d', 'CELU', 'LazyConv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)
        self.container = nn.Sequential(
            nn.LazyConv3d(out_channels=16, kernel_size=3),
            nn.CELU(),
            nn.LPPool3d(norm_type=2, kernel_size=2),
        )
        self.adaptiveavgpool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=2)
        self.celu = nn.CELU()
        self.lazyconv3d = nn.LazyConv3d(out_channels=32, kernel_size=3)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width, depth)
        # Reshape to 1D for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height, width, depth
        x = self.maxpool1d(x)
        
        # Reshape back to 3D for LazyConv3d
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Arbitrary reshape to 3D
        x = self.container(x)
        
        # Reshape to 2D for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten depth
        x = self.adaptiveavgpool2d(x)
        
        # Reshape back to 3D for LPPool3d
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Arbitrary reshape to 3D
        x = self.lppool3d(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply LazyConv3d
        x = self.lazyconv3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
