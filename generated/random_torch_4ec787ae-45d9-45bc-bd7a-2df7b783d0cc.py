
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'Sequential', 'HingeEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        # Define a Sequential block with some layers
        self.sequential_block = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 16)
        )
        # Define loss functions
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Flatten the input to fit the Sequential block
        x = x.view(x.size(0), -1)
        
        # Pass through the Sequential block
        x = self.sequential_block(x)
        
        # Compute PoissonNLLLoss (assuming target is a tensor of ones for demonstration)
        target_poisson = torch.ones_like(x)
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Compute HingeEmbeddingLoss (assuming target is a tensor of ones for demonstration)
        target_hinge = torch.ones(x.size(0))
        hinge_loss = self.hinge_embedding_loss(x, target_hinge)
        
        # Return the sum of the losses (for demonstration purposes)
        return poisson_loss + hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
