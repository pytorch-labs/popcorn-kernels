
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'PairwiseDistance', 'AvgPool1d', 'AdaptiveAvgPool1d', 'ReLU', 'MaxPool3d', 'TripletMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=3, stride=2)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=5)
        self.relu = nn.ReLU()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.adaptive_max_pool1d(x)
        x = self.avg_pool1d(x)
        x = self.adaptive_avg_pool1d(x)
        x = self.relu(x)
        
        # Reshape x to fit into MaxPool3d
        x = x.unsqueeze(1)  # Add a dummy dimension for 3D pooling
        x = x.unsqueeze(1)  # Add another dummy dimension
        x = self.max_pool3d(x)
        
        # Flatten x for PairwiseDistance
        x = x.view(x.size(0), -1)
        
        # Create anchor, positive, and negative tensors for TripletMarginLoss
        anchor = x
        positive = torch.randn_like(anchor)
        negative = torch.randn_like(anchor)
        
        # Compute PairwiseDistance between anchor and positive
        pairwise_distance = F.pairwise_distance(anchor, positive)
        
        # Compute TripletMarginLoss
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return pairwise_distance, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 100).cuda()  # Example input shape (batch_size=1, channels=3, length=100)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

