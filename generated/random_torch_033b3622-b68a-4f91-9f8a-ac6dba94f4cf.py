
# This is a random torch model generated by the following modules: ['Tanh', 'ReLU6', 'LPPool3d', 'Upsample', 'ZeroPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanh = nn.Tanh()
        self.relu6 = nn.ReLU6()
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.zeropad1d = nn.ZeroPad1d(padding=2)

    def forward(self, x):
        # Apply ZeroPad1d to the input
        x = self.zeropad1d(x)
        
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Apply ReLU6 activation
        x = self.relu6(x)
        
        # Reshape the input to 3D for LPPool3d
        x = x.view(x.size(0), 1, x.size(1), x.size(2), x.size(3))
        
        # Apply LPPool3d
        x = self.lppool3d(x)
        
        # Reshape back to 2D
        x = x.view(x.size(0), -1, x.size(3), x.size(4))
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Tanh activation again
        x = self.tanh(x)
        
        # Apply ReLU6 activation again
        x = self.relu6(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
