
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'GLU', 'ReLU', 'Linear', 'LSTM', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.linear1 = nn.Linear(20, 30)
        self.glu = nn.GLU(dim=1)
        self.linear2 = nn.Linear(15, 10)
        self.dropout = nn.FeatureAlphaDropout(p=0.5)
        self.linear3 = nn.Linear(10, 5)
        self.relu = nn.ReLU()

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Reshape for LSTM
        batch_size, *rest = x.shape
        x = x.view(batch_size, -1, 10)  # Reshape to (batch_size, seq_len, input_size)
        
        # LSTM
        x, _ = self.lstm(x)
        x = x[:, -1, :]  # Take the last time step output
        
        # Linear layer
        x = self.linear1(x)
        
        # GLU
        x = self.glu(x)
        
        # Linear layer
        x = self.linear2(x)
        
        # Dropout
        x = self.dropout(x)
        
        # Linear layer
        x = self.linear3(x)
        
        # ReLU
        x = self.relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
