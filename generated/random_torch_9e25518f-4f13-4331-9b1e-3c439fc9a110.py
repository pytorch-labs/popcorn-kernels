
# This is a random torch model generated by the following modules: ['Softmax', 'BatchNorm3d', 'PairwiseDistance', 'ELU', 'PoissonNLLLoss', 'Hardsigmoid', 'ConvTranspose2d', 'Softmax2d', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.conv_trans1 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.elu1 = nn.ELU()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.softmax1 = nn.Softmax(dim=1)
        self.softmax2d1 = nn.Softmax2d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.pairwise_distance = nn.PairwiseDistance()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # BatchNorm3d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))  # Reshape to 4D for ConvTranspose2d
        x = self.conv_trans1(x)  # ConvTranspose2d
        x = self.elu1(x)  # ELU
        x = self.hardsigmoid1(x)  # Hardsigmoid
        x = self.softmax1(x)  # Softmax
        x = self.softmax2d1(x)  # Softmax2d
        
        # For PairwiseDistance and CosineEmbeddingLoss, we need two inputs
        x1 = x[:, :x.size(1)//2, :, :]
        x2 = x[:, x.size(1)//2:, :, :]
        x1 = x1.view(x1.size(0), -1)
        x2 = x2.view(x2.size(0), -1)
        
        pairwise_dist = self.pairwise_distance(x1, x2)  # PairwiseDistance
        
        # For CosineEmbeddingLoss, we need a target tensor
        target = torch.ones(x1.size(0)).to(x.device)
        cosine_loss = self.cosine_embedding_loss(x1, x2, target)  # CosineEmbeddingLoss
        
        # For PoissonNLLLoss, we need a target tensor
        target_poisson = torch.poisson(x1.abs())  # Generate a target tensor
        poisson_loss = self.poisson_nll_loss(x1, target_poisson)  # PoissonNLLLoss
        
        # Return the final output as a combination of the losses and the pairwise distance
        return pairwise_dist, cosine_loss, poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input for BatchNorm3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
