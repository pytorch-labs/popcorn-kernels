
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'FeatureAlphaDropout', 'AlphaDropout', 'ReplicationPad3d', 'TripletMarginLoss', 'ConvTranspose3d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.dropout1 = nn.FeatureAlphaDropout(0.5)
        self.dropout2 = nn.AlphaDropout(0.5)
        self.pad = nn.ReplicationPad3d(1)
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(20, 10, [5, 5])
        self.triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        x = self.dropout1(x)
        x = self.pad(x)
        x = F.relu(self.conv_transpose1(x))
        x = self.dropout2(x)
        x = F.relu(self.conv_transpose2(x))
        
        # Flatten the output for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        
        # Assuming we have some target for the adaptive log softmax
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        output, _ = self.adaptive_log_softmax(x, target)
        
        # Assuming we have some anchor, positive, and negative samples for the triplet loss
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        negative = torch.randn_like(x)
        loss = self.triplet_loss(anchor, positive, negative)
        
        return output, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

