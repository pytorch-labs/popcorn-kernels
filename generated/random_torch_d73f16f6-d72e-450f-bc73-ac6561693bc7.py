
# This is a random torch model generated by the following modules: ['AvgPool2d', 'AlphaDropout', 'BatchNorm1d', 'Hardsigmoid', 'SoftMarginLoss', 'LPPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.batch_norm = nn.BatchNorm1d(128)
        self.hardsigmoid = nn.Hardsigmoid()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.lp_pool = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)

    def forward(self, x):
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Flatten the tensor for BatchNorm1d
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.batch_norm(x)
        
        # Reshape back to a 4D tensor for LPPool1d
        x = x.view(x.size(0), 1, -1)
        
        # Apply LPPool1d
        x = self.lp_pool(x)
        
        # Flatten again for AlphaDropout
        x = x.view(x.size(0), -1)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Dummy target for SoftMarginLoss (assuming binary classification)
        target = torch.ones_like(x)
        
        # Apply SoftMarginLoss
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
