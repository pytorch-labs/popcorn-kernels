
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'ModuleDict', 'LeakyReLU', 'ELU', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.InstanceNorm1d(64)
        self.norm2 = nn.InstanceNorm1d(128)
        self.activations = nn.ModuleDict({
            'leaky_relu': nn.LeakyReLU(negative_slope=0.1),
            'elu': nn.ELU(alpha=1.0)
        })
        self.fc1 = nn.Linear(128, 64)
        self.fc2 = nn.Linear(64, 10)

    def forward(self, x):
        # Reshape input to have a sequence dimension
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, seq_len, features)
        
        # Apply InstanceNorm1d
        x = self.norm1(x)
        
        # Apply LeakyReLU from ModuleDict
        x = self.activations['leaky_relu'](x)
        
        # Apply another InstanceNorm1d
        x = self.norm2(x)
        
        # Apply ELU from ModuleDict
        x = self.activations['elu'](x)
        
        # Flatten the sequence dimension
        x = x.view(x.size(0), -1)
        
        # Apply fully connected layers
        x = self.fc1(x)
        x = self.fc2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

