
# This is a random torch model generated by the following modules: ['CosineEmbeddingLoss', 'TripletMarginWithDistanceLoss', 'Bilinear', 'UpsamplingBilinear2d', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(10, 20, 30)
        self.bilinear2 = nn.Bilinear(30, 40, 50)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.dropout = nn.Dropout2d(p=0.5)
        self.cosine_loss = nn.CosineEmbeddingLoss()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Assuming x is a tuple of (input1, input2, target) for CosineEmbeddingLoss and TripletMarginWithDistanceLoss
        input1, input2, target = x
        
        # Apply Bilinear layers
        x1 = self.bilinear1(input1, input2)
        x2 = self.bilinear2(x1, input2)
        
        # Reshape for UpsamplingBilinear2d
        x2 = x2.view(-1, 30, 5, 5)
        x2 = self.upsample(x2)
        
        # Apply Dropout2d
        x2 = self.dropout(x2)
        
        # Reshape back to original shape
        x2 = x2.view(-1, 30 * 10 * 10)
        
        # Compute CosineEmbeddingLoss
        cosine_loss = self.cosine_loss(x1, x2, target)
        
        # Compute TripletMarginWithDistanceLoss
        anchor = x1
        positive = x2
        negative = torch.randn_like(x2)  # Random negative sample
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Return the sum of the two losses
        return cosine_loss + triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    input1 = torch.randn(10, 10).cuda()
    input2 = torch.randn(10, 20).cuda()
    target = torch.randint(0, 2, (10,)).cuda()  # Binary target for CosineEmbeddingLoss
    return [input1, input2, target]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

