
# This is a random torch model generated by the following modules: ['AvgPool1d', 'ReflectionPad3d', 'SyncBatchNorm', 'GRU', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.reflection_pad = nn.ReflectionPad3d(padding=1)
        self.sync_batch_norm = nn.SyncBatchNorm(num_features=10)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.flatten = nn.Flatten()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.avg_pool(x)  # Shape: (batch_size, channels, length // 2)
        
        # Reshape and pad for ReflectionPad3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, channels, 1, 1, length // 2)
        x = self.reflection_pad(x)  # Shape: (batch_size, channels, 3, 3, length // 2 + 2)
        
        # Reshape back to 1D for SyncBatchNorm
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, channels, length // 2 + 2)
        x = self.sync_batch_norm(x)  # Shape: (batch_size, channels, length // 2 + 2)
        
        # Prepare for GRU
        x = x.permute(0, 2, 1)  # Shape: (batch_size, length // 2 + 2, channels)
        x, _ = self.gru(x)  # Shape: (batch_size, length // 2 + 2, hidden_size)
        
        # Flatten the output
        x = self.flatten(x)  # Shape: (batch_size, (length // 2 + 2) * hidden_size)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

