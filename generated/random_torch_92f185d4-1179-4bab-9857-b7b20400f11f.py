
# This is a random torch model generated by the following modules: ['CosineSimilarity', 'LayerNorm', 'FeatureAlphaDropout', 'InstanceNorm1d', 'GLU', 'ConstantPad1d', 'ReplicationPad3d', 'LogSoftmax', 'Hardsigmoid', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.layer_norm = nn.LayerNorm(64)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(0.5)
        self.instance_norm1d = nn.InstanceNorm1d(64)
        self.glu = nn.GLU(dim=1)
        self.constant_pad1d = nn.ConstantPad1d(2, 0.5)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.hardsigmoid = nn.Hardsigmoid()
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), 64, -1)
        x = self.instance_norm1d(x)
        
        # Reshape back for GLU
        x = x.view(x.size(0), -1)
        x = self.glu(x)
        
        # Apply ConstantPad1d
        x = x.unsqueeze(1)
        x = self.constant_pad1d(x)
        
        # Apply ReplicationPad3d
        x = x.unsqueeze(1)
        x = self.replication_pad3d(x)
        
        # Apply LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for UpsamplingBilinear2d
        x = x.view(x.size(0), 1, 8, 8)
        x = self.upsampling_bilinear2d(x)
        
        # Reshape for CosineSimilarity
        x = x.view(x.size(0), -1)
        y = torch.randn_like(x)
        x = self.cosine_similarity(x, y)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
