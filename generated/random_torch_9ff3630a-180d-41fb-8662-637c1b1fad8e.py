
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'HingeEmbeddingLoss', 'AlphaDropout', 'Conv2d', 'ConstantPad2d', 'ModuleDict', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.conv2d = nn.Conv2d(1, 10, kernel_size=3)
        self.constant_pad2d = nn.ConstantPad2d(2, 3.5)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(10, 20, kernel_size=3),
            'maxpool1': nn.MaxPool3d(kernel_size=2)
        })
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Assuming input is 1D, pad it with ZeroPad1d
        x = self.zero_pad1d(x)
        
        # Reshape to 4D for Conv2d
        x = x.view(-1, 1, 8, 8)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Conv2d
        x = self.conv2d(x)
        
        # Apply ConstantPad2d
        x = self.constant_pad2d(x)
        
        # Apply Conv2d from ModuleDict
        x = self.module_dict['conv1'](x)
        
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2)
        
        # Apply MaxPool3d from ModuleDict
        x = self.module_dict['maxpool1'](x)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Flatten the output for HingeEmbeddingLoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for HingeEmbeddingLoss
        target = torch.ones(x.size(0), dtype=torch.float32)
        
        # Apply HingeEmbeddingLoss
        loss = self.hinge_embedding_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 8).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
