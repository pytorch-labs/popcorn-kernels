
# This is a random torch model generated by the following modules: ['MaxPool2d', 'AvgPool3d', 'ModuleDict', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.module_dict = nn.ModuleDict({
            'bn1': nn.BatchNorm2d(10),
            'bn2': nn.BatchNorm2d(20)
        })
        self.batch_norm = nn.BatchNorm2d(30)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.maxpool2d(x)
        x = self.module_dict['bn1'](x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AvgPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.avgpool3d(x)
        
        # Remove the depth dimension to go back to 4D
        x = x.squeeze(2)
        
        x = self.module_dict['bn2'](x)
        x = self.batch_norm(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
