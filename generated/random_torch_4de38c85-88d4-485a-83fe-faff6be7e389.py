
# This is a random torch model generated by the following modules: ['Sigmoid', 'Mish', 'CrossEntropyLoss', 'AdaptiveMaxPool1d', 'CircularPad1d', 'ModuleDict', 'Tanhshrink', 'LazyConv1d', 'NLLLoss', 'L1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.circular_pad = nn.CircularPad1d(padding=1)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.mish = nn.Mish()
        self.sigmoid = nn.Sigmoid()
        self.tanhshrink = nn.Tanhshrink()
        self.module_dict = nn.ModuleDict({
            'conv2': nn.LazyConv1d(out_channels=64, kernel_size=3),
            'conv3': nn.LazyConv1d(out_channels=128, kernel_size=3)
        })
        self.loss1 = nn.CrossEntropyLoss()
        self.loss2 = nn.NLLLoss()
        self.loss3 = nn.L1Loss()

    def forward(self, x):
        # Apply circular padding
        x = self.circular_pad(x)
        
        # Apply first convolution
        x = self.conv1(x)
        x = self.mish(x)
        
        # Apply adaptive max pooling
        x = self.adaptive_max_pool(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply second convolution from ModuleDict
        x = self.module_dict['conv2'](x)
        x = self.sigmoid(x)
        
        # Apply third convolution from ModuleDict
        x = self.module_dict['conv3'](x)
        x = self.mish(x)
        
        # Reshape for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss computation
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Compute CrossEntropyLoss
        loss1 = self.loss1(x, target)
        
        # Compute NLLLoss
        log_softmax = F.log_softmax(x, dim=1)
        loss2 = self.loss2(log_softmax, target)
        
        # Compute L1Loss
        dummy_target = torch.randn_like(x)
        loss3 = self.loss3(x, dummy_target)
        
        # Return the sum of losses
        return loss1 + loss2 + loss3

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 64).cuda()  # Example input shape (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
