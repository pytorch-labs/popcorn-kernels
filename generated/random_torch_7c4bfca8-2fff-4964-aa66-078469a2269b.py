
# This is a random torch model generated by the following modules: ['Dropout1d', 'BatchNorm1d', 'MaxPool3d', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d_1 = nn.Dropout1d(p=0.5)
        self.batchnorm1d_1 = nn.BatchNorm1d(64)
        self.maxpool3d_1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.rrelu_1 = nn.RReLU()
        self.dropout1d_2 = nn.Dropout1d(p=0.5)
        self.batchnorm1d_2 = nn.BatchNorm1d(32)
        self.maxpool3d_2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.rrelu_2 = nn.RReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        # Reshape to 1D for Dropout1d and BatchNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width, -1)
        
        x = self.dropout1d_1(x)
        x = self.batchnorm1d_1(x)
        
        # Reshape back to 3D for MaxPool3d
        x = x.view(batch_size, channels, depth, height, width)
        x = self.maxpool3d_1(x)
        x = self.rrelu_1(x)
        
        # Repeat the process
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width, -1)
        
        x = self.dropout1d_2(x)
        x = self.batchnorm1d_2(x)
        
        x = x.view(batch_size, channels, depth, height, width)
        x = self.maxpool3d_2(x)
        x = self.rrelu_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

