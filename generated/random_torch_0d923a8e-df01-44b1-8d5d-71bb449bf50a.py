
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'CircularPad1d', 'TransformerEncoder', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1 = nn.CircularPad1d(2)
        self.transformer_encoder1 = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.circular_pad2 = nn.CircularPad1d(1)
        self.transformer_encoder2 = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.flatten = nn.Flatten()
        self.pairwise_distance = nn.PairwiseDistance()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        x = self.circular_pad1(x)  # Apply circular padding
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, feature_dim)
        x = self.transformer_encoder1(x)
        x = x.permute(1, 0, 2)  # Revert back to (batch_size, sequence_length, feature_dim)
        x = self.circular_pad2(x)  # Apply another circular padding
        x = x.permute(1, 0, 2)  # Transformer expects (sequence_length, batch_size, feature_dim)
        x = self.transformer_encoder2(x)
        x = x.permute(1, 0, 2)  # Revert back to (batch_size, sequence_length, feature_dim)
        x = self.flatten(x)  # Flatten the output
        # Split the flattened output into two tensors for PairwiseDistance
        x1, x2 = x.chunk(2, dim=1)
        output = self.pairwise_distance(x1, x2)  # Compute pairwise distance
        return output

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape (batch_size=1, sequence_length=10, feature_dim=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
