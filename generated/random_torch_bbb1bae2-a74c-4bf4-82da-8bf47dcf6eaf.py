
# This is a random torch model generated by the following modules: ['AvgPool3d', 'ReplicationPad3d', 'AdaptiveMaxPool1d', 'Fold', 'BCELoss', 'GRUCell', 'Hardsigmoid', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.fold = nn.Fold(output_size=(5, 5), kernel_size=(2, 2))
        self.bce_loss = nn.BCELoss()
        self.gru_cell = nn.GRUCell(input_size=10, hidden_size=20)
        self.hardsigmoid = nn.Hardsigmoid()
        self.batch_norm1d = nn.BatchNorm1d(num_features=20)
        
    def forward(self, x):
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Apply ReplicationPad3d
        x = self.replication_pad3d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to fit Fold input
        x = self.fold(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)  # Flatten to fit GRUCell input
        hx = torch.zeros(x.size(0), 20).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Apply BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Compute BCELoss (assuming a target tensor for demonstration)
        target = torch.rand_like(x)  # Random target for demonstration
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input for 3D operations
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

