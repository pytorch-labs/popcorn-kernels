
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'TripletMarginWithDistanceLoss', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=3, output_size=(5, 5))
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape for TripletMarginWithDistanceLoss
        x = x.view(x.size(0), -1)  # Flatten the tensor
        
        # Generate anchor, positive, and negative samples for TripletMarginWithDistanceLoss
        anchor = x[0:1]  # First sample as anchor
        positive = x[1:2]  # Second sample as positive
        negative = x[2:3]  # Third sample as negative
        
        # Compute TripletMarginWithDistanceLoss
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(3, 3, 64, 64).cuda()  # Assuming 3 samples for triplet loss
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

