
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'MaxPool3d', 'LeakyReLU', 'PixelUnshuffle', 'Unfold', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.maxpool3d = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.unfold = nn.Unfold(kernel_size=(3, 3), dilation=1, padding=1, stride=1)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)

    def forward(self, x):
        # Apply CrossMapLRN2d
        x = self.lrn(x)
        
        # Reshape to 5D tensor for MaxPool3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.maxpool3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape to 3D tensor for ConstantPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        x = self.constant_pad1d(x)
        
        # Reshape back to 4D tensor
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
