
# This is a random torch model generated by the following modules: ['MaxPool1d', 'ConvTranspose2d', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.convtranspose2d1 = nn.ConvTranspose2d(1, 10, kernel_size=3, stride=2)
        self.zeropad2d1 = nn.ZeroPad2d(2)
        self.convtranspose2d2 = nn.ConvTranspose2d(10, 20, kernel_size=3, stride=2)
        self.zeropad2d2 = nn.ZeroPad2d(1)
        self.convtranspose2d3 = nn.ConvTranspose2d(20, 30, kernel_size=3, stride=2)
        self.zeropad2d3 = nn.ZeroPad2d(1)

    def forward(self, x):
        # Assuming input is 1D, apply MaxPool1d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, sequence_length)
        x = self.maxpool1d(x)
        
        # Reshape to 2D for ConvTranspose2d
        x = x.view(x.size(0), 1, x.size(1), x.size(2))  # Reshape to (batch_size, 1, height, width)
        
        # Apply ConvTranspose2d and ZeroPad2d layers
        x = self.convtranspose2d1(x)
        x = self.zeropad2d1(x)
        x = self.convtranspose2d2(x)
        x = self.zeropad2d2(x)
        x = self.convtranspose2d3(x)
        x = self.zeropad2d3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Arbitrary 1D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

