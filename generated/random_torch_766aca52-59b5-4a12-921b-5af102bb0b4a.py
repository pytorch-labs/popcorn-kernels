
# This is a random torch model generated by the following modules: ['Sigmoid', 'Conv2d', 'LazyBatchNorm2d', 'Flatten', 'ReflectionPad1d', 'AdaptiveAvgPool1d', 'PixelUnshuffle', 'MaxUnpool2d', 'LazyBatchNorm1d', 'PixelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.LazyBatchNorm2d()
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.LazyBatchNorm2d()
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=10)
        self.flatten = nn.Flatten()
        self.bn3 = nn.LazyBatchNorm1d()
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.pixel_unshuffle(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool(x, indices)
        x = self.pixel_shuffle(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for 1D operations
        x = self.reflection_pad(x)
        x = self.adaptive_avg_pool(x)
        x = self.flatten(x)
        x = self.bn3(x)
        x = self.sigmoid(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
