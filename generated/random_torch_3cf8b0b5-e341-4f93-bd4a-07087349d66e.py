
# This is a random torch model generated by the following modules: ['LazyInstanceNorm3d', 'BatchNorm3d', 'Conv3d', 'Dropout2d', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.inorm1 = nn.LazyInstanceNorm3d()
        self.bn1 = nn.BatchNorm3d(10)
        self.conv1 = nn.Conv3d(1, 10, kernel_size=3, padding=1)
        self.conv2 = nn.Conv3d(10, 20, kernel_size=3, padding=1)
        self.dropout1 = nn.Dropout2d(0.5)
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        x = self.inorm1(x)
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape for Dropout2d
        x = self.dropout1(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)  # Reshape back
        x = self.tanhshrink(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

