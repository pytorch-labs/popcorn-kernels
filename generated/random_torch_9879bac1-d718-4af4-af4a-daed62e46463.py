
# This is a random torch model generated by the following modules: ['PixelShuffle', 'ConstantPad1d', 'MaxUnpool2d', 'AvgPool1d', 'RNNCellBase', 'AdaptiveMaxPool1d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.constant_pad1d = nn.ConstantPad1d(2, 3.0)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.rnn_cell = nn.RNNCellBase(input_size=10, hidden_size=20)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=5)
        self.circular_pad3d = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Reshape for PixelShuffle
        x = x.view(-1, 16, 8, 8)
        x = self.pixel_shuffle(x)
        
        # Reshape for ConstantPad1d
        x = x.view(-1, 16, 64)
        x = self.constant_pad1d(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(-1, 16, 8, 8)
        indices = torch.randint(0, 64, (x.size(0), 16, 4, 4), device=x.device)
        x = self.max_unpool2d(x, indices)
        
        # Reshape for AvgPool1d
        x = x.view(-1, 16, 64)
        x = self.avg_pool1d(x)
        
        # Reshape for RNNCellBase
        x = x.view(-1, 10)
        hx = torch.zeros(x.size(0), 20, device=x.device)
        x = self.rnn_cell(x, hx)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(-1, 20, 10)
        x = self.adaptive_max_pool1d(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 8, 8, 8).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
