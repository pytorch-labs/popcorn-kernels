
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'MultiMarginLoss', 'BatchNorm1d', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn2d = nn.LazyBatchNorm2d()
        self.bn1d = nn.BatchNorm1d(128)
        self.gru_cell1 = nn.GRUCell(128, 64)
        self.gru_cell2 = nn.GRUCell(64, 32)
        self.loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.bn2d(x)
        
        # Flatten the input for BatchNorm1d
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d
        x = self.bn1d(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)
        
        # Apply first GRUCell
        hx1 = torch.zeros(x.size(0), 64).to(x.device)
        x = self.gru_cell1(x, hx1)
        
        # Apply second GRUCell
        hx2 = torch.zeros(x.size(0), 32).to(x.device)
        x = self.gru_cell2(x, hx2)
        
        # Compute MultiMarginLoss (assuming target is provided)
        target = torch.randint(0, 32, (x.size(0),)).to(x.device)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
