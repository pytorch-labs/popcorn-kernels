
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'AdaptiveAvgPool1d', 'MultiheadAttention', 'Hardshrink', 'FractionalMaxPool2d', 'LazyConv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=16, num_heads=2)
        self.hardshrink = nn.Hardshrink(lambd=0.5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))
        
    def forward(self, x):
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for MultiheadAttention
        x = x.permute(2, 0, 1)  # (seq_len, batch_size, embed_dim)
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(1, 2, 0)  # (batch_size, embed_dim, seq_len)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape to 2D
        x = self.fractional_max_pool2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for LazyConv3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

