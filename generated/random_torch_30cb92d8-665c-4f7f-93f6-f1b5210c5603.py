
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'CrossMapLRN2d', 'Fold', 'Dropout1d', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=512, nhead=8), num_layers=3
        )
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.fold = nn.Fold(output_size=(7, 7), kernel_size=(3, 3))
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.hardswish = nn.Hardswish()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # TransformerDecoder expects input of shape (seq_len, batch_size, d_model)
        x = x.permute(1, 0, 2)
        memory = torch.zeros_like(x)
        x = self.transformer_decoder(x, memory)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, d_model)
        
        # Reshape for CrossMapLRN2d
        x = x.view(batch_size, seq_len, int(d_model**0.5), int(d_model**0.5))
        x = self.cross_map_lrn2d(x)
        
        # Reshape for Fold
        x = x.view(batch_size, -1)
        x = self.fold(x)
        
        # Reshape for Dropout1d
        x = x.view(batch_size, -1, x.shape[-1])
        x = self.dropout1d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 512).cuda()  # Example input: (batch_size=1, seq_len=10, d_model=512)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

