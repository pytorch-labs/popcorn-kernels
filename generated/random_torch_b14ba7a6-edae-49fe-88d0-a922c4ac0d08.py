
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'Softmin', 'ReLU6', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.bn2 = nn.LazyBatchNorm3d()
        self.pad = nn.ReplicationPad2d(2)
        self.relu6 = nn.ReLU6()
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)  # Apply first batch norm
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten height and width for 2D operations
        x = self.pad(x)  # Apply padding
        x = x.view(x.size(0), x.size(1), x.size(2), int(x.size(3)**0.5), int(x.size(3)**0.5))  # Reshape back to 5D
        x = self.bn2(x)  # Apply second batch norm
        x = self.relu6(x)  # Apply ReLU6
        x = x.view(x.size(0), x.size(1), -1)  # Flatten for softmin
        x = self.softmin(x)  # Apply softmin
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

