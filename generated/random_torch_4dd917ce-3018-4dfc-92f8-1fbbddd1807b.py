
# This is a random torch model generated by the following modules: ['RReLU', 'BatchNorm1d', 'RNN', 'PixelUnshuffle', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.rnn = nn.RNN(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=32)
        self.rrelu = nn.RReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, channels * 4, height / 2, width / 2)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)  # Shape: (batch_size, channels * 4 * (height / 2) * (width / 2))
        x = self.batch_norm1d(x)  # Shape: (batch_size, channels * 4 * (height / 2) * (width / 2))
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 128)  # Shape: (batch_size, seq_len, 128)
        x, _ = self.rnn(x)  # Shape: (batch_size, seq_len, 64)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 64, seq_len)
        x = self.adaptive_max_pool1d(x)  # Shape: (batch_size, 64, 32)
        
        # Apply RReLU
        x = self.rrelu(x)  # Shape: (batch_size, 64, 32)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

