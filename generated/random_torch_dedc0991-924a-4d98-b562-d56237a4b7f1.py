
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'ConstantPad2d', 'Hardtanh', 'GELU', 'NLLLoss', 'Bilinear', 'Threshold', 'MultiLabelMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.5)
        self.hardtanh = nn.Hardtanh(min_val=-2, max_val=2)
        self.gelu = nn.GELU()
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.threshold = nn.Threshold(0.5, 1.0)
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()
        self.nll_loss = nn.NLLLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Reshape for Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten the input
        x1 = x[:, :10]  # Split the input into two parts for Bilinear
        x2 = x[:, 10:30]
        
        # Apply Bilinear transformation
        x = self.bilinear(x1, x2)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for loss functions (assuming multi-label classification)
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss functions (assuming multi-label classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        
        # Compute MultiLabelSoftMarginLoss
        loss1 = self.multi_label_soft_margin_loss(x, target)
        
        # Compute NLLLoss (assuming log probabilities)
        log_probs = F.log_softmax(x, dim=1)
        target_nll = torch.randint(0, x.size(1), (x.size(0),))
        loss2 = self.nll_loss(log_probs, target_nll)
        
        # Compute MultiLabelMarginLoss
        loss3 = self.multi_label_margin_loss(x, target)
        
        # Return the sum of losses (for demonstration purposes)
        return loss1 + loss2 + loss3


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

