
# This is a random torch model generated by the following modules: ['Softplus', 'AvgPool2d', 'Softmin', 'RNNCellBase', 'ELU', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.avgpool = nn.AvgPool2d(kernel_size=2)
        self.softmin = nn.Softmin(dim=1)
        self.rnn_cell = nn.RNNCellBase(input_size=64, hidden_size=128)
        self.elu = nn.ELU()
        self.module = nn.Module()

    def forward(self, x):
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for AvgPool2d
        x = x.view(-1, 1, 32, 32)
        x = self.avgpool(x)
        
        # Reshape for RNNCellBase
        x = x.view(-1, 64)
        hx = torch.zeros(x.size(0), 128).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape for Softmin
        x = x.view(-1, 128)
        x = self.softmin(x)
        
        # Apply Module (identity operation)
        x = self.module(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

