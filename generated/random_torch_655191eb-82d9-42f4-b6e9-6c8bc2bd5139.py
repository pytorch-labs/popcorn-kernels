
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'Threshold', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.threshold2 = nn.Threshold(threshold=0.2, value=0.0)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))

    def forward(self, x):
        # Assuming input x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to add a batch dimension if necessary
        x = x.view(1, -1)
        
        # Apply Threshold layers
        x = self.threshold1(x)
        x = self.threshold2(x)
        
        # Reshape to fit the Fold layer input requirements
        x = x.view(1, 64, 8, 8)
        
        # Apply Fold layer
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

