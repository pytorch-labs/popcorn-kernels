
# This is a random torch model generated by the following modules: ['MaxPool1d', 'L1Loss', 'Conv3d', 'EmbeddingBag', 'AvgPool1d', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.conv1d_1 = nn.Conv1d(20, 30, kernel_size=3)
        self.conv1d_2 = nn.Conv1d(30, 40, kernel_size=3)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.embedding_bag = nn.EmbeddingBag(1000, 50, mode='mean')
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input x is a 5D tensor for Conv3d
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reshape for Conv1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = F.relu(self.conv1d_1(x))
        x = F.relu(self.conv1d_2(x))
        
        # Apply pooling
        x = self.max_pool1d(x)
        x = self.avg_pool1d(x)
        
        # Reshape for EmbeddingBag
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.embedding_bag(x.long())
        
        # Compute L1 loss with a dummy target
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input for Conv3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

