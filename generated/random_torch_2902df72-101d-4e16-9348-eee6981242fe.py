
# This is a random torch model generated by the following modules: ['Tanhshrink', 'PixelShuffle', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink = nn.Tanhshrink()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.unflatten = nn.Unflatten(1, (16, 8))

    def forward(self, x):
        # Apply Tanhshrink to the input
        x = self.tanhshrink(x)
        
        # Reshape the input to have a channel dimension suitable for PixelShuffle
        x = x.view(x.size(0), -1, x.size(-2), x.size(-1))
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Unflatten the tensor along the channel dimension
        x = self.unflatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

