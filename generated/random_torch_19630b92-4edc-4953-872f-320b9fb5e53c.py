
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'PixelUnshuffle', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.bn2 = nn.LazyBatchNorm1d()
        self.bn3 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Apply LazyBatchNorm1d
        x = self.bn1(x)
        
        # Reshape to 4D for PixelUnshuffle
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.pixel_unshuffle(x)
        
        # Reshape back to 2D for MaxUnpool1d
        x = x.view(x.size(0), -1, x.size(2) * x.size(3))  # Reshape to (batch_size, channels, height*width)
        
        # Apply MaxUnpool1d
        indices = torch.arange(0, x.size(2), 2).repeat(x.size(0), x.size(1), 1).to(x.device)
        x = self.max_unpool1d(x, indices)
        
        # Apply LazyBatchNorm1d
        x = self.bn2(x)
        
        # Apply LazyBatchNorm1d again
        x = self.bn3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Arbitrary input shape (batch_size, features)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

