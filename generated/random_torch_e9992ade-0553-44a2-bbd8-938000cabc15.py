
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'Hardtanh', 'AdaptiveAvgPool1d', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=1)
        self.conv_transpose3 = nn.LazyConvTranspose3d(out_channels=4, kernel_size=3, stride=1)

    def forward(self, x):
        # Apply first ConvTranspose3d
        x = self.conv_transpose1(x)
        x = self.hardtanh(x)
        
        # Reshape to apply AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back to 3D for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape to (batch_size, channels, 5, 5)
        x = self.adaptive_avg_pool2d(x)
        
        # Apply second ConvTranspose3d
        x = x.unsqueeze(-1)  # Add a dummy dimension to make it 5D
        x = self.conv_transpose2(x)
        x = self.hardtanh(x)
        
        # Apply third ConvTranspose3d
        x = self.conv_transpose3(x)
        x = self.hardtanh(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

