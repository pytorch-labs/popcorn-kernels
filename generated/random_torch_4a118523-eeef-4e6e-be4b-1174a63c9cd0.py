
# This is a random torch model generated by the following modules: ['Sequential', 'Hardtanh', 'RNN', 'UpsamplingNearest2d', 'MaxPool2d', 'LocalResponseNorm', 'LazyBatchNorm3d', 'Conv2d', 'LazyBatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.lazy_bn2d = nn.LazyBatchNorm2d()
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.rnn = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.sequential = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )

    def forward(self, x):
        # Initial processing with Conv2d and LazyBatchNorm2d
        x = self.conv1(x)
        x = self.lazy_bn2d(x)
        
        # MaxPool2d and LocalResponseNorm
        x = self.max_pool2d(x)
        x = self.local_response_norm(x)
        
        # UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Reshape for RNN
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).transpose(1, 2)  # Reshape to (batch_size, seq_len, features)
        
        # RNN
        x, _ = self.rnn(x)
        
        # Hardtanh
        x = self.hardtanh(x)
        
        # Reshape back to 4D for LazyBatchNorm3d
        x = x.transpose(1, 2).view(batch_size, channels, height, width, -1)
        
        # LazyBatchNorm3d
        x = self.lazy_bn3d(x)
        
        # Reshape back to 4D for Sequential
        x = x.view(batch_size, channels, height, width)
        
        # Sequential
        x = self.sequential(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
