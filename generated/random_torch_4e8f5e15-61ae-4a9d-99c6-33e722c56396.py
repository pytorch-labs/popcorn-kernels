
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'InstanceNorm1d', 'Dropout2d', 'Conv1d', 'ZeroPad2d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.instance_norm1d = nn.InstanceNorm1d(10)
        self.dropout2d = nn.Dropout2d(0.5)
        self.conv1d_1 = nn.Conv1d(1, 10, kernel_size=3)
        self.conv1d_2 = nn.Conv1d(10, 20, kernel_size=3)
        self.zero_pad2d = nn.ZeroPad2d(1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(10)

    def forward(self, x):
        # Assuming input is 3D (batch_size, channels, depth)
        x = self.replication_pad3d(x)
        
        # Reshape to 2D for Dropout2d
        x = x.view(x.size(0), x.size(1), -1, x.size(2))
        x = self.dropout2d(x)
        
        # Reshape back to 3D for Conv1d
        x = x.view(x.size(0), x.size(1), -1)
        
        x = F.relu(self.conv1d_1(x))
        x = self.instance_norm1d(x)
        x = F.relu(self.conv1d_2(x))
        
        # Reshape to 4D for ZeroPad2d
        x = x.view(x.size(0), x.size(1), -1, x.size(2))
        x = self.zero_pad2d(x)
        
        # Reshape back to 3D for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape (batch_size, channels, depth)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
