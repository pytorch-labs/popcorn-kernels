
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'LazyBatchNorm2d', 'ZeroPad2d', 'AdaptiveMaxPool2d', 'AdaptiveMaxPool1d', 'TransformerDecoderLayer', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(32)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.constant_pad1d = nn.ConstantPad1d(2, 0.5)

    def forward(self, x):
        # Assume input is 5D (batch, channels, depth, height, width)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        x = self.lazy_batch_norm2d(x)
        x = self.zero_pad2d(x)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape to 3D (batch, channels, sequence)
        x = x.view(x.size(0), x.size(1), -1)
        
        x = self.adaptive_max_pool1d(x)
        
        # Reshape to 2D (batch, features)
        x = x.view(x.size(0), -1)
        
        # Add a dummy sequence dimension for TransformerDecoderLayer
        x = x.unsqueeze(1)
        
        # Create a dummy memory tensor for the TransformerDecoderLayer
        memory = torch.zeros_like(x)
        
        x = self.transformer_decoder_layer(x, memory)
        
        # Remove the sequence dimension
        x = x.squeeze(1)
        
        # Add a dummy channel dimension for ConstantPad1d
        x = x.unsqueeze(1)
        
        x = self.constant_pad1d(x)
        
        # Remove the dummy channel dimension
        x = x.squeeze(1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 64, 64).cuda()  # Example input shape: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

