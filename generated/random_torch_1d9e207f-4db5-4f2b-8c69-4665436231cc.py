
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'NLLLoss2d', 'Softsign', 'LazyConv1d', 'LazyBatchNorm3d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm3d()
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.LazyBatchNorm3d()
        self.softsign = nn.Softsign()
        self.param_dict = nn.ParameterDict({
            'weight1': nn.Parameter(torch.randn(64, 32)),
            'weight2': nn.Parameter(torch.randn(32, 10))
        })
        self.multi_label_loss = nn.MultiLabelSoftMarginLoss()
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Reshape input to fit LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d and LazyBatchNorm3d
        x = self.conv1(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape for LazyBatchNorm3d
        x = self.bn1(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back for LazyConv1d
        
        x = self.conv2(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape for LazyBatchNorm3d
        x = self.bn2(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back for LazyConv1d
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply ParameterDict weights
        x = torch.matmul(x, self.param_dict['weight1'])
        x = torch.matmul(x, self.param_dict['weight2'])
        
        # Compute losses (for demonstration purposes, not typically done in forward)
        target = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        multi_label_loss = self.multi_label_loss(x, target)
        
        target_nll = torch.randint(0, 10, (x.size(0), x.size(1), x.size(2)))
        nll_loss = self.nll_loss(F.log_softmax(x, dim=1), target_nll)
        
        return x, multi_label_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

