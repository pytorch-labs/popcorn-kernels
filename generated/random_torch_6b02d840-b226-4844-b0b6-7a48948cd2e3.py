
# This is a random torch model generated by the following modules: ['MaxUnpool2d', 'ParameterList', 'SiLU', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        # Define the modules
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])
        self.silu = nn.SiLU()
        self.dropout3d = nn.Dropout3d(p=0.5)
        
        # Additional layers to handle shape transformations
        self.conv1 = nn.Conv2d(3, 10, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=3, stride=1, padding=1)
        self.fc = nn.Linear(20 * 8 * 8, 10)

    def forward(self, x):
        # Initial convolution to process the input
        x = self.conv1(x)
        x = self.silu(x)
        
        # Max pooling to create indices for unpooling
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        
        # Apply MaxUnpool2d
        x = self.max_unpool(x, indices)
        
        # Apply Dropout3d (reshape to 5D tensor first)
        x = x.unsqueeze(0)  # Add batch dimension
        x = self.dropout3d(x)
        x = x.squeeze(0)  # Remove batch dimension
        
        # Second convolution
        x = self.conv2(x)
        x = self.silu(x)
        
        # Flatten the tensor for the fully connected layer
        x = x.view(x.size(0), -1)
        
        # Apply the ParameterList (sum all parameters and add to the output)
        param_sum = sum(self.parameter_list)
        x = x + param_sum[:x.size(1)]  # Ensure shapes match
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

