
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'Softmax2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle1 = nn.PixelUnshuffle(downscale_factor=2)
        self.batch_norm3d1 = nn.BatchNorm3d(num_features=16)
        self.softmax2d1 = nn.Softmax2d()
        self.batch_norm3d2 = nn.BatchNorm3d(num_features=8)
        self.pixel_unshuffle2 = nn.PixelUnshuffle(downscale_factor=2)
        self.softmax2d2 = nn.Softmax2d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.pixel_unshuffle1(x)  # Output shape: (batch_size, channels * 4, height / 2, width / 2)
        
        # Reshape to fit BatchNorm3d input shape (batch_size, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.batch_norm3d1(x)  # Output shape: (batch_size, channels * 4, 1, height / 2, width / 2)
        
        # Remove depth dimension for Softmax2d
        x = x.squeeze(2)  # Output shape: (batch_size, channels * 4, height / 2, width / 2)
        x = self.softmax2d1(x)  # Output shape: (batch_size, channels * 4, height / 2, width / 2)
        
        # Reshape again for BatchNorm3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.batch_norm3d2(x)  # Output shape: (batch_size, channels * 4, 1, height / 2, width / 2)
        
        # Remove depth dimension for PixelUnshuffle
        x = x.squeeze(2)  # Output shape: (batch_size, channels * 4, height / 2, width / 2)
        x = self.pixel_unshuffle2(x)  # Output shape: (batch_size, channels * 16, height / 4, width / 4)
        
        # Final Softmax2d
        x = self.softmax2d2(x)  # Output shape: (batch_size, channels * 16, height / 4, width / 4)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size=1, channels=3, height=64, width=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

