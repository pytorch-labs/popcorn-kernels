
# This is a random torch model generated by the following modules: ['Unfold', 'AdaptiveAvgPool1d', 'LSTM', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.lstm = nn.LSTM(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.fc = nn.Linear(20, 10)

    def forward(self, x):
        # Unfold the input to extract patches
        x = self.unfold(x)
        
        # Reshape to fit AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply AvgPool1d
        x = x.permute(0, 2, 1)
        x = self.avg_pool1d(x)
        
        # Reshape for fully connected layer
        x = x.view(x.size(0), -1)
        
        # Apply fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

