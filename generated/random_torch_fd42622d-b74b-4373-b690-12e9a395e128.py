
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'FractionalMaxPool2d', 'InstanceNorm1d', 'MaxUnpool1d', 'ReplicationPad2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(8, 8))
        self.instance_norm1d = nn.InstanceNorm1d(64)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.replication_pad2d = nn.ReplicationPad2d(2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=64, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        x = self.fractional_max_pool2d(x)
        
        # Reshape to 3D (batch, channels, height*width)
        x = x.view(x.size(0), x.size(1), -1)
        
        x = self.instance_norm1d(x)
        
        # Reshape to 2D (batch, channels*height*width)
        x = x.view(x.size(0), -1)
        
        # Reshape back to 3D (batch, channels, sequence_length)
        x = x.view(x.size(0), 64, -1)
        
        # MaxUnpool1d requires indices from a previous MaxPool1d, so we simulate it
        pool_output, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(pool_output, indices)
        
        # Reshape to 4D (batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), 8, 8)
        
        x = self.replication_pad2d(x)
        
        # Reshape to 2D (batch, channels*height*width)
        x = x.view(x.size(0), -1)
        
        # AdaptiveLogSoftmaxWithLoss expects 2D input (batch, in_features)
        output = self.adaptive_log_softmax.log_prob(x)
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 8, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
