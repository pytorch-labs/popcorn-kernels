
# This is a random torch model generated by the following modules: ['AvgPool3d', 'ReflectionPad1d', 'ZeroPad3d', 'LazyConv3d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.reflection_pad1d = nn.ReflectionPad1d(padding=2)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.lazy_conv2d_2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.lazy_conv3d_2 = nn.LazyConv3d(out_channels=8, kernel_size=3)
        self.zero_pad3d_2 = nn.ZeroPad3d(padding=2)
        self.reflection_pad1d_2 = nn.ReflectionPad1d(padding=1)
        self.avg_pool3d_2 = nn.AvgPool3d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape to 1D for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.reflection_pad1d(x)
        
        # Reshape back to 3D for ZeroPad3d
        x = x.view(x.size(0), x.size(1), x.size(2) // x.size(1), x.size(1), -1)
        x = self.zero_pad3d(x)
        
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        
        # Reshape to 2D for LazyConv2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.lazy_conv2d(x)
        
        # Apply another LazyConv2d
        x = self.lazy_conv2d_2(x)
        
        # Reshape back to 3D for LazyConv3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_conv3d_2(x)
        
        # Apply ZeroPad3d
        x = self.zero_pad3d_2(x)
        
        # Reshape to 1D for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.reflection_pad1d_2(x)
        
        # Reshape back to 3D for AvgPool3d
        x = x.view(x.size(0), x.size(1), x.size(2) // x.size(1), x.size(1), -1)
        x = self.avg_pool3d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
