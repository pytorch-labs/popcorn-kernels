
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'ConstantPad1d', 'SoftMarginLoss', 'Dropout1d', 'LazyBatchNorm3d', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=64)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.hardswish = nn.Hardswish()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.adaptive_avg_pool1d(x)  # Shape: (batch_size, channels, 64)
        x = self.constant_pad1d(x)       # Shape: (batch_size, channels, 68)
        x = self.dropout1d(x)            # Shape: (batch_size, channels, 68)
        
        # Reshape to 3D for LazyBatchNorm3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, channels, 1, 1, 68)
        x = self.lazy_batch_norm3d(x)    # Shape: (batch_size, channels, 1, 1, 68)
        
        # Reshape back to 1D
        x = x.squeeze(3).squeeze(2)      # Shape: (batch_size, channels, 68)
        x = self.hardswish(x)            # Shape: (batch_size, channels, 68)
        
        # Dummy target for SoftMarginLoss
        target = torch.ones_like(x)      # Shape: (batch_size, channels, 68)
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape: (batch_size=1, channels=3, length=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

