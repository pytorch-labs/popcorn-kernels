
# This is a random torch model generated by the following modules: ['LeakyReLU', 'Conv3d', 'MSELoss', 'RNNBase', 'GRU', 'LSTM', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 16, kernel_size=3, stride=1, padding=1)
        self.conv3d_2 = nn.Conv3d(16, 32, kernel_size=3, stride=1, padding=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.gru = nn.GRU(input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.rnn = nn.RNNBase(input_size=128, hidden_size=256, num_layers=1, batch_first=True)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply Conv3d layers
        x = self.leaky_relu(self.conv3d_1(x))
        x = self.leaky_relu(self.conv3d_2(x))
        
        # Reshape for RNN layers
        batch_size, channels, depth, height, width = x.size()
        x = x.view(batch_size, channels * depth, height * width).permute(0, 2, 1)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply RNNBase
        x, _ = self.rnn(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Compute MSE Loss (assuming target is zeros for demonstration)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
