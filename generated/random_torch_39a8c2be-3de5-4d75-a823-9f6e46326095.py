
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'AdaptiveAvgPool1d', 'Unfold', 'L1Loss', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm1d()
        self.avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.loss = nn.L1Loss()
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Apply LazyInstanceNorm1d
        x = x.view(batch_size, channels, -1)  # Reshape to (batch_size, channels, height * width)
        x = self.norm1(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back to original shape
        
        # Apply AdaptiveAvgPool1d
        x = x.view(batch_size, channels, -1)  # Reshape to (batch_size, channels, height * width)
        x = self.avg_pool1d(x)
        x = x.view(batch_size, channels, 10)  # Reshape to (batch_size, channels, 10)
        
        # Apply Unfold
        x = x.view(batch_size, channels, 10, 1)  # Reshape to (batch_size, channels, 10, 1)
        x = self.unfold(x)
        
        # Apply AvgPool2d
        x = x.view(batch_size, -1, 10, 10)  # Reshape to (batch_size, channels * kernel_size, 10, 10)
        x = self.avg_pool2d(x)
        
        # Apply L1Loss (assuming we have a target tensor of the same shape)
        target = torch.zeros_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

