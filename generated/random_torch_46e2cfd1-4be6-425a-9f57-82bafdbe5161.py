
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'AdaptiveMaxPool3d', 'PairwiseDistance', 'BatchNorm2d', 'TransformerEncoderLayer', 'LeakyReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=128, mode='mean')
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.batch_norm2d = nn.BatchNorm2d(num_features=64)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=128, nhead=8)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to 5D tensor for AdaptiveMaxPool3d
        x = x.view(1, 1, 8, 8, 16)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 4D tensor for BatchNorm2d
        x = x.view(1, 64, 8, 8)
        x = self.batch_norm2d(x)
        
        # Reshape to 3D tensor for TransformerEncoderLayer
        x = x.view(1, 64, 64)
        x = self.transformer_encoder_layer(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Compute PairwiseDistance between the first two elements
        x = x.view(2, -1)
        x = self.pairwise_distance(x[0], x[1])
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

