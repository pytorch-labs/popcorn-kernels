
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'PReLU', 'ZeroPad1d', 'GRUCell', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.prelu1 = nn.PReLU()
        self.zeropad1 = nn.ZeroPad1d(2)
        self.grucell1 = nn.GRUCell(128, 64)  # Assuming input size 128 and hidden size 64
        self.adaptivemaxpool1 = nn.AdaptiveMaxPool1d(16)
        self.bn2 = nn.LazyBatchNorm2d()
        self.prelu2 = nn.PReLU()
        self.zeropad2 = nn.ZeroPad1d(1)
        self.grucell2 = nn.GRUCell(64, 32)  # Assuming input size 64 and hidden size 32
        self.adaptivemaxpool2 = nn.AdaptiveMaxPool1d(8)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.bn1(x)
        x = self.prelu1(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.zeropad1(x)
        
        # GRUCell expects 2D input (batch, features)
        x = x.permute(0, 2, 1)  # Swap dimensions for GRUCell
        x = x.reshape(-1, x.size(2))  # Flatten batch and sequence dimensions
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.grucell1(x, hx)
        
        # Reshape back to 3D (batch, sequence, features)
        x = x.view(x.size(0) // 16, 16, -1)  # Assuming sequence length 16
        x = self.adaptivemaxpool1(x)
        
        # Repeat the process with different parameters
        x = x.permute(0, 2, 1)  # Swap dimensions for GRUCell
        x = x.reshape(-1, x.size(2))  # Flatten batch and sequence dimensions
        hx = torch.zeros(x.size(0), 32).to(x.device)  # Initialize hidden state
        x = self.grucell2(x, hx)
        
        # Reshape back to 3D (batch, sequence, features)
        x = x.view(x.size(0) // 8, 8, -1)  # Assuming sequence length 8
        x = self.adaptivemaxpool2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

