
# This is a random torch model generated by the following modules: ['MaxPool3d', 'AvgPool1d', 'LazyInstanceNorm3d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d_1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.avgpool1d_1 = nn.AvgPool1d(kernel_size=2, stride=2)
        self.lazyinstancenorm3d_1 = nn.LazyInstanceNorm3d()
        self.dropout3d_1 = nn.Dropout3d(p=0.5)
        self.maxpool3d_2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.avgpool1d_2 = nn.AvgPool1d(kernel_size=2, stride=2)
        self.lazyinstancenorm3d_2 = nn.LazyInstanceNorm3d()
        self.dropout3d_2 = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Apply MaxPool3d
        x = self.maxpool3d_1(x)
        
        # Reshape to apply AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.avgpool1d_1(x)
        
        # Reshape back to 5D for LazyInstanceNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Add two singleton dimensions
        x = self.lazyinstancenorm3d_1(x)
        
        # Apply Dropout3d
        x = self.dropout3d_1(x)
        
        # Apply MaxPool3d again
        x = self.maxpool3d_2(x)
        
        # Reshape to apply AvgPool1d again
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.avgpool1d_2(x)
        
        # Reshape back to 5D for LazyInstanceNorm3d again
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Add two singleton dimensions
        x = self.lazyinstancenorm3d_2(x)
        
        # Apply Dropout3d again
        x = self.dropout3d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

