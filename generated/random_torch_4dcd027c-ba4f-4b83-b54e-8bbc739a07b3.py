
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'Upsample', 'PoissonNLLLoss', 'MaxUnpool1d', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lrn(x)  # Apply CrossMapLRN2d
        x = self.upsample(x)  # Upsample the input
        
        # Reshape to 3D (batch, channels, length) for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Create indices for MaxUnpool1d (dummy indices for demonstration)
        _, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)  # Apply MaxUnpool1d
        
        # Reshape to 2D (batch, features) for BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm1d(x)  # Apply BatchNorm1d
        
        # Reshape back to 4D for PoissonNLLLoss (assuming target is the same shape)
        x = x.view(x.size(0), 1, x.size(1), 1)
        
        # Dummy target for PoissonNLLLoss (same shape as input)
        target = torch.ones_like(x)
        loss = self.poisson_nll_loss(x, target)  # Apply PoissonNLLLoss
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

