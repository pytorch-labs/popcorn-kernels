
# This is a random torch model generated by the following modules: ['Upsample', 'ConstantPad3d', 'Flatten', 'GRU', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.flatten = nn.Flatten()
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.hardshrink = nn.Hardshrink(lambd=0.5)

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Pad the input
        x = self.pad(x)
        
        # Flatten the input
        x = self.flatten(x)
        
        # Reshape for GRU (assuming input is 3D: batch, seq_len, features)
        x = x.view(x.size(0), -1, 128)  # Reshape to (batch_size, seq_len, 128)
        
        # Pass through GRU
        x, _ = self.gru(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

