
# This is a random torch model generated by the following modules: ['Hardswish', 'Dropout', 'LazyConv3d', 'CircularPad1d', 'MaxPool2d', 'RNNBase', 'PixelUnshuffle', 'LocalResponseNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardswish = nn.Hardswish()
        self.dropout = nn.Dropout(p=0.5)
        self.conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.rnn = nn.RNNBase(input_size=16, hidden_size=32, num_layers=1, batch_first=True)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5)

    def forward(self, x):
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Reshape for 3D convolution
        x = x.view(x.size(0), -1, x.size(-2), x.size(-1), 1)
        
        # Apply LazyConv3d
        x = self.conv3d(x)
        
        # Reshape back to 2D for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Reshape for MaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        
        # Apply MaxPool2d
        x = self.maxpool2d(x)
        
        # Reshape for RNNBase
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply RNNBase
        x, _ = self.rnn(x)
        
        # Reshape for PixelUnshuffle
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

