
# This is a random torch model generated by the following modules: ['LeakyReLU', 'TripletMarginLoss', 'SELU', 'GRU', 'KLDivLoss', 'MultiMarginLoss', 'Hardswish', 'Container', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.selu = nn.SELU()
        self.hardswish = nn.Hardswish()
        self.container = nn.Sequential(
            nn.Linear(20, 50),
            nn.Linear(50, 10)
        )
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')
        self.multi_margin_loss = nn.MultiMarginLoss(p=1, margin=1.0)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 1, sequence_length)
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 10, sequence_length + 4)
        x = self.leaky_relu(x)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length + 4, 10)
        x, _ = self.gru(x)  # Shape: (batch_size, sequence_length + 4, 20)
        x = self.selu(x)
        x = self.hardswish(x)
        x = x[:, -1, :]  # Shape: (batch_size, 20)
        x = self.container(x)  # Shape: (batch_size, 10)
        return x

    def compute_losses(self, anchor, positive, negative, target, log_probs, input_probs):
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        kl_loss = self.kl_div_loss(log_probs, input_probs)
        multi_margin_loss = self.multi_margin_loss(anchor, target)
        return triplet_loss, kl_loss, multi_margin_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, 1, sequence_length)
    anchor = torch.randn(1, 10).cuda()
    positive = torch.randn(1, 10).cuda()
    negative = torch.randn(1, 10).cuda()
    target = torch.randint(0, 10, (1,)).cuda()
    log_probs = torch.randn(1, 10).cuda()
    input_probs = torch.randn(1, 10).cuda()
    return [x, anchor, positive, negative, target, log_probs, input_probs]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
