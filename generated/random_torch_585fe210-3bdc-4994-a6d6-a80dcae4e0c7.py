
# This is a random torch model generated by the following modules: ['Linear', 'BatchNorm3d', 'ChannelShuffle', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 512)
        self.batchnorm3d = nn.BatchNorm3d(8)
        self.channel_shuffle = nn.ChannelShuffle(4)
        self.constant_pad2d = nn.ConstantPad2d(2, 0.5)

    def forward(self, x):
        # Reshape input to fit BatchNorm3d
        x = x.view(-1, 8, 4, 4, 4)  # Assuming input can be reshaped to (batch_size, 8, 4, 4, 4)
        x = self.batchnorm3d(x)
        
        # Reshape back to 2D for Linear layers
        x = x.view(-1, 128)  # Reshape to (batch_size, 128)
        x = F.relu(self.linear1(x))
        x = self.linear2(x)
        
        # Reshape to 4D for ChannelShuffle and ConstantPad2d
        x = x.view(-1, 16, 8, 8)  # Reshape to (batch_size, 16, 8, 8)
        x = self.channel_shuffle(x)
        x = self.constant_pad2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Input shape (batch_size, 128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
