
# This is a random torch model generated by the following modules: ['Softplus', 'FeatureAlphaDropout', 'Module', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus1 = nn.Softplus()
        self.feature_alpha_dropout1 = nn.FeatureAlphaDropout()
        self.lazy_conv_transpose1d1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.lazy_conv_transpose1d2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.feature_alpha_dropout2 = nn.FeatureAlphaDropout()
        self.softplus2 = nn.Softplus()

    def forward(self, x):
        x = self.softplus1(x)
        x = self.feature_alpha_dropout1(x)
        
        # Reshape to 1D convolution input shape (batch_size, channels, length)
        x = x.view(x.size(0), -1, x.size(-1))
        
        x = self.lazy_conv_transpose1d1(x)
        x = self.lazy_conv_transpose1d2(x)
        
        # Reshape back to original shape
        x = x.view(x.size(0), -1, x.size(-1))
        
        x = self.feature_alpha_dropout2(x)
        x = self.softplus2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

