
# This is a random torch model generated by the following modules: ['Sequential', 'HuberLoss', 'AdaptiveMaxPool1d', 'MaxUnpool3d', 'RNNCellBase', 'MultiMarginLoss', 'SiLU', 'LPPool2d', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.ConvTranspose1d(1, 10, kernel_size=5),
            nn.SiLU(),
            nn.AdaptiveMaxPool1d(10),
            nn.LPPool2d(norm_type=2, kernel_size=2),
        )
        self.rnn_cell = nn.RNNCellBase(input_size=10, hidden_size=20)
        self.max_unpool = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.huber_loss = nn.HuberLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply Sequential block
        x = self.sequential(x)
        
        # Reshape for RNNCellBase
        x = x.view(-1, 10)
        x = self.rnn_cell(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(-1, 20, 1, 1, 1)
        x = self.max_unpool(x, indices=torch.zeros_like(x).long())
        
        # Compute losses (dummy targets for demonstration)
        target = torch.zeros_like(x)
        huber_loss = self.huber_loss(x, target)
        multi_margin_loss = self.multi_margin_loss(x, target)
        
        # Return both the output and the losses
        return x, huber_loss, multi_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

