
# This is a random torch model generated by the following modules: ['ReflectionPad1d', 'Linear', 'GRU', 'Container']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReflectionPad1d(2)
        self.linear1 = nn.Linear(10, 20)
        self.gru = nn.GRU(20, 30, num_layers=2, batch_first=True)
        self.linear2 = nn.Linear(30, 10)
        self.container = nn.Sequential(
            nn.Linear(10, 5),
            nn.Linear(5, 2)
        )

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, features)
        x = self.pad(x)  # Apply ReflectionPad1d
        x = x.permute(0, 2, 1)  # Swap dimensions for Linear layer
        x = self.linear1(x)
        x = x.permute(0, 2, 1)  # Swap back for GRU
        x, _ = self.gru(x)
        x = self.linear2(x[:, -1, :])  # Take the last output of GRU
        x = self.container(x)  # Pass through the container
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10).cuda()  # (batch_size, sequence_length, features)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
