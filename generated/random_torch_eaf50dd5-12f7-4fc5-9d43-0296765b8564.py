
# This is a random torch model generated by the following modules: ['AvgPool2d', 'Conv1d', 'Hardtanh', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.conv1d_1 = nn.Conv1d(in_channels=1, out_channels=10, kernel_size=5, stride=1)
        self.conv1d_2 = nn.Conv1d(in_channels=10, out_channels=20, kernel_size=5, stride=1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.convtranspose1d = nn.ConvTranspose1d(in_channels=20, out_channels=10, kernel_size=5, stride=1)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.avgpool(x)  # Apply AvgPool2d
        x = x.view(x.size(0), 1, -1)  # Reshape to (batch_size, 1, flattened_dim)
        x = self.conv1d_1(x)  # Apply Conv1d
        x = self.hardtanh(x)  # Apply Hardtanh
        x = self.conv1d_2(x)  # Apply Conv1d again
        x = self.convtranspose1d(x)  # Apply ConvTranspose1d
        x = x.view(x.size(0), -1)  # Flatten the output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size=1, channels=3, height=64, width=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
