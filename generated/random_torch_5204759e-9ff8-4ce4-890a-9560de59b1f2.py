
# This is a random torch model generated by the following modules: ['GRU', 'ReplicationPad1d', 'ParameterDict', 'BatchNorm3d', 'ConvTranspose1d', 'Sequential', 'GLU', 'CosineSimilarity', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.replication_pad = nn.ReplicationPad1d(padding=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.batch_norm3d = nn.BatchNorm3d(num_features=64)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=64, out_channels=128, kernel_size=3, stride=2)
        self.sequential = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 32)
        )
        self.glu = nn.GLU(dim=1)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.gru(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        
        # Reshape and apply ReplicationPad1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size, sequence_length)
        x = self.replication_pad(x)  # Shape: (batch_size, hidden_size, sequence_length + 2*padding)
        
        # Reshape and apply BatchNorm3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, hidden_size, sequence_length + 2*padding)
        x = x.unsqueeze(4)  # Shape: (batch_size, 1, hidden_size, sequence_length + 2*padding, 1)
        x = self.batch_norm3d(x)  # Shape: (batch_size, 64, hidden_size, sequence_length + 2*padding, 1)
        
        # Reshape and apply ConvTranspose1d
        x = x.squeeze(4)  # Shape: (batch_size, 64, hidden_size, sequence_length + 2*padding)
        x = x.permute(0, 2, 1, 3)  # Shape: (batch_size, hidden_size, 64, sequence_length + 2*padding)
        x = x.reshape(x.size(0), x.size(1), -1)  # Shape: (batch_size, hidden_size, 64*(sequence_length + 2*padding))
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 128, output_length)
        
        # Apply Sequential
        x = x.permute(0, 2, 1)  # Shape: (batch_size, output_length, 128)
        x = self.sequential(x)  # Shape: (batch_size, output_length, 32)
        
        # Apply GLU
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 32, output_length)
        x = self.glu(x)  # Shape: (batch_size, 16, output_length)
        
        # Apply CosineSimilarity
        x = x.permute(0, 2, 1)  # Shape: (batch_size, output_length, 16)
        x = self.cosine_similarity(x[:, 0, :], x[:, 1, :])  # Shape: (batch_size,)
        
        # Apply ParameterList
        x = x.unsqueeze(1)  # Shape: (batch_size, 1)
        x = x * self.parameter_list[0]  # Shape: (batch_size, 10)
        x = x + self.parameter_list[1]  # Shape: (batch_size, 10)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 128).cuda()  # Shape: (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
