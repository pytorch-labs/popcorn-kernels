
# This is a random torch model generated by the following modules: ['LazyLinear', 'AdaptiveMaxPool3d', 'LSTM', 'AdaptiveAvgPool1d', 'Hardswish', 'ReplicationPad1d', 'ConstantPad2d', 'AdaptiveMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.lstm = nn.LSTM(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(16)
        self.hardswish = nn.Hardswish()
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.constant_pad2d = nn.ConstantPad2d(1, 0.5)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((4, 4))

    def forward(self, x):
        # Reshape input to fit LazyLinear
        x = x.view(x.size(0), -1)
        x = self.lazy_linear1(x)
        x = self.hardswish(x)
        x = self.lazy_linear2(x)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), 1, 8, 8, 8)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 64)
        x, _ = self.lstm(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), -1)
        x = self.adaptive_avg_pool1d(x)
        
        # Apply padding and pooling
        x = self.replication_pad1d(x)
        x = x.view(x.size(0), 1, x.size(1), x.size(2))
        x = self.constant_pad2d(x)
        x = self.adaptive_max_pool2d(x)
        
        # Final reshape for output
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

