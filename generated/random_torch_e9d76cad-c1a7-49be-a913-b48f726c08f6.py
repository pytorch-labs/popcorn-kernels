
# This is a random torch model generated by the following modules: ['Hardtanh', 'CircularPad1d', 'ConstantPad3d', 'ConvTranspose1d', 'TripletMarginLoss', 'Softmax2d', 'LPPool3d', 'LeakyReLU', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh()
        self.circular_pad1d = nn.CircularPad1d(2)
        self.constant_pad3d = nn.ConstantPad3d(1, 0.5)
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.softmax2d = nn.Softmax2d()
        self.lp_pool3d = nn.LPPool3d(2, kernel_size=3, stride=2)
        self.leaky_relu = nn.LeakyReLU()
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Reshape for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.circular_pad1d(x)
        
        # Reshape for ConstantPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.constant_pad3d(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), 1, -1)
        x = self.conv_transpose1d(x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        x = self.softmax2d(x)
        
        # Reshape for LPPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.lp_pool3d(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.upsampling_nearest2d(x)
        
        # TripletMarginLoss requires three inputs, so we create dummy anchors and positives
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        loss = self.triplet_margin_loss(anchor, positive, x)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
