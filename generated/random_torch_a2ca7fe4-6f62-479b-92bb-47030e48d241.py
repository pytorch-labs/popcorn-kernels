
# This is a random torch model generated by the following modules: ['AvgPool1d', 'CosineSimilarity', 'GELU', 'SELU', 'ConstantPad3d', 'SyncBatchNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.gelu = nn.GELU()
        self.selu = nn.SELU()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.sync_bn = nn.SyncBatchNorm(10)  # Assuming 10 channels for SyncBatchNorm

    def forward(self, x):
        # Ensure the input is at least 3D for AvgPool1d
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add a channel dimension
        
        # Apply AvgPool1d
        x = self.avg_pool(x)
        
        # Reshape for CosineSimilarity
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = x.unsqueeze(1)  # Add a dimension for CosineSimilarity
        x_ref = torch.ones_like(x)  # Create a reference tensor for CosineSimilarity
        x = self.cosine_sim(x, x_ref)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Reshape for ConstantPad3d
        x = x.unsqueeze(0).unsqueeze(0)  # Add dimensions for 3D padding
        x = self.pad(x)
        
        # Apply SELU
        x = self.selu(x)
        
        # Reshape for SyncBatchNorm
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = x.unsqueeze(1)  # Add a dimension for SyncBatchNorm
        x = self.sync_bn(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape for AvgPool1d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

