
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'RNNBase', 'ReplicationPad3d', 'AdaptiveAvgPool2d', 'Softmax2d', 'Container', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.rnn = nn.RNNBase(input_size=10, hidden_size=20, num_layers=2, nonlinearity='tanh')
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        self.softmax2d = nn.Softmax2d()
        self.container = nn.Container()
        self.reflection_pad1d = nn.ReflectionPad1d(padding=2)

    def forward(self, x):
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 10)  # Assuming input size is compatible with RNN input size
        x, _ = self.rnn(x)
        
        # Reshape for ReplicationPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Adding extra dimensions for 3D padding
        x = self.replication_pad3d(x)
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))  # Removing extra dimensions
        x = self.adaptive_avg_pool2d(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Apply Container (no effect, just a placeholder)
        x = self.container(x)
        
        # Reshape for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flattening for 1D padding
        x = self.reflection_pad1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

