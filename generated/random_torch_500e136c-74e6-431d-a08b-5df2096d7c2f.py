
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'MaxPool3d', 'Upsample', 'MultiLabelSoftMarginLoss', 'ReLU6', 'NLLLoss2d', 'ZeroPad2d', 'Module', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.relu6 = nn.ReLU6()
        self.zeropad2d = nn.ZeroPad2d(2)
        self.constantpad2d = nn.ConstantPad2d(2, 3.5)
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.multilabel_loss = nn.MultiLabelSoftMarginLoss()
        self.nllloss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zeropad2d(x)
        
        # Apply ConstantPad2d
        x = self.constantpad2d(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        
        # Apply MaxPool3d
        x = self.maxpool3d(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Remove extra dimensions
        x = x.squeeze(1)
        x = x.squeeze(1)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Compute BCEWithLogitsLoss (dummy target)
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Compute MultiLabelSoftMarginLoss (dummy target)
        target_multilabel = torch.randint(0, 2, x.shape).float()
        multilabel_loss = self.multilabel_loss(x, target_multilabel)
        
        # Compute NLLLoss2d (dummy target)
        x_log_softmax = F.log_softmax(x, dim=1)
        target_nll = torch.randint(0, x.shape[1], (x.shape[0], x.shape[2], x.shape[3]))
        nll_loss = self.nllloss2d(x_log_softmax, target_nll)
        
        # Return the losses as a tuple
        return bce_loss, multilabel_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

