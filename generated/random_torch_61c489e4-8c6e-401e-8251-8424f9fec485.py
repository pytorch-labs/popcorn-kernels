
# This is a random torch model generated by the following modules: ['MaxPool3d', 'PReLU', 'TripletMarginLoss', 'Dropout1d', 'GELU', 'CosineSimilarity', 'AvgPool2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.prelu = nn.PReLU()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.gelu = nn.GELU()
        self.avgpool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[4, 8])

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.maxpool3d(x)  # Reduce depth, height, width
        x = x.view(x.size(0), x.size(1), -1)  # Flatten depth, height, width
        x = self.prelu(x)
        x = self.dropout1d(x)
        x = x.view(x.size(0), x.size(1), 16, 16)  # Reshape to 4D for AvgPool2d
        x = self.avgpool2d(x)  # Reduce height, width
        x = x.view(x.size(0), -1)  # Flatten to 2D
        x = self.gelu(x)
        
        # Create a second tensor for cosine similarity
        x2 = torch.randn_like(x)
        x = self.cosine_similarity(x, x2)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        x = self.adaptive_log_softmax.log_prob(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # 5D input (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
