
# This is a random torch model generated by the following modules: ['MaxPool1d', 'UpsamplingNearest2d', 'AdaptiveAvgPool3d', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.upsample_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.adaptive_avgpool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.mish = nn.Mish()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Reshape to 3D for MaxPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size * channels, height, width)  # Reshape to (batch*channels, height, width)
        x = self.maxpool1d(x)  # Apply MaxPool1d
        x = x.view(batch_size, channels, x.shape[1], x.shape[2])  # Reshape back to 4D

        # Apply Mish activation
        x = self.mish(x)

        # Apply UpsamplingNearest2d
        x = self.upsample_nearest2d(x)

        # Reshape to 5D for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.adaptive_avgpool3d(x)  # Apply AdaptiveAvgPool3d

        # Reshape back to 4D
        x = x.squeeze(2)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: (batch_size, channels, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

