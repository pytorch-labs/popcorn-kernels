
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'Conv1d', 'PixelShuffle', 'PixelUnshuffle', 'AlphaDropout', 'InstanceNorm3d', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose_3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.conv1d = nn.Conv1d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1)
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.instance_norm_3d = nn.InstanceNorm3d(num_features=32)
        self.max_unpool_3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)

    def forward(self, x):
        # Initial shape: (batch_size, channels, depth, height, width)
        x = self.conv_transpose_3d(x)  # Shape: (batch_size, 16, depth*2, height*2, width*2)
        x = self.instance_norm_3d(x)   # Shape: (batch_size, 16, depth*2, height*2, width*2)
        x = F.relu(x)
        
        # Reshape to 1D convolution input
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 16, depth*2 * height*2 * width*2)
        x = self.conv1d(x)  # Shape: (batch_size, 32, depth*2 * height*2 * width*2)
        x = F.relu(x)
        
        # Reshape back to 3D for PixelShuffle
        x = x.view(x.size(0), x.size(1), x.size(2)//4, 2, 2)  # Shape: (batch_size, 32, depth*2 * height*2 * width*2 / 4, 2, 2)
        x = self.pixel_shuffle(x)  # Shape: (batch_size, 8, depth*2 * height*2 * width*2 / 4 * 2, 2)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, 32, depth*2 * height*2 * width*2 / 4, 1, 1)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Shape: (batch_size, 32, depth*2 * height*2 * width*2 / 4, 1, 1)
        
        # Apply MaxUnpool3d
        x = self.max_unpool_3d(x)  # Shape: (batch_size, 32, depth*2 * height*2 * width*2 / 4 * 2, 2, 2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

