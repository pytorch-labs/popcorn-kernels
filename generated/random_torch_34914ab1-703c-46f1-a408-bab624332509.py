
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'Sequential', 'ConstantPad2d', 'AdaptiveAvgPool1d', 'LazyConvTranspose2d', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.sequential = nn.Sequential(
            nn.ConstantPad2d(1, 1.0),
            nn.LazyConvTranspose2d(64, kernel_size=3, stride=2),
            nn.AdaptiveAvgPool1d(128)
        )
        self.pairwise_distance = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Apply Sequential block
        x = self.sequential(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        # Apply PairwiseDistance
        x1 = x[:, :x.size(1)//2, :]
        x2 = x[:, x.size(1)//2:, :]
        x = self.pairwise_distance(x1, x2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

