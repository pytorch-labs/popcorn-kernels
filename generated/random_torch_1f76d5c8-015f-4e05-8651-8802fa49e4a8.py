
# This is a random torch model generated by the following modules: ['TransformerEncoderLayer', 'AdaptiveAvgPool1d', 'Threshold', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=32)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.transformer_encoder_layer2 = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.adaptive_avg_pool1d2 = nn.AdaptiveAvgPool1d(output_size=16)
        self.threshold2 = nn.Threshold(threshold=0.5, value=0.0)
        self.upsampling_nearest2d2 = nn.UpsamplingNearest2d(scale_factor=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        x = self.transformer_encoder_layer(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, d_model, seq_len)
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back for Threshold
        x = x.permute(0, 2, 1)  # (batch_size, seq_len, d_model)
        x = self.threshold(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.unsqueeze(1)  # (batch_size, 1, seq_len, d_model)
        x = self.upsampling_nearest2d(x)
        
        # Pass through another TransformerEncoderLayer
        x = x.squeeze(1)  # (batch_size, seq_len, d_model)
        x = self.transformer_encoder_layer2(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, d_model, seq_len)
        x = self.adaptive_avg_pool1d2(x)
        
        # Reshape back for Threshold
        x = x.permute(0, 2, 1)  # (batch_size, seq_len, d_model)
        x = self.threshold2(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.unsqueeze(1)  # (batch_size, 1, seq_len, d_model)
        x = self.upsampling_nearest2d2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
