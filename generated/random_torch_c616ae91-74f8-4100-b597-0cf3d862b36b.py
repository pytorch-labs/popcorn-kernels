
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'BatchNorm3d', 'Mish', 'SyncBatchNorm', 'ConstantPad2d', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.bn3d = nn.BatchNorm3d(10)
        self.sync_bn = nn.SyncBatchNorm(20)
        self.mish = nn.Mish()
        self.selu = nn.SELU()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.pad(x)  # Apply padding
        x = self.lrn(x)  # Apply CrossMapLRN2d
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for BatchNorm3d
        x = self.bn3d(x)  # Apply BatchNorm3d
        x = x.squeeze(2)  # Remove the added dimension
        x = x.unsqueeze(1)  # Add a dimension to make it 5D for SyncBatchNorm
        x = self.sync_bn(x)  # Apply SyncBatchNorm
        x = x.squeeze(1)  # Remove the added dimension
        x = self.mish(x)  # Apply Mish activation
        x = self.selu(x)  # Apply SELU activation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

