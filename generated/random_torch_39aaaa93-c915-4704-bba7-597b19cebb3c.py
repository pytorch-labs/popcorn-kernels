
# This is a random torch model generated by the following modules: ['HingeEmbeddingLoss', 'TripletMarginLoss', 'RReLU', 'LayerNorm', 'Fold', 'AdaptiveLogSoftmaxWithLoss', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()
        self.rrelu3 = nn.RReLU()
        self.layer_norm = nn.LayerNorm(128)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.hardshrink = nn.Hardshrink()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Apply RReLU three times
        x = self.rrelu1(x)
        x = self.rrelu2(x)
        x = self.rrelu3(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Reshape for Fold operation
        x = x.view(x.size(0), -1, 4)  # Reshape to (batch_size, channels * height, width)
        x = self.fold(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        output, _ = self.adaptive_log_softmax(x, target)
        
        # Apply HingeEmbeddingLoss
        hinge_target = torch.ones(x.size(0), device=x.device)
        hinge_loss = self.hinge_embedding_loss(output, hinge_target)
        
        # Apply TripletMarginLoss
        anchor = output
        positive = output + torch.randn_like(output) * 0.1
        negative = output + torch.randn_like(output) * 0.2
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return output, hinge_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 8, 8).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

