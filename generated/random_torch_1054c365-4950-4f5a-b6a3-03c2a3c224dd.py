
# This is a random torch model generated by the following modules: ['LazyInstanceNorm2d', 'GRU', 'BCEWithLogitsLoss', 'Softmin', 'PReLU', 'CosineSimilarity', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm2d()
        self.gru1 = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.prelu1 = nn.PReLU()
        self.rrelu1 = nn.RReLU()
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.softmin = nn.Softmin(dim=1)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply LazyInstanceNorm2d
        x = self.norm1(x)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).transpose(1, 2)  # (batch_size, height*width, channels)
        
        # Apply GRU
        x, _ = self.gru1(x)
        
        # Reshape back to original dimensions
        x = x.transpose(1, 2).view(batch_size, -1, height, width)
        
        # Apply PReLU
        x = self.prelu1(x)
        
        # Apply RReLU
        x = self.rrelu1(x)
        
        # Compute CosineSimilarity with a random tensor
        random_tensor = torch.randn_like(x)
        x = self.cosine_sim(x, random_tensor)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Compute BCEWithLogitsLoss with a random target
        target = torch.randint(0, 2, (batch_size,)).float().to(x.device)
        loss = self.loss(x.squeeze(), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

