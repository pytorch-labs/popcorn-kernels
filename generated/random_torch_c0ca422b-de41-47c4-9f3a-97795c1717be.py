
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'Module', 'Softsign', 'SyncBatchNorm', 'FractionalMaxPool2d', 'Unfold', 'ConvTranspose1d', 'ChannelShuffle', 'CTCLoss', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.sync_batch_norm = nn.SyncBatchNorm(10)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=10, out_channels=20, kernel_size=5)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.linear1 = nn.Linear(20 * 12 * 12, 128)
        self.linear2 = nn.Linear(128, 10)
        self.softsign = nn.Softsign()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), 10, -1)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Reshape for ChannelShuffle
        x = x.view(x.size(0), 20, 12, 12)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Flatten for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply CTCLoss (assuming targets are provided externally)
        # For demonstration, we'll just return the output before CTCLoss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

