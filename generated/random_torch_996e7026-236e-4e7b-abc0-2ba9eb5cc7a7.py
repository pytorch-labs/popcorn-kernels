
# This is a random torch model generated by the following modules: ['RMSNorm', 'MaxUnpool2d', 'RNN', 'Linear', 'GLU', 'BatchNorm1d', 'Softsign', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rms_norm = RMSNorm(64)  # Assuming input size 64 for RMSNorm
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.rnn = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.linear1 = nn.Linear(128, 64)
        self.glu = nn.GLU(dim=1)
        self.batch_norm = nn.BatchNorm1d(64)
        self.softsign = nn.Softsign()
        self.replication_pad = nn.ReplicationPad3d(padding=1)
        
    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.rms_norm(x)
        
        # MaxUnpool2d requires indices from a previous MaxPool2d operation
        # For simplicity, we assume x has been through a MaxPool2d layer before
        # and we have the indices stored.
        # Here, we create dummy indices for demonstration purposes.
        _, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool(x, indices)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 64)  # Reshape to (batch_size, seq_len, input_size)
        x, _ = self.rnn(x)
        
        # Take the last output of the RNN
        x = x[:, -1, :]
        
        # Linear layer
        x = self.linear1(x)
        
        # GLU requires even number of features
        x = x.view(x.size(0), -1, 2)  # Reshape to (batch_size, features, 2)
        x = self.glu(x)
        
        # BatchNorm1d
        x = self.batch_norm(x)
        
        # Softsign
        x = self.softsign(x)
        
        # ReplicationPad3d requires 5D input
        x = x.unsqueeze(2).unsqueeze(3).unsqueeze(4)  # Reshape to (batch_size, channels, 1, 1, 1)
        x = self.replication_pad(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Dummy RMSNorm implementation since it's not a standard PyTorch module
class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma
