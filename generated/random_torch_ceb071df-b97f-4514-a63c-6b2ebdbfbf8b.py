
# This is a random torch model generated by the following modules: ['Tanhshrink', 'AvgPool2d', 'Dropout2d', 'MaxUnpool1d', 'ConstantPad2d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.dropout = nn.Dropout2d(p=0.5)
        self.tanhshrink = nn.Tanhshrink()
        self.rnn_cell = nn.RNNCellBase(input_size=64, hidden_size=128)
        self.max_unpool = nn.MaxUnpool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Apply average pooling
        x = self.avg_pool(x)
        
        # Apply dropout
        x = self.dropout(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape for RNNCellBase
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)  # Flatten the spatial dimensions
        
        # Apply RNNCellBase
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x, hx)
        
        # Reshape for MaxUnpool1d
        x = x.unsqueeze(1)  # Add a dummy dimension for MaxUnpool1d
        x = self.max_unpool(x, torch.zeros_like(x))  # Dummy indices for unpooling
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
