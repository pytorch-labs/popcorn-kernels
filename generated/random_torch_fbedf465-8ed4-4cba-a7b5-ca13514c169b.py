
# This is a random torch model generated by the following modules: ['ELU', 'AvgPool3d', 'GRU', 'RNNCellBase', 'PairwiseDistance', 'Dropout3d', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.rnn_cell = nn.RNNCell(input_size=256, hidden_size=128)
        self.pairwise_distance = nn.PairwiseDistance()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, depth, height, width)
        x = self.elu1(x)  # Apply ELU activation
        x = self.avg_pool3d(x)  # Apply 3D average pooling
        x = self.dropout3d(x)  # Apply 3D dropout
        
        # Reshape for GRU: (batch_size, seq_len, features)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, depth, -1)  # Flatten spatial dimensions
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply RNNCell to each time step
        hx = torch.zeros(batch_size, 128).to(x.device)
        for t in range(x.size(1)):
            hx = self.rnn_cell(x[:, t, :], hx)
        
        # Compute pairwise distance between the last hidden state and itself
        x = self.pairwise_distance(hx, hx)
        
        # Reshape and apply log softmax
        x = x.unsqueeze(1)  # Add a dimension for log softmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

