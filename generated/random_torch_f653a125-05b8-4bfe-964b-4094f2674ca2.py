
# This is a random torch model generated by the following modules: ['CircularPad2d', 'GELU', 'AdaptiveAvgPool2d', 'AvgPool1d', 'LPPool2d', 'Module', 'AdaptiveLogSoftmaxWithLoss', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.gelu = nn.GELU()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=50, n_classes=10, cutoffs=[5])

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool1d(x)
        
        # Reshape back for LPPool2d
        x = x.view(x.size(0), x.size(1), 5, 5)  # Reshape to 2D
        x = self.lp_pool2d(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

