
# This is a random torch model generated by the following modules: ['MaxPool3d', 'LayerNorm', 'HingeEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.maxpool2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.layernorm1 = nn.LayerNorm([32, 32, 32])
        self.layernorm2 = nn.LayerNorm([16, 16, 16])
        self.loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply first MaxPool3d
        x = self.maxpool1(x)
        
        # Apply first LayerNorm
        x = self.layernorm1(x)
        
        # Apply second MaxPool3d
        x = self.maxpool2(x)
        
        # Apply second LayerNorm
        x = self.layernorm2(x)
        
        # Flatten the output for the loss function
        x = x.view(x.size(0), -1)
        
        # Create a dummy target for the loss function
        target = torch.ones(x.size(0), dtype=torch.float32, device=x.device)
        
        # Compute the HingeEmbeddingLoss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
