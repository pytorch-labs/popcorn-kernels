
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'FractionalMaxPool3d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.pool1 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(1, 1, 1))
        self.pool2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(1, 1, 1))
        self.loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Add an extra dimension to make it 5D for FractionalMaxPool3d
        x = x.unsqueeze(2)  # Shape: (batch_size, channels, 1, height, width)
        
        # Apply LazyBatchNorm2d and FractionalMaxPool3d
        x = self.bn1(x)
        x = self.pool1(x)
        x = self.bn2(x)
        x = self.pool2(x)
        
        # Flatten the output for BCELoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = torch.sigmoid(x)  # Apply sigmoid to get values between 0 and 1
        
        # Assuming target is a binary tensor of the same shape as x
        target = torch.randint(0, 2, x.shape).float().to(x.device)
        
        # Compute BCELoss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 height and width
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

