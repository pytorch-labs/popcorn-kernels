
# This is a random torch model generated by the following modules: ['LazyConv1d', 'ZeroPad3d', 'L1Loss', 'PoissonNLLLoss', 'PReLU', 'SmoothL1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.pad1 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.prelu1 = nn.PReLU()
        self.conv2 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.pad2 = nn.ZeroPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.prelu2 = nn.PReLU()
        self.l1_loss = nn.L1Loss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Apply first convolution and padding
        x = self.conv1(x)
        x = self.pad1(x)
        x = self.prelu1(x)
        
        # Apply second convolution and padding
        x = self.conv2(x)
        x = self.pad2(x)
        x = self.prelu2(x)
        
        # Compute losses (for demonstration purposes, we use dummy targets)
        target_l1 = torch.zeros_like(x)
        target_poisson = torch.ones_like(x)
        target_smooth_l1 = torch.zeros_like(x)
        
        l1_loss = self.l1_loss(x, target_l1)
        poisson_nll_loss = self.poisson_nll_loss(x, target_poisson)
        smooth_l1_loss = self.smooth_l1_loss(x, target_smooth_l1)
        
        # Return the sum of the losses as the output
        return l1_loss + poisson_nll_loss + smooth_l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

