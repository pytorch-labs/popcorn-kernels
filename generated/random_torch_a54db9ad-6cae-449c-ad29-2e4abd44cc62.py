
# This is a random torch model generated by the following modules: ['RNNBase', 'LazyConvTranspose2d', 'LSTMCell', 'CELU', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn = nn.RNNBase(input_size=128, hidden_size=256, num_layers=2, nonlinearity='tanh')
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.lstm_cell1 = nn.LSTMCell(input_size=256, hidden_size=128)
        self.lstm_cell2 = nn.LSTMCell(input_size=128, hidden_size=64)
        self.celu = nn.CELU(alpha=1.0)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, _ = x.size()
        
        # RNNBase
        x, _ = self.rnn(x)  # Output shape: (batch_size, seq_len, hidden_size)
        
        # Reshape for ConvTranspose2d
        x = x.view(batch_size, seq_len, 16, 16)  # Reshape to (batch_size, seq_len, 16, 16)
        
        # LazyConvTranspose2d
        x = self.conv_transpose1(x)  # Output shape: (batch_size, seq_len, 32, 32)
        x = self.conv_transpose2(x)  # Output shape: (batch_size, seq_len, 64, 64)
        
        # Reshape for LSTMCell
        x = x.view(batch_size, seq_len, -1)  # Reshape to (batch_size, seq_len, 64*64)
        
        # LSTMCell
        hx = torch.zeros(batch_size, 128).to(x.device)
        cx = torch.zeros(batch_size, 128).to(x.device)
        for t in range(seq_len):
            hx, cx = self.lstm_cell1(x[:, t, :], (hx, cx))
        hx = torch.zeros(batch_size, 64).to(x.device)
        cx = torch.zeros(batch_size, 64).to(x.device)
        for t in range(seq_len):
            hx, cx = self.lstm_cell2(x[:, t, :], (hx, cx))
        
        # CELU
        x = self.celu(hx)  # Output shape: (batch_size, 64)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(batch_size, 1, 8, 8, 8)  # Reshape to (batch_size, 1, 8, 8, 8)
        
        # FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)  # Output shape: (batch_size, 1, 8, 8, 8)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

