
# This is a random torch model generated by the following modules: ['KLDivLoss', 'BatchNorm1d', 'SyncBatchNorm', 'Softshrink', 'CosineEmbeddingLoss', 'LazyBatchNorm3d', 'MaxUnpool2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1d = nn.BatchNorm1d(128)
        self.sync_bn = nn.SyncBatchNorm(128)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.bn3d = nn.BatchNorm3d(64)
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.bn1d(x)
        x = self.sync_bn(x)
        x = self.softshrink(x)
        
        # Reshape to 3D for LazyBatchNorm3d
        x = x.view(x.size(0), -1, 1, 1, 1)
        x = self.lazy_bn3d(x)
        
        # Reshape to 2D for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), 1, 1)
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        # Reshape to 3D for BatchNorm3d
        x = x.view(x.size(0), x.size(1), 1, 1, 1)
        x = self.bn3d(x)
        
        # Compute KLDivLoss and CosineEmbeddingLoss
        target = torch.randn_like(x)
        kld_loss = self.kldivloss(F.log_softmax(x, dim=1), F.softmax(target, dim=1))
        
        input1 = torch.randn_like(x)
        input2 = torch.randn_like(x)
        target_cosine = torch.ones(x.size(0))
        cosine_loss = self.cosine_loss(input1, input2, target_cosine)
        
        return x, kld_loss, cosine_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
