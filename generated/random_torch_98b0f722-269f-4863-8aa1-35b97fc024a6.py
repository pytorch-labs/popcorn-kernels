
# This is a random torch model generated by the following modules: ['Unflatten', 'Softmax', 'LazyInstanceNorm2d', 'Sigmoid', 'AdaptiveAvgPool3d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 1))  # Unflatten to 3D shape
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.celu = nn.CELU()
        self.sigmoid = nn.Sigmoid()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Unflatten the input to 3D shape
        x = self.unflatten(x)
        
        # Apply LazyInstanceNorm2d (requires 4D input)
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.lazy_instance_norm(x)
        x = x.squeeze(1)  # Remove channel dimension
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Apply Softmax
        x = x.view(x.size(0), -1)  # Flatten for Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
