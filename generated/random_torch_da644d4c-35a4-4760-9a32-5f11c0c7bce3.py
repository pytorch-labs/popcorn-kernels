
# This is a random torch model generated by the following modules: ['CircularPad2d', 'Hardswish', 'GroupNorm', 'AvgPool1d', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(2)
        self.hardswish = nn.Hardswish()
        self.group_norm = nn.GroupNorm(2, 10)  # Assuming 10 channels for GroupNorm
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for GroupNorm (assuming input is 4D: [batch, channels, height, width])
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width for GroupNorm
        x = self.group_norm(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back
        
        # Reshape for AvgPool1d (assuming input is 4D: [batch, channels, height, width])
        x = x.view(batch_size, channels, -1)  # Flatten height and width for AvgPool1d
        x = self.avg_pool(x)
        
        # Reshape for Softmax (assuming input is 3D: [batch, channels, flattened_dim])
        x = x.view(batch_size, channels, -1)  # Flatten the last dimension
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
