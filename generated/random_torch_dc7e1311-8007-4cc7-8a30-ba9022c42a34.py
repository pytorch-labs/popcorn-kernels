
# This is a random torch model generated by the following modules: ['Unflatten', 'AdaptiveAvgPool1d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 64, 64))  # Unflatten to 3D shape (batch, channel, height, width)
        self.batchnorm3d = nn.BatchNorm3d(1)  # BatchNorm3d for 5D input (batch, channel, depth, height, width)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)  # AdaptiveAvgPool1d for 3D input (batch, channel, length)

    def forward(self, x):
        # Assume input x is of arbitrary shape, reshape it to a 2D tensor (batch, -1)
        batch_size = x.shape[0]
        x = x.view(batch_size, -1)
        
        # Unflatten to 3D shape (batch, channel, height, width)
        x = self.unflatten(x)
        
        # Add a dummy dimension to make it 5D for BatchNorm3d
        x = x.unsqueeze(2)  # Shape: (batch, channel, depth=1, height, width)
        
        # Apply BatchNorm3d
        x = self.batchnorm3d(x)
        
        # Remove the dummy dimension to make it 4D again
        x = x.squeeze(2)  # Shape: (batch, channel, height, width)
        
        # Reshape to 3D for AdaptiveAvgPool1d (batch, channel, height*width)
        x = x.view(batch_size, x.shape[1], -1)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        
        # Flatten the output to 2D (batch, -1)
        x = x.view(batch_size, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Arbitrary input shape (batch, 128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
