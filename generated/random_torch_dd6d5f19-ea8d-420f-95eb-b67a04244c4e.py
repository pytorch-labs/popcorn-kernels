
# This is a random torch model generated by the following modules: ['GRU', 'LazyConv1d', 'Transformer', 'LazyInstanceNorm3d', 'RReLU', 'SoftMarginLoss', 'RMSNorm', 'BatchNorm1d', 'Threshold', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.rrelu = nn.RReLU()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.rms_norm = nn.LayerNorm(64)
        self.batch_norm1d = nn.BatchNorm1d(64)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.instance_norm2d = nn.InstanceNorm2d(64)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        x, _ = self.gru(x)  # Output shape: (batch_size, sequence_length, hidden_size)
        
        # Reshape for Conv1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size, sequence_length)
        x = self.lazy_conv1d(x)  # Output shape: (batch_size, out_channels, sequence_length)
        
        # Reshape for Transformer
        x = x.permute(2, 0, 1)  # Shape: (sequence_length, batch_size, out_channels)
        x = self.transformer(x, x)  # Output shape: (sequence_length, batch_size, out_channels)
        
        # Reshape for LazyInstanceNorm3d
        x = x.permute(1, 2, 0)  # Shape: (batch_size, out_channels, sequence_length)
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, out_channels, 1, 1, sequence_length)
        x = self.lazy_instance_norm3d(x)  # Output shape: (batch_size, out_channels, 1, 1, sequence_length)
        
        # Reshape for RReLU
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, out_channels, sequence_length)
        x = self.rrelu(x)  # Output shape: (batch_size, out_channels, sequence_length)
        
        # Reshape for RMSNorm
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length, out_channels)
        x = self.rms_norm(x)  # Output shape: (batch_size, sequence_length, out_channels)
        
        # Reshape for BatchNorm1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, out_channels, sequence_length)
        x = self.batch_norm1d(x)  # Output shape: (batch_size, out_channels, sequence_length)
        
        # Reshape for Threshold
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length, out_channels)
        x = self.threshold(x)  # Output shape: (batch_size, sequence_length, out_channels)
        
        # Reshape for InstanceNorm2d
        x = x.unsqueeze(2)  # Shape: (batch_size, sequence_length, 1, out_channels)
        x = self.instance_norm2d(x)  # Output shape: (batch_size, sequence_length, 1, out_channels)
        
        # Final output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100, 128).cuda()  # Example input shape: (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

