
# This is a random torch model generated by the following modules: ['Linear', 'AvgPool3d', 'UpsamplingBilinear2d', 'InstanceNorm1d', 'LSTMCell', 'EmbeddingBag', 'RNNCellBase', 'LPPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.linear1 = nn.Linear(64, 128)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.instance_norm1d = nn.InstanceNorm1d(128)
        self.lstm_cell = nn.LSTMCell(128, 256)
        self.rnn_cell_base = nn.RNNCellBase(256, 128)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.linear2 = nn.Linear(128, 10)

    def forward(self, x):
        # Assume x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = self.linear1(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        x = self.avg_pool3d(x)
        x = x.squeeze(0).squeeze(0)  # Remove batch and channel dimensions
        
        # Reshape for 1D operations
        x = x.unsqueeze(0)  # Add batch dimension
        x = self.instance_norm1d(x)
        x = x.squeeze(0)  # Remove batch dimension
        
        # LSTM and RNN operations
        hx = torch.zeros(256)
        cx = torch.zeros(256)
        x = self.lstm_cell(x, (hx, cx))[0]
        x = self.rnn_cell_base(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        x = self.lp_pool3d(x)
        x = x.squeeze(0).squeeze(0)  # Remove batch and channel dimensions
        
        # Reshape for 2D operations
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        x = self.upsampling_bilinear2d(x)
        x = x.squeeze(0).squeeze(0)  # Remove batch and channel dimensions
        
        # Final linear layer
        x = self.linear2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

