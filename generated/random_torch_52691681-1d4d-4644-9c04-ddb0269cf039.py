
# This is a random torch model generated by the following modules: ['LPPool3d', 'Softsign', 'Embedding', 'NLLLoss2d', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)  # LPPool3d layer
        self.mish = nn.Mish()  # Mish activation
        self.softsign = nn.Softsign()  # Softsign activation
        self.nllloss2d = nn.NLLLoss2d()  # NLLLoss2d layer (used in forward)

    def forward(self, x):
        # Assume input is a 3D tensor of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Embedding: (batch_size, sequence_length) -> (batch_size, sequence_length, 128)
        x = x.unsqueeze(1)  # Add a channel dimension: (batch_size, 1, sequence_length, 128)
        x = x.unsqueeze(-1)  # Add a depth dimension: (batch_size, 1, sequence_length, 128, 1)
        x = self.lppool3d(x)  # LPPool3d: (batch_size, 1, sequence_length, 128, 1) -> (batch_size, 1, pooled_seq_len, pooled_feat_len, 1)
        x = x.squeeze(-1).squeeze(1)  # Remove depth and channel dimensions: (batch_size, pooled_seq_len, pooled_feat_len)
        x = self.mish(x)  # Mish activation
        x = self.softsign(x)  # Softsign activation
        # For NLLLoss2d, we need a target tensor of the same spatial dimensions
        target = torch.randint(0, 10, (x.size(0), x.size(1), x.size(2)))  # Random target tensor
        loss = self.nllloss2d(x, target)  # NLLLoss2d
        return loss


def get_inputs():
    # Randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20))  # (batch_size, sequence_length)
    return [x]


def get_init_inputs():
    # Randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage
if __name__ == "__main__":
    model = Model()
    inputs = get_inputs()
    output = model(*inputs)
    print(output)
