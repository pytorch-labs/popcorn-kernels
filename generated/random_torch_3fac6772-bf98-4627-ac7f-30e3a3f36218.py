
# This is a random torch model generated by the following modules: ['Hardshrink', 'Embedding', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming a vocabulary size of 1000
        self.avgpool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.hardshrink = nn.Hardshrink()

    def forward(self, x):
        # Assuming input x is a tensor of integers (indices for embedding)
        x = self.embedding(x)  # Shape: (batch_size, seq_len, embedding_dim)
        
        # Reshape to add a channel dimension for AvgPool2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, seq_len, embedding_dim)
        
        # Apply AvgPool2d
        x = self.avgpool(x)  # Shape: (batch_size, 1, seq_len//2, embedding_dim//2)
        
        # Reshape back to remove the channel dimension
        x = x.squeeze(1)  # Shape: (batch_size, seq_len//2, embedding_dim//2)
        
        # Apply Hardshrink
        x = self.hardshrink(x)  # Shape: (batch_size, seq_len//2, embedding_dim//2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 32)).cuda()  # Example input: (batch_size=1, seq_len=32)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

