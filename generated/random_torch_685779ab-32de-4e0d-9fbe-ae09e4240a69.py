
# This is a random torch model generated by the following modules: ['MultiLabelMarginLoss', 'AdaptiveAvgPool2d', 'Unflatten', 'CELU', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.unflatten = nn.Unflatten(1, (1, 5, 5))
        self.instance_norm = nn.InstanceNorm3d(1)
        self.celu = nn.CELU()
        self.loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply AdaptiveAvgPool2d to reduce spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Unflatten the tensor to add a new dimension
        x = self.unflatten(x)
        
        # Apply InstanceNorm3d to normalize the tensor
        x = self.instance_norm(x)
        
        # Apply CELU activation function
        x = self.celu(x)
        
        # Reshape the tensor to match the expected input shape for MultiLabelMarginLoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for MultiLabelMarginLoss (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.long)
        
        # Compute the loss (note: this is not typical in a forward pass, but included as per the module list)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
