
# This is a random torch model generated by the following modules: ['LPPool1d', 'LPPool2d', 'ModuleList', 'AdaptiveMaxPool2d', 'LazyConvTranspose3d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=3, stride=2)
        self.module_list = nn.ModuleList([
            nn.AdaptiveMaxPool2d((5, 5)),
            nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2),
            nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2),
            nn.AdaptiveLogSoftmaxWithLoss(in_features=32, n_classes=10)
        ])
        
    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lp_pool2d(x)  # Apply LPPool2d
        x = self.module_list[0](x)  # Apply AdaptiveMaxPool2d
        
        # Reshape for LPPool1d (assuming we need to reduce the spatial dimensions)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.lp_pool1d(x)  # Apply LPPool1d
        
        # Reshape back to 5D for ConvTranspose3d
        x = x.view(x.size(0), x.size(1), 1, x.size(2), 1)  # Add dummy dimensions
        x = self.module_list[1](x)  # Apply first LazyConvTranspose3d
        x = self.module_list[2](x)  # Apply second LazyConvTranspose3d
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), x.size(1), -1).mean(dim=2)  # Global average pooling
        x = self.module_list[3](x)  # Apply AdaptiveLogSoftmaxWithLoss
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

