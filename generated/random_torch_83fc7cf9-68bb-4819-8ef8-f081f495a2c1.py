
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'Hardswish', 'ModuleList', 'LPPool3d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.hardswish = nn.Hardswish()
        self.module_list = nn.ModuleList([
            nn.LPPool3d(norm_type=2, kernel_size=3, stride=2),
            nn.LPPool3d(norm_type=2, kernel_size=3, stride=2),
            nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        ])
        self.dropout3d = nn.Dropout3d(p=0.5)

    def forward(self, x):
        x = self.adaptive_avg_pool3d(x)
        x = self.hardswish(x)
        for layer in self.module_list:
            x = layer(x)
        x = self.dropout3d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
