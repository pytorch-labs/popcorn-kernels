
# This is a random torch model generated by the following modules: ['LogSigmoid', 'AdaptiveMaxPool1d', 'BCELoss', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.log_sigmoid = nn.LogSigmoid()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        x = self.adaptive_max_pool(x)
        x = self.log_sigmoid(x)
        
        # For BCELoss, we need a target tensor of the same shape as the output
        # Here, we create a dummy target tensor for demonstration purposes
        target = torch.zeros_like(x)
        loss = self.bce_loss(x, target)
        
        # Return the loss as part of the output for demonstration purposes
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size=1, channels=1, sequence_length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

