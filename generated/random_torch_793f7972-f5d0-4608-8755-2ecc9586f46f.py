
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'CosineSimilarity', 'LazyLinear', 'InstanceNorm3d', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.instance_norm = nn.InstanceNorm3d(num_features=3)
        self.batch_norm = nn.BatchNorm1d(num_features=128)
        self.lazy_linear1 = nn.LazyLinear(out_features=128)
        self.lazy_linear2 = nn.LazyLinear(out_features=64)
        self.cosine_sim = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape for InstanceNorm3d
        x = x.unsqueeze(0)  # Add batch dimension
        x = x.unsqueeze(0)  # Add channel dimension
        x = self.instance_norm(x)
        
        # Reshape back for BatchNorm1d
        x = x.squeeze(0).squeeze(0)
        x = x.view(x.size(0), -1)  # Flatten
        x = self.batch_norm(x)
        
        # Apply LazyLinear layers
        x = F.relu(self.lazy_linear1(x))
        x = F.relu(self.lazy_linear2(x))
        
        # Apply CosineSimilarity
        x = self.cosine_sim(x, x)  # Compare with itself for simplicity
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

