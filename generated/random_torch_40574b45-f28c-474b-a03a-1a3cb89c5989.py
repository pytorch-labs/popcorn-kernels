
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'NLLLoss', 'Conv3d', 'AdaptiveAvgPool1d', 'ReplicationPad3d', 'LPPool3d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d_1(x)
        
        # Apply ReplicationPad3d
        x = self.replication_pad3d(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lazy_instance_norm1d(x)
        x = x.view(x.size(0), 10, 5, 5, 5)  # Reshape back to 3D
        
        # Apply LPPool3d
        x = self.lp_pool3d(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Apply Conv3d again
        x = self.conv3d_2(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for NLLLoss (assuming target is provided externally)
        x = x.view(x.size(0), -1)
        
        # Apply log_softmax for NLLLoss
        x = F.log_softmax(x, dim=1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
