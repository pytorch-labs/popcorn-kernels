
# This is a random torch model generated by the following modules: ['LayerNorm', 'FractionalMaxPool2d', 'Bilinear', 'Tanh', 'ParameterDict', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.layer_norm = nn.LayerNorm(10)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))
        self.bilinear = nn.Bilinear(10, 10, 20)
        self.tanh = nn.Tanh()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(20, 10)),
            'param2': nn.Parameter(torch.randn(10, 5))
        })

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 10, length - kernel_size + 1)
        x = self.layer_norm(x.permute(0, 2, 1)).permute(0, 2, 1)  # Apply LayerNorm on the channel dimension
        
        # Reshape for FractionalMaxPool2d
        x = x.unsqueeze(2)  # Shape: (batch_size, 10, 1, length - kernel_size + 1)
        x = self.fractional_max_pool(x)  # Shape: (batch_size, 10, 5, 5)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 10, 25)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 25, 10)
        x = self.bilinear(x, x)  # Shape: (batch_size, 25, 20)
        
        # Apply Tanh
        x = self.tanh(x)  # Shape: (batch_size, 25, 20)
        
        # Use ParameterDict
        x = torch.matmul(x, self.parameter_dict['param1'])  # Shape: (batch_size, 25, 10)
        x = torch.matmul(x, self.parameter_dict['param2'])  # Shape: (batch_size, 25, 5)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

