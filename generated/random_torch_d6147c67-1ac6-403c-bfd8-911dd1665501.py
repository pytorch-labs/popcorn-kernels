
# This is a random torch model generated by the following modules: ['Dropout2d', 'SiLU', 'Softsign']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.silu1 = nn.SiLU()
        self.silu2 = nn.SiLU()
        self.softsign1 = nn.Softsign()
        self.softsign2 = nn.Softsign()

    def forward(self, x):
        # Apply Dropout2d
        x = self.dropout1(x)
        
        # Apply SiLU activation
        x = self.silu1(x)
        
        # Apply Softsign activation
        x = self.softsign1(x)
        
        # Apply Dropout2d again
        x = self.dropout2(x)
        
        # Apply SiLU activation again
        x = self.silu2(x)
        
        # Apply Softsign activation again
        x = self.softsign2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
