
# This is a random torch model generated by the following modules: ['RNNCell', 'Dropout1d', 'ParameterList', 'LogSigmoid', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell1 = nn.RNNCell(input_size=128, hidden_size=256)
        self.rnn_cell2 = nn.RNNCell(input_size=256, hidden_size=128)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(128)) for _ in range(5)])
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Reshape input to fit RNNCell
        x = x.view(-1, input_size)
        
        # Initialize hidden states
        h1 = torch.zeros(batch_size * sequence_length, 256).to(x.device)
        h2 = torch.zeros(batch_size * sequence_length, 128).to(x.device)
        
        # Apply RNNCell
        h1 = self.rnn_cell1(x, h1)
        h2 = self.rnn_cell2(h1, h2)
        
        # Reshape back to (batch_size, sequence_length, hidden_size)
        h2 = h2.view(batch_size, sequence_length, -1)
        
        # Apply Dropout1d
        h2 = self.dropout1d(h2)
        
        # Apply ParameterList
        for param in self.parameter_list:
            h2 = h2 + param.unsqueeze(0).unsqueeze(0)
        
        # Reshape for MaxPool2d
        h2 = h2.unsqueeze(1)  # Add channel dimension
        h2 = self.max_pool2d(h2)
        
        # Reshape back to (batch_size, sequence_length, hidden_size)
        h2 = h2.squeeze(1)
        
        # Apply LogSigmoid
        output = self.log_sigmoid(h2)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

