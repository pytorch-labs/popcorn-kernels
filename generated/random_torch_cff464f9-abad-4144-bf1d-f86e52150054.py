
# This is a random torch model generated by the following modules: ['Sigmoid', 'Module', 'Fold', 'AdaptiveAvgPool2d', 'AvgPool3d', 'Conv3d', 'TransformerDecoder', 'LayerNorm', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=10, nhead=2), num_layers=2
        )
        self.layer_norm = nn.LayerNorm(10)
        self.sequential = nn.Sequential(
            nn.Linear(100, 50),
            nn.Sigmoid(),
            nn.Linear(50, 10),
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv3d(x)  # Apply Conv3d
        x = self.avg_pool3d(x)  # Apply AvgPool3d
        
        # Reshape to 2D for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten depth and height
        x = self.adaptive_avg_pool2d(x)  # Apply AdaptiveAvgPool2d
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1)  # Flatten to (batch_size, features, 1)
        x = self.fold(x)  # Apply Fold
        
        # Reshape for TransformerDecoder
        x = x.view(x.size(0), x.size(1), -1)  # (batch_size, seq_len, features)
        x = x.permute(1, 0, 2)  # Transformer expects (seq_len, batch_size, features)
        x = self.transformer_decoder(x, x)  # Apply TransformerDecoder
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, features)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Flatten for Sequential
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.sequential(x)  # Apply Sequential
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 20, 20).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

