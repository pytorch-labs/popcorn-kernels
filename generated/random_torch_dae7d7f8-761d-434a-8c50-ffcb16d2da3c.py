
# This is a random torch model generated by the following modules: ['MaxPool2d', 'GLU', 'LazyLinear', 'AdaptiveAvgPool1d', 'LazyBatchNorm1d', 'RNNBase', 'Unfold', 'LazyConv2d', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.unfold = nn.Unfold(kernel_size=3, stride=1)
        self.glu = nn.GLU(dim=1)
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.batchnorm = nn.LazyBatchNorm1d()
        self.adaptiveavgpool = nn.AdaptiveAvgPool1d(output_size=64)
        self.fc1 = nn.LazyLinear(out_features=256)
        self.fc2 = nn.LazyLinear(out_features=10)

    def forward(self, x):
        x = self.pad(x)
        x = F.relu(self.conv1(x))
        x = self.maxpool1(x)
        x = F.relu(self.conv2(x))
        x = self.maxpool2(x)
        x = self.unfold(x)
        x = x.permute(0, 2, 1)  # Reshape for GLU
        x = self.glu(x)
        x, _ = self.rnn(x)
        x = x.permute(0, 2, 1)  # Reshape for BatchNorm
        x = self.batchnorm(x)
        x = self.adaptiveavgpool(x)
        x = x.reshape(x.size(0), -1)  # Flatten for Linear
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

