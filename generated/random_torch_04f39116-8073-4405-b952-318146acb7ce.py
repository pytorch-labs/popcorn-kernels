
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'ReplicationPad1d', 'Softshrink', 'LazyConvTranspose2d', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=20, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.replication_pad1d_2 = nn.ReplicationPad1d(2)
        self.adaptive_max_pool1d_2 = nn.AdaptiveMaxPool1d(output_size=10)
        self.softshrink_2 = nn.Softshrink(lambd=0.5)
        self.lazy_conv_transpose2d_2 = nn.LazyConvTranspose2d(out_channels=30, kernel_size=3)

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d(x)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), 10, 10)
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape back to 3D for Conv3d
        x = x.view(x.size(0), x.size(1), 10, 10, 10)
        x = self.conv3d_2(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d_2(x)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d_2(x)
        
        # Apply Softshrink
        x = self.softshrink_2(x)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), 10, 10)
        x = self.lazy_conv_transpose2d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
