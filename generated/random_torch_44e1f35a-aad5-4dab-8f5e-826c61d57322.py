
# This is a random torch model generated by the following modules: ['HuberLoss', 'LazyBatchNorm2d', 'HingeEmbeddingLoss', 'ConvTranspose2d', 'RReLU', 'Upsample', 'Conv1d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn1 = nn.LazyBatchNorm2d()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.rrelu1 = nn.RReLU()
        self.upsample1 = nn.Upsample(scale_factor=2)
        self.conv1d1 = nn.Conv1d(10, 20, kernel_size=5)
        self.bn2d1 = nn.BatchNorm2d(20)
        self.lazy_bn2 = nn.LazyBatchNorm2d()
        self.conv_transpose2 = nn.ConvTranspose2d(20, 30, kernel_size=5)
        self.rrelu2 = nn.RReLU()
        self.upsample2 = nn.Upsample(scale_factor=2)
        self.conv1d2 = nn.Conv1d(30, 40, kernel_size=5)
        self.bn2d2 = nn.BatchNorm2d(40)
        self.huber_loss = nn.HuberLoss()
        self.hinge_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.lazy_bn1(x)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Apply RReLU
        x = self.rrelu1(x)
        
        # Apply Upsample
        x = self.upsample1(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply Conv1d
        x = self.conv1d1(x)
        
        # Reshape back to 4D for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        
        # Apply BatchNorm2d
        x = self.bn2d1(x)
        
        # Apply LazyBatchNorm2d again
        x = self.lazy_bn2(x)
        
        # Apply ConvTranspose2d again
        x = self.conv_transpose2(x)
        
        # Apply RReLU again
        x = self.rrelu2(x)
        
        # Apply Upsample again
        x = self.upsample2(x)
        
        # Reshape for Conv1d again
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply Conv1d again
        x = self.conv1d2(x)
        
        # Reshape back to 4D for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        
        # Apply BatchNorm2d again
        x = self.bn2d2(x)
        
        # Compute HuberLoss (dummy target)
        target = torch.zeros_like(x)
        huber_loss = self.huber_loss(x, target)
        
        # Compute HingeEmbeddingLoss (dummy target)
        hinge_target = torch.ones(x.size(0))
        hinge_loss = self.hinge_loss(x.view(x.size(0), -1).mean(dim=1), hinge_target)
        
        # Return both losses for demonstration purposes
        return huber_loss, hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
