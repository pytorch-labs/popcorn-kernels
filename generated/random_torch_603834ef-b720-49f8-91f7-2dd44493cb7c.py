
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'Unfold', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.pad = nn.ConstantPad2d(2, 3.0)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        # Apply BatchNorm3d
        x = self.bn1(x)
        
        # Reshape to 4D (batch, channels, height, width) for Unfold and ConstantPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        # Apply ConstantPad2d
        x = self.pad(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape back to 5D for the second BatchNorm3d
        x = x.view(x.size(0), 20, -1, x.size(2), x.size(3))
        
        # Apply the second BatchNorm3d
        x = self.bn2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

