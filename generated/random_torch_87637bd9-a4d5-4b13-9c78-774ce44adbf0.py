
# This is a random torch model generated by the following modules: ['SELU', 'Fold', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu1 = nn.SELU()
        self.selu2 = nn.SELU()
        self.selu3 = nn.SELU()
        self.fold1 = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.fold2 = nn.Fold(output_size=(4, 4), kernel_size=(2, 2))
        self.dropout3d1 = nn.Dropout3d(p=0.5)
        self.dropout3d2 = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Apply SELU activation
        x = self.selu1(x)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout3d1(x)
        x = x.squeeze(1)  # Remove the channel dimension
        
        # Apply SELU activation
        x = self.selu2(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 4)  # Reshape to (batch_size, channels * kernel_size[0] * kernel_size[1], L)
        x = self.fold1(x)
        
        # Apply SELU activation
        x = self.selu3(x)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout3d2(x)
        x = x.squeeze(1)  # Remove the channel dimension
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 4)  # Reshape to (batch_size, channels * kernel_size[0] * kernel_size[1], L)
        x = self.fold2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 16).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

