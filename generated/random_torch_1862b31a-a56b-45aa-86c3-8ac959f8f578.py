
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'Dropout1d', 'FeatureAlphaDropout', 'ConstantPad1d', 'MaxPool1d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm3d = nn.InstanceNorm3d(10)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.constant_pad1d = nn.ConstantPad1d(2, 0)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2)
        self.constant_pad3d = nn.ConstantPad3d(1, 0)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.instance_norm3d(x)
        
        # Reshape to 3D (batch, channels, depth*height*width)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        
        x = self.dropout1d(x)
        x = self.feature_alpha_dropout(x)
        x = self.constant_pad1d(x)
        x = self.max_pool1d(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height, width)
        
        x = self.constant_pad3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
