
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ReLU', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fc1 = nn.Linear(10, 20)
        self.fc2 = nn.Linear(20, 30)
        self.fc3 = nn.Linear(30, 40)
        self.fc4 = nn.Linear(40, 20)
        self.fc5 = nn.Linear(20, 10)

    def forward(self, x):
        x = x.view(-1, 10)  # Reshape input to match the first layer
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = F.relu(self.fc4(x))
        x = self.fc5(x)  # Final layer, without activation
        return F.log_softmax(x, dim=1)


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()  # Example input shape
    return [x]

