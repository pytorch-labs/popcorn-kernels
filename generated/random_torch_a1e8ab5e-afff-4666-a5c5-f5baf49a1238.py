
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'FractionalMaxPool3d', 'Fold', 'LPPool3d', 'AdaptiveLogSoftmaxWithLoss', 'GroupNorm', 'AdaptiveAvgPool2d', 'LayerNorm', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn = nn.SyncBatchNorm(10)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=100, n_classes=10, cutoffs=[5])
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=10)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        self.layer_norm = nn.LayerNorm([10, 10])
        self.module_list = nn.ModuleList([
            nn.Conv2d(1, 10, kernel_size=3),
            nn.Conv2d(10, 20, kernel_size=3),
            nn.Linear(320, 50),
            nn.Linear(50, 10)
        ])

    def forward(self, x):
        # Apply SyncBatchNorm
        x = self.sync_bn(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(-1, 10, 10, 10, 10)
        x = self.fractional_max_pool3d(x)
        
        # Reshape for Fold
        x = x.view(-1, 100)
        x = self.fold(x)
        
        # Reshape for LPPool3d
        x = x.view(-1, 10, 10, 10)
        x = self.lp_pool3d(x)
        
        # Reshape for GroupNorm
        x = x.view(-1, 10, 10, 10)
        x = self.group_norm(x)
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(-1, 10, 10, 10)
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape for LayerNorm
        x = x.view(-1, 10, 10)
        x = self.layer_norm(x)
        
        # Apply ModuleList layers
        for i, layer in enumerate(self.module_list):
            if isinstance(layer, nn.Conv2d):
                x = F.relu(layer(x))
            elif isinstance(layer, nn.Linear):
                x = x.view(-1, 320) if i == 2 else x
                x = F.relu(layer(x))
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = x.view(-1, 100)
        x = self.adaptive_log_softmax(x, torch.tensor([0]))[0]
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

