
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'Sequential', 'ConvTranspose2d', 'FeatureAlphaDropout', 'AdaptiveAvgPool3d', 'LazyConv3d', 'CircularPad1d', 'Dropout2d', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.sequential = nn.Sequential(
            nn.LazyConv3d(out_channels=16, kernel_size=3),
            nn.FeatureAlphaDropout(p=0.5),
            nn.ConvTranspose2d(in_channels=16, out_channels=8, kernel_size=3, stride=2),
            nn.Dropout2d(p=0.5)
        )
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d(output_size=(8, 8, 8))
        self.circular_pad1d = nn.CircularPad1d(padding=2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for Sequential module
        x = x.view(-1, 16, 32, 32)  # Assuming input shape is adjusted to fit the Sequential module
        
        # Apply Sequential module
        x = self.sequential(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(-1, 16, 8, 8, 8)  # Adjusting shape for 3D pooling
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for CircularPad1d
        x = x.view(-1, 16, 8)  # Adjusting shape for 1D padding
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Reshape for GaussianNLLLoss
        x = x.view(-1, 16)  # Adjusting shape for loss calculation
        
        # Assuming target and var are provided for GaussianNLLLoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

