
# This is a random torch model generated by the following modules: ['Linear', 'LogSoftmax', 'Conv2d', 'ReLU', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3)
        self.fc1 = nn.Linear(32 * 6 * 6, 128)  # Assuming input is 32x32
        self.fc2 = nn.Linear(128, 10)  # 10 classes for output

    def forward(self, x):
        # Check input shape for flexibility
        x = self.relu(self.pool(self.conv1(x)))  # Conv + ReLU + MaxPool
        x = self.relu(self.pool(self.conv2(x)))  # Conv + ReLU + MaxPool
        x = x.view(x.size(0), -1)  # Flatten
        x = self.relu(self.fc1(x))  # Fully connected + ReLU
        x = self.fc2(x)  # Fully connected
        return F.log_softmax(x, dim=1)  # LogSoftmax output


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32)  # Example input shape
    return [x]
