
# This is a random torch model generated by the following modules: ['GRUCell', 'AdaptiveAvgPool3d', 'ConvTranspose3d', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=64, hidden_size=128)
        self.gru_cell2 = nn.GRUCell(input_size=128, hidden_size=256)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.conv_transpose3d1 = nn.ConvTranspose3d(in_channels=256, out_channels=128, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d2 = nn.ConvTranspose3d(in_channels=128, out_channels=64, kernel_size=3, stride=2, padding=1)
        self.fold = nn.Fold(output_size=(32, 32), kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 128).to(x.device)
        h2 = torch.zeros(batch_size, 256).to(x.device)
        
        # Process sequence with GRUCell
        for t in range(sequence_length):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape for 3D operations
        x = h2.view(batch_size, 256, 1, 1, 1)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d1(x)
        x = self.conv_transpose3d2(x)
        
        # Reshape for Fold operation
        x = x.view(batch_size, -1, 1)
        
        # Apply Fold
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

