
# This is a random torch model generated by the following modules: ['NLLLoss', 'Softmax2d', 'SyncBatchNorm', 'InstanceNorm1d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn = nn.SyncBatchNorm(10)
        self.instance_norm = nn.InstanceNorm1d(10)
        self.frac_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softmax = nn.Softmax2d()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.sync_bn(x)
        x = self.frac_max_pool(x)
        x = self.softmax(x)
        
        # Reshape for InstanceNorm1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = self.instance_norm(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back
        
        # Compute NLLLoss (requires log probabilities and target)
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, channels, (batch_size, height, width), device=x.device)
        x = torch.log(x + 1e-10)  # Log probabilities for NLLLoss
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
