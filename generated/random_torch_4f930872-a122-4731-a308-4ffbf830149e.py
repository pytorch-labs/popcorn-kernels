
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'Sequential', 'FractionalMaxPool3d', 'AdaptiveAvgPool1d', 'SELU', 'ZeroPad2d', 'ConstantPad2d', 'MaxUnpool2d', 'Unfold', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.sequential = nn.Sequential(
            nn.ZeroPad2d(1),
            nn.ConstantPad2d(1, 2.0),
            nn.SELU()
        )
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(10)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply Sequential with ZeroPad2d, ConstantPad2d, and SELU
        x = self.sequential(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.fractional_max_pool(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool(x)
        
        # Reshape for Unfold
        x = x.view(x.size(0), 1, 10, 10)  # Reshape to 2D
        x = self.unfold(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(x.size(0), 1, 10, 10)  # Reshape to 2D
        indices = torch.arange(0, x.numel(), dtype=torch.long, device=x.device).view_as(x)
        x = self.max_unpool(x, indices)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
