
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'Module', 'ReflectionPad1d', 'ChannelShuffle', 'CrossMapLRN2d', 'Conv3d', 'ZeroPad2d', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.channel_shuffle = nn.ChannelShuffle(4)
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.zero_pad = nn.ZeroPad2d(2)
        self.instance_norm = nn.InstanceNorm3d(20)
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input is 3D, we first pad it using ReflectionPad1d
        x = self.reflection_pad(x)
        
        # Reshape to 4D for ChannelShuffle
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.channel_shuffle(x)
        
        # Reshape to 5D for Conv3d
        x = x.unsqueeze(1)  # Add a depth dimension
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Apply InstanceNorm3d
        x = self.instance_norm(x)
        
        # Reshape to 4D for CrossMapLRN2d
        x = x.squeeze(1)  # Remove depth dimension
        x = self.cross_map_lrn(x)
        
        # Reshape to 4D for ZeroPad2d
        x = x.squeeze(1)  # Remove channel dimension
        x = self.zero_pad(x)
        
        # Reshape back to 3D for PoissonNLLLoss
        x = x.squeeze(1)  # Remove channel dimension
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # For demonstration, we'll just return the output without applying the loss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

