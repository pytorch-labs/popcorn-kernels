
# This is a random torch model generated by the following modules: ['Softplus', 'SmoothL1Loss', 'TransformerEncoder', 'LazyBatchNorm3d', 'AvgPool2d', 'AdaptiveAvgPool3d', 'HingeEmbeddingLoss', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for LazyBatchNorm3d
        x = x.view(-1, 1, x.size(1), x.size(2), x.size(3))
        x = self.lazy_batch_norm3d(x)
        
        # Reshape for AvgPool2d
        x = x.view(-1, x.size(2), x.size(3), x.size(4))
        x = self.avg_pool2d(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(-1, 1, x.size(1), x.size(2), x.size(3))
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for TransformerEncoder
        x = x.view(x.size(0), -1, 64)  # Assuming d_model=64
        x = self.transformer_encoder(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        
        # Compute SmoothL1Loss and HingeEmbeddingLoss (for demonstration purposes)
        target = torch.randn_like(x)
        smooth_l1_loss = self.smooth_l1_loss(x, target)
        hinge_embedding_loss = self.hinge_embedding_loss(x, torch.ones_like(x))
        
        # Return the final output and the losses (for demonstration purposes)
        return x, smooth_l1_loss, hinge_embedding_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

