
# This is a random torch model generated by the following modules: ['Softplus', 'MaxUnpool3d', 'AvgPool3d', 'ParameterList', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])
        self.dropout1d = nn.Dropout1d(p=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.softplus(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Apply MaxUnpool3d (requires indices from a previous MaxPool3d operation)
        # Since we don't have a MaxPool3d, we'll create dummy indices for demonstration
        pool_output, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(pool_output, indices)
        
        # Apply Dropout1d
        # Reshape x to (batch_size, channels, depth * height * width) to fit Dropout1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        x = self.dropout1d(x)
        x = x.view(batch_size, channels, depth, height, width)
        
        # Apply ParameterList (just summing the parameters for demonstration)
        param_sum = sum(self.parameter_list)
        x = x + param_sum.view(1, -1, 1, 1, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size=1, channels=3, depth=32, height=32, width=32)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

