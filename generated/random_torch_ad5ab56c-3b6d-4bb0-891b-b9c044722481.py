
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'ConvTranspose1d', 'MultiLabelMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.adaptive_max_pool1 = nn.AdaptiveMaxPool1d(output_size=10)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.adaptive_max_pool2 = nn.AdaptiveMaxPool1d(output_size=20)
        self.loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv_transpose1(x)
        x = self.adaptive_max_pool1(x)
        x = self.conv_transpose2(x)
        x = self.adaptive_max_pool2(x)
        
        # Dummy target for MultiLabelMarginLoss, assuming 20 classes
        target = torch.randint(0, 2, (x.size(0), 20)).long().to(x.device)
        
        # Reshape x to match the expected input shape for MultiLabelMarginLoss
        x = x.view(x.size(0), -1)  # Flatten the output
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

