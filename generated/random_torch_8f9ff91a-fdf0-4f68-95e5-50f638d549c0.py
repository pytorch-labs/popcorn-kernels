
# This is a random torch model generated by the following modules: ['BatchNorm2d', 'GELU', 'Identity', 'MaxPool3d', 'AdaptiveAvgPool2d', 'ConvTranspose1d', 'LazyBatchNorm3d', 'MaxPool2d', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn2d = nn.BatchNorm2d(10)
        self.gelu = nn.GELU()
        self.identity = nn.Identity()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2)
        self.adaptiveavgpool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.convtranspose1d = nn.ConvTranspose1d(10, 20, kernel_size=3)
        self.lazybn3d = nn.LazyBatchNorm3d()
        self.maxpool2d = nn.MaxPool2d(kernel_size=2)
        self.reflectionpad3d = nn.ReflectionPad3d(1)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.bn2d(x)
        x = self.gelu(x)
        x = self.identity(x)
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(2)  # Add a new dimension to make it 5D (batch, channels, depth, height, width)
        x = self.maxpool3d(x)
        
        # Reshape back to 4D for AdaptiveAvgPool2d
        x = x.squeeze(2)
        x = self.adaptiveavgpool2d(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.convtranspose1d(x)
        
        # Reshape for LazyBatchNorm3d
        x = x.unsqueeze(2).unsqueeze(3)  # Make it 5D again
        x = self.lazybn3d(x)
        
        # Reshape for MaxPool2d
        x = x.squeeze(2)  # Back to 4D
        x = self.maxpool2d(x)
        
        # Reshape for ReflectionPad3d
        x = x.unsqueeze(2)  # Make it 5D again
        x = self.reflectionpad3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

