
# This is a random torch model generated by the following modules: ['GroupNorm', 'LogSoftmax', 'Threshold', 'Hardswish', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, stride=1, padding=1)
        self.group_norm1 = nn.GroupNorm(4, 16)
        self.threshold1 = nn.Threshold(0.5, 0.0)
        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, stride=1, padding=1)
        self.hardswish1 = nn.Hardswish()
        self.group_norm2 = nn.GroupNorm(8, 32)
        self.conv3 = nn.Conv1d(32, 64, kernel_size=3, stride=1, padding=1)
        self.threshold2 = nn.Threshold(0.5, 0.0)
        self.hardswish2 = nn.Hardswish()
        self.group_norm3 = nn.GroupNorm(16, 64)
        self.conv4 = nn.Conv1d(64, 128, kernel_size=3, stride=1, padding=1)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Ensure input is 3D (batch_size, channels, sequence_length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing

        x = self.conv1(x)
        x = self.group_norm1(x)
        x = self.threshold1(x)
        x = self.conv2(x)
        x = self.hardswish1(x)
        x = self.group_norm2(x)
        x = self.conv3(x)
        x = self.threshold2(x)
        x = self.hardswish2(x)
        x = self.group_norm3(x)
        x = self.conv4(x)
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input: (batch_size=1, channels=1, sequence_length=128)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

