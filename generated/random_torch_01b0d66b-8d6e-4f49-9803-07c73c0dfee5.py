
# This is a random torch model generated by the following modules: ['CrossEntropyLoss', 'LeakyReLU', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.leaky_relu1 = nn.LeakyReLU(negative_slope=0.01)
        self.leaky_relu2 = nn.LeakyReLU(negative_slope=0.01)
        self.softshrink1 = nn.Softshrink(lambd=0.5)
        self.softshrink2 = nn.Softshrink(lambd=0.5)
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply LeakyReLU and Softshrink in sequence
        x = self.leaky_relu1(x)
        x = self.softshrink1(x)
        x = self.leaky_relu2(x)
        x = self.softshrink2(x)
        
        # Flatten the input for CrossEntropyLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        
        # Dummy target for CrossEntropyLoss (assuming classification task)
        # In a real scenario, the target would be provided externally
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Apply CrossEntropyLoss
        loss = self.cross_entropy_loss(x, target)
        
        # Return the loss (typically, you would return the output for inference)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

