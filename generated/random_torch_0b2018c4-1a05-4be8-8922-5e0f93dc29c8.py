
# This is a random torch model generated by the following modules: ['Sequential', 'Dropout2d', 'Flatten', 'PixelUnshuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.flatten = nn.Flatten()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.fc = nn.Linear(32 * 8 * 8, 10)  # Assuming input size is adjusted accordingly

    def forward(self, x):
        x = self.pixel_unshuffle(x)
        x = self.sequential(x)
        x = self.dropout2d(x)
        x = self.flatten(x)
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

