
# This is a random torch model generated by the following modules: ['CircularPad3d', 'SyncBatchNorm', 'Sigmoid', 'AvgPool2d', 'ConstantPad1d', 'GRU', 'LazyConv3d', 'TransformerEncoder', 'InstanceNorm2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.sync_batchnorm = nn.SyncBatchNorm(10)
        self.sigmoid = nn.Sigmoid()
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.constant_pad1d = nn.ConstantPad1d(2, 0.5)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.lazy_conv3d = nn.LazyConv3d(out_channels=10, kernel_size=3)
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=20, nhead=4), num_layers=3
        )
        self.instance_norm2d = nn.InstanceNorm2d(10)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(20, 10, [5, 5])

    def forward(self, x):
        # CircularPad3d
        x = self.circular_pad3d(x)
        
        # LazyConv3d
        x = self.lazy_conv3d(x)
        
        # SyncBatchNorm
        x = self.sync_batchnorm(x)
        
        # InstanceNorm2d
        x = self.instance_norm2d(x)
        
        # AvgPool2d
        x = self.avg_pool2d(x)
        
        # Sigmoid
        x = self.sigmoid(x)
        
        # Reshape for GRU
        x = x.view(x.size(0), -1, 10)
        
        # GRU
        x, _ = self.gru(x)
        
        # Reshape for TransformerEncoder
        x = x.permute(1, 0, 2)
        
        # TransformerEncoder
        x = self.transformer_encoder(x)
        
        # Reshape for ConstantPad1d
        x = x.permute(1, 0, 2)
        x = x.contiguous().view(x.size(0), -1)
        
        # ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1, 20)
        
        # AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax(x, torch.zeros(x.size(0), dtype=torch.long).to(x.device))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
