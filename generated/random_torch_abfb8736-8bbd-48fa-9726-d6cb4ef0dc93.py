
# This is a random torch model generated by the following modules: ['LSTMCell', 'LazyBatchNorm2d', 'MaxPool1d', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm_cell1 = nn.LSTMCell(input_size=128, hidden_size=256)
        self.lstm_cell2 = nn.LSTMCell(input_size=256, hidden_size=128)
        self.batch_norm = nn.LazyBatchNorm2d()
        self.max_pool = nn.MaxPool1d(kernel_size=2)
        self.replication_pad = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Initialize hidden states for LSTMCell
        hx1 = torch.zeros(batch_size, 256).to(x.device)
        cx1 = torch.zeros(batch_size, 256).to(x.device)
        hx2 = torch.zeros(batch_size, 128).to(x.device)
        cx2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process through LSTMCells
        lstm_outputs = []
        for t in range(sequence_length):
            hx1, cx1 = self.lstm_cell1(x[:, t, :], (hx1, cx1))
            hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
            lstm_outputs.append(hx2)
        
        # Stack the outputs along the sequence dimension
        x = torch.stack(lstm_outputs, dim=1)
        
        # Reshape for BatchNorm2d
        x = x.unsqueeze(2).unsqueeze(3)  # Add dummy height and width dimensions
        x = self.batch_norm(x)
        
        # Reshape for MaxPool1d
        x = x.squeeze(3).squeeze(2)  # Remove dummy height and width dimensions
        x = x.permute(0, 2, 1)  # Swap sequence and feature dimensions
        x = self.max_pool(x)
        x = x.permute(0, 2, 1)  # Swap back
        
        # Reshape for ReplicationPad3d
        x = x.unsqueeze(2).unsqueeze(3).unsqueeze(4)  # Add dummy depth, height, and width dimensions
        x = self.replication_pad(x)
        
        # Remove dummy dimensions
        x = x.squeeze(4).squeeze(3).squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
