
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'AdaptiveMaxPool1d', 'MSELoss', 'AvgPool1d', 'HuberLoss', 'CELU', 'Fold', 'ReflectionPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad3d = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.celu = nn.CELU(alpha=1.0)
        self.fold = nn.Fold(output_size=(5, 5), kernel_size=(2, 2))
        self.reflection_pad2d = nn.ReflectionPad2d(padding=(1, 1, 1, 1))
        self.mseloss = nn.MSELoss()
        self.huberloss = nn.HuberLoss()

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.pad3d(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape for Fold operation
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.fold(x)
        
        # Apply ReflectionPad2d
        x = self.reflection_pad2d(x)
        
        # Compute MSELoss (dummy target)
        target = torch.zeros_like(x)
        mse_loss = self.mseloss(x, target)
        
        # Compute HuberLoss (dummy target)
        huber_loss = self.huberloss(x, target)
        
        # Return both losses for demonstration purposes
        return mse_loss, huber_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

