
# This is a random torch model generated by the following modules: ['Flatten', 'MultiMarginLoss', 'AlphaDropout', 'RNNCellBase', 'SyncBatchNorm', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.flatten = nn.Flatten()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=64)
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Flatten the input
        x = self.flatten(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Reshape for RNNCellBase
        x = x.view(-1, 128)
        
        # Pass through RNNCellBase
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Reshape for MultiMarginLoss
        x = x.view(-1, 64)
        
        # Dummy target for MultiMarginLoss
        target = torch.randint(0, 64, (x.size(0),)).to(x.device)
        
        # Compute MultiMarginLoss
        loss1 = self.multi_margin_loss(x, target)
        
        # Dummy input2 for CosineEmbeddingLoss
        x2 = torch.randn_like(x)
        
        # Dummy target for CosineEmbeddingLoss
        target2 = torch.ones(x.size(0)).to(x.device)
        
        # Compute CosineEmbeddingLoss
        loss2 = self.cosine_embedding_loss(x, x2, target2)
        
        # Return both losses
        return loss1, loss2

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
