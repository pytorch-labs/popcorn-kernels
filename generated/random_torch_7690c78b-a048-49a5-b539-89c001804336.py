
# This is a random torch model generated by the following modules: ['RNNCellBase', 'Sigmoid', 'FractionalMaxPool2d', 'ELU', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.sigmoid = nn.Sigmoid()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.elu = nn.ELU(alpha=1.0)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        
        # Additional layers to accommodate the input and output shapes
        self.fc1 = nn.Linear(256, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Initialize hidden state for RNNCell
        hx = torch.zeros(batch_size, 256).to(x.device)
        
        # Process through RNNCell
        for t in range(seq_len):
            hx = self.rnn_cell(x[:, t, :], hx)
        
        # Apply Sigmoid
        x = self.sigmoid(hx)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(batch_size, 1, 16, 16)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape for Threshold
        x = x.view(batch_size, -1)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Fully connected layers
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

