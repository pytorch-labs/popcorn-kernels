
# This is a random torch model generated by the following modules: ['Tanh', 'FractionalMaxPool3d', 'Hardswish', 'RNN', 'Softshrink', 'SiLU', 'LayerNorm', 'LazyBatchNorm1d', 'PoissonNLLLoss', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanh = nn.Tanh()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.hardswish = nn.Hardswish()
        self.rnn = nn.RNN(input_size=8, hidden_size=16, num_layers=2, batch_first=True)
        self.softshrink = nn.Softshrink()
        self.silu = nn.SiLU()
        self.layer_norm = nn.LayerNorm(16)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.lazy_linear = nn.LazyLinear(10)

    def forward(self, x):
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(-1, 1, 16, 16, 16)
        x = self.fractional_max_pool3d(x)
        
        # Reshape for RNN
        x = x.view(-1, 8, 8)
        x, _ = self.rnn(x)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Reshape for LazyBatchNorm1d
        x = x.view(-1, 16)
        x = self.lazy_batch_norm1d(x)
        
        # Reshape for LazyLinear
        x = x.view(-1, 16)
        x = self.lazy_linear(x)
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # Note: PoissonNLLLoss is typically used in the loss function, not in the forward pass
        # For demonstration purposes, we will skip applying it here
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

