
# This is a random torch model generated by the following modules: ['GLU', 'AdaptiveMaxPool1d', 'BatchNorm2d', 'RReLU', 'Threshold', 'LazyConvTranspose2d', 'ReLU', 'LogSoftmax', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.batch_norm1 = nn.BatchNorm2d(32)
        self.glu1 = nn.GLU(dim=1)
        self.rrelu1 = nn.RReLU()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=64)
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.batch_norm2 = nn.BatchNorm2d(64)
        self.relu1 = nn.ReLU()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Apply LazyConvTranspose2d
        x = self.conv_transpose1(x)
        # Apply BatchNorm2d
        x = self.batch_norm1(x)
        # Apply GLU
        x = self.glu1(x)
        # Apply RReLU
        x = self.rrelu1(x)
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        # Reshape back to 4D
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        # Apply Threshold
        x = self.threshold1(x)
        # Apply LazyConvTranspose2d
        x = self.conv_transpose2(x)
        # Apply BatchNorm2d
        x = self.batch_norm2(x)
        # Apply ReLU
        x = self.relu1(x)
        # Apply Hardsigmoid
        x = self.hardsigmoid1(x)
        # Apply LogSoftmax
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 input size
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
