
# This is a random torch model generated by the following modules: ['GRU', 'Softmax2d', 'Conv1d', 'Dropout2d', 'Fold', 'NLLLoss2d', 'BatchNorm2d', 'Dropout', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.gru = nn.GRU(10, 20, batch_first=True)
        self.dropout = nn.Dropout(0.5)
        self.batch_norm2d = nn.BatchNorm2d(20)
        self.dropout2d = nn.Dropout2d(0.5)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.softmax2d = nn.Softmax2d()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.conv1d(x)  # Shape: (batch_size, 10, sequence_length - kernel_size + 1)
        x = self.lazy_batch_norm1d(x)  # Shape: (batch_size, 10, sequence_length - kernel_size + 1)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length - kernel_size + 1, 10)
        x, _ = self.gru(x)  # Shape: (batch_size, sequence_length - kernel_size + 1, 20)
        x = self.dropout(x)  # Shape: (batch_size, sequence_length - kernel_size + 1, 20)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, sequence_length - kernel_size + 1, 20)
        x = self.batch_norm2d(x)  # Shape: (batch_size, 1, sequence_length - kernel_size + 1, 20)
        x = self.dropout2d(x)  # Shape: (batch_size, 1, sequence_length - kernel_size + 1, 20)
        x = x.permute(0, 3, 1, 2)  # Shape: (batch_size, 20, 1, sequence_length - kernel_size + 1)
        x = self.fold(x)  # Shape: (batch_size, 20, 10, 10)
        x = self.softmax2d(x)  # Shape: (batch_size, 20, 10, 10)
        # Assuming target is provided externally for NLLLoss2d
        target = torch.randint(0, 20, (x.size(0), 10, 10)).long().cuda()
        loss = self.nll_loss2d(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

