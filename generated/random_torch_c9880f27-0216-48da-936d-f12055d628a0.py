
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'PReLU', 'SoftMarginLoss', 'TripletMarginWithDistanceLoss', 'AdaptiveAvgPool1d', 'Hardsigmoid', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.hardsigmoid = nn.Hardsigmoid()
        self.module_list = nn.ModuleList([
            nn.PReLU(),
            nn.PReLU(),
            nn.PReLU()
        ])
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.triplet_margin_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.adaptive_max_pool1d(x)
        x = self.prelu1(x)
        x = self.adaptive_avg_pool1d(x)
        x = self.prelu2(x)
        
        # Apply modules from ModuleList
        for module in self.module_list:
            x = module(x)
        
        x = self.hardsigmoid(x)
        
        # Dummy targets for loss functions
        target = torch.ones_like(x)
        anchor = torch.ones_like(x)
        positive = torch.ones_like(x)
        negative = torch.ones_like(x)
        
        # Compute losses (just for demonstration, not typically used in forward pass)
        loss1 = self.soft_margin_loss(x, target)
        loss2 = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return the output and the losses (for demonstration purposes)
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 100).cuda()  # Example input shape (batch_size=1, channels=3, sequence_length=100)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
