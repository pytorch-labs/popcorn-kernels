
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'ModuleList', 'Bilinear', 'MarginRankingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.module_list = nn.ModuleList([
            nn.Bilinear(14*14, 14*14, 256),
            nn.Bilinear(256, 256, 128),
            nn.Bilinear(128, 128, 64)
        ])
        self.loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Flatten the output for Bilinear layers
        x = x.view(x.size(0), -1)
        
        # Apply Bilinear layers from ModuleList
        for bilinear in self.module_list:
            x = F.relu(bilinear(x, x))
        
        # Dummy output for MarginRankingLoss
        output1 = x[:, :32]  # First half of the features
        output2 = x[:, 32:]  # Second half of the features
        target = torch.ones(output1.size(0)).to(x.device)
        
        # Compute loss (this is just a placeholder, as the model is random)
        loss = self.loss(output1, output2, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
