
# This is a random torch model generated by the following modules: ['Softshrink', 'MaxUnpool1d', 'PixelUnshuffle', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.container = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=5),
            nn.ReLU(),
            nn.Conv2d(10, 20, kernel_size=5),
            nn.ReLU()
        )

    def forward(self, x):
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape back to original shape
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply Container (Sequential)
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
