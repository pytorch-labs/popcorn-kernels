
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'MaxPool2d', 'MultiLabelSoftMarginLoss', 'CELU', 'AvgPool3d', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.celu = nn.CELU()
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming x is a 3D tensor (batch_size, sequence_length)
        x = self.embedding_bag(x)  # Output shape: (batch_size, embedding_dim)
        
        # Reshape for 2D pooling
        x = x.unsqueeze(1)  # Add a channel dimension: (batch_size, 1, embedding_dim)
        x = self.max_pool2d(x)  # Output shape: (batch_size, 1, embedding_dim // 2)
        
        # Reshape for 3D pooling
        x = x.unsqueeze(1)  # Add a depth dimension: (batch_size, 1, 1, embedding_dim // 2)
        x = self.avg_pool3d(x)  # Output shape: (batch_size, 1, 1, embedding_dim // 4)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Flatten the tensor for loss computation
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, embedding_dim // 4)
        
        # Dummy target for loss computation
        target_multi_margin = torch.randint(0, 10, (x.size(0),), device=x.device)
        target_multi_label = torch.randint(0, 2, (x.size(0), 10), device=x.device).float()
        
        # Compute losses (these are just for demonstration, not typically used in forward pass)
        loss1 = self.multi_margin_loss(x, target_multi_margin)
        loss2 = self.multi_label_soft_margin_loss(x, target_multi_label)
        
        # Return the average of the two losses (this is just an example)
        return (loss1 + loss2) / 2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 32)).cuda()  # Example input: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
