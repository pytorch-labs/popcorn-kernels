
# This is a random torch model generated by the following modules: ['Sequential', 'GELU', 'AdaptiveMaxPool1d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(16),
            nn.GELU(),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(32),
            nn.GELU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(64),
            nn.GELU(),
        )
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=128)
        self.fc = nn.Linear(64 * 128, 10)

    def forward(self, x):
        # Apply the sequential block
        x = self.sequential(x)
        
        # Reshape for AdaptiveMaxPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width dimensions
        x = self.adaptive_max_pool(x)
        
        # Reshape for the fully connected layer
        x = x.view(batch_size, -1)
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
