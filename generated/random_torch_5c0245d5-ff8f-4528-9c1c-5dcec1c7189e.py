
# This is a random torch model generated by the following modules: ['Sigmoid', 'TransformerDecoder', 'ReflectionPad3d', 'CrossEntropyLoss', 'RMSNorm', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad3d(1)
        self.max_pool = nn.MaxPool3d(kernel_size=2, stride=2)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.rms_norm = RMSNorm(64)
        self.sigmoid = nn.Sigmoid()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Apply MaxPool3d
        x = self.max_pool(x)
        
        # Reshape for TransformerDecoder
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for the decoder
        x = self.transformer_decoder(x, memory)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, channels, depth // 2, height // 2, width // 2)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Dummy target for CrossEntropyLoss
        target = torch.randint(0, 2, (batch_size, depth // 2, height // 2, width // 2)).long().cuda()
        
        # Apply CrossEntropyLoss
        loss = self.cross_entropy_loss(x, target)
        
        return loss

class RMSNorm(nn.Module):
    def __init__(self, d_model, eps=1e-8):
        super().__init__()
        self.scale = nn.Parameter(torch.ones(d_model))
        self.eps = eps

    def forward(self, x):
        norm = torch.sqrt((x ** 2).mean(-1, keepdim=True) + self.eps)
        return x / norm * self.scale

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
