
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'Conv2d', 'Hardtanh', 'GroupNorm', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReplicationPad2d(2)
        self.conv1 = nn.Conv2d(3, 16, kernel_size=5, stride=1, padding=0)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.group_norm = nn.GroupNorm(4, 16)  # 4 groups, 16 channels
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.pad(x)  # Apply ReplicationPad2d
        x = self.conv1(x)  # Apply Conv2d
        x = self.hardtanh(x)  # Apply Hardtanh
        x = self.group_norm(x)  # Apply GroupNorm
        x = self.conv2(x)  # Apply Conv2d again
        x = self.sigmoid(x)  # Apply Sigmoid
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 input size
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
