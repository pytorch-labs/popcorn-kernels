
# This is a random torch model generated by the following modules: ['Dropout', 'MultiLabelMarginLoss', 'CrossMapLRN2d', 'Conv3d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(10)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.dropout = nn.Dropout(p=0.5)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv3d_1(x)  # Shape: (batch_size, 10, depth-2, height-2, width-2)
        
        # Reshape to 2D for BatchNorm2d and CrossMapLRN2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)  # Shape: (batch_size*depth, 10, height-2, width-2)
        
        x = self.batch_norm2d(x)  # Shape: (batch_size*depth, 10, height-2, width-2)
        x = self.cross_map_lrn2d(x)  # Shape: (batch_size*depth, 10, height-2, width-2)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)  # Shape: (batch_size, 10, depth, height-2, width-2)
        
        x = self.dropout(x)  # Shape: (batch_size, 10, depth, height-2, width-2)
        x = self.conv3d_2(x)  # Shape: (batch_size, 20, depth-4, height-4, width-4)
        
        # Dummy target for MultiLabelMarginLoss
        target = torch.randint(0, 2, (batch_size, 20)).long()  # Shape: (batch_size, 20)
        
        # Compute loss (assuming x is the output of the model)
        loss = self.multi_label_margin_loss(x.view(batch_size, -1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 64, 64).cuda()  # Shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

