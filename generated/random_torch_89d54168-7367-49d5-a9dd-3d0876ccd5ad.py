
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'AdaptiveMaxPool3d', 'ReLU', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.transformer_decoder1 = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.transformer_decoder2 = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.adaptive_max_pool = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.relu = nn.ReLU()

    def forward(self, x):
        # Pad the input to ensure compatibility with the transformer decoder
        x = self.pad(x)
        
        # Reshape the input to match the expected shape for the transformer decoder
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Pass through the first transformer decoder
        x = self.transformer_decoder1(x, x)
        
        # Pass through the second transformer decoder
        x = self.transformer_decoder2(x, x)
        
        # Reshape back to 3D tensor
        x = x.permute(1, 2, 0).view(batch_size, channels, depth, height, width)
        
        # Apply adaptive max pooling
        x = self.adaptive_max_pool(x)
        
        # Apply ReLU activation
        x = self.relu(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
