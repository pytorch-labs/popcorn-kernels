
# This is a random torch model generated by the following modules: ['Mish', 'RReLU', 'LeakyReLU', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.mish1 = nn.Mish()
        self.rrelu1 = nn.RReLU()
        self.leaky_relu1 = nn.LeakyReLU()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.mish2 = nn.Mish()
        self.rrelu2 = nn.RReLU()
        self.leaky_relu2 = nn.LeakyReLU()

    def forward(self, x):
        # Flatten the input to a 1D tensor
        x = x.view(x.size(0), -1)
        
        # Apply Mish activation
        x = self.mish1(x)
        
        # Apply RReLU activation
        x = self.rrelu1(x)
        
        # Apply LeakyReLU activation
        x = self.leaky_relu1(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)
        
        # Initialize hidden state for GRUCell
        hx1 = torch.zeros(x.size(0), 256).to(x.device)
        hx2 = torch.zeros(x.size(0), 128).to(x.device)
        
        # Pass through first GRUCell
        x = self.gru_cell1(x, hx1)
        
        # Pass through second GRUCell
        x = self.gru_cell2(x, hx2)
        
        # Apply Mish activation
        x = self.mish2(x)
        
        # Apply RReLU activation
        x = self.rrelu2(x)
        
        # Apply LeakyReLU activation
        x = self.leaky_relu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

