
# This is a random torch model generated by the following modules: ['AvgPool1d', 'RNN', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1d = nn.AvgPool1d(kernel_size=2)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.convtranspose2d = nn.ConvTranspose2d(in_channels=1, out_channels=3, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # First, reshape the input to fit AvgPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size * channels, height, width)  # Reshape to (batch_size * channels, height, width)
        x = x.permute(0, 2, 1)  # Permute to (batch_size * channels, width, height) for AvgPool1d
        x = self.avgpool1d(x)  # Apply AvgPool1d
        x = x.permute(0, 2, 1)  # Permute back to (batch_size * channels, height, width)
        x = x.view(batch_size, channels, x.shape[1], x.shape[2])  # Reshape back to (batch_size, channels, height, width)

        # Now, reshape the input to fit RNN
        x = x.permute(0, 2, 3, 1)  # Permute to (batch_size, height, width, channels)
        x = x.reshape(batch_size, -1, channels)  # Reshape to (batch_size, height * width, channels)
        x, _ = self.rnn(x)  # Apply RNN
        x = x.reshape(batch_size, height, width, -1)  # Reshape back to (batch_size, height, width, hidden_size)
        x = x.permute(0, 3, 1, 2)  # Permute to (batch_size, hidden_size, height, width)

        # Finally, apply ConvTranspose2d
        x = self.convtranspose2d(x)  # Apply ConvTranspose2d

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

