
# This is a random torch model generated by the following modules: ['LogSigmoid', 'LazyBatchNorm2d', 'InstanceNorm3d', 'MaxUnpool1d', 'GRU', 'BatchNorm2d', 'ModuleDict', 'NLLLoss', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn2d = nn.LazyBatchNorm2d()
        self.instance_norm3d = nn.InstanceNorm3d(10)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.bn2d = nn.BatchNorm2d(20)
        self.module_dict = nn.ModuleDict({
            'avg_pool1d': nn.AvgPool1d(kernel_size=2, stride=2),
            'log_sigmoid': nn.LogSigmoid()
        })
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lazy_bn2d(x)
        
        # Reshape for InstanceNorm3d (batch, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.instance_norm3d(x)
        x = x.squeeze(2)  # Remove depth dimension
        
        # Reshape for MaxUnpool1d (batch, channels, length)
        x = x.view(x.size(0), x.size(1), -1)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape for GRU (batch, sequence, features)
        x = x.permute(0, 2, 1)
        x, _ = self.gru(x)
        
        # Reshape for BatchNorm2d (batch, channels, height, width)
        x = x.permute(0, 2, 1)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.bn2d(x)
        
        # Apply ModuleDict operations
        x = x.view(x.size(0), x.size(1), -1)
        x = self.module_dict['avg_pool1d'](x)
        x = self.module_dict['log_sigmoid'](x)
        
        # Assuming a target tensor for NLLLoss
        target = torch.randint(0, x.size(1), (x.size(0),), dtype=torch.long)
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
