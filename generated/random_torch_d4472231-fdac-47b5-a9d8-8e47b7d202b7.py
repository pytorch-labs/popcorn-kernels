
# This is a random torch model generated by the following modules: ['SmoothL1Loss', 'MultiLabelSoftMarginLoss', 'LazyInstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm3d()
        self.norm2 = nn.LazyInstanceNorm3d()
        self.norm3 = nn.LazyInstanceNorm3d()
        self.loss1 = nn.SmoothL1Loss()
        self.loss2 = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply LazyInstanceNorm3d three times
        x = self.norm1(x)
        x = self.norm2(x)
        x = self.norm3(x)
        
        # Reshape the input to match the expected shape for the loss functions
        x_reshaped = x.view(-1)
        target1 = torch.zeros_like(x_reshaped)
        target2 = torch.zeros_like(x_reshaped)
        
        # Apply SmoothL1Loss
        loss1 = self.loss1(x_reshaped, target1)
        
        # Apply MultiLabelSoftMarginLoss
        loss2 = self.loss2(x_reshaped, target2)
        
        # Return the average of the two losses
        return (loss1 + loss2) / 2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

