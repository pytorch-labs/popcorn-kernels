
# This is a random torch model generated by the following modules: ['ReLU', 'Linear', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)  # Input channels 3, output channels 16
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)  # Input channels 16, output channels 32
        self.fc1 = nn.Linear(32 * 8 * 8, 128)  # Assuming input is downsampled to 8x8 after convolutions
        self.fc2 = nn.Linear(128, 10)  # Final output size of 10

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)  # First ReLU after first convolution
        x = F.max_pool2d(x, kernel_size=2, stride=2)  # Downsample

        x = self.conv2(x)
        x = F.relu(x)  # Second ReLU after second convolution
        x = F.max_pool2d(x, kernel_size=2, stride=2)  # Downsample

        x = x.view(x.size(0), -1)  # Flatten for the linear layer
        x = self.fc1(x)
        x = F.relu(x)  # Third ReLU after first linear layer
        x = self.fc2(x)
        return x  # No softmax here for raw logits


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32)  # Random input tensor of shape (1, 3, 32, 32)
    return [x]

