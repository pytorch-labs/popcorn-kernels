
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ConstantPad3d', 'GRU', 'Softmin', 'Dropout', 'MaxUnpool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.gru1 = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.dropout = nn.Dropout(p=0.5)
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.gru2 = nn.GRU(input_size=20, hidden_size=10, num_layers=1, batch_first=True)
        self.softmin = nn.Softmin(dim=1)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, depth, height, width)
        x = self.pad(x)  # Apply ConstantPad3d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for GRU
        x, _ = self.gru1(x)  # Apply first GRU
        x = self.dropout(x)  # Apply Dropout
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape for MaxUnpool2d
        x = self.max_unpool(x, torch.zeros_like(x))  # Apply MaxUnpool2d (dummy indices)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for second GRU
        x, _ = self.gru2(x)  # Apply second GRU
        x = self.softmin(x)  # Apply Softmin
        x = x.view(x.size(0), -1)  # Reshape for LogSoftmax
        x = self.log_softmax(x)  # Apply LogSoftmax
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

