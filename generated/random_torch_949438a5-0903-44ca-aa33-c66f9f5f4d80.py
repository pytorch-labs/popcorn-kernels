
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'MaxPool3d', 'Transformer', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.maxpool3d_1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.maxpool3d_2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.transformer = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.rnn = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)

    def forward(self, x):
        # Apply PixelUnshuffle to reduce spatial dimensions and increase channel dimensions
        x = self.pixel_unshuffle(x)
        
        # Reshape to 5D tensor for MaxPool3d
        x = x.unsqueeze(2)  # Add a dummy temporal dimension
        x = self.maxpool3d_1(x)
        x = self.maxpool3d_2(x)
        
        # Remove the dummy temporal dimension and reshape for Transformer
        x = x.squeeze(2)
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply Transformer
        x = self.transformer(x, x)
        
        # Reshape for RNN
        x = x.permute(1, 0, 2)  # (batch_size, seq_len, d_model)
        x, _ = self.rnn(x)
        
        # Final output
        x = x[:, -1, :]  # Take the last hidden state
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

