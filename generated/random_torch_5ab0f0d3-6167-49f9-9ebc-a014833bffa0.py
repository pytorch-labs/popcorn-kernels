
# This is a random torch model generated by the following modules: ['ReflectionPad1d', 'BatchNorm1d', 'CrossMapLRN2d', 'AdaptiveAvgPool1d', 'Module', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.batch_norm = nn.BatchNorm1d(10)
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(10)
        self.max_unpool = nn.MaxUnpool1d(kernel_size=2, stride=2, padding=0)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.reflection_pad(x)  # Shape: (batch_size, channels, length + 4)
        x = x.unsqueeze(2)  # Shape: (batch_size, channels, 1, length + 4)
        x = self.cross_map_lrn(x)  # Shape: (batch_size, channels, 1, length + 4)
        x = x.squeeze(2)  # Shape: (batch_size, channels, length + 4)
        x = self.batch_norm(x)  # Shape: (batch_size, channels, length + 4)
        x = self.adaptive_avg_pool(x)  # Shape: (batch_size, channels, 10)
        x = x.unsqueeze(2)  # Shape: (batch_size, channels, 1, 10)
        x = self.max_unpool(x, indices=torch.zeros_like(x).long())  # Shape: (batch_size, channels, 1, 20)
        x = x.squeeze(2)  # Shape: (batch_size, channels, 20)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

