
# This is a random torch model generated by the following modules: ['AvgPool3d', 'AdaptiveMaxPool3d', 'AdaptiveMaxPool2d', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(16, 16))
        self.elu = nn.ELU()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for AdaptiveMaxPool2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        
        x = self.adaptive_max_pool2d(x)
        
        # Apply ELU activation
        x = self.elu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
