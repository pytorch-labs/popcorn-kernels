
# This is a random torch model generated by the following modules: ['Tanh', 'TripletMarginLoss', 'AdaptiveAvgPool2d', 'RNNCell', 'GELU', 'RReLU', 'PixelShuffle', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((16, 16))
        self.rnn_cell1 = nn.RNNCell(256, 128)
        self.rnn_cell2 = nn.RNNCell(128, 64)
        self.gru_cell1 = nn.GRUCell(64, 32)
        self.gru_cell2 = nn.GRUCell(32, 16)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.tanh = nn.Tanh()
        self.gelu = nn.GELU()
        self.rrelu = nn.RReLU()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Assume x is of shape (batch_size, channels, height, width)
        x = self.adaptive_avg_pool(x)  # Shape: (batch_size, channels, 16, 16)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, channels * 16 * 16)
        
        # RNN Cells
        hx1 = torch.zeros(x.size(0), 128).to(x.device)
        hx1 = self.rnn_cell1(x, hx1)
        hx2 = torch.zeros(x.size(0), 64).to(x.device)
        hx2 = self.rnn_cell2(hx1, hx2)
        
        # GRU Cells
        hx3 = torch.zeros(x.size(0), 32).to(x.device)
        hx3 = self.gru_cell1(hx2, hx3)
        hx4 = torch.zeros(x.size(0), 16).to(x.device)
        hx4 = self.gru_cell2(hx3, hx4)
        
        # Reshape for PixelShuffle
        x = hx4.view(hx4.size(0), 16, 1, 1)  # Shape: (batch_size, 16, 1, 1)
        x = self.pixel_shuffle(x)  # Shape: (batch_size, 4, 2, 2)
        
        # Activation functions
        x = self.tanh(x)
        x = self.gelu(x)
        x = self.rrelu(x)
        
        # TripletMarginLoss requires three inputs: anchor, positive, negative
        # For simplicity, we use the same input as anchor, positive, and negative
        anchor = x.view(x.size(0), -1)
        positive = x.view(x.size(0), -1)
        negative = x.view(x.size(0), -1)
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

