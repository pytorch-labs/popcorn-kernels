
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'BatchNorm1d', 'LazyBatchNorm3d', 'LPPool1d', 'Hardshrink', 'Dropout3d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.hardshrink = nn.Hardshrink()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=64)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width, depth)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.bn1(x)
        x = x.view(x.size(0), 128, 32, 32, 32)  # Reshape to 3D
        x = self.lazy_bn3d(x)
        x = x.view(x.size(0), 128, -1)  # Flatten to (batch_size, channels, features)
        x = self.lp_pool1d(x)
        x = self.hardshrink(x)
        x = x.view(x.size(0), 128, 32, 32, 32)  # Reshape back to 3D
        x = self.dropout3d(x)
        x = x.view(x.size(0), 128, -1)  # Flatten to (batch_size, channels, features)
        x = self.adaptive_max_pool1d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
