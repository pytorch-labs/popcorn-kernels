
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'RNNBase', 'LocalResponseNorm', 'MaxPool3d', 'Module', 'LazyConv2d', 'ZeroPad2d', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.max_pool3d = nn.MaxPool3d(kernel_size=(2, 2, 2))
        self.lazy_conv2d = nn.LazyConv2d(out_channels=64, kernel_size=3, stride=1, padding=1)
        self.zero_pad2d = nn.ZeroPad2d(padding=2)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.upsample(x)  # Upsample the input
        x = self.local_response_norm(x)  # Apply Local Response Normalization
        x = self.zero_pad2d(x)  # Apply Zero Padding
        x = self.lazy_conv2d(x)  # Apply Lazy Conv2d
        x = self.cross_map_lrn2d(x)  # Apply CrossMap LRN2d
        
        # Reshape for RNN
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # Reshape to (batch_size, seq_len, input_size)
        x, _ = self.rnn(x)  # Apply RNN
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)  # Reshape back to (batch_size, channels, height, width)
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(2)  # Add a temporal dimension
        x = self.max_pool3d(x)  # Apply MaxPool3d
        x = x.squeeze(2)  # Remove the temporal dimension
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

