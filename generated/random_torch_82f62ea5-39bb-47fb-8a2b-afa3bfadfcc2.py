
# This is a random torch model generated by the following modules: ['LazyConv3d', 'ZeroPad3d', 'Conv2d', 'Bilinear', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.zero_pad3d = nn.ZeroPad3d(padding=1)
        self.conv2d = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3)
        self.bilinear = nn.Bilinear(in1_features=32, in2_features=32, out_features=64)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        
        # Apply ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Reshape to 2D for Conv2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, height, width * depth)
        
        # Apply Conv2d
        x = self.conv2d(x)
        
        # Reshape back to 3D for MaxUnpool3d
        x = x.view(batch_size, x.size(1), depth, height, width)
        
        # Apply MaxUnpool3d (assuming indices are available)
        # For simplicity, we assume the indices are from a previous max pooling operation
        # In practice, you would need to store the indices from the corresponding MaxPool3d operation
        indices = torch.randint(0, x.numel(), x.shape).to(x.device)
        x = self.max_unpool3d(x, indices)
        
        # Reshape for Bilinear
        x = x.view(batch_size, -1)
        x2 = torch.randn_like(x)  # Random second input for Bilinear
        x = self.bilinear(x, x2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Arbitrary 3D input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

