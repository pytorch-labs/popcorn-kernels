
# This is a random torch model generated by the following modules: ['Bilinear', 'Linear', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(10, 20, 30)
        self.bilinear2 = nn.Bilinear(30, 40, 50)
        self.linear1 = nn.Linear(50, 100)
        self.linear2 = nn.Linear(100, 10)
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10, 10)),
            nn.Parameter(torch.randn(10, 10)),
            nn.Parameter(torch.randn(10, 10))
        ])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, *), we need to reshape it to fit the bilinear layers
        batch_size = x.size(0)
        x = x.view(batch_size, -1)  # Flatten the input
        
        # Split the flattened input into two parts for the bilinear layer
        x1 = x[:, :10]  # First part of size 10
        x2 = x[:, 10:30]  # Second part of size 20
        
        x = F.relu(self.bilinear1(x1, x2))  # Apply first bilinear layer
        x = x.view(batch_size, -1)  # Flatten again
        
        # Split the flattened input into two parts for the second bilinear layer
        x1 = x[:, :30]  # First part of size 30
        x2 = x[:, 30:70]  # Second part of size 40
        
        x = F.relu(self.bilinear2(x1, x2))  # Apply second bilinear layer
        x = x.view(batch_size, -1)  # Flatten again
        
        x = F.relu(self.linear1(x))  # Apply first linear layer
        x = self.linear2(x)  # Apply second linear layer
        
        # Apply parameters from ParameterList
        for param in self.parameter_list:
            x = x + param  # Add each parameter to the output
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

