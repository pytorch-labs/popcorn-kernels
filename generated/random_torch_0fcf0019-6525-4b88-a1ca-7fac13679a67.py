
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'FeatureAlphaDropout', 'ReplicationPad1d', 'ConstantPad3d', 'Unflatten', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.constant_pad3d = nn.ConstantPad3d(1, 0.5)
        self.unflatten = nn.Unflatten(1, (1, 8, 8, 8))
        self.relu6 = nn.ReLU6()

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_max_pool3d(x)  # Output shape: (batch_size, channels, 8, 8, 8)
        x = self.feature_alpha_dropout(x)  # Output shape: (batch_size, channels, 8, 8, 8)
        x = x.permute(0, 2, 1, 3, 4)  # Swap dimensions to fit ReplicationPad1d
        x = x.reshape(x.size(0), x.size(1), -1)  # Reshape to (batch_size, depth, channels * height * width)
        x = self.replication_pad1d(x)  # Output shape: (batch_size, depth, channels * height * width + 4)
        x = x.reshape(x.size(0), x.size(1), 8, 8, 8)  # Reshape back to 3D
        x = x.permute(0, 2, 1, 3, 4)  # Swap dimensions back
        x = self.constant_pad3d(x)  # Output shape: (batch_size, channels + 2, depth + 2, height + 2, width + 2)
        x = self.unflatten(x)  # Output shape: (batch_size, 1, 8, 8, 8)
        x = self.relu6(x)  # Output shape: (batch_size, 1, 8, 8, 8)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
