
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'ConvTranspose1d', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad1d(padding=2, value=0)
        self.conv_transpose1 = nn.ConvTranspose1d(in_channels=1, out_channels=10, kernel_size=5, stride=2)
        self.elu1 = nn.ELU(alpha=1.0)
        self.pad2 = nn.ConstantPad1d(padding=1, value=0)
        self.conv_transpose2 = nn.ConvTranspose1d(in_channels=10, out_channels=20, kernel_size=3, stride=1)
        self.elu2 = nn.ELU(alpha=1.0)

    def forward(self, x):
        # Ensure the input is 3D (batch_size, channels, length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing
        
        x = self.pad1(x)
        x = self.conv_transpose1(x)
        x = self.elu1(x)
        x = self.pad2(x)
        x = self.conv_transpose2(x)
        x = self.elu2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

