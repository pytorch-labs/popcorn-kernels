
# This is a random torch model generated by the following modules: ['L1Loss', 'ChannelShuffle', 'Hardsigmoid', 'Conv1d', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.channel_shuffle = nn.ChannelShuffle(2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.tanh = nn.Tanh()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Ensure input is 3D (batch_size, channels, sequence_length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing

        x = self.conv1(x)
        x = self.channel_shuffle(x)
        x = self.hardsigmoid(x)
        x = self.conv2(x)
        x = self.tanh(x)
        
        # Compute L1 loss with respect to a target tensor of zeros
        target = torch.zeros_like(x)
        loss = self.l1_loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input: (batch_size=1, channels=1, sequence_length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

