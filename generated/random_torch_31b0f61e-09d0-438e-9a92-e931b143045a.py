
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'MultiheadAttention', 'LSTMCell', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(64)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.lstm_cell1 = nn.LSTMCell(input_size=64, hidden_size=128)
        self.lstm_cell2 = nn.LSTMCell(input_size=128, hidden_size=64)
        self.replication_pad = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        # Reshape and apply AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, channels)
        x = self.adaptive_avg_pool(x)  # (batch_size, sequence_length, 64)
        x = x.permute(1, 0, 2)  # (sequence_length, batch_size, 64) for MultiheadAttention

        # Apply MultiheadAttention
        x, _ = self.multihead_attention(x, x, x)  # (sequence_length, batch_size, 64)

        # Reshape for LSTMCell
        x = x.permute(1, 0, 2)  # (batch_size, sequence_length, 64)
        batch_size, seq_len, _ = x.size()
        hx1 = torch.zeros(batch_size, 128).to(x.device)
        cx1 = torch.zeros(batch_size, 128).to(x.device)
        hx2 = torch.zeros(batch_size, 64).to(x.device)
        cx2 = torch.zeros(batch_size, 64).to(x.device)

        # Apply LSTMCell
        for i in range(seq_len):
            hx1, cx1 = self.lstm_cell1(x[:, i, :], (hx1, cx1))
            hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))

        # Reshape for ReplicationPad3d
        x = hx2.view(batch_size, 8, 8, 1, 1)  # (batch_size, 8, 8, 1, 1)
        x = self.replication_pad(x)  # (batch_size, 10, 10, 3, 3)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # (batch_size, channels, sequence_length)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

