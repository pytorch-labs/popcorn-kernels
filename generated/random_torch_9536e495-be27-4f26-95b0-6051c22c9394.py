
# This is a random torch model generated by the following modules: ['GRU', 'LPPool2d', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.lppool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.maxpool3d = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # Reshape for GRU: (batch_size, sequence_length, input_size)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, depth, -1)  # Reshape to (batch_size, depth, channels * height * width)
        
        # Pass through GRU layers
        x, _ = self.gru1(x)
        x, _ = self.gru2(x)
        
        # Reshape back to 3D for pooling layers
        x = x.view(batch_size, depth, channels, height, width)
        
        # Apply LPPool2d on the last two dimensions (height, width)
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, channels, depth, height, width)
        x = x.contiguous().view(batch_size * channels * depth, 1, height, width)
        x = self.lppool2d(x)
        
        # Reshape back to 5D for MaxPool3d
        x = x.view(batch_size, channels, depth, x.shape[2], x.shape[3])
        
        # Apply MaxPool3d
        x = self.maxpool3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

