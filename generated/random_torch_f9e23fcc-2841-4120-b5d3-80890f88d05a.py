
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'ConvTranspose3d', 'BCELoss', 'LSTM', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.conv_transpose3d_1 = nn.ConvTranspose3d(in_channels=64, out_channels=32, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d_2 = nn.ConvTranspose3d(in_channels=32, out_channels=16, kernel_size=3, stride=2, padding=1)
        self.lstm = nn.LSTM(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=32, out_channels=16, kernel_size=3, stride=2, padding=1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(1).unsqueeze(1)  # Add dummy dimensions for ConvTranspose3d
        x = x.expand(-1, 64, 8, 8, 8)  # Expand to match expected input shape
        
        x = F.relu(self.conv_transpose3d_1(x))
        x = F.relu(self.conv_transpose3d_2(x))
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 16)  # Flatten spatial dimensions for LSTM
        x, _ = self.lstm(x)
        
        # Reshape for ConvTranspose1d
        x = x.permute(0, 2, 1)  # Swap dimensions for ConvTranspose1d
        x = F.relu(self.conv_transpose1d(x))
        
        # Apply BCELoss (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1), x.size(2))).float().to(x.device)
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

