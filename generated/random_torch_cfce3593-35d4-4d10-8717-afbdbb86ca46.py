
# This is a random torch model generated by the following modules: ['Dropout2d', 'Bilinear', 'Hardtanh', 'SyncBatchNorm', 'MarginRankingLoss', 'Hardshrink', 'CircularPad1d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.bilinear1 = nn.Bilinear(10, 20, 30)
        self.bilinear2 = nn.Bilinear(30, 40, 50)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.sync_batchnorm = nn.SyncBatchNorm(50)
        self.hardshrink = nn.Hardshrink(lambd=0.5)
        self.circular_pad1d = nn.CircularPad1d(padding=2)
        self.silu = nn.SiLU()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.dropout2d(x)
        
        # Reshape for Bilinear layer
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x1 = x[:, :10]  # Split into two parts for Bilinear
        x2 = x[:, 10:30]
        x = self.bilinear1(x1, x2)
        
        # Reshape for second Bilinear layer
        x1 = x[:, :30]
        x2 = x[:, 30:70]
        x = self.bilinear2(x1, x2)
        
        x = self.hardtanh(x)
        x = self.sync_batchnorm(x)
        x = self.hardshrink(x)
        
        # Reshape for CircularPad1d
        x = x.unsqueeze(1)  # Add a dimension to make it 3D
        x = self.circular_pad1d(x)
        
        x = self.silu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

