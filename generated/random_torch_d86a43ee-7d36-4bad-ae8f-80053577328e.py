
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'RNNCellBase', 'MaxPool1d', 'BatchNorm1d', 'LSTMCell', 'SmoothL1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=128)
        self.max_pool = nn.MaxPool1d(kernel_size=2)
        self.batch_norm = nn.BatchNorm1d(num_features=128)
        self.lstm_cell = nn.LSTMCell(input_size=128, hidden_size=64)
        self.loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Assuming x is a tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for RNNCell
        x = x.unsqueeze(0)  # Add sequence dimension
        hx = torch.zeros(x.size(0), 128).to(x.device)
        x = self.rnn_cell(x.squeeze(0), hx)
        
        # Reshape for MaxPool1d
        x = x.unsqueeze(0)  # Add channel dimension
        x = self.max_pool(x)
        
        # Reshape for BatchNorm1d
        x = x.squeeze(0)  # Remove channel dimension
        x = self.batch_norm(x)
        
        # Reshape for LSTMCell
        hx = torch.zeros(x.size(0), 64).to(x.device)
        cx = torch.zeros(x.size(0), 64).to(x.device)
        x, _ = self.lstm_cell(x, (hx, cx))
        
        # Compute loss (assuming target is a tensor of the same shape as x)
        target = torch.zeros_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
