
# This is a random torch model generated by the following modules: ['GRU', 'SiLU', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.silu1 = nn.SiLU()
        self.gelu1 = nn.GELU()
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.silu2 = nn.SiLU()
        self.gelu2 = nn.GELU()
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # Reshape if necessary
        if len(x.shape) == 2:
            x = x.unsqueeze(0)  # Add batch dimension if missing
        elif len(x.shape) == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and sequence dimensions if missing

        # Pass through first GRU
        x, _ = self.gru1(x)
        x = self.silu1(x)
        x = self.gelu1(x)

        # Pass through second GRU
        x, _ = self.gru2(x)
        x = self.silu2(x)
        x = self.gelu2(x)

        # Take the last output of the sequence
        x = x[:, -1, :]

        # Pass through final linear layer
        x = self.fc(x)

        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 128).cuda()  # Example input: (batch_size=1, sequence_length=50, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

