
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'FractionalMaxPool2d', 'ReflectionPad1d', 'CircularPad3d', 'LazyBatchNorm2d', 'SiLU', 'MultiMarginLoss', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.silu = nn.SiLU()
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=2, stride=2)

    def forward(self, x):
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Reshape to 2D for FractionalMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.fractional_max_pool2d(x)
        
        # Reshape to 1D for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.reflection_pad1d(x)
        
        # Reshape back to 3D for CircularPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.circular_pad3d(x)
        
        # Reshape to 2D for LazyBatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.lazy_batch_norm2d(x)
        
        # Apply SiLU activation
        x = self.silu(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, x.size(2) * x.size(3))
        x = self.fold(x)
        
        # Compute loss (dummy target for demonstration)
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        loss = self.multi_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
