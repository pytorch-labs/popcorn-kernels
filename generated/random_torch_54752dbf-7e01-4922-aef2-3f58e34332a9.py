
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'AvgPool3d', 'BCELoss', 'SoftMarginLoss', 'ConstantPad3d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.bce_loss = nn.BCELoss()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.celu = nn.CELU()

    def forward(self, x):
        # Assuming x is a 3D tensor (batch_size, sequence_length)
        x = self.embedding_bag(x)
        
        # Reshape to 5D tensor (batch_size, channels, depth, height, width)
        x = x.view(x.size(0), 1, 8, 8, 8)
        
        # Apply padding
        x = self.constant_pad3d(x)
        
        # Apply average pooling
        x = self.avg_pool3d(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape back to 2D tensor (batch_size, features)
        x = x.view(x.size(0), -1)
        
        # Dummy target for loss calculation
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32)
        
        # Calculate BCE loss
        bce_loss = self.bce_loss(torch.sigmoid(x), target)
        
        # Calculate SoftMargin loss
        soft_margin_loss = self.soft_margin_loss(x, target)
        
        # Return both losses as a tuple
        return bce_loss, soft_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 32)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

