
# This is a random torch model generated by the following modules: ['ELU', 'PixelUnshuffle', 'SELU', 'LazyConv1d', 'MultiLabelMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.lazy_conv1d_1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.elu = nn.ELU()
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.selu = nn.SELU()
        self.lazy_conv1d_3 = nn.LazyConv1d(out_channels=128, kernel_size=3)
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, channels * 4, height // 2, width // 2)
        
        # Flatten the spatial dimensions to fit into Conv1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Shape: (batch_size, channels, height * width)
        
        x = self.lazy_conv1d_1(x)  # Shape: (batch_size, 32, height * width - 2)
        x = self.elu(x)
        
        x = self.lazy_conv1d_2(x)  # Shape: (batch_size, 64, height * width - 4)
        x = self.selu(x)
        
        x = self.lazy_conv1d_3(x)  # Shape: (batch_size, 128, height * width - 6)
        
        # Flatten the output for the loss function
        x = x.view(batch_size, -1)  # Shape: (batch_size, 128 * (height * width - 6))
        
        # Dummy target for MultiLabelMarginLoss (assuming 10 classes)
        target = torch.randint(0, 2, (batch_size, 10)).long()
        
        # Apply the loss function (usually not done in forward, but included as per the module list)
        loss = self.multi_label_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: (batch_size=1, channels=3, height=64, width=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
