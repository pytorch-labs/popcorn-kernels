
# This is a random torch model generated by the following modules: ['Conv2d', 'AdaptiveAvgPool1d', 'AdaptiveAvgPool3d', 'GRUCell', 'AdaptiveMaxPool1d', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d(output_size=(5, 5, 5))
        self.gru_cell = nn.GRUCell(input_size=32, hidden_size=64)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply Conv2d layers
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Reshape to 3D
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten for GRUCell
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), 1, -1)  # Reshape for 1D pooling
        x = self.adaptive_max_pool1d(x)
        
        # Compute CosineEmbeddingLoss (dummy target for demonstration)
        target = torch.ones(x.size(0)).to(x.device)
        loss = self.cosine_embedding_loss(x.squeeze(), x.squeeze(), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

