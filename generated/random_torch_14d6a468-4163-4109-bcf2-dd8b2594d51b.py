
# This is a random torch model generated by the following modules: ['PReLU', 'SiLU', 'RReLU', 'PairwiseDistance', 'LazyBatchNorm2d', 'ReLU', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.silu1 = nn.SiLU()
        self.rrelu1 = nn.RReLU()
        self.pairwise_distance = nn.PairwiseDistance()
        self.lazy_batchnorm2d = nn.LazyBatchNorm2d()
        self.relu1 = nn.ReLU()
        self.rmsnorm = RMSNorm(64)  # Assuming RMSNorm is a custom layer with 64 features

    def forward(self, x):
        # Apply PReLU
        x = self.prelu1(x)
        
        # Apply SiLU
        x = self.silu1(x)
        
        # Apply RReLU
        x = self.rrelu1(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.pairwise_distance(x, x)  # PairwiseDistance requires two inputs
        
        # Reshape back to a 4D tensor for LazyBatchNorm2d
        x = x.view(x.size(0), 1, 1, -1)
        x = self.lazy_batchnorm2d(x)
        
        # Apply ReLU
        x = self.relu1(x)
        
        # Apply RMSNorm
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.rmsnorm(x)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, features, eps=1e-8):
        super().__init__()
        self.scale = nn.Parameter(torch.ones(features))
        self.eps = eps

    def forward(self, x):
        rms = torch.sqrt(torch.mean(x ** 2, dim=-1, keepdim=True) + self.eps)
        return x / rms * self.scale


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming input is a 3-channel image
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
