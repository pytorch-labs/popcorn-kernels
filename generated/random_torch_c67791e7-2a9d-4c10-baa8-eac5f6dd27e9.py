
# This is a random torch model generated by the following modules: ['LogSoftmax', 'InstanceNorm1d', 'ReflectionPad3d', 'Hardsigmoid', 'ConvTranspose2d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(128)
        self.reflection_pad = nn.ReflectionPad3d(1)
        self.conv_transpose = nn.ConvTranspose2d(64, 32, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.linear1 = nn.Linear(32 * 8 * 8, 256)
        self.linear2 = nn.Linear(256, 10)
        self.hardsigmoid = nn.Hardsigmoid()
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Reshape to 1D for InstanceNorm1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Reshape to (batch_size, channels, height * width)
        x = self.instance_norm(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back to original shape
        
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose(x)
        
        # Reshape for Linear layer
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.hardsigmoid(x)
        x = self.linear2(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

