
# This is a random torch model generated by the following modules: ['PixelShuffle', 'Softmax2d', 'MaxPool2d', 'RNNBase', 'FeatureAlphaDropout', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.softmax2d = nn.Softmax2d()
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.hardswish = nn.Hardswish()

    def forward(self, x):
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply MaxPool2d
        x = self.max_pool2d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for RNN
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels * height * width // 64, 64)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Reshape back to original dimensions
        x = x.view(batch_size, channels, height, width)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 64, 64).cuda()  # Input shape adjusted for PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

