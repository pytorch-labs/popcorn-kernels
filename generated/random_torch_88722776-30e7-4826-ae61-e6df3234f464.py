
# This is a random torch model generated by the following modules: ['AvgPool3d', 'PairwiseDistance', 'AdaptiveMaxPool1d', 'TransformerDecoder', 'AvgPool2d', 'AlphaDropout', 'CrossEntropyLoss', 'Threshold', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assuming input x is a 5D tensor (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)  # Apply AvgPool3d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions for PairwiseDistance
        x = self.pairwise_distance(x[:, 0], x[:, 1])  # Apply PairwiseDistance
        x = x.unsqueeze(1)  # Add a dimension for AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)  # Apply AdaptiveMaxPool1d
        x = x.permute(2, 0, 1)  # Reshape for TransformerDecoder (seq_len, batch, features)
        x = self.transformer_decoder(x, x)  # Apply TransformerDecoder
        x = x.permute(1, 2, 0)  # Reshape back to (batch, features, seq_len)
        x = x.unsqueeze(-1)  # Add a dimension for AvgPool2d
        x = self.avg_pool2d(x)  # Apply AvgPool2d
        x = x.view(x.size(0), -1)  # Flatten for AlphaDropout
        x = self.alpha_dropout(x)  # Apply AlphaDropout
        x = self.threshold(x)  # Apply Threshold
        x = self.sigmoid(x)  # Apply Sigmoid
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 2, 16, 16, 16).cuda()  # Example input for AvgPool3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
