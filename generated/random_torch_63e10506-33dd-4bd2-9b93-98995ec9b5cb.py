
# This is a random torch model generated by the following modules: ['CELU', 'SELU', 'LazyConv3d', 'AdaptiveMaxPool2d', 'Sequential', 'AdaptiveAvgPool1d', 'RMSNorm', 'RReLU', 'LazyBatchNorm1d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu = nn.CELU()
        self.selu = nn.SELU()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.sequential = nn.Sequential(
            nn.LazyConv3d(out_channels=32, kernel_size=3),
            nn.RReLU(),
            nn.LazyBatchNorm1d(),
        )
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(8)
        self.rms_norm = RMSNorm(8)  # Assuming RMSNorm is a custom layer
        self.rrelu = nn.RReLU()
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(16)),
            'param2': nn.Parameter(torch.randn(32)),
        })

    def forward(self, x):
        # Apply CELU and SELU
        x = self.celu(x)
        x = self.selu(x)
        
        # Reshape for LazyConv3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.lazy_conv3d(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(-1, x.shape[1], x.shape[2], x.shape[3])
        x = self.adaptive_max_pool2d(x)
        
        # Apply Sequential
        x = x.view(-1, x.shape[1], x.shape[2], x.shape[3], 1)
        x = self.sequential(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(-1, x.shape[1], x.shape[2] * x.shape[3] * x.shape[4])
        x = self.adaptive_avg_pool1d(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)
        
        # Apply ParameterDict
        x = x * self.parameter_dict['param1'].view(1, -1, 1)
        x = x + self.parameter_dict['param2'].view(1, -1, 1)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
