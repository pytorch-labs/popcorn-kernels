
# This is a random torch model generated by the following modules: ['AvgPool1d', 'Dropout3d', 'GELU', 'MaxUnpool3d', 'ConvTranspose1d', 'Identity', 'BatchNorm2d', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1d = nn.AvgPool1d(kernel_size=2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.gelu = nn.GELU()
        self.maxunpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.convtranspose1d = nn.ConvTranspose1d(in_channels=10, out_channels=20, kernel_size=3, stride=2)
        self.identity = nn.Identity()
        self.batchnorm2d = nn.BatchNorm2d(num_features=10)
        self.elu = nn.ELU()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 3D for AvgPool1d
        x = self.avgpool1d(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1)  # Reshape to 4D for Dropout3d
        x = self.dropout3d(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 3D for ConvTranspose1d
        x = self.convtranspose1d(x)
        x = self.gelu(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1)  # Reshape to 4D for MaxUnpool3d
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.maxunpool3d(x, indices)
        x = self.identity(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))  # Ensure 4D for BatchNorm2d
        x = self.batchnorm2d(x)
        x = self.elu(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
