
# This is a random torch model generated by the following modules: ['AvgPool1d', 'LeakyReLU', 'InstanceNorm1d', 'CircularPad2d', 'UpsamplingBilinear2d', 'LocalResponseNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1d = nn.AvgPool1d(kernel_size=2)
        self.leakyrelu = nn.LeakyReLU(negative_slope=0.1)
        self.instancenorm1d = nn.InstanceNorm1d(num_features=10)
        self.circularpad2d = nn.CircularPad2d(padding=1)
        self.upsamplingbilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.localresponsenorm = nn.LocalResponseNorm(size=5)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, reshape to 1D for AvgPool1d and InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        x = self.avgpool1d(x)
        x = self.leakyrelu(x)
        x = self.instancenorm1d(x)
        
        # Reshape back to 2D for CircularPad2d and UpsamplingBilinear2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to (batch_size, channels, height, width)
        x = self.circularpad2d(x)
        x = self.upsamplingbilinear2d(x)
        
        # Apply LocalResponseNorm
        x = self.localresponsenorm(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

