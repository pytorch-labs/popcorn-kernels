
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'LazyConvTranspose3d', 'PixelUnshuffle', 'ReplicationPad3d', 'AdaptiveLogSoftmaxWithLoss', 'AdaptiveMaxPool1d', 'Fold', 'BatchNorm1d', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming vocabulary size of 1000
        self.batch_norm1 = nn.BatchNorm1d(128)
        self.instance_norm1 = nn.InstanceNorm1d(128)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=64)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=64, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        # Assuming input is a tensor of shape (batch_size, sequence_length)
        x = self.embedding(x)  # (batch_size, sequence_length, embedding_dim)
        x = x.permute(0, 2, 1)  # (batch_size, embedding_dim, sequence_length)
        x = self.batch_norm1(x)
        x = self.instance_norm1(x)
        x = x.unsqueeze(-1).unsqueeze(-1)  # (batch_size, embedding_dim, sequence_length, 1, 1)
        x = self.lazy_conv_transpose3d(x)  # (batch_size, 64, *, *, *)
        x = self.replication_pad3d(x)
        x = self.pixel_unshuffle(x)  # (batch_size, 64 * 4, *, *)
        x = x.mean(dim=(-2, -1))  # (batch_size, 64 * 4, sequence_length)
        x = self.adaptive_max_pool1d(x)  # (batch_size, 64 * 4, 64)
        x = x.permute(0, 2, 1)  # (batch_size, 64, 64 * 4)
        x = x.reshape(x.size(0), -1, 8, 8)  # (batch_size, 64, 8, 8)
        x = self.fold(x)  # (batch_size, 64, 8, 8)
        x = x.mean(dim=(-2, -1))  # (batch_size, 64)
        x = self.adaptive_log_softmax.log_prob(x)  # (batch_size, n_classes)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 32)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
