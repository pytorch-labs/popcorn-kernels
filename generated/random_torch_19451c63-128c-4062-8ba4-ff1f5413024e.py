
# This is a random torch model generated by the following modules: ['Mish', 'Linear', 'Hardsigmoid', 'AlphaDropout', 'AdaptiveAvgPool3d', 'MultiLabelMarginLoss', 'SoftMarginLoss', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 512)
        self.linear3 = nn.Linear(512, 256)
        self.linear4 = nn.Linear(256, 128)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.mish = nn.Mish()
        self.hardsigmoid = nn.Hardsigmoid()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Flatten the input to fit the Linear layers
        x = x.view(x.size(0), -1)
        
        # Pass through Linear layers with Mish activation
        x = self.mish(self.linear1(x))
        x = self.mish(self.linear2(x))
        x = self.mish(self.linear3(x))
        x = self.mish(self.linear4(x))
        
        # Reshape to 3D for AdaptiveAvgPool3d
        x = x.view(x.size(0), 1, 1, 1, -1)
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten again for dropout and final layers
        x = x.view(x.size(0), -1)
        x = self.alpha_dropout(x)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        # Compute losses (dummy targets for demonstration)
        target_multi_label = torch.randint(0, 2, (x.size(0), 10)).float()
        target_soft_margin = torch.randint(0, 2, (x.size(0),)).float()
        
        multi_label_loss = self.multi_label_margin_loss(x, target_multi_label)
        soft_margin_loss = self.soft_margin_loss(x, target_soft_margin)
        
        # Return the average of the two losses as the final output
        return (multi_label_loss + soft_margin_loss) / 2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

