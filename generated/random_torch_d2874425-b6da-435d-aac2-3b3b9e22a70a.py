
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'LazyConvTranspose2d', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.bn2 = nn.LazyBatchNorm1d()
        self.conv_transpose3 = nn.LazyConvTranspose2d(out_channels=128, kernel_size=3, stride=2)
        self.bn3 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.bn1(x)
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        x = x.unsqueeze(1)  # Add a dimension to make it 5D for AdaptiveMaxPool3d
        x = self.adaptive_max_pool(x)
        x = x.squeeze(1)  # Remove the added dimension
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.bn2(x)
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.conv_transpose3(x)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.bn3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

