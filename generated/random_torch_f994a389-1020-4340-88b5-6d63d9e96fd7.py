
# This is a random torch model generated by the following modules: ['LeakyReLU', 'CircularPad2d', 'Dropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.CircularPad2d(2)
        self.dropout1 = nn.Dropout(0.5)
        self.pad2 = nn.CircularPad2d(1)
        self.dropout2 = nn.Dropout(0.3)
        self.pad3 = nn.CircularPad2d(3)
        self.dropout3 = nn.Dropout(0.2)

    def forward(self, x):
        x = self.pad1(x)
        x = F.leaky_relu(x)
        x = self.dropout1(x)
        
        x = self.pad2(x)
        x = F.leaky_relu(x)
        x = self.dropout2(x)
        
        x = self.pad3(x)
        x = F.leaky_relu(x)
        x = self.dropout3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
