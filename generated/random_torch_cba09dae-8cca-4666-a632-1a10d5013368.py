
# This is a random torch model generated by the following modules: ['Fold', 'Conv3d', 'SoftMarginLoss', 'BCEWithLogitsLoss', 'Sigmoid', 'Softsign', 'MaxUnpool2d', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.sigmoid = nn.Sigmoid()
        self.softsign = nn.Softsign()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.conv3d_2(x)
        
        # Reshape for Fold operation
        x = x.view(x.size(0), -1, x.size(2) * x.size(3) * x.size(4))
        x = self.fold(x)
        
        # Apply MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        # Apply activation functions
        x = self.sigmoid(x)
        x = self.softsign(x)
        
        # Compute losses (dummy targets for demonstration)
        target_soft_margin = torch.ones_like(x)
        target_bce = torch.ones_like(x)
        target_multi_label = torch.ones_like(x)
        
        soft_margin_loss = self.soft_margin_loss(x, target_soft_margin)
        bce_loss = self.bce_with_logits_loss(x, target_bce)
        multi_label_loss = self.multi_label_soft_margin_loss(x, target_multi_label)
        
        # Return the sum of losses (for demonstration purposes)
        return soft_margin_loss + bce_loss + multi_label_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape for Conv3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

