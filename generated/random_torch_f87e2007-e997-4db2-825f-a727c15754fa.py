
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'Identity', 'LPPool1d', 'LazyConv1d', 'ReLU', 'AdaptiveMaxPool1d', 'AvgPool1d', 'ConstantPad3d', 'ELU', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.identity = nn.Identity()
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=5)
        self.relu = nn.ReLU()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=3, stride=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0.5)
        self.elu = nn.ELU(alpha=1.0)
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.zero_pad1d(x)
        x = self.identity(x)
        x = self.lp_pool1d(x)
        x = self.lazy_conv1d(x)
        x = self.relu(x)
        x = self.adaptive_max_pool1d(x)
        x = self.avg_pool1d(x)
        # Reshape to add 3D dimensions for ConstantPad3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, channels, 1, 1, length)
        x = self.constant_pad3d(x)
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, channels, length)
        x = self.elu(x)
        x = self.replication_pad1d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape: (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

