
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'RNNBase', 'FractionalMaxPool2d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(3)  # Assuming 3 channels for BatchNorm3d
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2)  # Arbitrary sizes
        self.fmp = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))  # Arbitrary output size
        self.lazy_conv_transpose = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)  # Arbitrary parameters

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        
        # Reshape for RNN: (batch_size, sequence_length, input_size)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, depth, -1)  # Flatten height and width into input_size
        
        # Pass through RNN
        x, _ = self.rnn(x)
        
        # Reshape back to 4D for FractionalMaxPool2d: (batch_size, channels, height, width)
        x = x.view(batch_size, -1, height, width)
        
        # Apply FractionalMaxPool2d
        x = self.fmp(x)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
