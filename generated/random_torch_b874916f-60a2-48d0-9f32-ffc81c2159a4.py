
# This is a random torch model generated by the following modules: ['RNNCellBase', 'LSTMCell', 'TripletMarginWithDistanceLoss', 'FractionalMaxPool3d', 'Transformer', 'NLLLoss2d', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.lstm_cell = nn.LSTMCell(input_size=256, hidden_size=128)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(32, 32, 32))
        self.transformer = nn.Transformer(d_model=128, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.nll_loss = nn.NLLLoss2d()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming x is a 5D tensor (batch, channels, depth, height, width)
        x = self.fractional_max_pool(x)  # Apply FractionalMaxPool3d
        x = x.view(x.size(0), -1)  # Flatten the tensor for RNN/LSTM
        hx = torch.zeros(x.size(0), 256)  # Initialize hidden state for RNN
        cx = torch.zeros(x.size(0), 128)  # Initialize cell state for LSTM
        
        # Apply RNNCellBase
        hx = self.rnn_cell(x, hx)
        
        # Apply LSTMCell
        hx, cx = self.lstm_cell(hx, (hx, cx))
        
        # Reshape for Transformer
        x = hx.view(hx.size(0), -1, 128)  # Reshape to (seq_len, batch, feature)
        
        # Apply Transformer
        x = self.transformer(x, x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), -1, 32, 32)  # Reshape to (batch, channels, height, width)
        
        # Dummy target for NLLLoss2d (assuming classification task)
        target = torch.randint(0, 10, (x.size(0), 32, 32))
        
        # Apply NLLLoss2d
        loss_nll = self.nll_loss(x, target)
        
        # Dummy anchor, positive, and negative for TripletMarginWithDistanceLoss
        anchor = torch.randn(x.size(0), 128)
        positive = torch.randn(x.size(0), 128)
        negative = torch.randn(x.size(0), 128)
        
        # Apply TripletMarginWithDistanceLoss
        loss_triplet = self.triplet_loss(anchor, positive, negative)
        
        # Return both losses (for demonstration purposes)
        return loss_nll, loss_triplet


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # 5D tensor for FractionalMaxPool3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
