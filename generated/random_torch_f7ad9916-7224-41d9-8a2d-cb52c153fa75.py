
# This is a random torch model generated by the following modules: ['MaxPool1d', 'Softshrink', 'ReflectionPad1d', 'AdaptiveAvgPool1d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d_1 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.softshrink_1 = nn.Softshrink(lambd=0.5)
        self.reflectionpad1d_1 = nn.ReflectionPad1d(padding=2)
        self.adaptiveavgpool1d_1 = nn.AdaptiveAvgPool1d(output_size=10)
        self.dropout3d_1 = nn.Dropout3d(p=0.5)
        self.maxpool1d_2 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.softshrink_2 = nn.Softshrink(lambd=0.5)
        self.reflectionpad1d_2 = nn.ReflectionPad1d(padding=2)
        self.adaptiveavgpool1d_2 = nn.AdaptiveAvgPool1d(output_size=5)
        self.dropout3d_2 = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.maxpool1d_1(x)
        x = self.softshrink_1(x)
        x = self.reflectionpad1d_1(x)
        x = self.adaptiveavgpool1d_1(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 3D for Dropout3d
        x = self.dropout3d_1(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.maxpool1d_2(x)
        x = self.softshrink_2(x)
        x = self.reflectionpad1d_2(x)
        x = self.adaptiveavgpool1d_2(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 3D for Dropout3d
        x = self.dropout3d_2(x)
        x = x.squeeze(2)  # Remove the added dimension
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape (batch_size=1, channels=3, length=128)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

