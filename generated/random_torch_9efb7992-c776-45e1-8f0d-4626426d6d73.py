
# This is a random torch model generated by the following modules: ['Fold', 'L1Loss', 'LeakyReLU', 'MaxPool3d', 'Module', 'FractionalMaxPool2d', 'Hardshrink', 'Tanh', 'ZeroPad1d', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.hardshrink = nn.Hardshrink(0.5)
        self.tanh = nn.Tanh()
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=2, stride=2)
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply ZeroPad1d and ReflectionPad1d
        x = self.zero_pad1d(x)
        x = self.reflection_pad1d(x)
        
        # Reshape for MaxPool3d
        x = x.view(1, 1, x.shape[1], x.shape[2], -1)
        x = self.max_pool3d(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(1, 1, x.shape[2], x.shape[3])
        x = self.fractional_max_pool2d(x)
        
        # Apply LeakyReLU, Hardshrink, and Tanh
        x = self.leaky_relu(x)
        x = self.hardshrink(x)
        x = self.tanh(x)
        
        # Reshape for Fold
        x = x.view(1, -1)
        x = self.fold(x)
        
        # Compute L1Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
