
# This is a random torch model generated by the following modules: ['Bilinear', 'Flatten', 'MultiMarginLoss', 'TransformerEncoderLayer', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(128, 128, 64)
        self.bilinear2 = nn.Bilinear(64, 64, 32)
        self.flatten = nn.Flatten()
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=32, nhead=4)
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 128)
        x1 = torch.randn(x.size(0), 128).to(x.device)  # Random second input for bilinear
        x = self.bilinear1(x, x1)
        x = self.prelu1(x)
        
        x2 = torch.randn(x.size(0), 64).to(x.device)  # Random second input for bilinear
        x = self.bilinear2(x, x2)
        x = self.prelu2(x)
        
        x = self.flatten(x)
        x = x.unsqueeze(0)  # Add sequence dimension for TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)
        x = x.squeeze(0)  # Remove sequence dimension
        
        # Assuming target is a random tensor for MultiMarginLoss
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss = self.multi_margin_loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

