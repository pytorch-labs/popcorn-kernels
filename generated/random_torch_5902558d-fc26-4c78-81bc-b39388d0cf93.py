
# This is a random torch model generated by the following modules: ['SELU', 'UpsamplingNearest2d', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.selu1 = nn.SELU()
        self.lazy_conv2 = nn.LazyConv1d(out_channels=64, kernel_size=5)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)
        self.selu2 = nn.SELU()
        self.lazy_conv3 = nn.LazyConv1d(out_channels=128, kernel_size=7)
        self.selu3 = nn.SELU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, reshape to 1D convolution input shape (batch_size, channels, sequence_length)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        
        # Apply LazyConv1d
        x = self.lazy_conv1(x)
        
        # Reshape back to 2D for upsampling
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply UpsamplingNearest2d
        x = self.upsample1(x)
        
        # Apply SELU
        x = self.selu1(x)
        
        # Reshape back to 1D for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyConv1d
        x = self.lazy_conv2(x)
        
        # Reshape back to 2D for upsampling
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply UpsamplingNearest2d
        x = self.upsample2(x)
        
        # Apply SELU
        x = self.selu2(x)
        
        # Reshape back to 1D for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LazyConv1d
        x = self.lazy_conv3(x)
        
        # Apply SELU
        x = self.selu3(x)
        
        # Reshape back to original shape (batch_size, channels, height, width)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

