
# This is a random torch model generated by the following modules: ['MaxPool2d', 'Container', 'Dropout', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.container = nn.Sequential(
            nn.Dropout(0.5),
            RMSNorm(64),  # Assuming 64 features after pooling
            nn.Dropout(0.5),
            RMSNorm(64)
        )
        self.dropout = nn.Dropout(0.5)
        self.rmsnorm = RMSNorm(64)

    def forward(self, x):
        # Apply first max pooling
        x = self.maxpool1(x)
        
        # Apply second max pooling
        x = self.maxpool2(x)
        
        # Flatten the tensor for the container
        x = x.view(x.size(0), -1)
        
        # Pass through the container
        x = self.container(x)
        
        # Apply dropout
        x = self.dropout(x)
        
        # Apply RMSNorm
        x = self.rmsnorm(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 input size
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
