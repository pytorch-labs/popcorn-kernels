
# This is a random torch model generated by the following modules: ['SiLU', 'FractionalMaxPool3d', 'TransformerEncoderLayer', 'Linear', 'LazyInstanceNorm1d', 'AvgPool3d', 'AdaptiveLogSoftmaxWithLoss', 'AdaptiveMaxPool3d', 'ModuleList', 'Identity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.silu = nn.SiLU()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.linear1 = nn.Linear(64, 128)
        self.linear2 = nn.Linear(128, 64)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.adaptive_log_softmax_with_loss = nn.AdaptiveLogSoftmaxWithLoss(64, 10, [32, 64])
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(4, 4, 4))
        self.module_list = nn.ModuleList([nn.Identity() for _ in range(3)])
        self.identity = nn.Identity()

    def forward(self, x):
        x = self.silu(x)
        x = self.fractional_max_pool3d(x)
        x = x.view(-1, 64, 8 * 8 * 8)  # Reshape for TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)
        x = x.view(-1, 64)  # Reshape for Linear
        x = self.linear1(x)
        x = self.lazy_instance_norm1d(x)
        x = self.linear2(x)
        x = x.view(-1, 64, 1, 1, 1)  # Reshape for AvgPool3d
        x = self.avg_pool3d(x)
        x = self.adaptive_max_pool3d(x)
        x = x.view(-1, 64)  # Reshape for AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax_with_loss.log_prob(x)
        for module in self.module_list:
            x = module(x)
        x = self.identity(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
