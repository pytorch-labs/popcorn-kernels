
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'MaxUnpool3d', 'MultiMarginLoss', 'Softshrink', 'UpsamplingBilinear2d', 'ReplicationPad3d', 'Hardtanh', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 10, length + 4)
        
        # Reshape to 3D for MaxUnpool3d
        x = x.unsqueeze(2)  # Shape: (batch_size, 10, 1, length + 4)
        x = x.unsqueeze(4)  # Shape: (batch_size, 10, 1, length + 4, 1)
        
        # MaxUnpool3d requires indices, so we create dummy indices
        pool_output, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(pool_output, indices)  # Shape: (batch_size, 10, 1, length + 4, 1)
        
        # Remove extra dimensions
        x = x.squeeze(4).squeeze(2)  # Shape: (batch_size, 10, length + 4)
        
        x = self.softshrink(x)  # Shape: (batch_size, 10, length + 4)
        
        # Reshape to 4D for UpsamplingBilinear2d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 10, 1, length + 4)
        x = self.upsampling_bilinear2d(x)  # Shape: (batch_size, 10, 2, 2*(length + 4))
        
        # Reshape to 5D for ReplicationPad3d
        x = x.unsqueeze(4)  # Shape: (batch_size, 10, 2, 2*(length + 4), 1)
        x = self.replication_pad3d(x)  # Shape: (batch_size, 10, 4, 2*(length + 4) + 2, 3)
        
        x = self.hardtanh(x)  # Shape: (batch_size, 10, 4, 2*(length + 4) + 2, 3)
        
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, 10, 8, 8, 8)
        
        # Flatten for MultiMarginLoss
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 10*8*8*8)
        
        # Dummy target for MultiMarginLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Apply MultiMarginLoss
        loss = self.multi_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
