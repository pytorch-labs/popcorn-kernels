
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'ZeroPad3d', 'LazyConvTranspose1d', 'TransformerEncoderLayer', 'ConvTranspose3d', 'Dropout2d', 'InstanceNorm1d', 'ConstantPad1d', 'LPPool3d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=32, nhead=4)
        self.conv_transpose3d = nn.ConvTranspose3d(in_channels=32, out_channels=64, kernel_size=3)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.instance_norm1d = nn.InstanceNorm1d(num_features=64)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)

    def forward(self, x):
        # ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape for TransformerEncoderLayer
        x = x.permute(2, 0, 1)
        x = self.transformer_encoder_layer(x)
        x = x.permute(1, 2, 0)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        x = self.conv_transpose3d(x)
        
        # Dropout2d
        x = x.squeeze(-1).squeeze(-1)
        x = self.dropout2d(x)
        
        # InstanceNorm1d
        x = x.permute(0, 2, 1)
        x = self.instance_norm1d(x)
        x = x.permute(0, 2, 1)
        
        # ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for LPPool3d
        x = x.unsqueeze(-1).unsqueeze(-1)
        x = self.lp_pool3d(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.squeeze(-1).squeeze(-1)
        x = x.unsqueeze(1)
        x = self.fractional_max_pool2d(x)
        
        # CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
