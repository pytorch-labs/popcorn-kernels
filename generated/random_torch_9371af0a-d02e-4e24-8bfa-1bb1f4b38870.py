
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'Hardshrink', 'TransformerEncoderLayer', 'AdaptiveAvgPool3d', 'CircularPad2d', 'Conv1d', 'TransformerEncoder', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.hardshrink = nn.Hardshrink()
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.circular_pad2d = nn.CircularPad2d(1)
        self.conv1d = nn.Conv1d(64, 128, kernel_size=3)
        self.transformer_encoder = nn.TransformerEncoder(self.transformer_encoder_layer, num_layers=3)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.replication_pad3d(x)
        x = self.hardshrink(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, features)
        x = self.transformer_encoder_layer(x)
        x = x.permute(1, 2, 0)  # Reshape back to (batch_size, features, seq_len)
        x = x.view(batch_size, channels, depth, height, width)  # Reshape back to original spatial dimensions
        
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for CircularPad2d
        x = x.squeeze(-1)  # Remove depth dimension
        x = self.circular_pad2d(x)
        
        # Reshape for Conv1d
        x = x.squeeze(-1)  # Remove height dimension
        x = self.conv1d(x)
        
        # Reshape for TransformerEncoder
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, features)
        x = self.transformer_encoder(x)
        x = x.permute(1, 2, 0)  # Reshape back to (batch_size, features, seq_len)
        
        x = self.lazy_instance_norm1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 10, 10, 10).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

