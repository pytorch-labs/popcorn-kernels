
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'CosineSimilarity', 'PairwiseDistance', 'UpsamplingNearest2d', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.softmax2d = nn.Softmax2d()
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.pairwise_dist = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Split the tensor into two parts for CosineSimilarity and PairwiseDistance
        x1, x2 = torch.chunk(x, 2, dim=1)
        
        # Apply CosineSimilarity
        cosine_sim_output = self.cosine_sim(x1, x2)
        
        # Apply PairwiseDistance
        pairwise_dist_output = self.pairwise_dist(x1, x2)
        
        # Concatenate the outputs
        x = torch.cat([cosine_sim_output.unsqueeze(1), pairwise_dist_output.unsqueeze(1)], dim=1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input with 4 channels and 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

