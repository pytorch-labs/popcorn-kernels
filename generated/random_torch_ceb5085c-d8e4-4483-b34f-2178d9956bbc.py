
# This is a random torch model generated by the following modules: ['Softshrink', 'GRU', 'InstanceNorm3d', 'LazyInstanceNorm2d', 'MultiMarginLoss', 'Flatten', 'PairwiseDistance', 'TransformerEncoderLayer', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.instance_norm3d = nn.InstanceNorm3d(num_features=32)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.multi_margin_loss = nn.MultiMarginLoss(p=1, margin=1.0)
        self.flatten = nn.Flatten()
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=128, nhead=8)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.instance_norm3d(x)  # Apply InstanceNorm3d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for GRU
        x, _ = self.gru(x)  # Apply GRU
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        x = self.lazy_instance_norm2d(x)  # Apply LazyInstanceNorm2d
        x = self.avg_pool2d(x)  # Apply AvgPool2d
        x = self.softshrink(x)  # Apply Softshrink
        x = self.flatten(x)  # Flatten the tensor
        x = x.unsqueeze(0)  # Add batch dimension for TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)  # Apply TransformerEncoderLayer
        x = x.squeeze(0)  # Remove batch dimension
        x = x.view(x.size(0), -1)  # Reshape for PairwiseDistance
        x = self.pairwise_distance(x, x)  # Apply PairwiseDistance
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 64, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
