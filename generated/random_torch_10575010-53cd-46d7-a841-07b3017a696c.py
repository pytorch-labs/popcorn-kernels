
# This is a random torch model generated by the following modules: ['LogSoftmax', 'GRUCell', 'LazyInstanceNorm3d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm3d()
        self.norm2 = nn.LazyInstanceNorm3d()
        self.pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.gru_cell1 = nn.GRUCell(1, 10)
        self.gru_cell2 = nn.GRUCell(10, 20)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Apply instance normalization
        x = self.norm1(x)
        
        # Apply adaptive average pooling
        x = self.pool(x)
        
        # Reshape for GRUCell
        x = x.view(-1, 1)  # Flatten to (batch_size * height * width * depth, 1)
        
        # Pass through GRUCell layers
        hx1 = torch.zeros(x.size(0), 10).to(x.device)
        x = self.gru_cell1(x, hx1)
        
        hx2 = torch.zeros(x.size(0), 20).to(x.device)
        x = self.gru_cell2(x, hx2)
        
        # Reshape back to (batch_size, 20)
        x = x.view(-1, 20)
        
        # Apply instance normalization again
        x = self.norm2(x)
        
        # Apply log softmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

