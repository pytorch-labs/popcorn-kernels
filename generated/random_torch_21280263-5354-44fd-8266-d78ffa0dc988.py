
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'LogSigmoid', 'LazyConv2d', 'Hardswish', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3, stride=1, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1)
        self.conv2 = nn.LazyConv2d(out_channels=128, kernel_size=3, stride=1, padding=1)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.hardswish = nn.Hardswish()
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv_transpose1(x)
        x = self.hardswish(x)
        x = self.conv1(x)
        x = self.log_sigmoid(x)
        x = self.conv_transpose2(x)
        x = self.hardswish(x)
        x = self.conv2(x)
        x = self.log_sigmoid(x)
        
        # Reshape to 5D for FractionalMaxPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.fractional_max_pool3d(x)
        
        # Reshape back to 4D
        x = x.squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
