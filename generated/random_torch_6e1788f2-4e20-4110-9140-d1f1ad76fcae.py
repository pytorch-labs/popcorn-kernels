
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'AdaptiveAvgPool2d', 'GLU', 'LocalResponseNorm', 'InstanceNorm2d', 'Fold', 'ZeroPad1d', 'Threshold', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        self.glu = nn.GLU(dim=1)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.instance_norm2d = nn.InstanceNorm2d(num_features=10)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.adaptive_avg_pool2d(x)  # Shape: (batch_size, channels, 5, 5)
        x = self.instance_norm2d(x)  # Shape: (batch_size, channels, 5, 5)
        x = self.local_response_norm(x)  # Shape: (batch_size, channels, 5, 5)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 25)
        x = self.adaptive_avg_pool1d(x)  # Shape: (batch_size, channels, 10)
        x = self.zero_pad1d(x)  # Shape: (batch_size, channels, 14)
        
        # Reshape back for 2D operations
        x = x.view(x.size(0), x.size(1), 2, 7)  # Shape: (batch_size, channels, 2, 7)
        x = self.fold(x)  # Shape: (batch_size, channels, 10, 10)
        
        # Apply GLU
        x = x.view(x.size(0), x.size(1) * 2, -1)  # Shape: (batch_size, channels*2, 100)
        x = self.glu(x)  # Shape: (batch_size, channels, 100)
        
        # Reshape for final operations
        x = x.view(x.size(0), x.size(1), 10, 10)  # Shape: (batch_size, channels, 10, 10)
        x = self.threshold(x)  # Shape: (batch_size, channels, 10, 10)
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 100)
        x = self.softmin(x)  # Shape: (batch_size, channels, 100)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 20, 20).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
