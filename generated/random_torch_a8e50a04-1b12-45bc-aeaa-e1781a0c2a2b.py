
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'RMSNorm', 'LazyConv1d', 'Softsign', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.rms_norm1 = RMSNorm(8 * 8 * 8)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.softsign = nn.Softsign()
        self.softplus = nn.Softplus()
        self.rms_norm2 = RMSNorm(16)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.adaptive_avg_pool3d_2 = nn.AdaptiveAvgPool3d((4, 4, 4))
        self.rms_norm3 = RMSNorm(4 * 4 * 4)
        self.lazy_conv1d_3 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.softsign_2 = nn.Softsign()
        self.softplus_2 = nn.Softplus()

    def forward(self, x):
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for RMSNorm
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        x = self.rms_norm1(x)
        
        # Reshape for LazyConv1d
        x = x.view(batch_size, -1, 1)
        x = self.lazy_conv1d(x)
        
        # Apply Softsign and Softplus
        x = self.softsign(x)
        x = self.softplus(x)
        
        # Apply RMSNorm again
        x = x.view(batch_size, -1)
        x = self.rms_norm2(x)
        
        # Reshape for second LazyConv1d
        x = x.view(batch_size, -1, 1)
        x = self.lazy_conv1d_2(x)
        
        # Reshape for second AdaptiveAvgPool3d
        x = x.view(batch_size, 1, -1, 1, 1)
        x = self.adaptive_avg_pool3d_2(x)
        
        # Reshape for third RMSNorm
        x = x.view(batch_size, -1)
        x = self.rms_norm3(x)
        
        # Reshape for third LazyConv1d
        x = x.view(batch_size, -1, 1)
        x = self.lazy_conv1d_3(x)
        
        # Apply Softsign and Softplus again
        x = self.softsign_2(x)
        x = self.softplus_2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
