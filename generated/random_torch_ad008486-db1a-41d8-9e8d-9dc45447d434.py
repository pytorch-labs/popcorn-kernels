
# This is a random torch model generated by the following modules: ['KLDivLoss', 'SiLU', 'BatchNorm3d', 'ConvTranspose2d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.conv_trans1 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.silu1 = nn.SiLU()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        
        # Reduce to 4D by averaging over the depth dimension
        x = x.mean(dim=2)
        
        # Apply ConvTranspose2d
        x = self.conv_trans1(x)
        
        # Apply SiLU activation
        x = self.silu1(x)
        
        # Reshape to 3D (batch, channels, height*width)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        # Reshape to 2D (batch, channels * output_size)
        x = x.view(batch_size, -1)
        
        # Dummy target for KLDivLoss (assuming it's a classification task)
        target = torch.softmax(torch.randn_like(x), dim=1)
        
        # Apply KLDivLoss
        loss = self.kldivloss(F.log_softmax(x, dim=1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
