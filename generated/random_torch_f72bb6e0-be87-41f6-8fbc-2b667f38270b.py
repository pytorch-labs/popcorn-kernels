
# This is a random torch model generated by the following modules: ['AlphaDropout', 'LPPool1d', 'GRU', 'CELU', 'MaxUnpool1d', 'ConstantPad2d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.celu = nn.CELU(alpha=1.0)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.constant_pad2d = nn.ConstantPad2d(padding=(1, 1, 1, 1), value=0)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.constant_pad2d(x)  # Apply ConstantPad2d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        x = self.lp_pool1d(x)  # Apply LPPool1d
        x = self.alpha_dropout(x)  # Apply AlphaDropout
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, seq_len, features) for GRU
        x, _ = self.gru(x)  # Apply GRU
        x = self.celu(x)  # Apply CELU
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, features, seq_len)
        x = self.max_unpool1d(x, indices=torch.arange(x.size(2)).unsqueeze(0).repeat(x.size(0), 1))  # Apply MaxUnpool1d
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size=1, channels=3, height=64, width=64)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(*inputs)
# print(output.shape)
