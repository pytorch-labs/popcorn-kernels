
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'RNNCellBase', 'Mish', 'MaxPool2d', 'Hardswish', 'AdaptiveAvgPool2d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.mish = nn.Mish()
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.hardswish = nn.Hardswish()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape for LazyBatchNorm1d
        x = x.view(batch_size, -1)  # Flatten to (batch_size, channels * height * width)
        x = self.bn1(x)
        
        # Reshape back to 4D for RNNCellBase
        x = x.view(batch_size, channels, height, width)
        
        # Process through RNNCellBase
        hx = torch.zeros(batch_size, 256).to(x.device)  # Initialize hidden state
        x = x.view(batch_size, -1)  # Flatten to (batch_size, channels * height * width)
        x = self.rnn_cell(x, hx)
        
        # Reshape back to 4D for MaxPool2d
        x = x.view(batch_size, 1, 16, 16)  # Arbitrary reshape to fit MaxPool2d
        
        # Apply MaxPool2d
        x = self.maxpool(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Flatten for BCELoss
        x = x.view(batch_size, -1)
        
        # Generate a target tensor for BCELoss (dummy target)
        target = torch.rand_like(x)
        
        # Compute BCELoss
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

