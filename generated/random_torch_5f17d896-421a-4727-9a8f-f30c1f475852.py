
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'Linear', 'Hardswish', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.linear1 = nn.Linear(20 * 24 * 24 * 24, 100)  # Adjust based on input shape
        self.linear2 = nn.Linear(100, 10)
        self.hardswish = nn.Hardswish()
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply Conv3d layers
        x = self.hardswish(self.conv3d_1(x))
        x = self.hardswish(self.conv3d_2(x))
        
        # Flatten the output for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.hardswish(self.linear1(x))
        x = self.linear2(x)
        
        # Apply MultiLabelSoftMarginLoss (assuming x is the output and y is the target)
        # Note: This is unusual in a forward pass, but included as per the module list
        # Typically, the loss would be computed outside the model during training
        # Here, we assume a dummy target for demonstration purposes
        y = torch.randint(0, 2, (x.size(0), x.size(1))).float()  # Dummy target
        loss = self.loss(x, y)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 28, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

