
# This is a random torch model generated by the following modules: ['MSELoss', 'Linear', 'SyncBatchNorm', 'L1Loss', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.bilinear = nn.Bilinear(32, 32, 16)
        self.sync_bn = nn.SyncBatchNorm(16)
        self.mse_loss = nn.MSELoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Flatten the input to fit the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        
        # Apply Bilinear layer
        x = self.bilinear(x, x)
        
        # Apply SyncBatchNorm
        x = self.sync_bn(x)
        
        # Compute losses (dummy targets for demonstration)
        target_mse = torch.randn_like(x)
        target_l1 = torch.randn_like(x)
        
        mse_loss = self.mse_loss(x, target_mse)
        l1_loss = self.l1_loss(x, target_l1)
        
        # Return the sum of losses as the output
        return mse_loss + l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

