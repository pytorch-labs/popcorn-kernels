
# This is a random torch model generated by the following modules: ['Flatten', 'SoftMarginLoss', 'SmoothL1Loss', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5, stride=2)
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.flatten = nn.Flatten()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Compute losses (assuming some target values for demonstration)
        target_soft_margin = torch.ones_like(x)
        target_smooth_l1 = torch.zeros_like(x)
        
        soft_margin_loss = self.soft_margin_loss(x, target_soft_margin)
        smooth_l1_loss = self.smooth_l1_loss(x, target_smooth_l1)
        
        # Return the sum of losses as the output
        return soft_margin_loss + smooth_l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape for ConvTranspose1d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

