
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'EmbeddingBag', 'SoftMarginLoss', 'Flatten', 'PixelShuffle', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.flatten = nn.Flatten()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.instance_norm = nn.InstanceNorm3d(16)
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape and apply EmbeddingBag
        x = x.view(-1).long()  # Convert to 1D tensor of indices
        x = self.embedding_bag(x.view(1, -1))
        
        # Reshape and apply Flatten
        x = x.view(1, 1, 8, 8)  # Reshape to 4D tensor
        x = self.flatten(x)
        
        # Reshape and apply PixelShuffle
        x = x.view(1, 16, 4, 4)  # Reshape to 4D tensor
        x = self.pixel_shuffle(x)
        
        # Reshape and apply InstanceNorm3d
        x = x.view(1, 16, 2, 2, 2)  # Reshape to 5D tensor
        x = self.instance_norm(x)
        
        # Compute SoftMarginLoss (assuming a target tensor)
        target = torch.ones_like(x)
        loss = self.soft_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

