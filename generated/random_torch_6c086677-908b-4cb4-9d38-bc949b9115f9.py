
# This is a random torch model generated by the following modules: ['PReLU', 'LazyConvTranspose1d', 'LocalResponseNorm', 'Sigmoid', 'ReplicationPad2d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.local_response_norm1 = nn.LocalResponseNorm(size=5)
        self.sigmoid1 = nn.Sigmoid()
        self.replication_pad2d1 = nn.ReplicationPad2d(padding=2)
        self.softshrink1 = nn.Softshrink(lambd=0.5)
        self.prelu2 = nn.PReLU()
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.local_response_norm2 = nn.LocalResponseNorm(size=5)
        self.sigmoid2 = nn.Sigmoid()
        self.replication_pad2d2 = nn.ReplicationPad2d(padding=2)
        self.softshrink2 = nn.Softshrink(lambd=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.prelu1(x)
        
        # Reshape to 1D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # (batch_size, channels, height * width)
        x = self.conv_transpose1(x)
        
        # Reshape back to 2D for LocalResponseNorm
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.local_response_norm1(x)
        
        x = self.sigmoid1(x)
        x = self.replication_pad2d1(x)
        x = self.softshrink1(x)
        
        x = self.prelu2(x)
        
        # Reshape to 1D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # (batch_size, channels, height * width)
        x = self.conv_transpose2(x)
        
        # Reshape back to 2D for LocalResponseNorm
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.local_response_norm2(x)
        
        x = self.sigmoid2(x)
        x = self.replication_pad2d2(x)
        x = self.softshrink2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
