
# This is a random torch model generated by the following modules: ['Threshold', 'Hardshrink', 'PoissonNLLLoss', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold1 = nn.Threshold(0.5, 1.0)
        self.hardshrink1 = nn.Hardshrink()
        self.dropout1d1 = nn.Dropout1d(p=0.5)
        self.threshold2 = nn.Threshold(0.5, 1.0)
        self.hardshrink2 = nn.Hardshrink()
        self.dropout1d2 = nn.Dropout1d(p=0.5)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply Threshold
        x = self.threshold1(x)
        
        # Apply Hardshrink
        x = self.hardshrink1(x)
        
        # Reshape for Dropout1d
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout1d1(x)
        
        # Apply Threshold again
        x = self.threshold2(x)
        
        # Apply Hardshrink again
        x = self.hardshrink2(x)
        
        # Reshape for Dropout1d again
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout1d2(x)
        
        # Flatten the output for PoissonNLLLoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for PoissonNLLLoss (assuming classification task)
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Apply PoissonNLLLoss
        loss = self.poisson_nll_loss(x, target)
        
        # Return the loss as the output (since PoissonNLLLoss is a loss function)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

