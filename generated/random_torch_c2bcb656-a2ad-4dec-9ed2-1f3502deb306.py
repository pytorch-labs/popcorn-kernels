
# This is a random torch model generated by the following modules: ['Conv1d', 'AdaptiveLogSoftmaxWithLoss', 'MarginRankingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(20, 10, [5, 10])
        self.margin_ranking_loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Apply Conv1d layers
        x = self.conv1(x)
        x = self.conv2(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten the output
        
        # Apply AdaptiveLogSoftmaxWithLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        output, loss = self.adaptive_log_softmax(x, target)
        
        # Apply MarginRankingLoss
        input1 = torch.randn_like(output)
        input2 = torch.randn_like(output)
        target = torch.ones_like(output)
        margin_loss = self.margin_ranking_loss(input1, input2, target)
        
        return output, loss, margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

