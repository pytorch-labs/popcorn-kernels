
# This is a random torch model generated by the following modules: ['Softmax', 'ReLU6', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softmax = nn.Softmax(dim=1)
        self.relu6 = nn.ReLU6()
        self.gelu = nn.GELU()

    def forward(self, x):
        # Flatten the input to make it compatible with the activation functions
        x = x.view(x.size(0), -1)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Apply ReLU6 activation
        x = self.relu6(x)
        
        # Apply Softmax activation
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

