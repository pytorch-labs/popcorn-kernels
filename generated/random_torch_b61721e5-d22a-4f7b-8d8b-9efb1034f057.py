
# This is a random torch model generated by the following modules: ['LogSoftmax', 'RNN', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.rnn2 = nn.RNN(input_size=128, hidden_size=64, num_layers=1, batch_first=True)
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape input to fit RNN (batch_size, sequence_length, input_size)
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(0, 2, 1)  # Swap dimensions to (batch_size, sequence_length, input_size)
        
        # Pass through first RNN
        x, _ = self.rnn1(x)
        
        # Reshape back to 2D for upsampling
        x = x.permute(0, 2, 1)  # Swap dimensions back to (batch_size, input_size, sequence_length)
        x = x.view(batch_size, -1, height, width)  # Reshape to (batch_size, hidden_size, height, width)
        
        # Upsample
        x = self.upsample1(x)
        
        # Reshape again for second RNN
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        x = x.permute(0, 2, 1)
        
        # Pass through second RNN
        x, _ = self.rnn2(x)
        
        # Reshape back to 2D for upsampling
        x = x.permute(0, 2, 1)
        x = x.view(batch_size, -1, height, width)
        
        # Upsample again
        x = self.upsample2(x)
        
        # Flatten for LogSoftmax
        x = x.view(batch_size, -1)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input: batch_size=1, channels=3, height=32, width=32
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

