
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'CrossEntropyLoss', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.conv_transpose3 = nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=2)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        x = self.conv_transpose3(x)
        
        # Reshape the output to match the expected input shape for the loss functions
        x = x.view(x.size(0), -1)  # Flatten the output
        
        # Dummy target tensors for demonstration purposes
        target_class = torch.randint(0, 128, (x.size(0),), dtype=torch.long).to(x.device)
        target_multi_label = torch.randn(x.size(0), 128).to(x.device)
        
        # Compute losses
        loss1 = self.cross_entropy_loss(x, target_class)
        loss2 = self.multi_label_soft_margin_loss(x, target_multi_label)
        
        # Return the sum of the losses (or any other combination)
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 128).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

