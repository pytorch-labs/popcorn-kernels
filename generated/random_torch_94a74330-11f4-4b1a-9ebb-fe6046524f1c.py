
# This is a random torch model generated by the following modules: ['AlphaDropout', 'Mish', 'MultiMarginLoss', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.mish1 = nn.Mish()
        self.mish2 = nn.Mish()
        self.softplus1 = nn.Softplus()
        self.softplus2 = nn.Softplus()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply AlphaDropout
        x = self.alpha_dropout1(x)
        
        # Apply Mish activation
        x = self.mish1(x)
        
        # Apply Softplus activation
        x = self.softplus1(x)
        
        # Reshape the input to a 2D tensor for MultiMarginLoss
        x = x.view(x.size(0), -1)
        
        # Apply AlphaDropout again
        x = self.alpha_dropout2(x)
        
        # Apply Mish activation again
        x = self.mish2(x)
        
        # Apply Softplus activation again
        x = self.softplus2(x)
        
        # Generate a target tensor for MultiMarginLoss
        target = torch.randint(0, x.size(1), (x.size(0),), device=x.device)
        
        # Compute the MultiMarginLoss
        loss = self.multi_margin_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

