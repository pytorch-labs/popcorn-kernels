
# This is a random torch model generated by the following modules: ['AvgPool3d', 'LazyBatchNorm1d', 'PixelShuffle', 'AdaptiveAvgPool3d', 'ReflectionPad1d', 'Softplus', 'CircularPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.lazy_bn1d = nn.LazyBatchNorm1d()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.softplus = nn.Softplus()
        self.circular_pad2d = nn.CircularPad2d(2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        
        # Reshape to 2D for LazyBatchNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height * width, -1)
        x = self.lazy_bn1d(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height, width)
        
        # Reshape to 4D for PixelShuffle
        x = x.view(batch_size, channels * depth, height, width)
        x = self.pixel_shuffle(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height * 2, width * 2)
        
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to 3D for ReflectionPad1d
        x = x.view(batch_size, channels * depth, height * width)
        x = self.reflection_pad1d(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height, width + 4)
        
        x = self.softplus(x)
        
        # Reshape to 4D for CircularPad2d
        x = x.view(batch_size, channels * depth, height, width + 4)
        x = self.circular_pad2d(x)
        
        # Reshape back to 5D
        x = x.view(batch_size, channels, depth, height + 4, width + 8)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
