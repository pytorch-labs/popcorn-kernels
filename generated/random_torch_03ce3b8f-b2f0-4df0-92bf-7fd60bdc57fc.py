
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'CosineEmbeddingLoss', 'Tanh', 'MaxPool1d', 'HingeEmbeddingLoss', 'LazyConvTranspose3d', 'Softplus', 'AvgPool3d', 'GroupNorm', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose2d_1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2)
        self.conv_transpose2d_2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2)
        self.conv_transpose3d_1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=1)
        self.conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=1)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.group_norm = nn.GroupNorm(num_groups=8, num_channels=32)
        self.tanh = nn.Tanh()
        self.softplus = nn.Softplus()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose2d_1(x)
        x = self.conv_transpose2d_2(x)
        
        # Reshape for ConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), 1)
        
        # Apply ConvTranspose3d layers
        x = self.conv_transpose3d_1(x)
        x = self.conv_transpose3d_2(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.max_pool1d(x)
        
        # Apply GroupNorm
        x = x.view(x.size(0), x.size(1), 1, 1, -1)
        x = self.group_norm(x)
        
        # Apply Tanh and Softplus
        x = self.tanh(x)
        x = self.softplus(x)
        
        # Reshape for loss functions (dummy usage)
        x = x.view(x.size(0), -1)
        target = torch.ones_like(x)
        cosine_loss = self.cosine_embedding_loss(x, target, torch.ones(x.size(0)))
        hinge_loss = self.hinge_embedding_loss(x, torch.ones_like(x))
        bce_loss = self.bce_with_logits_loss(x, torch.sigmoid(target))
        
        # Return the sum of losses (dummy output)
        return cosine_loss + hinge_loss + bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

