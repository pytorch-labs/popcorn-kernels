
# This is a random torch model generated by the following modules: ['MSELoss', 'HingeEmbeddingLoss', 'PoissonNLLLoss', 'Bilinear', 'AdaptiveMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((5, 5))
        self.bilinear1 = nn.Bilinear(5 * 5, 5 * 5, 128)
        self.bilinear2 = nn.Bilinear(128, 128, 64)
        self.bilinear3 = nn.Bilinear(64, 64, 32)
        self.bilinear4 = nn.Bilinear(32, 32, 16)
        self.bilinear5 = nn.Bilinear(16, 16, 8)
        self.mse_loss = nn.MSELoss()
        self.hinge_loss = nn.HingeEmbeddingLoss()
        self.poisson_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply adaptive max pooling to reduce spatial dimensions
        x = self.adaptive_max_pool(x)
        
        # Flatten the output for bilinear layers
        x = x.view(x.size(0), -1)
        
        # Pass through a series of bilinear layers
        x = F.relu(self.bilinear1(x, x))
        x = F.relu(self.bilinear2(x, x))
        x = F.relu(self.bilinear3(x, x))
        x = F.relu(self.bilinear4(x, x))
        x = self.bilinear5(x, x)
        
        # Compute losses (for demonstration purposes, we use dummy targets)
        dummy_target = torch.ones_like(x)
        mse_loss = self.mse_loss(x, dummy_target)
        hinge_loss = self.hinge_loss(x, dummy_target)
        poisson_loss = self.poisson_loss(x, dummy_target)
        
        # Return the final output and the computed losses
        return x, mse_loss, hinge_loss, poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

