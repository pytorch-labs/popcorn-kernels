
# This is a random torch model generated by the following modules: ['MaxPool3d', 'ReflectionPad3d', 'PoissonNLLLoss', 'AdaptiveLogSoftmaxWithLoss', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.reflectionpad3d = nn.ReflectionPad3d(padding=1)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflectionpad3d(x)
        
        # Apply MaxPool3d
        x = self.maxpool3d(x)
        
        # Reshape the tensor to fit the input shape of AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = x[:, :128]  # Ensure the input has 128 features
        
        # Apply AdaptiveLogSoftmaxWithLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        output, _ = self.adaptive_log_softmax(x, target)
        
        # Apply CosineEmbeddingLoss
        input1 = torch.randn_like(output)
        input2 = torch.randn_like(output)
        target_cosine = torch.ones(output.size(0), device=output.device)
        loss = self.cosine_embedding_loss(input1, input2, target_cosine)
        
        # Apply PoissonNLLLoss
        log_input = torch.log(output + 1e-8)  # Ensure log_input is positive
        target_poisson = torch.randn_like(log_input)
        loss += self.poisson_nll_loss(log_input, target_poisson)
        
        return output, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for 3D operations
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

