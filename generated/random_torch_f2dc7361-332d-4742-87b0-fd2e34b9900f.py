
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'PReLU', 'Threshold', 'LazyConv2d', 'ConstantPad2d', 'EmbeddingBag', 'ConvTranspose3d', 'PixelShuffle', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.lazy_conv = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.prelu = nn.PReLU()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((8, 8))
        self.threshold = nn.Threshold(0.5, 1.0)
        self.conv_transpose_3d = nn.ConvTranspose3d(16, 8, kernel_size=3, stride=2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.embedding_bag = nn.EmbeddingBag(100, 10, mode='mean')
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assume x is a 4D tensor (batch, channels, height, width)
        x = self.pad(x)
        x = self.lazy_conv(x)
        x = self.prelu(x)
        x = self.adaptive_avg_pool(x)
        x = self.threshold(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.conv_transpose_3d(x)
        
        # Reshape back to 4D for PixelShuffle
        x = x.squeeze(2)
        x = self.pixel_shuffle(x)
        
        # Flatten and pass through EmbeddingBag
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.embedding_bag(x.long() % 100)  # Ensure indices are within range
        
        # Dummy target for BCEWithLogitsLoss
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

