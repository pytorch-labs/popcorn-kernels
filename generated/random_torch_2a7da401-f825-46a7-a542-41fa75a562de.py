
# This is a random torch model generated by the following modules: ['BCELoss', 'HuberLoss', 'ConstantPad1d', 'InstanceNorm3d', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad1d(2, 3.0)
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.instance_norm1 = nn.InstanceNorm3d(10)
        self.instance_norm2 = nn.InstanceNorm3d(20)
        self.bce_loss = nn.BCELoss()
        self.huber_loss = nn.HuberLoss()

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Reshape to 5D tensor for ConvTranspose3d
        x = x.view(-1, 1, 8, 8, 8)
        
        # Apply ConvTranspose3d and InstanceNorm3d
        x = self.conv_transpose1(x)
        x = self.instance_norm1(x)
        x = F.relu(x)
        
        x = self.conv_transpose2(x)
        x = self.instance_norm2(x)
        x = F.relu(x)
        
        # Reshape back to 2D tensor for loss computation
        x = x.view(-1, 20 * 16 * 16 * 16)
        
        # Compute BCE loss and Huber loss
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(torch.sigmoid(x), target)
        huber_loss = self.huber_loss(x, target)
        
        return bce_loss + huber_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
