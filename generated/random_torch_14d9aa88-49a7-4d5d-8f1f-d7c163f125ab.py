
# This is a random torch model generated by the following modules: ['ReLU6', 'AdaptiveAvgPool1d', 'NLLLoss2d', 'CircularPad3d', 'BatchNorm3d', 'SELU', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.batch_norm3d = nn.BatchNorm3d(16)
        self.relu6 = nn.ReLU6()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.selu = nn.SELU()
        self.softmin = nn.Softmin(dim=1)
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.circular_pad3d(x)
        x = self.batch_norm3d(x)
        x = self.relu6(x)
        
        # Reshape to 3D (batch, channels, depth*height*width)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back to 5D
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.selu(x)
        
        # Reshape to 2D (batch, channels*depth*height*width)
        x = x.view(x.size(0), -1)
        x = self.softmin(x)
        
        # Reshape to 4D (batch, channels, height, width) for NLLLoss2d
        x = x.view(x.size(0), 1, int(x.size(1) ** 0.5), int(x.size(1) ** 0.5))
        
        # Assuming target is provided externally
        target = torch.randint(0, 1, (x.size(0), int(x.size(1) ** 0.5), int(x.size(1) ** 0.5)))
        loss = self.nll_loss2d(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
