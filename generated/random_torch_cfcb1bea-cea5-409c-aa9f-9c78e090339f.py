
# This is a random torch model generated by the following modules: ['Sigmoid', 'Upsample', 'Hardsigmoid', 'RNNBase', 'ModuleList', 'CosineEmbeddingLoss', 'ReplicationPad3d', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.hardsigmoid = nn.Hardsigmoid()
        self.rnn = nn.RNNBase(input_size=10, hidden_size=20, num_layers=2)
        self.module_list = nn.ModuleList([
            nn.Sigmoid(),
            nn.ReplicationPad3d(1),
            nn.AdaptiveMaxPool3d((5, 5, 5)),
            nn.Hardsigmoid(),
            nn.Sigmoid()
        ])
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Reshape for RNN
        batch_size, *rest = x.shape
        x = x.view(batch_size, -1, 10)  # Assuming input size of 10 for RNN
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Reshape back to original dimensions
        x = x.view(batch_size, *rest)
        
        # Apply ModuleList modules
        for module in self.module_list:
            x = module(x)
        
        # Dummy target for CosineEmbeddingLoss
        target = torch.ones_like(x)
        loss = self.cosine_loss(x, target, torch.ones(batch_size))
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()  # Arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

