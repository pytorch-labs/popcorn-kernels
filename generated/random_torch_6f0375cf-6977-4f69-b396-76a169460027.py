
# This is a random torch model generated by the following modules: ['LSTM', 'InstanceNorm1d', 'AlphaDropout', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm1 = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.instance_norm1 = nn.InstanceNorm1d(num_features=64)
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.transformer_encoder_layer1 = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.lstm2 = nn.LSTM(input_size=64, hidden_size=32, num_layers=1, batch_first=True)
        self.instance_norm2 = nn.InstanceNorm1d(num_features=32)
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.transformer_encoder_layer2 = nn.TransformerEncoderLayer(d_model=32, nhead=4)
        self.fc = nn.Linear(32, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Pass through first LSTM
        x, _ = self.lstm1(x)  # Output shape: (batch_size, sequence_length, hidden_size=64)
        
        # Reshape for InstanceNorm1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size=64, sequence_length)
        x = self.instance_norm1(x)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length, hidden_size=64)
        
        # Apply AlphaDropout
        x = self.alpha_dropout1(x)
        
        # Pass through TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # Shape: (sequence_length, batch_size, hidden_size=64)
        x = self.transformer_encoder_layer1(x)
        x = x.permute(1, 0, 2)  # Shape: (batch_size, sequence_length, hidden_size=64)
        
        # Pass through second LSTM
        x, _ = self.lstm2(x)  # Output shape: (batch_size, sequence_length, hidden_size=32)
        
        # Reshape for InstanceNorm1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size=32, sequence_length)
        x = self.instance_norm2(x)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length, hidden_size=32)
        
        # Apply AlphaDropout
        x = self.alpha_dropout2(x)
        
        # Pass through TransformerEncoderLayer
        x = x.permute(1, 0, 2)  # Shape: (sequence_length, batch_size, hidden_size=32)
        x = self.transformer_encoder_layer2(x)
        x = x.permute(1, 0, 2)  # Shape: (batch_size, sequence_length, hidden_size=32)
        
        # Global average pooling over the sequence dimension
        x = x.mean(dim=1)  # Shape: (batch_size, hidden_size=32)
        
        # Final fully connected layer
        x = self.fc(x)  # Shape: (batch_size, 10)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 128).cuda()  # Example input: (batch_size=1, sequence_length=50, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

