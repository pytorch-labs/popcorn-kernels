
# This is a random torch model generated by the following modules: ['Bilinear', 'LazyBatchNorm2d', 'BCELoss', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bilinear1 = nn.Bilinear(10, 20, 30)
        self.bilinear2 = nn.Bilinear(30, 40, 50)
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.bn3 = nn.LazyBatchNorm2d()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Reshape x to fit Bilinear input
        x = x.view(batch_size, -1)  # Flatten spatial dimensions
        x = x.view(batch_size, 10, -1)  # Reshape to (batch_size, 10, ...)
        x = x.view(batch_size, 10, 20)  # Reshape to (batch_size, 10, 20)
        
        # Apply Bilinear layers
        x = self.bilinear1(x, x)  # Output shape: (batch_size, 30)
        x = self.bilinear2(x, x)  # Output shape: (batch_size, 50)
        
        # Reshape for BatchNorm2d
        x = x.view(batch_size, 50, 1, 1)  # Reshape to (batch_size, 50, 1, 1)
        
        # Apply BatchNorm2d layers
        x = self.bn1(x)
        x = self.bn2(x)
        x = self.bn3(x)
        
        # Reshape for ConvTranspose2d
        x = x.view(batch_size, 50, 1, 1)  # Reshape to (batch_size, 50, 1, 1)
        
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)  # Output shape: (batch_size, 64, 2, 2)
        x = self.conv_transpose2(x)  # Output shape: (batch_size, 32, 4, 4)
        
        # Apply BCELoss (assuming a target tensor is provided)
        target = torch.rand_like(x)  # Random target for demonstration
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

