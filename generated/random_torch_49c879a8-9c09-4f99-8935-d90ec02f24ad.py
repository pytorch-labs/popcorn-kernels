
# This is a random torch model generated by the following modules: ['Dropout3d', 'ConstantPad2d', 'AdaptiveMaxPool3d', 'ModuleList', 'LazyInstanceNorm3d', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.constant_pad2d = nn.ConstantPad2d(padding=2, value=1.0)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.module_list = nn.ModuleList([
            nn.LazyInstanceNorm3d(),
            nn.InstanceNorm3d(num_features=16),
            nn.LazyInstanceNorm3d(),
            nn.InstanceNorm3d(num_features=32),
            nn.LazyInstanceNorm3d()
        ])

    def forward(self, x):
        # Apply ConstantPad2d (assuming input is 4D, adding padding to make it 5D for 3D operations)
        x = self.constant_pad2d(x)
        x = x.unsqueeze(1)  # Add a channel dimension to make it 5D
        
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        # Apply ModuleList with LazyInstanceNorm3d and InstanceNorm3d
        for module in self.module_list:
            x = module(x)
        
        # Reshape to flatten the output for potential downstream tasks
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for 2D input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

