
# This is a random torch model generated by the following modules: ['Softmin', 'SELU', 'Linear', 'CELU', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 128)
        self.linear3 = nn.Linear(128, 64)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.softmin = nn.Softmin(dim=1)
        self.selu = nn.SELU()
        self.celu = nn.CELU()

    def forward(self, x):
        # Flatten the input to fit the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers with SELU and CELU activations
        x = self.selu(self.linear1(x))
        x = self.celu(self.linear2(x))
        x = self.linear3(x)
        
        # Reshape to 3D for Dropout3d
        x = x.view(x.size(0), 8, 8, -1)
        x = self.dropout3d(x)
        
        # Flatten again for Softmin
        x = x.view(x.size(0), -1)
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

