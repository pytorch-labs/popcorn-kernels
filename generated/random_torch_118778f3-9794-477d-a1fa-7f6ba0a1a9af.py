
# This is a random torch model generated by the following modules: ['BCELoss', 'FeatureAlphaDropout', 'LazyConvTranspose1d', 'BatchNorm1d', 'LazyLinear', 'LazyInstanceNorm2d', 'RNN', 'FractionalMaxPool2d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.batch_norm1 = nn.BatchNorm1d(32)
        self.feature_alpha_dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.rnn = nn.RNN(input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.lazy_linear1 = nn.LazyLinear(out_features=128)
        self.gelu = nn.GELU()
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_linear2 = nn.LazyLinear(out_features=10)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.batch_norm1(x)
        x = self.feature_alpha_dropout1(x)
        
        # Reshape for RNN
        x = x.permute(0, 2, 1)  # (batch_size, length, channels)
        x, _ = self.rnn(x)
        
        # Reshape for LazyLinear
        x = x.reshape(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.lazy_linear1(x)
        x = self.gelu(x)
        
        # Reshape for LazyInstanceNorm2d
        x = x.unsqueeze(2).unsqueeze(3)  # (batch_size, 128, 1, 1)
        x = self.lazy_instance_norm2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Flatten for final LazyLinear
        x = x.reshape(x.size(0), -1)
        x = self.lazy_linear2(x)
        
        # Apply sigmoid for BCELoss
        x = torch.sigmoid(x)
        
        # Assuming target is provided externally for BCELoss
        # For demonstration, we'll return x and compute loss outside
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

