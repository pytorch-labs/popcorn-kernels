
# This is a random torch model generated by the following modules: ['GRU', 'ReflectionPad1d', 'PoissonNLLLoss', 'CELU', 'Flatten', 'Hardswish', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.celu = nn.CELU()
        self.flatten = nn.Flatten()
        self.hardswish = nn.Hardswish()
        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Reshape for GRU
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1)  # Reshape to (batch_size, channels, height * width)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, height * width, channels) for GRU
        
        # GRU
        x, _ = self.gru(x)
        
        # Reshape back to (batch_size, channels, height, width)
        x = x.permute(0, 2, 1)
        x = x.view(batch_size, -1, height, width)
        
        # ReflectionPad1d
        x = self.reflection_pad(x)
        
        # MaxPool2d
        x = self.maxpool(x)
        
        # CELU
        x = self.celu(x)
        
        # Hardswish
        x = self.hardswish(x)
        
        # Flatten
        x = self.flatten(x)
        
        # PoissonNLLLoss (assuming we have a target tensor for demonstration)
        target = torch.randn_like(x)
        loss = self.poisson_nll_loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

