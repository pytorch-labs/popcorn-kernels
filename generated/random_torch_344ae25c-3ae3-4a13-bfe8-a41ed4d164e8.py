
# This is a random torch model generated by the following modules: ['TransformerEncoderLayer', 'GRUCell', 'PixelUnshuffle', 'AvgPool1d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_encoder = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=64)
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Apply PixelUnshuffle to reduce spatial dimensions and increase channels
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, channels * 4, height // 2, width // 2)
        
        # Reshape for TransformerEncoderLayer
        x = x.view(batch_size, -1, channels * 4)  # Shape: (batch_size, (height // 2 * width // 2), channels * 4)
        x = self.transformer_encoder(x)  # Shape: (batch_size, (height // 2 * width // 2), channels * 4)
        
        # Reshape for GRUCell
        x = x.view(-1, channels * 4)  # Shape: (batch_size * (height // 2 * width // 2), channels * 4)
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state for GRUCell
        x = self.gru_cell(x, hx)  # Shape: (batch_size * (height // 2 * width // 2), 64)
        
        # Reshape back to 3D for AvgPool1d
        x = x.view(batch_size, -1, 64)  # Shape: (batch_size, (height // 2 * width // 2), 64)
        x = self.avg_pool(x)  # Shape: (batch_size, (height // 2 * width // 2) // 2, 64)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(batch_size, 64, (height // 4), (width // 4))  # Shape: (batch_size, 64, height // 4, width // 4)
        x = self.conv_transpose(x)  # Shape: (batch_size, 32, height // 2, width // 2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
