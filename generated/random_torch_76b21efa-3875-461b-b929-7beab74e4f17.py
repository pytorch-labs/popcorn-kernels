
# This is a random torch model generated by the following modules: ['Conv2d', 'LazyInstanceNorm1d', 'CircularPad2d', 'SELU', 'ParameterList', 'Softmin', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.circular_pad2d = nn.CircularPad2d(1)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.selu = nn.SELU()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(16)) for _ in range(5)])
        self.softmin = nn.Softmin(dim=1)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        x = self.conv1(x)
        x = self.circular_pad2d(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for LazyInstanceNorm1d
        x = self.lazy_instance_norm1d(x)
        x = x.view(x.size(0), 16, x.size(2)//16, -1)  # Reshape back to 4D
        x = self.selu(x)
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1)  # Add parameter to each channel
        x = self.softmin(x)
        x = x.unsqueeze(2)  # Add a dimension for CircularPad3d
        x = self.circular_pad3d(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.conv2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
