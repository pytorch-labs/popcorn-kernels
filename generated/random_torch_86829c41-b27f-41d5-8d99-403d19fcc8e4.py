
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'ModuleDict', 'Softplus', 'CrossEntropyLoss', 'MultiLabelMarginLoss', 'FeatureAlphaDropout', 'FractionalMaxPool2d', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.module_dict = nn.ModuleDict({
            'softplus': nn.Softplus(),
            'softmin': nn.Softmin(dim=1),
            'feature_alpha_dropout': nn.FeatureAlphaDropout(p=0.5),
            'fractional_max_pool2d': nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        })
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        x = self.module_dict['fractional_max_pool2d'](x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1).squeeze(-1))
        x = self.module_dict['feature_alpha_dropout'](x)
        x = self.bn2(x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1).unsqueeze(-1))
        x = self.module_dict['softplus'](x)
        x = self.module_dict['softmin'](x.view(x.size(0), -1))
        
        # Dummy target for loss calculation
        target = torch.randint(0, 10, (x.size(0),), dtype=torch.long).to(x.device)
        multi_label_target = torch.randint(0, 2, (x.size(0), 10), dtype=torch.long).to(x.device)
        
        # Calculate losses (not typically done in forward, but included for demonstration)
        ce_loss = self.cross_entropy_loss(x, target)
        mlm_loss = self.multi_label_margin_loss(x, multi_label_target)
        
        # Return both the output and the losses
        return x, ce_loss, mlm_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
