
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'Conv1d', 'ZeroPad2d', 'ReLU', 'PoissonNLLLoss', 'BatchNorm3d', 'LogSoftmax', 'Softmax2d', 'SoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.constant_pad = nn.ConstantPad2d(2, 3.0)
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.zero_pad = nn.ZeroPad2d(1)
        self.relu = nn.ReLU()
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.softmax2d = nn.Softmax2d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply ConstantPad2d
        x = self.constant_pad(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), 1, -1)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        
        # Apply ZeroPad2d
        x = self.zero_pad(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Reshape for BatchNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), 1)
        
        # Apply BatchNorm3d
        x = self.batch_norm3d(x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), -1)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Compute PoissonNLLLoss (requires target, so we create a dummy target)
        target = torch.randint(0, 10, (x.size(0),), dtype=torch.float32).to(x.device)
        poisson_loss = self.poisson_nll_loss(x, target)
        
        # Compute SoftMarginLoss (requires target, so we create a dummy target)
        target = torch.randint(0, 2, (x.size(0),), dtype=torch.float32).to(x.device) * 2 - 1
        soft_margin_loss = self.soft_margin_loss(x, target)
        
        # Return the final output and the losses
        return x, poisson_loss, soft_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
