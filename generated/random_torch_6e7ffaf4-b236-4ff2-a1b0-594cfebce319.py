
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'CELU', 'Linear', 'ELU', 'LazyConv2d', 'ModuleList', 'ReplicationPad2d', 'ReplicationPad3d', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.celu = nn.CELU()
        self.linear1 = nn.Linear(128, 64)
        self.elu = nn.ELU()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.module_list = nn.ModuleList([
            nn.ReplicationPad2d(2),
            nn.ReplicationPad3d(1),
            nn.Sequential(
                nn.Linear(64, 32),
                nn.ELU()
            )
        ])
        self.linear2 = nn.Linear(32, 10)

    def forward(self, x):
        x = self.upsample(x)
        x = self.celu(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.linear1(x)
        x = self.elu(x)
        x = x.view(x.size(0), -1, 8, 8)  # Reshape for Conv2d
        x = self.lazy_conv2d(x)
        x = self.module_list[0](x)
        x = x.view(x.size(0), -1)  # Flatten again
        x = self.module_list[2](x)
        x = self.linear2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
