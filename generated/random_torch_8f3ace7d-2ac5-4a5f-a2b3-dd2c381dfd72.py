
# This is a random torch model generated by the following modules: ['Softmin', 'NLLLoss', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softmin = nn.Softmin(dim=1)
        self.gelu = nn.GELU()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply Softmin to the input
        x = self.softmin(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Reshape the input to match the expected shape for NLLLoss
        x = x.view(x.size(0), -1)  # Flatten the input
        
        # Generate a dummy target for NLLLoss (assuming classification task)
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Apply NLLLoss (note: NLLLoss expects log probabilities as input)
        loss = self.nll_loss(torch.log(x + 1e-9), target)
        
        # Return the loss (since NLLLoss is typically used for training)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

