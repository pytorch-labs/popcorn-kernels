
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'AdaptiveAvgPool1d', 'AvgPool3d', 'ReflectionPad1d', 'GELU', 'MultiLabelMarginLoss', 'Linear', 'LogSoftmax', 'LeakyReLU', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.avg_pool1d = nn.AdaptiveAvgPool1d(output_size=64)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.reflection_pad1d = nn.ReflectionPad1d(padding=1)
        self.gelu = nn.GELU()
        self.linear1 = nn.Linear(64, 128)
        self.linear2 = nn.Linear(128, 64)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=64)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # Apply LazyBatchNorm3d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, depth*height*width)
        x = self.avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to (batch_size, channels, 1, 1, 64)
        x = self.avg_pool3d(x)  # Apply AvgPool3d
        x = x.squeeze(3).squeeze(2)  # Reshape to (batch_size, channels, 64)
        x = self.reflection_pad1d(x)  # Apply ReflectionPad1d
        x = self.gelu(x)  # Apply GELU
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, channels*64)
        x = self.linear1(x)  # Apply Linear
        x = self.leaky_relu(x)  # Apply LeakyReLU
        x = self.linear2(x)  # Apply Linear
        x = self.log_softmax(x)  # Apply LogSoftmax
        
        # GRUCell requires a hidden state
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)  # Apply GRUCell
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

