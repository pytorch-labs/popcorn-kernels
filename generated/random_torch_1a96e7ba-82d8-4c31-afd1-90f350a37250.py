
# This is a random torch model generated by the following modules: ['Softmin', 'LazyConv3d', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.conv3 = nn.LazyConv3d(out_channels=64, kernel_size=3)
        self.softmin = nn.Softmin(dim=1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Apply the first LazyConv3d layer
        x = self.conv1(x)
        x = self.softmin(x)  # Apply Softmin after the first convolution
        
        # Apply the second LazyConv3d layer
        x = self.conv2(x)
        x = self.sigmoid(x)  # Apply Sigmoid after the second convolution
        
        # Apply the third LazyConv3d layer
        x = self.conv3(x)
        x = self.softmin(x)  # Apply Softmin after the third convolution
        
        # Flatten the output for final processing
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
