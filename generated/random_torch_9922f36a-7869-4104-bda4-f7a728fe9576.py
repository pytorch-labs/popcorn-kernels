
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'SmoothL1Loss', 'CTCLoss', 'Tanhshrink', 'LayerNorm', 'ReflectionPad1d', 'GRU', 'LazyConvTranspose3d', 'Linear', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=10)
        self.layer_norm = nn.LayerNorm(10)
        self.reflection_pad = nn.ReflectionPad1d(padding=2)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.conv_transpose = nn.LazyConvTranspose3d(out_channels=5, kernel_size=3)
        self.linear1 = nn.Linear(20, 50)
        self.linear2 = nn.Linear(50, 10)
        self.tanhshrink = nn.Tanhshrink()
        self.module_dict = nn.ModuleDict({
            'linear3': nn.Linear(10, 5),
            'linear4': nn.Linear(5, 1)
        })
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, length)
        x = self.adaptive_avg_pool(x)
        x = self.layer_norm(x)
        x = self.reflection_pad(x)
        
        # Reshape for GRU
        x = x.permute(0, 2, 1)  # (batch_size, length, channels)
        x, _ = self.gru(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(1)  # Add a dummy dimension for ConvTranspose3d
        x = x.unsqueeze(-1)  # Add another dummy dimension
        x = self.conv_transpose(x)
        
        # Reshape back for Linear layers
        x = x.view(x.size(0), -1)  # Flatten
        x = self.linear1(x)
        x = self.tanhshrink(x)
        x = self.linear2(x)
        
        # Use ModuleDict
        x = self.module_dict['linear3'](x)
        x = self.module_dict['linear4'](x)
        
        # Compute losses (dummy targets for demonstration)
        target_smooth_l1 = torch.randn_like(x)
        loss_smooth_l1 = self.smooth_l1_loss(x, target_smooth_l1)
        
        target_ctc = torch.randint(0, 5, (x.size(0), 10), dtype=torch.long)
        input_lengths = torch.full((x.size(0),), x.size(1), dtype=torch.long)
        target_lengths = torch.randint(1, 10, (x.size(0),), dtype=torch.long)
        loss_ctc = self.ctc_loss(x, target_ctc, input_lengths, target_lengths)
        
        return x, loss_smooth_l1, loss_ctc


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 100).cuda()  # (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
