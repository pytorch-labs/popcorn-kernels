
# This is a random torch model generated by the following modules: ['LPPool3d', 'AvgPool3d', 'LayerNorm', 'ZeroPad2d', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.layer_norm = nn.LayerNorm([32, 32, 32])
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply LPPool3d
        x = self.lp_pool3d(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape for LayerNorm
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = x.permute(0, 4, 1, 2, 3).contiguous()
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Reshape for CosineSimilarity
        x = x.view(x.size(0), x.size(1), -1)
        x = x.permute(0, 2, 1).contiguous()
        
        # Apply CosineSimilarity
        x = self.cosine_similarity(x[:, 0], x[:, 1])
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
