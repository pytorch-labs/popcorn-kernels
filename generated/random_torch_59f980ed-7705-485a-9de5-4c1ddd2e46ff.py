
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'NLLLoss2d', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.nll_loss_2d = nn.NLLLoss2d()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply AdaptiveMaxPool3d to the input
        x = self.adaptive_max_pool3d(x)
        
        # Reshape the tensor to fit NLLLoss2d input requirements
        x = x.view(x.size(0), -1, x.size(3), x.size(4))  # Reshape to (batch_size, channels, height, width)
        
        # Apply NLLLoss2d (assuming we have a target tensor for demonstration)
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3)), device=x.device)
        x = self.nll_loss_2d(x, target)
        
        # Reshape the tensor to fit BCEWithLogitsLoss input requirements
        x = x.view(x.size(0), -1)  # Reshape to (batch_size, features)
        
        # Apply BCEWithLogitsLoss (assuming we have a target tensor for demonstration)
        target_bce = torch.randint(0, 2, (x.size(0), x.size(1)), device=x.device).float()
        x = self.bce_with_logits_loss(x, target_bce)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 20, 20, 20).cuda()  # Example input tensor with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

