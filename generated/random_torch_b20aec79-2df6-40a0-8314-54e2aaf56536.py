
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'Conv2d', 'FractionalMaxPool2d', 'ReflectionPad3d', 'MaxUnpool2d', 'Sequential', 'ReflectionPad2d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.conv2d_1 = nn.Conv2d(1, 10, kernel_size=5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.reflection_pad2d = nn.ReflectionPad2d(1)
        self.lazy_conv2d = nn.LazyConv2d(20, kernel_size=5)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((10, 10, 10))
        self.sequential = nn.Sequential(
            nn.Conv2d(20, 30, kernel_size=3),
            nn.ReLU(),
            nn.Conv2d(30, 40, kernel_size=3),
            nn.ReLU()
        )

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.reflection_pad2d(x)
        x = self.conv2d_1(x)
        x = self.fractional_max_pool2d(x)
        x = self.reflection_pad2d(x)
        x = self.lazy_conv2d(x)
        
        # Save indices for MaxUnpool2d
        pool_output, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(pool_output, indices)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a dummy depth dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Remove the dummy depth dimension
        x = x.squeeze(2)
        
        x = self.sequential(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
