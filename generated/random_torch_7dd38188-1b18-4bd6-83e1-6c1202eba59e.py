
# This is a random torch model generated by the following modules: ['CircularPad3d', 'Flatten', 'RMSNorm', 'AdaptiveAvgPool1d', 'LazyConvTranspose1d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.rms_norm = nn.RMSNorm(64)  # Assuming 64 as a default feature size
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(32)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.flatten = nn.Flatten()

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, depth)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to (batch_size, channels, height, width)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        
        # Apply AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.adaptive_avg_pool1d(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
