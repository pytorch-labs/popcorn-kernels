
# This is a random torch model generated by the following modules: ['ReLU6', 'TripletMarginLoss', 'MultiLabelMarginLoss', 'GLU', 'SoftMarginLoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.glu2 = nn.GLU(dim=1)
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.relu6 = nn.ReLU6()
        self.triplet_margin_loss = nn.TripletMarginLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply GLU twice
        x = self.glu1(x)
        x = self.glu2(x)
        
        # Apply CELU twice
        x = self.celu1(x)
        x = self.celu2(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for loss functions
        x = x.view(x.size(0), -1)
        
        # Dummy targets for loss functions
        target_triplet = torch.randint(0, 2, (x.size(0),)).long()
        target_multi_label = torch.randint(0, 2, (x.size(0), x.size(1))).long()
        target_soft_margin = torch.randint(0, 2, (x.size(0),)).float()
        
        # Apply TripletMarginLoss
        anchor = x[:x.size(0)//2]
        positive = x[x.size(0)//2:]
        negative = torch.flip(positive, [0])
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Apply MultiLabelMarginLoss
        multi_label_loss = self.multi_label_margin_loss(x, target_multi_label)
        
        # Apply SoftMarginLoss
        soft_margin_loss = self.soft_margin_loss(x, target_soft_margin)
        
        # Return the sum of all losses
        return triplet_loss + multi_label_loss + soft_margin_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 20, 30).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
