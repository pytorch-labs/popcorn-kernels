
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'RMSNorm', 'MaxUnpool3d', 'ReplicationPad3d', 'PReLU', 'Hardtanh', 'CosineEmbeddingLoss', 'UpsamplingBilinear2d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.rms_norm = RMSNorm(64)  # Assuming 64 channels for RMSNorm
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.pad3d = nn.ReplicationPad3d(1)
        self.prelu = nn.PReLU()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        
        # Dummy indices for MaxUnpool3d
        self.indices = None

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.bn1(x)
        
        # Reshape for RMSNorm (assuming 64 channels)
        x = x.view(x.size(0), 64, -1)
        x = self.rms_norm(x)
        x = x.view(x.size(0), 64, x.size(2), x.size(3))
        
        # Reshape for MaxUnpool3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D
        x, self.indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, self.indices)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply ReplicationPad3d
        x = self.pad3d(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D
        x = self.adaptive_avg_pool3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

