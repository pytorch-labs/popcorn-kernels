
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'Hardtanh', 'LPPool3d', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.InstanceNorm3d(1)
        self.norm2 = nn.InstanceNorm3d(10)
        self.hardtanh1 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.hardtanh2 = nn.Hardtanh(min_val=-0.5, max_val=0.5)
        self.pool1 = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.pool2 = nn.LPPool3d(norm_type=1, kernel_size=2, stride=1)
        self.relu6 = nn.ReLU6()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.norm1(x)
        x = self.hardtanh1(x)
        x = self.pool1(x)
        x = self.relu6(x)
        x = self.norm2(x)
        x = self.hardtanh2(x)
        x = self.pool2(x)
        x = self.relu6(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
