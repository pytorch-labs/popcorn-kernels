
# This is a random torch model generated by the following modules: ['LayerNorm', 'RNNCell', 'Sequential', 'ModuleList', 'MaxPool3d', 'ReflectionPad3d', 'ReplicationPad3d', 'CircularPad3d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.layer_norm = nn.LayerNorm(64)
        self.rnn_cell = nn.RNNCell(64, 128)
        self.sequential = nn.Sequential(
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.ReflectionPad3d(1),
            nn.ReplicationPad3d(1),
            nn.CircularPad3d(1)
        )
        self.module_list = nn.ModuleList([
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.ReflectionPad3d(1),
            nn.ReplicationPad3d(1),
            nn.CircularPad3d(1)
        ])
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, depth, height, width)
        x = x.view(-1, 64)  # Reshape to (batch_size * depth * height * width, 64)
        x = self.layer_norm(x)
        x = self.rnn_cell(x)  # Output shape: (batch_size * depth * height * width, 128)
        x = x.view(-1, 128, 8, 8, 8)  # Reshape to (batch_size, 128, 8, 8, 8)
        x = self.sequential(x)
        for module in self.module_list:
            x = module(x)
        x = x.mean(dim=[2, 3, 4])  # Global average pooling
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(inputs[0])
# print(output.shape)
