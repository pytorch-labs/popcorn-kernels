
# This is a random torch model generated by the following modules: ['Hardswish', 'MaxUnpool2d', 'CircularPad1d', 'Unflatten', 'ReflectionPad3d', 'Dropout2d', 'AdaptiveAvgPool3d', 'EmbeddingBag', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardswish = nn.Hardswish()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.unflatten = nn.Unflatten(1, (1, 10))
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=100, embedding_dim=10, mode='mean')
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=10, nhead=2)

    def forward(self, x):
        # Apply CircularPad1d to the input
        x = self.circular_pad1d(x)
        
        # Apply ReflectionPad3d to the input
        x = self.reflection_pad3d(x)
        
        # Apply AdaptiveAvgPool3d to the input
        x = self.adaptive_avg_pool3d(x)
        
        # Apply Dropout2d to the input
        x = self.dropout2d(x)
        
        # Apply Unflatten to the input
        x = self.unflatten(x)
        
        # Apply Hardswish activation function
        x = self.hardswish(x)
        
        # Apply MaxUnpool2d to the input
        x = self.max_unpool2d(x)
        
        # Apply EmbeddingBag to the input
        x = self.embedding_bag(x)
        
        # Apply TransformerEncoderLayer to the input
        x = self.transformer_encoder_layer(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
