
# This is a random torch model generated by the following modules: ['GroupNorm', 'HingeEmbeddingLoss', 'CrossEntropyLoss', 'CELU', 'Sequential', 'AdaptiveLogSoftmaxWithLoss', 'ConvTranspose3d', 'Bilinear', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=16)
        self.celu = nn.CELU()
        self.conv_transpose3d = nn.ConvTranspose3d(in_channels=16, out_channels=8, kernel_size=3, stride=2, padding=1)
        self.circular_pad3d = nn.CircularPad3d(padding=1)
        self.bilinear = nn.Bilinear(in1_features=8, in2_features=8, out_features=16)
        self.sequential = nn.Sequential(
            nn.ConvTranspose3d(in_channels=8, out_channels=16, kernel_size=3, stride=2, padding=1),
            nn.CELU(),
            nn.GroupNorm(num_groups=2, num_channels=16)
        )
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=16, n_classes=10, cutoffs=[4, 8])
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.circular_pad3d(x)
        x = self.conv_transpose3d(x)
        x = self.group_norm(x)
        x = self.celu(x)
        
        # Reshape for Bilinear layer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.bilinear(x, x)  # Bilinear transformation
        
        # Reshape back to 5D tensor
        x = x.view(batch_size, -1, depth, height, width)
        
        x = self.sequential(x)
        
        # AdaptiveLogSoftmaxWithLoss expects 2D input (batch_size, in_features)
        x = x.view(batch_size, -1)
        output = self.adaptive_log_softmax(x, torch.zeros(batch_size, dtype=torch.long).to(x.device))
        
        # Compute losses (dummy targets for demonstration)
        hinge_loss = self.hinge_embedding_loss(output.output, torch.ones(batch_size).to(x.device))
        cross_entropy_loss = self.cross_entropy_loss(output.output, torch.zeros(batch_size, dtype=torch.long).to(x.device))
        
        return output.output, hinge_loss, cross_entropy_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

