
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'ZeroPad1d', 'ReplicationPad1d', 'MSELoss', 'MaxPool1d', 'ParameterDict', 'Conv2d', 'BCELoss', 'ReflectionPad3d', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.zero_pad = nn.ZeroPad1d(padding=2)
        self.replication_pad = nn.ReplicationPad1d(padding=2)
        self.max_pool = nn.MaxPool1d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.reflection_pad = nn.ReflectionPad3d(padding=1)
        self.hardtanh = nn.Hardtanh(min_val=-1, max_val=1)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1)),
            'param2': nn.Parameter(torch.randn(1))
        })
        self.mse_loss = nn.MSELoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Initial convolution
        x = self.conv1(x)
        
        # Upsample the feature map
        x = self.upsample(x)
        
        # Reshape and apply 1D padding
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.zero_pad(x)
        x = self.replication_pad(x)
        
        # Max pooling
        x = self.max_pool(x)
        
        # Reshape back to 2D and apply another convolution
        x = x.view(x.size(0), 16, 32, 32)  # Reshape back to 2D
        x = self.conv2(x)
        
        # Apply reflection padding
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D padding
        x = self.reflection_pad(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Use parameters from ParameterDict
        x = x * self.parameter_dict['param1'] + self.parameter_dict['param2']
        
        # Compute losses (dummy targets for illustration)
        target_mse = torch.randn_like(x)
        target_bce = torch.rand_like(x)
        mse_loss = self.mse_loss(x, target_mse)
        bce_loss = self.bce_loss(torch.sigmoid(x), target_bce)
        
        # Return the final output and losses
        return x, mse_loss, bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
