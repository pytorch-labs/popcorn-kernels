
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'LSTMCell', 'AdaptiveMaxPool3d', 'KLDivLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.lstm_cell1 = nn.LSTMCell(input_size=64, hidden_size=128)
        self.lstm_cell2 = nn.LSTMCell(input_size=128, hidden_size=256)
        self.adaptive_max_pool = nn.AdaptiveMaxPool3d(output_size=(1, 1, 1))
        self.kldiv_loss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape for LSTM cells
        batch_size, channels, length = x.size()
        x = x.permute(2, 0, 1)  # (length, batch_size, channels)
        
        hx1 = torch.zeros(batch_size, 128).to(x.device)
        cx1 = torch.zeros(batch_size, 128).to(x.device)
        hx2 = torch.zeros(batch_size, 256).to(x.device)
        cx2 = torch.zeros(batch_size, 256).to(x.device)
        
        for i in range(length):
            hx1, cx1 = self.lstm_cell1(x[i], (hx1, cx1))
            hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
        
        # Reshape for AdaptiveMaxPool3d
        x = hx2.view(batch_size, 1, 1, 1, -1)  # (batch_size, 1, 1, 1, 256)
        x = self.adaptive_max_pool(x)
        
        # Flatten for KLDivLoss
        x = x.view(batch_size, -1)
        
        # Assuming target is a probability distribution
        target = torch.softmax(torch.randn_like(x), dim=1)
        loss = self.kldiv_loss(F.log_softmax(x, dim=1), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

