
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'PairwiseDistance', 'MarginRankingLoss', 'ConvTranspose3d', 'LazyConv2d', 'UpsamplingBilinear2d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.lazy_conv2d = nn.LazyConv2d(out_channels=20, kernel_size=5)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.margin_ranking_loss = nn.MarginRankingLoss(margin=1.0)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv_transpose3d(x)  # Shape: (batch_size, 10, depth_out, height_out, width_out)
        
        # Reshape to 2D for LazyConv2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Shape: (batch_size, 10, depth_out * height_out, width_out)
        x = self.lazy_conv2d(x)  # Shape: (batch_size, 20, depth_out * height_out - 4, width_out - 4)
        
        # Upsample the 2D feature map
        x = self.upsampling_bilinear2d(x)  # Shape: (batch_size, 20, 2*(depth_out * height_out - 4), 2*(width_out - 4))
        
        # Reshape to 1D for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 20, 2*(depth_out * height_out - 4) * 2*(width_out - 4))
        x = self.adaptive_max_pool1d(x)  # Shape: (batch_size, 20, 10)
        
        # Compute pairwise distance between two random tensors
        x1 = torch.randn_like(x)
        x2 = torch.randn_like(x)
        pairwise_dist = self.pairwise_distance(x1, x2)  # Shape: (batch_size, 10)
        
        # Compute margin ranking loss between two random tensors
        target = torch.randint(0, 2, (x.size(0), 10), dtype=torch.float32).to(x.device)
        margin_loss = self.margin_ranking_loss(x1, x2, target)
        
        # Compute Gaussian NLL loss between a random prediction and target
        pred = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_nll_loss(pred, x, var)
        
        # Return the final output as a combination of the computed losses
        return pairwise_dist, margin_loss, gaussian_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape for ConvTranspose3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
