
# This is a random torch model generated by the following modules: ['SELU', 'AdaptiveAvgPool1d', 'CircularPad3d', 'AdaptiveMaxPool2d', 'ReplicationPad2d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu = nn.SELU()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.circular_pad3d = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.replication_pad2d = nn.ReplicationPad2d(padding=(1, 1, 1, 1))
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))

    def forward(self, x):
        # Apply SELU activation
        x = self.selu(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back to 3D for CircularPad3d
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Arbitrary reshape to 3D
        x = self.circular_pad3d(x)
        
        # Reshape to 2D for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Flatten last dimension
        x = self.adaptive_max_pool2d(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

