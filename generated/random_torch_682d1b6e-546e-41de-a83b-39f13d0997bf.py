
# This is a random torch model generated by the following modules: ['LazyConv1d', 'SyncBatchNorm', 'Softmax2d', 'FractionalMaxPool3d', 'PoissonNLLLoss', 'UpsamplingBilinear2d', 'MarginRankingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.SyncBatchNorm(32)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.SyncBatchNorm(64)
        self.softmax2d = nn.Softmax2d()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.margin_ranking_loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Apply LazyConv1d and SyncBatchNorm
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.relu(x)
        
        x = self.conv2(x)
        x = self.bn2(x)
        x = F.relu(x)
        
        # Reshape for Softmax2d
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = x.unsqueeze(-1)  # Add a dummy height dimension
        x = self.softmax2d(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a dummy depth dimension
        x = self.fractional_max_pool3d(x)
        
        # Reshape for UpsamplingBilinear2d
        x = x.squeeze(1)  # Remove the depth dimension
        x = x.squeeze(1)  # Remove the channel dimension
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = self.upsampling_bilinear2d(x)
        
        # Compute PoissonNLLLoss (requires target, so we generate a dummy target)
        target = torch.poisson(x)
        loss1 = self.poisson_nll_loss(x, target)
        
        # Compute MarginRankingLoss (requires two inputs and a target, so we generate dummy inputs)
        input1 = x
        input2 = torch.randn_like(x)
        target = torch.ones_like(x)
        loss2 = self.margin_ranking_loss(input1, input2, target)
        
        # Return the final output (sum of losses for simplicity)
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

