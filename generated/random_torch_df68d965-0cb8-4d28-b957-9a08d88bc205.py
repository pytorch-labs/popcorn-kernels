
# This is a random torch model generated by the following modules: ['LeakyReLU', 'Conv1d', 'GroupNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, stride=1, padding=1)
        self.gn1 = nn.GroupNorm(4, 16)  # GroupNorm with 4 groups
        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, stride=1, padding=1)
        self.gn2 = nn.GroupNorm(4, 32)  # GroupNorm with 4 groups
        self.conv3 = nn.Conv1d(32, 64, kernel_size=3, stride=1, padding=1)
        self.gn3 = nn.GroupNorm(4, 64)  # GroupNorm with 4 groups
        self.conv4 = nn.Conv1d(64, 128, kernel_size=3, stride=1, padding=1)
        self.gn4 = nn.GroupNorm(4, 128)  # GroupNorm with 4 groups
        self.conv5 = nn.Conv1d(128, 256, kernel_size=3, stride=1, padding=1)
        self.gn5 = nn.GroupNorm(4, 256)  # GroupNorm with 4 groups

    def forward(self, x):
        # Ensure input is 3D (batch_size, channels, sequence_length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing

        x = F.leaky_relu(self.gn1(self.conv1(x)))
        x = F.leaky_relu(self.gn2(self.conv2(x)))
        x = F.leaky_relu(self.gn3(self.conv3(x)))
        x = F.leaky_relu(self.gn4(self.conv4(x)))
        x = F.leaky_relu(self.gn5(self.conv5(x)))

        # Flatten the output for a single feature vector per batch
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Example input: (batch_size=1, sequence_length=100)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
