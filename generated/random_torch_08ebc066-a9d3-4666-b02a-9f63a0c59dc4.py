
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'RNNBase', 'Softmax2d', 'GRU', 'ReLU6', 'GroupNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.rnn1 = nn.RNNBase(input_size=128, hidden_size=256, num_layers=2)
        self.softmax2d = nn.Softmax2d()
        self.gru1 = nn.GRU(input_size=256, hidden_size=128, num_layers=2)
        self.relu6 = nn.ReLU6()
        self.group_norm = nn.GroupNorm(num_groups=8, num_channels=128)
        self.bn2 = nn.LazyBatchNorm1d()
        self.rnn2 = nn.RNNBase(input_size=128, hidden_size=64, num_layers=1)
        self.gru2 = nn.GRU(input_size=64, hidden_size=32, num_layers=1)
        self.bn3 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        x = self.bn1(x)
        x, _ = self.rnn1(x)
        x = x.unsqueeze(1)  # Add a channel dimension for Softmax2d
        x = self.softmax2d(x)
        x = x.squeeze(1)  # Remove the channel dimension
        x, _ = self.gru1(x)
        x = self.relu6(x)
        x = x.permute(0, 2, 1)  # GroupNorm expects (batch_size, channels, sequence_length)
        x = self.group_norm(x)
        x = x.permute(0, 2, 1)  # Revert back to (batch_size, sequence_length, channels)
        x = self.bn2(x)
        x, _ = self.rnn2(x)
        x, _ = self.gru2(x)
        x = self.bn3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
