
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'MaxUnpool2d', 'ZeroPad2d', 'CircularPad3d', 'BCELoss', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.bce_loss = nn.BCELoss()
        self.embedding_bag = nn.EmbeddingBag(1000, 10, mode='mean')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.batch_norm3d(x)  # Apply BatchNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to 4D for MaxUnpool2d
        x = self.zero_pad2d(x)  # Apply ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)  # Reshape back to 5D for CircularPad3d
        x = self.circular_pad3d(x)  # Apply CircularPad3d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 3D for EmbeddingBag
        x = self.embedding_bag(x)  # Apply EmbeddingBag
        x = torch.sigmoid(x)  # Apply sigmoid to get values between 0 and 1 for BCELoss
        target = torch.randint(0, 2, x.size()).float()  # Random target for BCELoss
        loss = self.bce_loss(x, target)  # Apply BCELoss
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 5, 5).cuda()  # Example input shape for BatchNorm3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

