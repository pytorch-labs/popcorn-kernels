
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'BCEWithLogitsLoss', 'Threshold', 'NLLLoss', 'Softmin', 'BatchNorm1d', 'TransformerDecoder', 'AdaptiveAvgPool3d', 'MaxUnpool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.batch_norm1 = nn.BatchNorm1d(32)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.batch_norm2 = nn.BatchNorm1d(64)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.softmin = nn.Softmin(dim=1)
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply ConvTranspose1d and BatchNorm1d
        x = self.conv_transpose1(x)
        x = self.batch_norm1(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply another ConvTranspose1d and BatchNorm1d
        x = self.conv_transpose2(x)
        x = self.batch_norm2(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(1).unsqueeze(1)  # Add dummy dimensions to make it 5D
        x = self.adaptive_avg_pool(x)
        
        # Reshape for TransformerDecoder
        x = x.view(x.size(0), -1, 64)  # Flatten spatial dimensions
        x = self.transformer_decoder(x, x)  # Self-attention
        
        # Reshape for MaxUnpool2d
        x = x.view(x.size(0), 64, 16, 16)  # Reshape to 4D
        x = self.max_unpool(x, torch.zeros_like(x))  # Dummy indices
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Compute losses (dummy targets for demonstration)
        bce_target = torch.zeros_like(x).uniform_(0, 1)
        nll_target = torch.zeros(x.size(0), dtype=torch.long).to(x.device)
        
        bce_loss = self.bce_loss(x, bce_target)
        nll_loss = self.nll_loss(F.log_softmax(x, dim=1), nll_target)
        
        return x, bce_loss, nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

