
# This is a random torch model generated by the following modules: ['ReLU', 'LazyConv3d', 'ChannelShuffle', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.channel_shuffle1 = nn.ChannelShuffle(groups=4)
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.channel_shuffle2 = nn.ChannelShuffle(groups=8)
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.conv3 = nn.LazyConv3d(out_channels=64, kernel_size=3)
        self.channel_shuffle3 = nn.ChannelShuffle(groups=16)
        self.alpha_dropout3 = nn.AlphaDropout(p=0.5)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.channel_shuffle1(x)
        x = self.alpha_dropout1(x)
        x = F.relu(self.conv2(x))
        x = self.channel_shuffle2(x)
        x = self.alpha_dropout2(x)
        x = F.relu(self.conv3(x))
        x = self.channel_shuffle3(x)
        x = self.alpha_dropout3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

