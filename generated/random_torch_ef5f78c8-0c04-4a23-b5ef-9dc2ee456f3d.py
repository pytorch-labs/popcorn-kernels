
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'BatchNorm1d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm1d(128)
        self.dropout1 = nn.FeatureAlphaDropout(0.5)
        self.bn2 = nn.BatchNorm1d(64)
        self.dropout2 = nn.FeatureAlphaDropout(0.5)
        self.bn3 = nn.BatchNorm1d(32)
        self.loss = nn.BCELoss()

    def forward(self, x):
        # Flatten the input to 1D
        x = x.view(x.size(0), -1)
        
        # Apply BatchNorm1d and FeatureAlphaDropout
        x = self.bn1(x)
        x = self.dropout1(x)
        
        # Reshape and apply another BatchNorm1d and FeatureAlphaDropout
        x = x.view(x.size(0), -1)
        x = self.bn2(x)
        x = self.dropout2(x)
        
        # Final BatchNorm1d
        x = self.bn3(x)
        
        # Apply sigmoid to get output in the range [0, 1] for BCELoss
        x = torch.sigmoid(x)
        
        # Assuming the target is the same shape as the output
        target = torch.zeros_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
