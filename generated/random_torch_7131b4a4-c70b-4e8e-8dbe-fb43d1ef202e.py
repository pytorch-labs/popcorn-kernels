
# This is a random torch model generated by the following modules: ['MaxUnpool2d', 'TripletMarginLoss', 'LazyConvTranspose1d', 'Container', 'AdaptiveAvgPool2d', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.module_list = nn.ModuleList([
            nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=1),
            nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=1),
        ])
        self.container = nn.Sequential(
            nn.LazyConvTranspose1d(out_channels=256, kernel_size=3, stride=1),
            nn.LazyConvTranspose1d(out_channels=512, kernel_size=3, stride=1),
        )
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, reshape to 1D for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height * width)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape back to 2D for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply MaxUnpool2d (requires indices from a previous MaxPool2d operation)
        # For simplicity, we assume indices are available from a previous MaxPool2d operation
        # Here, we create dummy indices for demonstration purposes
        _, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Apply ModuleList layers
        for layer in self.module_list:
            x = layer(x.view(x.size(0), x.size(1), -1))  # Reshape to 1D for LazyConvTranspose1d
            x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        
        # Apply Container (Sequential)
        x = self.container(x.view(x.size(0), x.size(1), -1))  # Reshape to 1D for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        
        # Apply TripletMarginLoss (requires three inputs: anchor, positive, negative)
        # For simplicity, we use the same input as anchor, positive, and negative
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size=1, channels=3, height=64, width=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
