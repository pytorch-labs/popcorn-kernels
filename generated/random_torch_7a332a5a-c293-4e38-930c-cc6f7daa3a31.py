
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'Threshold', 'Dropout2d', 'MaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.threshold = nn.Threshold(0.5, 1.0)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Ensure the input is 5D for AdaptiveAvgPool3d
        if x.dim() == 4:
            x = x.unsqueeze(1)  # Add a channel dimension if necessary
        x = self.adaptive_avg_pool3d(x)
        
        # Reduce to 4D for Threshold and Dropout2d
        x = x.squeeze(1)  # Remove the channel dimension
        x = self.threshold(x)
        
        # Ensure the input is 4D for Dropout2d
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add a channel dimension if necessary
        x = self.dropout2d(x)
        
        # Ensure the input is 4D for MaxPool2d
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add a channel dimension if necessary
        x = self.max_pool2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

