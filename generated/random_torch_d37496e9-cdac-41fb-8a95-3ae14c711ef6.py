
# This is a random torch model generated by the following modules: ['Sequential', 'AdaptiveAvgPool1d', 'MultiheadAttention', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.Linear(128, 256),
            nn.ReLU(),
            nn.Linear(256, 128),
            nn.ReLU()
        )
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=64)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_dim)
        batch_size, seq_len, feature_dim = x.shape
        
        # Apply Sequential block
        x = x.view(-1, feature_dim)  # Reshape to (batch_size * seq_len, feature_dim)
        x = self.sequential(x)
        x = x.view(batch_size, seq_len, -1)  # Reshape back to (batch_size, seq_len, new_feature_dim)
        
        # Apply AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, new_feature_dim, seq_len)
        x = self.adaptive_avg_pool(x)
        x = x.permute(0, 2, 1)  # Reshape back to (batch_size, seq_len, new_feature_dim)
        
        # Apply MultiheadAttention
        x = x.permute(1, 0, 2)  # Reshape to (seq_len, batch_size, new_feature_dim)
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(1, 0, 2)  # Reshape back to (batch_size, seq_len, new_feature_dim)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 32, 128).cuda()  # (batch_size, sequence_length, feature_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
