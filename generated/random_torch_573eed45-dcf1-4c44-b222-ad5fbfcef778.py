
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'Sigmoid', 'AdaptiveAvgPool2d', 'AlphaDropout', 'ParameterList', 'LayerNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])
        self.layer_norm = nn.LayerNorm(100)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        x = self.sigmoid(x)
        
        # Reshape to 4D (batch, channels, height, width) for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.adaptive_avg_pool(x)
        
        # Reshape back to 5D for BatchNorm3d
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        x = self.bn2(x)
        
        # Flatten for LayerNorm
        x = x.view(x.size(0), -1)
        x = self.layer_norm(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Use ParameterList
        for param in self.parameter_list:
            x = x + param
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

