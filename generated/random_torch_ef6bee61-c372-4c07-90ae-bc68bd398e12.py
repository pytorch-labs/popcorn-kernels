
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'InstanceNorm2d', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((16, 16))
        self.instance_norm1 = nn.InstanceNorm2d(3)
        self.instance_norm2 = nn.InstanceNorm2d(3)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.adaptive_avg_pool2 = nn.AdaptiveAvgPool2d((32, 32))
        self.instance_norm3 = nn.InstanceNorm2d(3)
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)

    def forward(self, x):
        x = self.adaptive_avg_pool(x)
        x = self.instance_norm1(x)
        x = self.upsample(x)
        x = self.instance_norm2(x)
        x = self.adaptive_avg_pool2(x)
        x = self.instance_norm3(x)
        x = self.upsample2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for InstanceNorm2d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
