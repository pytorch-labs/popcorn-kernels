
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'FractionalMaxPool2d', 'AvgPool1d', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.module = nn.Module()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), -1, x.size(3))  # Reshape to (batch_size, channels * height, width)
        x = self.avg_pool(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x1 = x[:, :x.size(1)//2]  # Split into two tensors for PairwiseDistance
        x2 = x[:, x.size(1)//2:]
        x = self.pairwise_distance(x1, x2)
        
        # Apply Module (identity operation)
        x = self.module(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

