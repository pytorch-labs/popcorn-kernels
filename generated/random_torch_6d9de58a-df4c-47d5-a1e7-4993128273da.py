
# This is a random torch model generated by the following modules: ['Threshold', 'Softsign', 'AlphaDropout', 'UpsamplingNearest2d', 'Linear', 'CircularPad2d', 'LazyInstanceNorm2d', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold = nn.Threshold(0.1, 0.5)
        self.softsign = nn.Softsign()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.circular_pad = nn.CircularPad2d(2)
        self.instance_norm = nn.LazyInstanceNorm2d()
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        x = self.threshold(x)
        x = self.softsign(x)
        x = self.alpha_dropout(x)
        x = self.upsample(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor for linear layers
        x = self.linear1(x)
        x = self.linear2(x)
        x = x.view(x.size(0), 1, 8, 4)  # Reshape for 2D operations
        x = self.circular_pad(x)
        x = self.instance_norm(x)
        x = self.hardsigmoid(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

