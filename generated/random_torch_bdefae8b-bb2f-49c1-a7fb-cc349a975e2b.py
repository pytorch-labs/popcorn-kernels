
# This is a random torch model generated by the following modules: ['ModuleDict', 'ZeroPad1d', 'L1Loss', 'CosineSimilarity', 'Container', 'MaxPool1d', 'Conv1d', 'PixelShuffle', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv1d(1, 10, kernel_size=5),
            'conv2': nn.Conv1d(10, 20, kernel_size=5),
            'maxpool1': nn.MaxPool1d(kernel_size=2),
            'zeropad1': nn.ZeroPad1d(2),
            'rnn': nn.RNNBase(20, 50, num_layers=2),
            'pixelshuffle': nn.PixelShuffle(2)
        })
        self.container = nn.Container()
        self.l1_loss = nn.L1Loss()
        self.cosine_sim = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply Conv1d and MaxPool1d
        x = self.module_dict['conv1'](x)
        x = self.module_dict['maxpool1'](x)
        x = self.module_dict['conv2'](x)
        x = self.module_dict['maxpool1'](x)
        
        # Apply ZeroPad1d
        x = self.module_dict['zeropad1'](x)
        
        # Reshape for RNN
        x = x.permute(2, 0, 1)  # (seq_len, batch, features)
        x, _ = self.module_dict['rnn'](x)
        x = x.permute(1, 2, 0)  # (batch, features, seq_len)
        
        # Apply PixelShuffle
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.module_dict['pixelshuffle'](x)
        x = x.squeeze(1)  # Remove channel dimension
        
        # Apply Container (no effect, just for demonstration)
        x = self.container(x)
        
        # Compute L1 Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        l1_loss = self.l1_loss(x, dummy_target)
        
        # Compute Cosine Similarity with a dummy input
        dummy_input = torch.ones_like(x)
        cosine_sim = self.cosine_sim(x, dummy_input)
        
        # Return both the output and the computed losses
        return x, l1_loss, cosine_sim


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # (batch, channels, seq_len)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

