
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'PoissonNLLLoss', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv_transpose1 = nn.ConvTranspose1d(10, 20, kernel_size=5)
        self.conv2 = nn.Conv1d(20, 30, kernel_size=5)
        self.conv_transpose2 = nn.ConvTranspose1d(30, 40, kernel_size=5)
        self.conv3 = nn.Conv1d(40, 50, kernel_size=5)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Ensure the input has the correct shape for Conv1d
        if len(x.shape) == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv_transpose1(x))
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv_transpose2(x))
        x = F.relu(self.conv3(x))
        
        # Compute PoissonNLLLoss (assuming x is the input and target is the same for simplicity)
        target = x.detach()  # Use the output as the target for demonstration
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

