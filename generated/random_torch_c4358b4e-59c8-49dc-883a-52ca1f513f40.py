
# This is a random torch model generated by the following modules: ['LSTM', 'RNNCellBase', 'BCELoss', 'SmoothL1Loss', 'ModuleList', 'Tanh', 'GroupNorm', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.rnn_cell = nn.RNNCell(input_size=64, hidden_size=32)
        self.module_list = nn.ModuleList([nn.GroupNorm(8, 32), nn.SiLU(), nn.Tanh()])
        self.bce_loss = nn.BCELoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, seq_len, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # LSTM layer
        lstm_out, _ = self.lstm(x)  # Shape: (batch_size, seq_len, hidden_size)
        
        # Reshape for RNNCell
        lstm_out = lstm_out.reshape(-1, 64)  # Shape: (batch_size * seq_len, hidden_size)
        
        # RNNCell layer
        rnn_out = self.rnn_cell(lstm_out)  # Shape: (batch_size * seq_len, hidden_size)
        
        # Reshape back to (batch_size, seq_len, hidden_size)
        rnn_out = rnn_out.reshape(batch_size, seq_len, -1)
        
        # Apply ModuleList layers
        for layer in self.module_list:
            rnn_out = layer(rnn_out)
        
        # Apply Tanh activation
        rnn_out = torch.tanh(rnn_out)
        
        # Compute BCE Loss (dummy target for demonstration)
        target = torch.randint(0, 2, (batch_size, seq_len, 32)).float()
        bce_loss = self.bce_loss(rnn_out, target)
        
        # Compute SmoothL1Loss (dummy target for demonstration)
        smooth_l1_loss = self.smooth_l1_loss(rnn_out, target)
        
        # Return both losses for demonstration purposes
        return bce_loss, smooth_l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(2, 10, 128).cuda()  # Example input: (batch_size=2, seq_len=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

