
# This is a random torch model generated by the following modules: ['Sigmoid', 'MSELoss', 'Module', 'MaxUnpool3d', 'AdaptiveLogSoftmaxWithLoss', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=32, n_classes=10, cutoffs=[5])
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply the first ConvTranspose3d layer
        x = self.conv_transpose1(x)
        
        # Apply the second ConvTranspose3d layer
        x = self.conv_transpose2(x)
        
        # Apply MaxUnpool3d (assuming we have indices from a previous MaxPool3d operation)
        # For simplicity, we generate random indices here
        _, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        
        # Apply Sigmoid activation
        x = self.sigmoid(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        
        # Apply AdaptiveLogSoftmaxWithLoss
        # Note: AdaptiveLogSoftmaxWithLoss requires target labels during training, so we skip it here
        # For demonstration, we assume the output is the log probabilities
        log_probs = self.adaptive_log_softmax.log_prob(x)
        
        # Apply MSELoss (assuming we have a target tensor for demonstration)
        # For simplicity, we generate a random target tensor here
        target = torch.randn_like(log_probs)
        loss = self.mse_loss(log_probs, target)
        
        return log_probs, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

