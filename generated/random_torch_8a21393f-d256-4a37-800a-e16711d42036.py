
# This is a random torch model generated by the following modules: ['Tanhshrink', 'PairwiseDistance', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink = nn.Tanhshrink()
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Apply Tanhshrink to the input
        x = self.tanhshrink(x)
        
        # Reshape the input to have two tensors for PairwiseDistance
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x1 = x[:, :, :x.size(2)//2]  # Split into two tensors
        x2 = x[:, :, x.size(2)//2:]
        
        # Compute PairwiseDistance between the two tensors
        x = self.pairwise_distance(x1, x2)
        
        # Reshape the output to fit the Fold module
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions for Fold
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 20, 20).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

