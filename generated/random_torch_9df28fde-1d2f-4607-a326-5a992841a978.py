
# This is a random torch model generated by the following modules: ['Unfold', 'GLU', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.glu1 = nn.GLU(dim=1)
        self.glu2 = nn.GLU(dim=1)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)

    def forward(self, x):
        # Apply Unfold to extract patches
        x = self.unfold(x)
        
        # Reshape to apply GLU
        x = x.view(x.size(0), -1, x.size(2))
        
        # Apply first GLU
        x = self.glu1(x)
        
        # Reshape again for the second GLU
        x = x.view(x.size(0), -1, x.size(2))
        
        # Apply second GLU
        x = self.glu2(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
