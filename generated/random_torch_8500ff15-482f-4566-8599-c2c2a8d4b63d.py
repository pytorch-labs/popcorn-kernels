
# This is a random torch model generated by the following modules: ['Linear', 'Softshrink', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 512)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.zeropad2d = nn.ZeroPad2d(2)

    def forward(self, x):
        # Flatten the input to fit the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the first Linear layer
        x = self.linear1(x)
        
        # Apply Softshrink activation
        x = self.softshrink(x)
        
        # Reshape to 2D for ZeroPad2d
        x = x.view(x.size(0), 16, 16)
        
        # Apply ZeroPad2d
        x = self.zeropad2d(x)
        
        # Flatten again for the second Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the second Linear layer
        x = self.linear2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

