
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'MaxPool3d', 'LSTM']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((4, 4, 4))
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Apply AdaptiveAvgPool3d to reduce spatial dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Apply MaxPool3d to further reduce dimensions
        x = self.max_pool3d(x)
        
        # Reshape the tensor to fit the LSTM input requirements
        batch_size, channels, depth, height, width = x.size()
        x = x.view(batch_size, channels * depth, height * width).transpose(1, 2)
        
        # Pass through LSTM
        x, _ = self.lstm(x)
        
        # Take the output of the last time step
        x = x[:, -1, :]
        
        # Pass through a fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

