
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'Sigmoid', 'Sequential', 'CrossMapLRN2d', 'Upsample', 'TransformerDecoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample_bilinear = nn.UpsamplingBilinear2d(scale_factor=2)
        self.sigmoid = nn.Sigmoid()
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.ReLU()
        )
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=32, nhead=4)

    def forward(self, x):
        # Apply UpsamplingBilinear2d
        x = self.upsample_bilinear(x)
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Reshape for TransformerDecoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoderLayer
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape back to original image shape
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
