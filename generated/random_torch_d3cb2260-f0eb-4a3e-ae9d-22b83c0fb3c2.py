
# This is a random torch model generated by the following modules: ['Hardshrink', 'LSTM', 'TripletMarginWithDistanceLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink = nn.Hardshrink()
        self.lstm1 = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.lstm2 = nn.LSTM(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, feature_size)
        batch_size, seq_len, feature_size = x.size()
        
        # Apply Hardshrink to the input
        x = self.hardshrink(x)
        
        # Reshape for LSTM input
        x = x.view(batch_size, seq_len, feature_size)
        
        # Pass through the first LSTM
        x, _ = self.lstm1(x)
        
        # Pass through the second LSTM
        x, _ = self.lstm2(x)
        
        # Reshape for triplet loss
        anchor = x[:, 0, :]  # Take the first element of the sequence as anchor
        positive = x[:, 1, :]  # Take the second element of the sequence as positive
        negative = x[:, 2, :]  # Take the third element of the sequence as negative
        
        # Compute triplet loss
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 20, 128).cuda()  # (batch_size, sequence_length, feature_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
