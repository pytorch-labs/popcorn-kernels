
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'LPPool2d', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn1 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.lppool1 = nn.LPPool2d(norm_type=2, kernel_size=3, stride=2)
        self.crossmaplrn1 = nn.CrossMapLRN2d(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.lrn2 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.lppool2 = nn.LPPool2d(norm_type=2, kernel_size=3, stride=2)
        self.crossmaplrn2 = nn.CrossMapLRN2d(size=5, alpha=0.0001, beta=0.75, k=1.0)

    def forward(self, x):
        x = self.lrn1(x)
        x = self.lppool1(x)
        x = self.crossmaplrn1(x)
        x = self.lrn2(x)
        x = self.lppool2(x)
        x = self.crossmaplrn2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 channels for input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
