
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'EmbeddingBag', 'Tanh', 'PoissonNLLLoss', 'Dropout2d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.transformer_decoder1 = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.transformer_decoder2 = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.tanh = nn.Tanh()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming x is a tensor of shape (batch_size, sequence_length)
        x = self.embedding_bag(x)  # Shape: (batch_size, embedding_dim)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, embedding_dim)
        
        # TransformerDecoder expects input of shape (sequence_length, batch_size, embedding_dim)
        x = x.permute(1, 0, 2)  # Shape: (1, batch_size, embedding_dim)
        
        # Dummy memory for TransformerDecoder (could be replaced with actual memory)
        memory = torch.zeros_like(x)
        
        x = self.transformer_decoder1(x, memory)  # Shape: (1, batch_size, embedding_dim)
        x = self.transformer_decoder2(x, memory)  # Shape: (1, batch_size, embedding_dim)
        
        x = x.permute(1, 2, 0)  # Shape: (batch_size, embedding_dim, 1)
        x = self.dropout2d(x)  # Shape: (batch_size, embedding_dim, 1)
        x = x.squeeze(2)  # Shape: (batch_size, embedding_dim)
        
        x = self.tanh(x)  # Shape: (batch_size, embedding_dim)
        
        # Dummy target for PoissonNLLLoss (could be replaced with actual target)
        target_poisson = torch.ones_like(x)
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Dummy target for BCELoss (could be replaced with actual target)
        target_bce = torch.ones_like(x)
        bce_loss = self.bce_loss(torch.sigmoid(x), target_bce)
        
        # Return both losses for demonstration purposes
        return poisson_loss, bce_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20)).cuda()  # Shape: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

