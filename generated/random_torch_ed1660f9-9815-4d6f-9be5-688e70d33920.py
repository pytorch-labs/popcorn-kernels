
# This is a random torch model generated by the following modules: ['GRU', 'ConstantPad1d', 'AdaptiveAvgPool3d', 'LPPool2d', 'Tanh', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d(output_size=(8, 8, 8))
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.tanh = nn.Tanh()
        self.replication_pad2d = nn.ReplicationPad2d(padding=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # Reshape for GRU: (batch_size, sequence_length, input_size)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1, 64)  # Reshape to (batch_size, sequence_length, 64)
        
        # GRU
        x, _ = self.gru(x)
        
        # Reshape back to 4D for padding
        x = x.view(batch_size, channels, height, width)
        
        # ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for AdaptiveAvgPool3d: (batch_size, channels, depth, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape back to 4D for LPPool2d
        x = x.squeeze(2)  # Remove depth dimension
        
        # LPPool2d
        x = self.lp_pool2d(x)
        
        # ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Tanh
        x = self.tanh(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

