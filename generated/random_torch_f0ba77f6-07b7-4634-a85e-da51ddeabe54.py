
# This is a random torch model generated by the following modules: ['Unfold', 'Bilinear', 'LazyBatchNorm2d', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), padding=1)
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=10, kernel_size=(3, 3, 3))
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=20, kernel_size=(3, 3, 3))

    def forward(self, x):
        # Unfold the input tensor
        x = self.unfold(x)
        
        # Reshape to fit Bilinear input
        x = x.view(x.size(0), 10, -1)
        x = self.bilinear(x[:, :10], x[:, 10:20])
        
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), -1, 8, 8)
        x = self.bn1(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D convolution
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply BatchNorm2d again
        x = x.squeeze(2)  # Remove the dummy dimension
        x = self.bn2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
