
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'ReLU6', 'Bilinear', 'Dropout3d', 'Hardsigmoid', 'Tanhshrink', 'LPPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.relu6 = nn.ReLU6()
        self.bilinear = nn.Bilinear(64, 64, 128)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.hardsigmoid = nn.Hardsigmoid()
        self.tanhshrink = nn.Tanhshrink()
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lrn(x)
        x = self.relu6(x)
        
        # Reshape for Bilinear layer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        x = x.permute(0, 2, 3, 1).contiguous()
        x = x.view(-1, channels * depth)
        x = self.bilinear(x, x)
        
        # Reshape back to 5D for Dropout3d
        x = x.view(batch_size, height, width, -1)
        x = x.permute(0, 3, 1, 2).contiguous()
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.dropout3d(x)
        
        x = self.hardsigmoid(x)
        x = self.tanhshrink(x)
        x = self.lppool3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

