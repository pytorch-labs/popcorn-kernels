
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'Dropout', 'LeakyReLU', 'MSELoss', 'RReLU', 'Flatten', 'ConstantPad3d', 'Sigmoid', 'SmoothL1Loss', 'LPPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.lp_pool = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.dropout = nn.Dropout(p=0.5)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.rrelu = nn.RReLU(lower=0.1, upper=0.3)
        self.flatten = nn.Flatten()
        self.sigmoid = nn.Sigmoid()
        self.mse_loss = nn.MSELoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Apply ConstantPad3d
        x = self.pad(x)
        
        # Apply LPPool3d
        x = self.lp_pool(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Flatten the tensor
        x = self.flatten(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Compute MSELoss (assuming a dummy target)
        target = torch.zeros_like(x)
        mse_loss = self.mse_loss(x, target)
        
        # Compute SmoothL1Loss (assuming a dummy target)
        smooth_l1_loss = self.smooth_l1_loss(x, target)
        
        # Return both losses for demonstration purposes
        return mse_loss, smooth_l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

