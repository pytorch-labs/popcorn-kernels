
# This is a random torch model generated by the following modules: ['Softshrink', 'MSELoss', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink()
        self.hardtanh = nn.Hardtanh()
        self.mseloss = nn.MSELoss()

    def forward(self, x):
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Reshape the tensor to match the expected input shape for MSELoss
        # Assuming the target is a tensor of the same shape as x
        target = torch.zeros_like(x)
        
        # Compute MSELoss
        loss = self.mseloss(x, target)
        
        # Return the loss as the output
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

