
# This is a random torch model generated by the following modules: ['CrossMapLRN2d', 'Linear', 'Conv3d', 'LazyConv1d', 'FeatureAlphaDropout', 'CosineEmbeddingLoss', 'TransformerDecoderLayer', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=20, kernel_size=5)
        self.lazy_bn1d = nn.LazyBatchNorm1d()
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 10)
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv3d(x)  # Shape: (batch_size, 10, depth-2, height-2, width-2)
        x = x.mean(dim=2)  # Reduce depth dimension by averaging, shape: (batch_size, 10, height-2, width-2)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width, shape: (batch_size, 10, (height-2)*(width-2))
        x = self.lazy_conv1d(x)  # Shape: (batch_size, 20, (height-2)*(width-2)-4)
        x = self.lazy_bn1d(x)  # Shape: (batch_size, 20, (height-2)*(width-2)-4)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        x = self.cross_map_lrn2d(x)  # Shape: (batch_size, 20, height', width')
        x = self.feature_alpha_dropout(x)  # Shape: (batch_size, 20, height', width')
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch, shape: (batch_size, 20*height'*width')
        x = self.linear1(x)  # Shape: (batch_size, 64)
        x = F.relu(x)
        x = self.linear2(x)  # Shape: (batch_size, 10)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
