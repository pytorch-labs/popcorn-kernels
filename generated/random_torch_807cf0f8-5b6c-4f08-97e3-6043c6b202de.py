
# This is a random torch model generated by the following modules: ['Threshold', 'BatchNorm3d', 'Fold', 'CosineEmbeddingLoss', 'FeatureAlphaDropout', 'ConstantPad3d', 'LazyBatchNorm1d', 'ReLU6', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold = nn.Threshold(0.1, 0.5)
        self.batchnorm3d = nn.BatchNorm3d(10)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(0.5)
        self.constant_pad3d = nn.ConstantPad3d(1, 0.5)
        self.lazy_batchnorm1d = nn.LazyBatchNorm1d()
        self.relu6 = nn.ReLU6()
        self.mish = nn.Mish()
        
        # Repeat some modules up to 5 times
        self.batchnorm3d_2 = nn.BatchNorm3d(10)
        self.threshold_2 = nn.Threshold(0.1, 0.5)
        self.mish_2 = nn.Mish()
        self.relu6_2 = nn.ReLU6()
        self.feature_alpha_dropout_2 = nn.FeatureAlphaDropout(0.5)

    def forward(self, x):
        # Apply ConstantPad3d to ensure the input has the right shape for 3D operations
        x = self.constant_pad3d(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for BatchNorm3d
        x = x.view(-1, 10, 8, 8, 8)
        x = self.batchnorm3d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for Fold
        x = x.view(-1, 10 * 8 * 8, 8)
        x = self.fold(x)
        
        # Apply LazyBatchNorm1d
        x = x.view(-1, x.size(1))
        x = self.lazy_batchnorm1d(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply Mish
        x = self.mish(x)
        
        # Repeat some modules
        x = self.batchnorm3d_2(x.view(-1, 10, 8, 8, 8))
        x = self.threshold_2(x)
        x = self.mish_2(x)
        x = self.relu6_2(x)
        x = self.feature_alpha_dropout_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 8, 8, 8).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
