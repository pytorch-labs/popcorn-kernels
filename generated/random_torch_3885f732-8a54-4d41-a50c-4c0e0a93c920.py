
# This is a random torch model generated by the following modules: ['MaxUnpool3d', 'ZeroPad3d', 'ConstantPad1d', 'LazyConvTranspose3d', 'LocalResponseNorm', 'ZeroPad1d', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad_3d = nn.ZeroPad3d(1)
        self.constant_pad_1d = nn.ConstantPad1d(2, 3.0)
        self.lazy_conv_transpose_3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.zero_pad_1d = nn.ZeroPad1d(1)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.max_unpool_3d = nn.MaxUnpool3d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad_3d(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.constant_pad_1d(x)
        
        # Reshape back for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), 8, 8, 8)
        x = self.lazy_conv_transpose_3d(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Reshape for ZeroPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.zero_pad_1d(x)
        
        # Reshape back for Fold
        x = x.view(x.size(0), x.size(1), -1)
        x = self.fold(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), 16, 16, 16)
        x = self.max_unpool_3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 8, 8, 8).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

