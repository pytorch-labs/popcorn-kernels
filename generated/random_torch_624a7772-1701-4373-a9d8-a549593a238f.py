
# This is a random torch model generated by the following modules: ['Softmax', 'KLDivLoss', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.softmax = nn.Softmax(dim=1)
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Ensure the input is at least 2D
        if x.dim() == 1:
            x = x.unsqueeze(0)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Generate a target distribution for KLDivLoss
        target = torch.ones_like(x) / x.size(1)  # Uniform distribution
        
        # Compute KLDivLoss
        loss = self.kldivloss(x.log(), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20, 100).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

