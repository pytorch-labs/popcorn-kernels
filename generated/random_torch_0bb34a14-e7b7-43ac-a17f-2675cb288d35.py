
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'LSTMCell', 'ConvTranspose1d', 'HuberLoss', 'PixelUnshuffle', 'LogSigmoid', 'ReflectionPad3d', 'Threshold', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.lstm_cell = nn.LSTMCell(input_size=128, hidden_size=64)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=64, out_channels=32, kernel_size=3, stride=2)
        self.huber_loss = nn.HuberLoss()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.log_sigmoid = nn.LogSigmoid()
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.linear1 = nn.Linear(32 * 16, 128)
        self.linear2 = nn.Linear(128, 64)
        self.linear3 = nn.Linear(64, 10)

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), 64, -1)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1)
        
        # Initialize hidden and cell states for LSTM
        hx = torch.zeros(x.size(0), 64).to(x.device)
        cx = torch.zeros(x.size(0), 64).to(x.device)
        
        # Apply LSTM Cell
        hx, cx = self.lstm_cell(x, (hx, cx))
        
        # Apply Linear layers
        x = self.linear1(hx)
        x = self.linear2(x)
        x = self.linear3(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Reshape for ReflectionPad3d
        x = x.view(x.size(0), 1, 10, 1, 1)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

