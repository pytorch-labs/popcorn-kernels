
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'BatchNorm1d', 'CrossMapLRN2d', 'GLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.batch_norm1 = nn.BatchNorm1d(128)
        self.batch_norm2 = nn.BatchNorm1d(64)
        self.cross_map_lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.glu1 = nn.GLU(dim=1)
        self.glu2 = nn.GLU(dim=1)

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1, x.size(-1))  # Flatten spatial dimensions
        x = self.batch_norm1(x)
        
        # Reshape back for CrossMapLRN2d
        x = x.view(x.size(0), -1, x.size(-1), x.size(-1))  # Reshape to 4D
        x = self.cross_map_lrn(x)
        
        # Apply GLU
        x = self.glu1(x)
        
        # Reshape for BatchNorm1d again
        x = x.view(x.size(0), -1, x.size(-1))  # Flatten spatial dimensions
        x = self.batch_norm2(x)
        
        # Apply GLU again
        x = self.glu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

