
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'PixelShuffle', 'ConvTranspose3d', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=(3, 3, 3), stride=(1, 1, 1))
        self.selu = nn.SELU()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.replication_pad(x)  # Apply ReplicationPad2d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D for ConvTranspose3d
        x = self.conv_transpose3d(x)  # Apply ConvTranspose3d
        x = x.squeeze(1)  # Remove the added dimension to make it 4D again
        x = self.pixel_shuffle(x)  # Apply PixelShuffle
        x = self.selu(x)  # Apply SELU activation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 height and width
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
