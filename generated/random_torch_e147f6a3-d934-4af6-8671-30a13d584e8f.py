
# This is a random torch model generated by the following modules: ['Dropout3d', 'FractionalMaxPool2d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softshrink = nn.Softshrink(lambd=0.5)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Add an extra dimension to make it 5D for Dropout3d
        x = x.unsqueeze(2)  # Shape: (batch, channels, 1, height, width)
        x = self.dropout3d(x)
        x = x.squeeze(2)  # Shape: (batch, channels, height, width)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input: batch of 1, 3 channels, 28x28 images
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

