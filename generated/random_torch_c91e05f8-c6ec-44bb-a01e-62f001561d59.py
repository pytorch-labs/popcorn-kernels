
# This is a random torch model generated by the following modules: ['LazyLinear', 'RNN', 'LazyConv1d', 'MultiheadAttention', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.rnn = nn.RNN(input_size=64, hidden_size=32, num_layers=2, batch_first=True)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.multihead_attention = nn.MultiheadAttention(embed_dim=16, num_heads=2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))

    def forward(self, x):
        # Apply LazyLinear layers
        x = self.lazy_linear1(x)
        x = F.relu(x)
        x = self.lazy_linear2(x)
        x = F.relu(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 64)  # Reshape to (batch_size, seq_len, input_size)
        x, _ = self.rnn(x)
        
        # Reshape for LazyConv1d
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, channels, seq_len)
        x = self.lazy_conv1d(x)
        x = F.relu(x)
        
        # Reshape for MultiheadAttention
        x = x.permute(2, 0, 1)  # Reshape to (seq_len, batch_size, embed_dim)
        x, _ = self.multihead_attention(x, x, x)
        
        # Reshape for FractionalMaxPool3d
        x = x.permute(1, 2, 0)  # Reshape to (batch_size, channels, seq_len)
        x = x.unsqueeze(1)  # Add a dummy dimension to make it 4D (batch_size, 1, channels, seq_len)
        x = x.unsqueeze(1)  # Add another dummy dimension to make it 5D (batch_size, 1, 1, channels, seq_len)
        x = self.fractional_max_pool3d(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

