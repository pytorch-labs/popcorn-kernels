
# This is a random torch model generated by the following modules: ['CrossEntropyLoss', 'Threshold', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold1 = nn.Threshold(0.5, 1.0)
        self.threshold2 = nn.Threshold(0.2, 0.8)
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        # Apply Threshold layers
        x = self.threshold1(x)
        x = self.threshold2(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Flatten the output for CrossEntropyLoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for CrossEntropyLoss (assuming classification task)
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        
        # Apply CrossEntropyLoss
        loss = nn.CrossEntropyLoss()(x, target)
        
        # Return the loss (since CrossEntropyLoss is typically used for training)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

