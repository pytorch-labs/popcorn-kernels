
# This is a random torch model generated by the following modules: ['Conv1d', 'CrossEntropyLoss', 'Softplus', 'LazyConv2d', 'CrossMapLRN2d', 'AvgPool1d', 'ConstantPad2d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.softplus = nn.Softplus()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=20, kernel_size=3)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.constant_pad2d = nn.ConstantPad2d(padding=1, value=0)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=10, kernel_size=5)
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1d(x)
        x = self.softplus(x)
        
        # Reshape for LazyConv2d
        x = x.unsqueeze(2)  # Add height dimension
        x = self.lazy_conv2d(x)
        x = self.cross_map_lrn2d(x)
        
        # Reshape for AvgPool1d
        x = x.mean(dim=2)  # Collapse height dimension
        x = self.avg_pool1d(x)
        
        # Reshape for ConstantPad2d
        x = x.unsqueeze(2)  # Add height dimension
        x = self.constant_pad2d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.mean(dim=2)  # Collapse height dimension
        x = self.lazy_conv_transpose1d(x)
        
        # Assuming the output is of shape (batch_size, num_classes)
        # For demonstration, we'll create a dummy target and compute CrossEntropyLoss
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        loss = self.cross_entropy_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

