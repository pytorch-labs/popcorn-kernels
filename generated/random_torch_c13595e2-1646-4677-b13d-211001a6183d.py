
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'ReplicationPad3d', 'ChannelShuffle', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.replication_pad1 = nn.ReplicationPad3d(padding=1)
        self.channel_shuffle1 = nn.ChannelShuffle(groups=4)
        self.reflection_pad1 = nn.ReflectionPad3d(padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.replication_pad2 = nn.ReplicationPad3d(padding=1)
        self.channel_shuffle2 = nn.ChannelShuffle(groups=8)
        self.reflection_pad2 = nn.ReflectionPad3d(padding=1)

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.replication_pad1(x)
        x = self.channel_shuffle1(x)
        x = self.reflection_pad1(x)
        x = self.conv_transpose2(x)
        x = self.replication_pad2(x)
        x = self.channel_shuffle2(x)
        x = self.reflection_pad2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
