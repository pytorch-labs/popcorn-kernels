
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'Hardswish', 'GRU', 'CircularPad2d', 'LazyConvTranspose1d', 'SoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.hardswish = nn.Hardswish()
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.pad = nn.CircularPad2d(2)
        self.conv_transpose = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels * height, width)
        x = x.permute(0, 2, 1)  # (batch_size, width, channels * height)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Reshape for CircularPad2d
        x = x.permute(0, 2, 1)  # (batch_size, hidden_size, width)
        x = x.unsqueeze(1)  # (batch_size, 1, hidden_size, width)
        
        # Apply CircularPad2d
        x = self.pad(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.squeeze(1)  # (batch_size, hidden_size, width + 2*padding)
        x = x.permute(0, 2, 1)  # (batch_size, width + 2*padding, hidden_size)
        
        # Apply LazyConvTranspose1d
        x = self.conv_transpose(x)
        
        # Reshape for SoftMarginLoss (assuming binary classification)
        x = x.mean(dim=2)  # (batch_size, out_channels)
        x = torch.sigmoid(x)  # Apply sigmoid for binary classification
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

