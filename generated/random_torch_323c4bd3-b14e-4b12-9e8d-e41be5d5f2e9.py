
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'ConvTranspose2d', 'Softplus', 'SiLU', 'Dropout1d', 'Upsample', 'Dropout', 'BatchNorm3d', 'RReLU', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(10)
        self.conv_transpose1 = nn.ConvTranspose2d(10, 20, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.ConvTranspose2d(20, 30, kernel_size=3, stride=2)
        self.softplus = nn.Softplus()
        self.silu = nn.SiLU()
        self.dropout1d = nn.Dropout1d(p=0.2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.dropout = nn.Dropout(p=0.5)
        self.batch_norm3d = nn.BatchNorm3d(30)
        self.rrelu = nn.RReLU()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(5)])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.instance_norm(x)
        x = self.conv_transpose1(x)
        x = self.softplus(x)
        x = self.silu(x)
        x = self.dropout1d(x.view(x.size(0), x.size(1), -1)).view(x.size())
        x = self.upsample(x)
        x = self.dropout(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for BatchNorm3d
        x = self.batch_norm3d(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.rrelu(x)
        x = self.conv_transpose2(x)
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1)  # Add parameter to each channel
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
