
# This is a random torch model generated by the following modules: ['PixelShuffle', 'ConvTranspose2d', 'EmbeddingBag', 'Conv1d', 'ConstantPad2d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.conv1d = nn.Conv1d(64, 128, kernel_size=3, padding=1)
        self.constant_pad2d = nn.ConstantPad2d(2, 0.5)
        self.conv_transpose2d = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(32, kernel_size=3, stride=1, padding=1)
        self.pixel_shuffle = nn.PixelShuffle(2)

    def forward(self, x):
        # Assuming x is a 1D tensor for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for Conv1d
        x = x.unsqueeze(0)  # Add batch dimension
        x = x.permute(0, 2, 1)  # Reshape to (batch, channels, sequence_length)
        x = self.conv1d(x)
        
        # Reshape for ConstantPad2d
        x = x.unsqueeze(-1)  # Add height dimension
        x = self.constant_pad2d(x)
        
        # Reshape for ConvTranspose2d
        x = x.permute(0, 1, 3, 2)  # Reshape to (batch, channels, height, width)
        x = self.conv_transpose2d(x)
        
        # Reshape for LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape for PixelShuffle
        x = self.pixel_shuffle(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

