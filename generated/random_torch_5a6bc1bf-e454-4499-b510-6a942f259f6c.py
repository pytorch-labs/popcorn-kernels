
# This is a random torch model generated by the following modules: ['Sequential', 'LazyConv3d', 'LocalResponseNorm', 'FeatureAlphaDropout', 'PReLU', 'TransformerEncoder', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.LazyConv3d(out_channels=16, kernel_size=3),
            nn.LocalResponseNorm(size=5),
            nn.FeatureAlphaDropout(p=0.5),
            nn.PReLU(),
            nn.LazyConv3d(out_channels=32, kernel_size=3),
            nn.LocalResponseNorm(size=5),
            nn.FeatureAlphaDropout(p=0.5),
            nn.PReLU(),
        )
        self.transformer_encoder = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=32, nhead=4),
            num_layers=2
        )
        self.conv1d = nn.Conv1d(in_channels=32, out_channels=10, kernel_size=3)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.sequential(x)
        
        # Reshape for TransformerEncoder: (batch_size, seq_len, d_model)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, d_model)
        
        x = self.transformer_encoder(x)
        
        # Reshape back to (batch_size, channels, seq_len)
        x = x.permute(1, 2, 0)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Global average pooling over the sequence dimension
        x = x.mean(dim=2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

