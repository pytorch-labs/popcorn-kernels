
# This is a random torch model generated by the following modules: ['AvgPool3d', 'LazyLinear', 'MaxPool2d', 'TripletMarginWithDistanceLoss', 'LPPool1d', 'EmbeddingBag', 'GLU', 'Module', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=2)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.glu = nn.GLU(dim=1)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))
        self.lazy_linear1 = nn.LazyLinear(out_features=128)
        self.lazy_linear2 = nn.LazyLinear(out_features=64)
        self.lazy_linear3 = nn.LazyLinear(out_features=32)
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming x is a 5D tensor (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        
        # Reshape to 4D tensor for MaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.max_pool2d(x)
        
        # Reshape to 3D tensor for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lp_pool1d(x)
        
        # Reshape to 2D tensor for EmbeddingBag
        x = x.view(x.size(0), -1)
        x = self.embedding_bag(x.long())
        
        # Reshape to 2D tensor for GLU
        x = x.view(x.size(0), -1)
        x = self.glu(x)
        
        # Reshape to 5D tensor for AdaptiveMaxPool3d
        x = x.view(x.size(0), 1, x.size(1), 1, 1)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 2D tensor for LazyLinear
        x = x.view(x.size(0), -1)
        x = F.relu(self.lazy_linear1(x))
        x = F.relu(self.lazy_linear2(x))
        x = self.lazy_linear3(x)
        
        # TripletMarginWithDistanceLoss requires three inputs: anchor, positive, negative
        anchor = x
        positive = torch.randn_like(anchor)
        negative = torch.randn_like(anchor)
        loss = self.triplet_loss(anchor, positive, negative)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

