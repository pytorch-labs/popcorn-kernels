
# This is a random torch model generated by the following modules: ['Sequential', 'SmoothL1Loss', 'Bilinear', 'SiLU', 'InstanceNorm2d', 'MSELoss', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.InstanceNorm2d(3),
            nn.SiLU(),
            nn.MaxPool3d(kernel_size=2, stride=2)
        )
        self.bilinear = nn.Bilinear(10, 10, 5)
        self.silu = nn.SiLU()
        self.instance_norm = nn.InstanceNorm2d(5)
        self.max_pool = nn.MaxPool3d(kernel_size=2, stride=2)
        self.loss1 = nn.SmoothL1Loss()
        self.loss2 = nn.MSELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width, depth)
        x = self.sequential(x)
        
        # Reshape for Bilinear layer
        batch_size = x.size(0)
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        x = self.bilinear(x, x)  # Apply Bilinear layer
        
        # Reshape back to 4D for InstanceNorm2d
        x = x.view(batch_size, 5, 8, 8)  # Arbitrary shape to fit InstanceNorm2d
        x = self.instance_norm(x)
        x = self.silu(x)
        
        # Reshape to 5D for MaxPool3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.max_pool(x)
        
        # Compute losses (dummy targets for demonstration)
        target1 = torch.randn_like(x)
        target2 = torch.randn_like(x)
        loss1 = self.loss1(x, target1)
        loss2 = self.loss2(x, target2)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

