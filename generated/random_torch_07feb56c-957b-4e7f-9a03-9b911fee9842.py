
# This is a random torch model generated by the following modules: ['LogSigmoid', 'GRU', 'LSTMCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self, input_size=128, hidden_size=64, num_layers=2) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size, hidden_size, num_layers, batch_first=True)
        self.lstm_cell = nn.LSTMCell(hidden_size, hidden_size)
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.size()
        
        # Pass through GRU
        gru_out, _ = self.gru(x)  # gru_out shape: (batch_size, sequence_length, hidden_size)
        
        # Initialize LSTM hidden state and cell state
        hx = torch.zeros(batch_size, self.lstm_cell.hidden_size).to(x.device)
        cx = torch.zeros(batch_size, self.lstm_cell.hidden_size).to(x.device)
        
        # Pass through LSTMCell for each time step
        lstm_out = []
        for t in range(sequence_length):
            hx, cx = self.lstm_cell(gru_out[:, t, :], (hx, cx))
            lstm_out.append(hx)
        
        # Stack the outputs
        lstm_out = torch.stack(lstm_out, dim=1)  # lstm_out shape: (batch_size, sequence_length, hidden_size)
        
        # Apply LogSigmoid
        output = self.log_sigmoid(lstm_out)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # batch_size=1, sequence_length=10, input_size=128
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
