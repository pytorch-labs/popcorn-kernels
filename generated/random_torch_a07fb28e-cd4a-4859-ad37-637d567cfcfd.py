
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'BatchNorm1d', 'AvgPool3d', 'LazyBatchNorm3d', 'ZeroPad3d', 'ReflectionPad3d', 'TripletMarginWithDistanceLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.zero_pad3d(x)
        x = self.reflection_pad3d(x)
        x = self.avg_pool3d(x)
        x = self.lazy_batch_norm3d(x)
        
        # Flatten the tensor to apply BatchNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        x = self.batch_norm1d(x)
        
        # Reshape back to original shape minus the pooling effect
        x = x.view(batch_size, channels, depth // 2, height // 2, width // 2)
        
        # Dummy targets for loss functions
        target = torch.randint(0, 2, (batch_size,)).float()
        anchor = torch.randn(batch_size, channels, depth // 2, height // 2, width // 2)
        positive = torch.randn(batch_size, channels, depth // 2, height // 2, width // 2)
        negative = torch.randn(batch_size, channels, depth // 2, height // 2, width // 2)
        
        # Apply loss functions
        bce_loss = self.bce_loss(x.view(batch_size, -1).mean(dim=1), target)
        triplet_loss = self.triplet_loss(anchor, positive, negative)
        
        # Return the losses as outputs
        return bce_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

