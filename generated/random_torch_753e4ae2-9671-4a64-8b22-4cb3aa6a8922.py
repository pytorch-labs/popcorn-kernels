
# This is a random torch model generated by the following modules: ['ZeroPad2d', 'Hardtanh', 'Dropout', 'ParameterDict', 'CrossMapLRN2d', 'ModuleList', 'LazyBatchNorm3d', 'Softsign', 'AlphaDropout', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(2)
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.dropout = nn.Dropout(p=0.5)
        self.param_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(16)),
            'param2': nn.Parameter(torch.randn(16))
        })
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.module_list = nn.ModuleList([
            nn.LazyBatchNorm3d(),
            nn.Softsign(),
            nn.AlphaDropout(p=0.5),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        ])
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        x = self.zero_pad(x)
        x = self.conv1(x)
        x = self.hardtanh(x)
        x = self.dropout(x)
        x = x + self.param_dict['param1'].view(1, -1, 1, 1)  # Broadcasting
        x = self.lrn(x)
        for module in self.module_list:
            x = module(x)
        x = self.conv2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
