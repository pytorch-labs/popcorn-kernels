
# This is a random torch model generated by the following modules: ['Softmax', 'ReflectionPad3d', 'ZeroPad1d', 'LazyConv1d', 'NLLLoss', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad3d(1)
        self.zero_pad = nn.ZeroPad1d(2)
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.prelu = nn.PReLU()
        self.softmax = nn.Softmax(dim=1)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Reshape to 1D for ZeroPad1d and LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply ZeroPad1d
        x = self.zero_pad(x)
        
        # Apply first LazyConv1d
        x = self.conv1(x)
        x = self.prelu(x)
        
        # Apply second LazyConv1d
        x = self.conv2(x)
        x = self.prelu(x)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Apply NLLLoss (assuming target is provided externally)
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2)))
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Arbitrary shape input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

