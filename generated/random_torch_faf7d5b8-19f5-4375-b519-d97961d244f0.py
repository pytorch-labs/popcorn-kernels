
# This is a random torch model generated by the following modules: ['Hardtanh', 'RMSNorm', 'GRUCell']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self, input_size=128, hidden_size=64) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh()
        self.rms_norm = nn.LayerNorm(input_size)  # Using LayerNorm as a placeholder for RMSNorm
        self.gru_cell1 = nn.GRUCell(input_size, hidden_size)
        self.gru_cell2 = nn.GRUCell(hidden_size, hidden_size)
        self.gru_cell3 = nn.GRUCell(hidden_size, hidden_size)
        self.gru_cell4 = nn.GRUCell(hidden_size, hidden_size)
        self.gru_cell5 = nn.GRUCell(hidden_size, hidden_size)
        self.fc = nn.Linear(hidden_size, 10)

    def forward(self, x):
        # Flatten the input to (batch_size, input_size)
        x = x.view(x.size(0), -1)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Initialize hidden state for GRUCell
        hx = torch.zeros(x.size(0), 64).to(x.device)
        
        # Apply GRUCell multiple times
        hx = self.gru_cell1(x, hx)
        hx = self.gru_cell2(hx, hx)
        hx = self.gru_cell3(hx, hx)
        hx = self.gru_cell4(hx, hx)
        hx = self.gru_cell5(hx, hx)
        
        # Apply final linear layer
        x = self.fc(hx)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Assuming input size is 128
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
