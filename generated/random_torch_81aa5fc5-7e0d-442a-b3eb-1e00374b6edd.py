
# This is a random torch model generated by the following modules: ['Unflatten', 'BatchNorm1d', 'TripletMarginWithDistanceLoss', 'Softsign', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, -1))
        self.bn1 = nn.BatchNorm1d(128)
        self.bn2 = nn.BatchNorm1d(64)
        self.softsign = nn.Softsign()
        self.hardshrink = nn.Hardshrink()
        self.loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, *), we first flatten it
        x = x.view(x.size(0), -1)  # Flatten the input
        
        # Apply Unflatten to reshape the input
        x = self.unflatten(x)  # Shape: (batch_size, 1, -1)
        
        # Reshape back to 1D for BatchNorm1d
        x = x.view(x.size(0), -1)  # Shape: (batch_size, *)
        
        # Apply BatchNorm1d
        x = self.bn1(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply BatchNorm1d again
        x = self.bn2(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # For TripletMarginWithDistanceLoss, we need three inputs: anchor, positive, negative
        # Here, we just use the same input for all three for demonstration purposes
        anchor = x
        positive = x
        negative = x
        
        # Compute the loss (though typically you wouldn't return a loss in a forward pass)
        loss = self.loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

