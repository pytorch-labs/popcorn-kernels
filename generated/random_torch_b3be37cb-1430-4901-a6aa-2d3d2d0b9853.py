
# This is a random torch model generated by the following modules: ['Sequential', 'Bilinear', 'AdaptiveAvgPool1d', 'AlphaDropout', 'ZeroPad2d', 'LogSigmoid', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sequential = nn.Sequential(
            nn.ZeroPad2d(2),
            nn.InstanceNorm2d(3),
            nn.AlphaDropout(0.5)
        )
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(10)
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, height, width)
        x = self.sequential(x)
        
        # Reshape for Bilinear layer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(0, 2, 1)  # Swap dimensions for Bilinear input
        
        # Split the tensor for Bilinear layer
        x1 = x[:, :10, :]  # First input to Bilinear
        x2 = x[:, 10:20, :]  # Second input to Bilinear
        
        # Apply Bilinear layer
        x = self.bilinear(x1, x2)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.permute(0, 2, 1)  # Swap dimensions back
        x = self.adaptive_avg_pool(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
