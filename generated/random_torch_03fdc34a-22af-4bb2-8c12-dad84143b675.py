
# This is a random torch model generated by the following modules: ['MaxPool2d', 'LocalResponseNorm', 'AdaptiveMaxPool2d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.adaptive_maxpool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.circular_pad3d = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.maxpool2d(x)
        x = self.local_response_norm(x)
        x = self.adaptive_maxpool2d(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for CircularPad3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.circular_pad3d(x)
        
        # Reshape back to 4D (batch, channels, height, width)
        x = x.squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

