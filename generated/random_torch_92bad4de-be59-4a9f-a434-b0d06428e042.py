
# This is a random torch model generated by the following modules: ['MaxUnpool2d', 'SELU', 'ConstantPad3d', 'MaxUnpool1d', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.constant_pad3d = nn.ConstantPad3d((1, 1, 1, 1, 1, 1), value=0)  # ConstantPad3d layer
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)  # MaxUnpool1d layer
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)  # MaxUnpool2d layer
        self.selu = nn.SELU()  # SELU activation

    def forward(self, x):
        # Assume input is a tensor of arbitrary shape
        # First, reshape the input to be compatible with the embedding layer
        if x.dim() > 2:
            x = x.view(-1)  # Flatten the input to 1D for embedding
        x = self.embedding(x)  # Apply embedding
        x = x.unsqueeze(1).unsqueeze(1)  # Reshape to 4D for ConstantPad3d
        x = self.constant_pad3d(x)  # Apply ConstantPad3d
        x = x.squeeze(1).squeeze(1)  # Reshape back to 2D for MaxUnpool1d
        x = x.unsqueeze(1)  # Add channel dimension for MaxUnpool1d
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)  # MaxPool1d to get indices
        x = self.max_unpool1d(x, indices)  # Apply MaxUnpool1d
        x = x.squeeze(1)  # Remove channel dimension
        x = x.unsqueeze(1).unsqueeze(1)  # Reshape to 4D for MaxUnpool2d
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)  # MaxPool2d to get indices
        x = self.max_unpool2d(x, indices)  # Apply MaxUnpool2d
        x = x.squeeze(1).squeeze(1)  # Reshape back to 2D
        x = self.selu(x)  # Apply SELU activation
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 32, 32)).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

