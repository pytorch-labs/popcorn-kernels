
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'PoissonNLLLoss', 'LazyBatchNorm1d', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.nll_loss2d = nn.NLLLoss2d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply AdaptiveMaxPool3d to reduce spatial dimensions
        x = self.adaptive_max_pool3d(x)
        
        # Flatten the tensor to fit into LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)
        
        # Reshape the tensor to fit into NLLLoss2d
        x = x.view(x.size(0), 1, 5, 5)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # Note: NLLLoss2d is typically used in the loss function, not in the forward pass
        # For demonstration purposes, we will skip applying it here
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # Note: PoissonNLLLoss is typically used in the loss function, not in the forward pass
        # For demonstration purposes, we will skip applying it here
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

