
# This is a random torch model generated by the following modules: ['Container', 'LayerNorm', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.LayerNorm([64, 64]),  # Normalize over the last two dimensions
            nn.AvgPool2d(kernel_size=2, stride=2),  # Reduce spatial dimensions by half
            nn.LayerNorm([32, 32]),  # Normalize over the new dimensions
            nn.AvgPool2d(kernel_size=2, stride=2),  # Reduce spatial dimensions by half again
            nn.LayerNorm([16, 16])  # Normalize over the final dimensions
        )

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, height, width)
        x = self.container(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
