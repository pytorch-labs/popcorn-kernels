
# This is a random torch model generated by the following modules: ['Unflatten', 'AdaptiveAvgPool3d', 'FeatureAlphaDropout', 'TransformerEncoderLayer', 'ChannelShuffle', 'Identity', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unflatten = nn.Unflatten(1, (1, 1, 1))  # Unflatten to 4D tensor
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))  # Adaptive pooling to 5x5x5
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)  # Feature alpha dropout
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)  # Transformer encoder layer
        self.channel_shuffle = nn.ChannelShuffle(groups=2)  # Channel shuffle
        self.identity = nn.Identity()  # Identity layer
        self.rnn = nn.RNNBase(mode='LSTM', input_size=64, hidden_size=128, num_layers=2)  # RNN base (LSTM)

    def forward(self, x):
        # Unflatten the input to 4D tensor
        x = self.unflatten(x)
        
        # Adaptive average pooling to 5x5x5
        x = self.adaptive_avg_pool3d(x)
        
        # Apply feature alpha dropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for transformer encoder layer
        x = x.view(-1, 5 * 5 * 5, 64)  # Reshape to (batch_size, seq_len, d_model)
        
        # Pass through transformer encoder layer
        x = self.transformer_encoder_layer(x)
        
        # Reshape for channel shuffle
        x = x.view(-1, 8, 8, 64)  # Reshape to (batch_size, channels, height, width)
        
        # Apply channel shuffle
        x = self.channel_shuffle(x)
        
        # Pass through identity layer
        x = self.identity(x)
        
        # Reshape for RNN
        x = x.view(-1, 64, 128)  # Reshape to (batch_size, seq_len, input_size)
        
        # Pass through RNN
        x, _ = self.rnn(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

