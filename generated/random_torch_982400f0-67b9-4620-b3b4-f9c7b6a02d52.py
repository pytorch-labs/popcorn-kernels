
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'Embedding', 'MaxPool1d', 'CrossEntropyLoss', 'Softplus', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.bn2 = nn.LazyBatchNorm3d()
        self.embedding = nn.Embedding(1000, 128)
        self.maxpool1 = nn.MaxPool1d(kernel_size=2)
        self.maxpool2 = nn.MaxPool1d(kernel_size=2)
        self.softplus = nn.Softplus()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss_2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming x is a 3D tensor (batch_size, sequence_length, embedding_dim)
        x = self.bn1(x)
        x = self.embedding(x.long())
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for MaxPool1d
        x = self.maxpool1(x)
        x = self.bn2(x)
        x = self.maxpool2(x)
        x = self.softplus(x)
        
        # Dummy target for loss calculation
        target = torch.randint(0, 1000, (x.size(0), x.size(1), x.size(2))).long()
        
        # Calculate CrossEntropyLoss
        ce_loss = self.cross_entropy_loss(x.view(-1, x.size(-1)), target.view(-1))
        
        # Calculate NLLLoss2d
        nll_loss = self.nll_loss_2d(x, target)
        
        return ce_loss + nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

