
# This is a random torch model generated by the following modules: ['GRU', 'MaxPool1d', 'Tanh', 'NLLLoss2d', 'GaussianNLLLoss', 'CircularPad2d', 'PReLU', 'MultiLabelSoftMarginLoss', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.maxpool1d1 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.tanh = nn.Tanh()
        self.circular_pad2d = nn.CircularPad2d(padding=1)
        self.prelu = nn.PReLU()
        self.adaptive_maxpool1d = nn.AdaptiveMaxPool1d(output_size=32)
        self.gru2 = nn.GRU(input_size=64, hidden_size=32, num_layers=1, batch_first=True)
        self.maxpool1d2 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.nllloss2d = nn.NLLLoss()
        self.gaussian_nllloss = nn.GaussianNLLLoss()
        self.multilabel_softmargin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        x, _ = self.gru1(x)
        x = x.permute(0, 2, 1)  # Reshape for MaxPool1d
        x = self.maxpool1d1(x)
        x = self.tanh(x)
        x = x.permute(0, 2, 1)  # Reshape back for GRU
        x, _ = self.gru2(x)
        x = x.permute(0, 2, 1)  # Reshape for MaxPool1d
        x = self.maxpool1d2(x)
        x = self.adaptive_maxpool1d(x)
        x = x.permute(0, 2, 1)  # Reshape back for final processing
        x = self.prelu(x)
        x = self.circular_pad2d(x.unsqueeze(1)).squeeze(1)  # Add and remove channel dimension for CircularPad2d
        # Assuming we have some target tensors for the loss functions
        target_nll = torch.randint(0, 10, (x.size(0),)).long().to(x.device)
        target_gaussian = torch.randn_like(x)
        target_multilabel = torch.randint(0, 2, (x.size(0), 10)).float().to(x.device)
        # Apply loss functions (usually not done in forward, but for demonstration)
        loss_nll = self.nllloss2d(F.log_softmax(x, dim=1), target_nll)
        loss_gaussian = self.gaussian_nllloss(x, target_gaussian, torch.ones_like(x))
        loss_multilabel = self.multilabel_softmargin_loss(x, target_multilabel)
        return x, loss_nll, loss_gaussian, loss_multilabel


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

