
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'TripletMarginLoss', 'Unfold', 'BCELoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.celu = nn.CELU()
        self.bce_loss = nn.BCELoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Apply Unfold to extract patches
        x = self.unfold(x)
        
        # Reshape to a 2D tensor for further processing
        x = x.view(x.size(0), -1, x.size(2))
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply Hardsigmoid activation
        x = self.hardsigmoid(x)
        
        # Reshape back to a 4D tensor for loss computation
        x = x.view(x.size(0), -1, 3, 3)
        
        # Generate random anchor, positive, and negative samples for TripletMarginLoss
        anchor = x[:, 0, :, :].unsqueeze(1)
        positive = x[:, 1, :, :].unsqueeze(1)
        negative = x[:, 2, :, :].unsqueeze(1)
        
        # Compute TripletMarginLoss
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Generate random target for BCELoss
        target = torch.rand_like(x[:, 0, :, :].unsqueeze(1))
        
        # Compute BCELoss
        bce_loss = self.bce_loss(x[:, 0, :, :].unsqueeze(1), target)
        
        # Return the sum of the losses
        return triplet_loss + bce_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
