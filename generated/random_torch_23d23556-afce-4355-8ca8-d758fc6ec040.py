
# This is a random torch model generated by the following modules: ['ModuleDict', 'RNNBase', 'AdaptiveAvgPool1d', 'CosineEmbeddingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_dict = nn.ModuleDict({
            'rnn1': nn.RNNBase(input_size=128, hidden_size=256, num_layers=2, nonlinearity='tanh'),
            'rnn2': nn.RNNBase(input_size=256, hidden_size=128, num_layers=1, nonlinearity='relu'),
        })
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=64)
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Reshape for RNN input
        x = x.permute(1, 0, 2)  # (sequence_length, batch_size, input_size)
        
        # Pass through RNN layers
        x, _ = self.module_dict['rnn1'](x)
        x, _ = self.module_dict['rnn2'](x)
        
        # Reshape back to (batch_size, sequence_length, hidden_size)
        x = x.permute(1, 2, 0)  # (batch_size, hidden_size, sequence_length)
        
        # Apply adaptive average pooling
        x = self.adaptive_avg_pool(x)  # (batch_size, hidden_size, 64)
        
        # Flatten for loss computation
        x = x.view(batch_size, -1)  # (batch_size, hidden_size * 64)
        
        # Dummy target for cosine embedding loss
        target = torch.ones(batch_size, dtype=torch.float32, device=x.device)
        
        # Compute cosine embedding loss
        loss = self.cosine_loss(x, x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 100, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

