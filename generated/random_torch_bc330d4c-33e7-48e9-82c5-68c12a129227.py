
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'Mish', 'Dropout1d', 'AdaptiveAvgPool2d', 'UpsamplingBilinear2d', 'ModuleList', 'CELU', 'LPPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.mish = nn.Mish()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((16, 16))
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.module_list = nn.ModuleList([
            nn.CELU(),
            nn.LPPool2d(norm_type=2, kernel_size=2, stride=2),
            nn.CELU(),
            nn.LPPool2d(norm_type=2, kernel_size=2, stride=2),
            nn.CELU()
        ])
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)

    def forward(self, x):
        x = self.pixel_unshuffle(x)
        x = self.mish(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for Dropout1d
        x = self.dropout1d(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.adaptive_avg_pool2d(x)
        x = self.upsampling_bilinear2d(x)
        for module in self.module_list:
            x = module(x)
        x = self.lp_pool2d(x)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
