
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'TransformerDecoder', 'LazyInstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.transformer_decoder = nn.TransformerDecoder(
            decoder_layer=nn.TransformerDecoderLayer(d_model=64, nhead=8),
            num_layers=3
        )
        self.instance_norm = nn.LazyInstanceNorm2d()
        self.fc = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is a 2D tensor of shape (batch_size, sequence_length)
        x = self.embedding_bag(x)  # Output shape: (batch_size, embedding_dim)
        
        # Reshape for TransformerDecoder
        x = x.unsqueeze(0)  # Add sequence dimension: (1, batch_size, embedding_dim)
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)  # Output shape: (1, batch_size, embedding_dim)
        x = x.squeeze(0)  # Remove sequence dimension: (batch_size, embedding_dim)
        
        # Reshape for LazyInstanceNorm2d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Add height and width dimensions: (batch_size, embedding_dim, 1, 1)
        x = self.instance_norm(x)  # Output shape: (batch_size, embedding_dim, 1, 1)
        x = x.squeeze(-1).squeeze(-1)  # Remove height and width dimensions: (batch_size, embedding_dim)
        
        # Final fully connected layer
        x = self.fc(x)  # Output shape: (batch_size, 10)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 10)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

