
# This is a random torch model generated by the following modules: ['GELU', 'LeakyReLU', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3 = nn.ConvTranspose3d(20, 30, kernel_size=3, stride=2, padding=1)
        self.gelu = nn.GELU()
        self.leaky_relu = nn.LeakyReLU(0.1)

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.gelu(x)
        x = self.conv_transpose2(x)
        x = self.leaky_relu(x)
        x = self.conv_transpose3(x)
        x = self.gelu(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

