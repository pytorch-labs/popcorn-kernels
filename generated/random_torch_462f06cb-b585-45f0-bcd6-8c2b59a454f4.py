
# This is a random torch model generated by the following modules: ['AvgPool1d', 'ConstantPad3d', 'ModuleDict', 'ReflectionPad1d', 'CELU', 'SELU', 'Flatten', 'FractionalMaxPool3d', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.module_dict = nn.ModuleDict({
            'reflection_pad1d': nn.ReflectionPad1d(padding=1),
            'celu': nn.CELU(),
            'selu': nn.SELU(),
        })
        self.flatten = nn.Flatten()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input is 3D, reshape to 1D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.avg_pool1d(x)
        
        # Reshape back to 3D for ConstantPad3d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** (1/3)), int(x.size(2) ** (1/3)), int(x.size(2) ** (1/3)))
        x = self.constant_pad3d(x)
        
        # Apply ModuleDict operations
        x = self.module_dict['reflection_pad1d'](x.view(x.size(0), x.size(1), -1))
        x = self.module_dict['celu'](x)
        x = self.module_dict['selu'](x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** (1/3)), int(x.size(2) ** (1/3)), int(x.size(2) ** (1/3)))
        x, _ = self.fractional_max_pool3d(x)
        
        # Apply MaxUnpool3d
        x = self.max_unpool3d(x, _)
        
        # Flatten the output
        x = self.flatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
