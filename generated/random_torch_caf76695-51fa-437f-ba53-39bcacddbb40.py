
# This is a random torch model generated by the following modules: ['Linear', 'CosineEmbeddingLoss', 'Hardshrink', 'Upsample', 'LayerNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 512)
        self.linear3 = nn.Linear(512, 256)
        self.linear4 = nn.Linear(256, 128)
        self.linear5 = nn.Linear(128, 64)
        
        self.hardshrink = nn.Hardshrink()
        
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        
        self.layer_norm1 = nn.LayerNorm(256)
        self.layer_norm2 = nn.LayerNorm(512)
        self.layer_norm3 = nn.LayerNorm(256)
        self.layer_norm4 = nn.LayerNorm(128)
        self.layer_norm5 = nn.LayerNorm(64)
        
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, *), flatten it
        x = x.view(x.size(0), -1)
        
        # Apply linear layers with layer normalization
        x = self.layer_norm1(F.relu(self.linear1(x)))
        x = self.layer_norm2(F.relu(self.linear2(x)))
        x = self.layer_norm3(F.relu(self.linear3(x)))
        x = self.layer_norm4(F.relu(self.linear4(x)))
        x = self.layer_norm5(F.relu(self.linear5(x)))
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for upsampling
        x = x.view(x.size(0), 1, 8, 8)
        x = self.upsample(x)
        
        # Flatten again for cosine embedding loss
        x = x.view(x.size(0), -1)
        
        # Dummy target for cosine embedding loss
        target = torch.ones(x.size(0)).to(x.device)
        
        # Compute cosine embedding loss (for demonstration purposes, we return the loss)
        loss = self.cosine_loss(x, x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

