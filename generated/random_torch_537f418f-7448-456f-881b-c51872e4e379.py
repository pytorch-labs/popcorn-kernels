
# This is a random torch model generated by the following modules: ['GRUCell', 'LogSigmoid', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self, input_size=128, hidden_size=64) -> None:
        super().__init__()
        self.hidden_size = hidden_size
        self.gru_cell1 = nn.GRUCell(input_size, hidden_size)
        self.gru_cell2 = nn.GRUCell(hidden_size, hidden_size)
        self.rms_norm = nn.LayerNorm(hidden_size)  # RMSNorm is not directly available in PyTorch, using LayerNorm as a substitute
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, _ = x.size()
        
        # Initialize hidden state
        hx = torch.zeros(batch_size, self.hidden_size).to(x.device)
        
        # Process through GRUCells
        for t in range(seq_len):
            hx = self.gru_cell1(x[:, t, :], hx)
            hx = self.gru_cell2(hx, hx)
        
        # Apply RMSNorm (LayerNorm as substitute)
        hx = self.rms_norm(hx)
        
        # Apply LogSigmoid
        output = self.log_sigmoid(hx)
        
        return output

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # batch_size=1, sequence_length=10, input_size=128
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
