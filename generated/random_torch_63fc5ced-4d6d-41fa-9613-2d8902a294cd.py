
# This is a random torch model generated by the following modules: ['TripletMarginLoss', 'Hardtanh', 'Mish', 'Linear', 'Bilinear', 'MaxPool2d', 'MaxUnpool2d', 'PoissonNLLLoss', 'RNN']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.mish = nn.Mish()
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.bilinear = nn.Bilinear(32, 32, 16)
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.maxunpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.rnn = nn.RNN(input_size=16, hidden_size=8, num_layers=1, batch_first=True)
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss(log_input=True)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.hardtanh(x)
        x = self.mish(x)
        
        # Flatten the input for linear layers
        x = x.view(x.size(0), -1)
        
        x = self.linear1(x)
        x = self.linear2(x)
        
        # Split the output for bilinear layer
        x1 = x[:, :16]
        x2 = x[:, 16:]
        x = self.bilinear(x1, x2)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), 1, 4, 4)
        
        # MaxPool2d and MaxUnpool2d
        x, indices = self.maxpool2d(x)
        x = self.maxunpool2d(x, indices)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 16)
        x, _ = self.rnn(x)
        
        # Compute TripletMarginLoss (requires three inputs)
        anchor = x[:, 0, :]
        positive = x[:, 1, :]
        negative = x[:, 2, :]
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Compute PoissonNLLLoss (requires two inputs)
        target = torch.randint(0, 10, (x.size(0), x.size(1))).float()
        poisson_loss = self.poisson_nll_loss(x, target)
        
        # Return both losses for demonstration purposes
        return triplet_loss, poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
