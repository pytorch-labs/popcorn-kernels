
# This is a random torch model generated by the following modules: ['ReflectionPad1d', 'Mish', 'Flatten', 'Softmax', 'ReplicationPad3d', 'AdaptiveMaxPool3d', 'RNN', 'Container', 'Bilinear', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.mish = nn.Mish()
        self.flatten = nn.Flatten()
        self.softmax = nn.Softmax(dim=1)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.rnn = nn.RNN(input_size=8, hidden_size=16, num_layers=2, batch_first=True)
        self.container = nn.Sequential(
            nn.Linear(16, 32),
            nn.ReLU(),
            nn.Linear(32, 64)
        )
        self.bilinear = nn.Bilinear(64, 64, 128)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((4, 4))

    def forward(self, x):
        # Assuming input is 1D, pad it
        x = self.reflection_pad1d(x)
        x = self.mish(x)
        
        # Flatten the input
        x = self.flatten(x)
        
        # Apply softmax
        x = self.softmax(x)
        
        # Reshape for 3D operations
        x = x.view(-1, 1, 1, x.size(1))
        x = self.replication_pad3d(x)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 8)
        x, _ = self.rnn(x)
        
        # Pass through container
        x = self.container(x[:, -1, :])
        
        # Apply bilinear transformation
        x = self.bilinear(x, x)
        
        # Reshape for 2D pooling
        x = x.view(x.size(0), 1, 16, 8)
        x = self.adaptive_avg_pool2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

