
# This is a random torch model generated by the following modules: ['LazyConv1d', 'AvgPool3d', 'RNNBase', 'PReLU', 'Module', 'SELU', 'ReflectionPad2d', 'CosineEmbeddingLoss', 'CTCLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.pool1 = nn.AvgPool3d(kernel_size=2)
        self.rnn = nn.RNNBase(input_size=32, hidden_size=64, num_layers=2)
        self.prelu = nn.PReLU()
        self.selu = nn.SELU()
        self.pad = nn.ReflectionPad2d(padding=1)
        self.loss1 = nn.CosineEmbeddingLoss()
        self.loss2 = nn.CTCLoss()

    def forward(self, x):
        # Reshape input to fit LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        x = self.conv1(x)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Add dummy dimensions to fit 3D pooling
        x = self.pool1(x)
        
        # Reshape for RNN
        x = x.squeeze(3).squeeze(2)  # Remove dummy dimensions
        x = x.permute(2, 0, 1)  # Reshape to (sequence_length, batch_size, features)
        x, _ = self.rnn(x)
        
        # Apply PReLU and SELU
        x = self.prelu(x)
        x = self.selu(x)
        
        # Reshape for ReflectionPad2d
        x = x.permute(1, 2, 0)  # Reshape to (batch_size, features, sequence_length)
        x = x.unsqueeze(1)  # Add dummy channel dimension
        x = self.pad(x)
        
        # Compute losses (dummy computation, not used in final output)
        target = torch.randint(0, 2, (x.size(0),)).float()
        loss1 = self.loss1(x.squeeze(1), x.squeeze(1), target)
        loss2 = self.loss2(x.squeeze(1), torch.randint(0, 10, (x.size(0), x.size(2))), torch.tensor([x.size(2)] * x.size(0)), torch.tensor([10] * x.size(0)))
        
        # Return the final output (losses are not returned)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
