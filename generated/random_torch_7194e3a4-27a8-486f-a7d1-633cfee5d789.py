
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'PoissonNLLLoss', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample_nearest = nn.UpsamplingNearest2d(scale_factor=2)
        self.upsample_bilinear = nn.UpsamplingBilinear2d(scale_factor=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply nearest neighbor upsampling
        x = self.upsample_nearest(x)
        
        # Apply bilinear upsampling
        x = self.upsample_bilinear(x)
        
        # Flatten the tensor to compute PoissonNLLLoss
        x = x.view(-1)
        
        # Generate a target tensor with the same shape as x
        target = torch.ones_like(x)
        
        # Compute PoissonNLLLoss
        loss = self.poisson_nll_loss(x, target)
        
        # Return the loss as the output
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
