
# This is a random torch model generated by the following modules: ['LazyConv3d', 'BCELoss', 'RMSNorm', 'LazyConvTranspose1d', 'LeakyReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.conv3d_2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.rms_norm = nn.RMSNorm(64)  # Assuming RMSNorm is a custom layer or available in your environment
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply first 3D convolution
        x = self.conv3d_1(x)
        x = self.leaky_relu(x)
        
        # Apply second 3D convolution
        x = self.conv3d_2(x)
        x = self.leaky_relu(x)
        
        # Reshape to 1D for ConvTranspose1d
        x = x.view(x.size(0), -1, x.size(-1))  # Flatten to (batch_size, channels, depth)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        x = self.leaky_relu(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Reshape back to a suitable shape for BCELoss
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        
        # Apply a sigmoid to get probabilities for BCELoss
        x = torch.sigmoid(x)
        
        # Assuming we have a target tensor for BCELoss (this is just a placeholder)
        target = torch.zeros_like(x)
        loss = self.bce_loss(x, target)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
