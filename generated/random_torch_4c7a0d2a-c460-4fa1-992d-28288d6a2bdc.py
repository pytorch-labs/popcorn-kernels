
# This is a random torch model generated by the following modules: ['Tanhshrink', 'FractionalMaxPool3d', 'InstanceNorm3d', 'Threshold', 'CircularPad1d', 'LSTM', 'ParameterDict', 'Upsample']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink = nn.Tanhshrink()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.instance_norm3d = nn.InstanceNorm3d(8)
        self.threshold = nn.Threshold(0.1, 0.5)
        self.circular_pad1d = nn.CircularPad1d(1)
        self.lstm = nn.LSTM(input_size=8, hidden_size=16, num_layers=2, batch_first=True)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(16, 32)),
            'param2': nn.Parameter(torch.randn(32, 10))
        })
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')

    def forward(self, x):
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(-1, 1, 16, 16, 16)
        x = self.fractional_max_pool3d(x)
        
        # Apply InstanceNorm3d
        x = self.instance_norm3d(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for CircularPad1d
        x = x.view(-1, 8, 8)
        x = self.circular_pad1d(x)
        
        # Reshape for LSTM
        x = x.view(-1, 8, 8)
        x, _ = self.lstm(x)
        
        # Apply ParameterDict
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Reshape for Upsample
        x = x.view(-1, 10, 8, 8)
        x = self.upsample(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
