
# This is a random torch model generated by the following modules: ['GELU', 'AvgPool1d', 'BatchNorm3d', 'BatchNorm1d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn3d = nn.BatchNorm3d(10)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.bn1d = nn.BatchNorm1d(20)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.gelu = nn.GELU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        # Apply BatchNorm3d
        x = self.bn3d(x)
        
        # Reshape to (batch_size, channels * depth * height, width) for AvgPool1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Reshape to (batch_size, channels * depth * height, width) for BatchNorm1d
        x = x.view(batch_size, -1, x.shape[-1])
        
        # Apply BatchNorm1d
        x = self.bn1d(x)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 5, 5).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

