
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'AvgPool3d', 'UpsamplingBilinear2d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm1 = nn.InstanceNorm1d(64)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.gelu = nn.GELU()
        self.instance_norm2 = nn.InstanceNorm1d(32)
        self.avg_pool3d_2 = nn.AvgPool3d(kernel_size=2)
        self.upsample_2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.gelu_2 = nn.GELU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, *dims)
        # First, reshape to 1D for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, flattened_dims)
        x = self.instance_norm1(x)
        
        # Reshape back to 3D for AvgPool3d
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Reshape to (batch_size, channels, 8, 8, 8)
        x = self.avg_pool3d(x)
        
        # Reshape to 2D for UpsamplingBilinear2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to (batch_size, channels, 8, 8*8)
        x = self.upsample(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Repeat the process with different shapes
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, flattened_dims)
        x = self.instance_norm2(x)
        
        x = x.view(x.size(0), x.size(1), 4, 4, 4)  # Reshape to (batch_size, channels, 4, 4, 4)
        x = self.avg_pool3d_2(x)
        
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to (batch_size, channels, 4, 4*4)
        x = self.upsample_2(x)
        
        x = self.gelu_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 8, 8, 8).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

