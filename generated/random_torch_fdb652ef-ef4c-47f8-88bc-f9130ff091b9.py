
# This is a random torch model generated by the following modules: ['Hardtanh', 'EmbeddingBag', 'LayerNorm', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.layer_norm = nn.LayerNorm(64)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.pairwise_distance = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Assuming x is a tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = self.layer_norm(x)
        x = self.hardtanh(x)
        
        # Split the tensor into two parts for PairwiseDistance
        x1, x2 = torch.chunk(x, 2, dim=1)
        x1 = x1.view(x1.size(0), -1)
        x2 = x2.view(x2.size(0), -1)
        
        # Compute pairwise distance
        output = self.pairwise_distance(x1, x2)
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

