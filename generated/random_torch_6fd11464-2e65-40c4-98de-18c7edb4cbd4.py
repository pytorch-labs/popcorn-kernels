
# This is a random torch model generated by the following modules: ['Softplus', 'FractionalMaxPool2d', 'RNNBase', 'BCELoss', 'LPPool2d', 'PReLU', 'Module', 'LayerNorm', 'LogSigmoid', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.rnn = nn.RNNBase(input_size=14*14, hidden_size=128, num_layers=2, batch_first=True)
        self.bce_loss = nn.BCELoss()
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.prelu = nn.PReLU()
        self.layer_norm = nn.LayerNorm(128)
        self.log_sigmoid = nn.LogSigmoid()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))

    def forward(self, x):
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(-1, 1, x.size(-2), x.size(-1))
        x = self.fractional_max_pool2d(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 14*14)
        x, _ = self.rnn(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Reshape for LPPool2d
        x = x.view(x.size(0), 1, x.size(1), x.size(2))
        x = self.lp_pool2d(x)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = self.avg_pool3d(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Flatten for BCELoss (assuming binary classification)
        x = x.view(x.size(0), -1)
        target = torch.rand_like(x)  # Dummy target for BCELoss
        loss = self.bce_loss(x, target)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

