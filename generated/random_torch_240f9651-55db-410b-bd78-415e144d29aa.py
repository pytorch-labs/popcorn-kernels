
# This is a random torch model generated by the following modules: ['Dropout', 'Softmax', 'ReflectionPad1d', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.dropout2 = nn.Dropout(p=0.5)
        self.reflection_pad1d = nn.ReflectionPad1d(padding=2)
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Apply ReflectionPad1d to the input
        x = self.reflection_pad1d(x)
        
        # Apply RReLU activation
        x = self.rrelu1(x)
        
        # Apply Dropout
        x = self.dropout1(x)
        
        # Apply RReLU activation again
        x = self.rrelu2(x)
        
        # Apply Dropout again
        x = self.dropout2(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
