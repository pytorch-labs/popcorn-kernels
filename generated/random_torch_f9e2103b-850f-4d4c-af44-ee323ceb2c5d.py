
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'ReplicationPad2d', 'LazyConvTranspose3d', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.replication_pad2d = nn.ReplicationPad2d(padding=2)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        
        # Repeating some modules up to 5 times
        self.fractional_max_pool3d_2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.lazy_conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=2)
        self.reflection_pad3d_2 = nn.ReflectionPad3d(padding=1)

    def forward(self, x):
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D for ReplicationPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.replication_pad2d(x)
        
        # Reshape back to 5D for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_conv_transpose3d(x)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Apply FractionalMaxPool3d again
        x = self.fractional_max_pool3d_2(x)
        
        # Apply LazyConvTranspose3d again
        x = self.lazy_conv_transpose3d_2(x)
        
        # Apply ReflectionPad3d again
        x = self.reflection_pad3d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

