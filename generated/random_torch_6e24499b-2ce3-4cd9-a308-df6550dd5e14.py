
# This is a random torch model generated by the following modules: ['Dropout3d', 'RNNBase', 'Upsample', 'InstanceNorm2d', 'Embedding', 'Softplus', 'MaxPool1d', 'MultiMarginLoss', 'GRUCell', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.instance_norm2d = nn.InstanceNorm2d(num_features=64)
        self.embedding = nn.Embedding(num_embeddings=1000, embedding_dim=64)
        self.softplus = nn.Softplus()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=128)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(1, 1))

    def forward(self, x):
        # Assume x is a 3D tensor (batch_size, sequence_length, embedding_dim)
        x = self.embedding(x)  # (batch_size, sequence_length, embedding_dim)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length, embedding_dim)
        x = self.dropout3d(x)
        x = x.squeeze(1)  # (batch_size, sequence_length, embedding_dim)
        
        # RNNBase
        x, _ = self.rnn(x)  # (batch_size, sequence_length, hidden_size)
        
        # Upsample
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length, hidden_size)
        x = self.upsample(x)  # (batch_size, 1, sequence_length * 2, hidden_size)
        x = x.squeeze(1)  # (batch_size, sequence_length * 2, hidden_size)
        
        # InstanceNorm2d
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length * 2, hidden_size)
        x = self.instance_norm2d(x)
        x = x.squeeze(1)  # (batch_size, sequence_length * 2, hidden_size)
        
        # Softplus
        x = self.softplus(x)
        
        # MaxPool1d
        x = x.permute(0, 2, 1)  # (batch_size, hidden_size, sequence_length * 2)
        x = self.maxpool1d(x)  # (batch_size, hidden_size, sequence_length)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, hidden_size)
        
        # GRUCell
        hx = torch.zeros(x.size(0), 128).to(x.device)  # Initial hidden state
        for i in range(x.size(1)):
            hx = self.gru_cell(x[:, i, :], hx)
        x = hx  # (batch_size, hidden_size)
        
        # AdaptiveAvgPool2d
        x = x.unsqueeze(1).unsqueeze(1)  # (batch_size, 1, 1, hidden_size)
        x = self.adaptive_avg_pool2d(x)  # (batch_size, 1, 1, hidden_size)
        x = x.squeeze(1).squeeze(1)  # (batch_size, hidden_size)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 10)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
