
# This is a random torch model generated by the following modules: ['ParameterDict', 'CTCLoss', 'FeatureAlphaDropout', 'NLLLoss', 'Threshold', 'ZeroPad2d', 'Softmin', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.parameters_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.ctc_loss = nn.CTCLoss()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.nll_loss = nn.NLLLoss()
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.zero_pad2d = nn.ZeroPad2d(2)
        self.softmin = nn.Softmin(dim=1)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)

    def forward(self, x):
        # Apply ZeroPad2d
        x = self.zero_pad2d(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply AdaptiveAvgPool1d (reshape to 1D if necessary)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, width*height)
        x = self.adaptive_avg_pool1d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape for loss computation (assuming x is of shape (batch_size, channels, features))
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, channels*features)
        
        # Compute CTC Loss (dummy target and input_lengths)
        target = torch.randint(0, 10, (x.size(0), 5), dtype=torch.long)
        input_lengths = torch.full((x.size(0),), x.size(1), dtype=torch.long)
        target_lengths = torch.randint(1, 6, (x.size(0),), dtype=torch.long)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Compute NLL Loss (dummy target)
        dummy_output = F.log_softmax(x, dim=1)
        dummy_target = torch.randint(0, 10, (x.size(0),), dtype=torch.long)
        nll_loss = self.nll_loss(dummy_output, dummy_target)
        
        # Return a combination of losses and the processed tensor
        return ctc_loss + nll_loss, x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

