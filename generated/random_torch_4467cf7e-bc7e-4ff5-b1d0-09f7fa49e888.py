
# This is a random torch model generated by the following modules: ['Softplus', 'AvgPool3d', 'NLLLoss2d', 'LocalResponseNorm', 'LazyInstanceNorm1d', 'BCELoss', 'LazyConvTranspose2d', 'BatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.avgpool3d = nn.AvgPool3d(kernel_size=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.batch_norm1d = nn.BatchNorm1d(num_features=128)
        self.nll_loss2d = nn.NLLLoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.avgpool3d(x)
        
        # Reshape for LocalResponseNorm
        x = x.squeeze(2)  # Remove depth dimension
        x = self.local_response_norm(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lazy_instance_norm1d(x)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to 2D
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.batch_norm1d(x)
        
        # Apply NLLLoss2d (requires target, so we skip it in forward pass)
        # Apply BCELoss (requires target, so we skip it in forward pass)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
