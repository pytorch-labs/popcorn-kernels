
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'ELU', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.elu1 = nn.ELU()
        self.pad1 = nn.ReplicationPad2d(2)
        self.bn2 = nn.LazyBatchNorm3d()
        self.elu2 = nn.ELU()
        self.pad2 = nn.ReplicationPad2d(1)
        self.bn3 = nn.LazyBatchNorm3d()
        self.elu3 = nn.ELU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        x = self.elu1(x)
        
        # Reshape to apply 2D padding
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        x = self.pad1(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, x.shape[-2], x.shape[-1])
        x = self.bn2(x)
        x = self.elu2(x)
        
        # Reshape to apply 2D padding again
        x = x.view(batch_size * depth, channels, x.shape[-2], x.shape[-1])
        x = self.pad2(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, x.shape[-2], x.shape[-1])
        x = self.bn3(x)
        x = self.elu3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
