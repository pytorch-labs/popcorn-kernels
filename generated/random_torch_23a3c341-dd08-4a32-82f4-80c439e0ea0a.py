
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'PReLU', 'ReflectionPad1d', 'LocalResponseNorm', 'CELU', 'LSTM', 'Softshrink', 'Flatten', 'ModuleList', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.prelu = nn.PReLU()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.local_response_norm = nn.LocalResponseNorm(2)
        self.celu = nn.CELU()
        self.lstm = nn.LSTM(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.softshrink = nn.Softshrink()
        self.flatten = nn.Flatten()
        self.module_list = nn.ModuleList([nn.Linear(32, 16), nn.Linear(16, 8)])
        self.rnn_cell_base = nn.RNNCellBase(input_size=8, hidden_size=4)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.adaptive_max_pool(x)
        x = self.prelu(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # (batch, channels, height*width)
        x = self.reflection_pad(x)
        
        # Reshape back to 4D for LocalResponseNorm
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.local_response_norm(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 16)  # (batch, seq_len, input_size)
        x, _ = self.lstm(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Flatten for fully connected layers
        x = self.flatten(x)
        
        # Apply ModuleList layers
        for layer in self.module_list:
            x = layer(x)
        
        # Apply RNNCellBase
        hx = torch.zeros(x.size(0), 4).to(x.device)  # Initialize hidden state
        x = self.rnn_cell_base(x, hx)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch of 1, 3 channels, 64x64 image
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

