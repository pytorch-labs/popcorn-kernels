
# This is a random torch model generated by the following modules: ['Flatten', 'RNNBase', 'LazyBatchNorm1d', 'ConstantPad3d', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.flatten = nn.Flatten()
        self.rnn = nn.RNNBase(input_size=512, hidden_size=256, num_layers=2, batch_first=True)
        self.bn = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Pad the input
        x = self.pad(x)
        
        # Apply fractional max pooling
        x = self.pool(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), -1, 512)
        
        # Pass through RNN
        x, _ = self.rnn(x)
        
        # Apply batch normalization
        x = self.bn(x)
        
        # Flatten again for final output
        x = self.flatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

