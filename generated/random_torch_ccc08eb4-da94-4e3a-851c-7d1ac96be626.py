
# This is a random torch model generated by the following modules: ['LazyConv3d', 'Module', 'LocalResponseNorm', 'PoissonNLLLoss', 'ConstantPad2d', 'Dropout3d', 'NLLLoss2d', 'NLLLoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.pad = nn.ConstantPad2d(padding=2, value=1.0)
        self.dropout = nn.Dropout3d(p=0.5)
        self.lrn = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.celu = nn.CELU(alpha=1.0)
        self.poisson_nll_loss = nn.PoissonNLLLoss(log_input=True, full=False, eps=1e-08)
        self.nll_loss = nn.NLLLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply LazyConv3d
        x = self.conv1(x)
        
        # Reshape to 4D for ConstantPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply ConstantPad2d
        x = self.pad(x)
        
        # Reshape back to 5D for Dropout3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply Dropout3d
        x = self.dropout(x)
        
        # Apply LocalResponseNorm
        x = self.lrn(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # For demonstration, we create a dummy target
        target_2d = torch.randint(0, x.size(1), (x.size(0), x.size(2)))
        x = self.nll_loss2d(x, target_2d)
        
        # Reshape for NLLLoss
        x = x.view(x.size(0), -1)
        
        # Apply NLLLoss (assuming target is provided externally)
        # For demonstration, we create a dummy target
        target = torch.randint(0, x.size(1), (x.size(0),))
        x = self.nll_loss(x, target)
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # For demonstration, we create a dummy target
        target_poisson = torch.randn_like(x)
        x = self.poisson_nll_loss(x, target_poisson)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
