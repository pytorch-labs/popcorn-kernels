
# This is a random torch model generated by the following modules: ['Tanhshrink', 'SyncBatchNorm', 'Unflatten', 'GaussianNLLLoss', 'LazyConv3d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.bn1 = nn.SyncBatchNorm(16)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.bn2 = nn.SyncBatchNorm(32)
        self.unflatten = nn.Unflatten(1, (32, 8, 8, 8))
        self.silu = nn.SiLU()
        self.tanhshrink = nn.Tanhshrink()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.silu(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.tanhshrink(x)
        x = x.view(x.size(0), -1)  # Flatten
        x = self.unflatten(x)
        x = self.silu(x)
        x = x.view(x.size(0), -1)  # Flatten again
        mean = torch.zeros_like(x)
        var = torch.ones_like(x)
        loss = self.gaussian_nll_loss(x, mean, var)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
