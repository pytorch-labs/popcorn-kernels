
# This is a random torch model generated by the following modules: ['Unfold', 'PoissonNLLLoss', 'Hardtanh', 'LPPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), padding=1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.lppool2d = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Unfold the input tensor to extract patches
        x = self.unfold(x)
        
        # Reshape the unfolded tensor to a 4D tensor for further processing
        batch_size, channels, height, width = x.size(0), x.size(1), x.size(2), x.size(3)
        x = x.view(batch_size, channels, height, width)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Apply LPPool2d pooling
        x = self.lppool2d(x)
        
        # Reshape the tensor to a 2D tensor for PoissonNLLLoss
        x = x.view(batch_size, -1)
        
        # Generate a target tensor for PoissonNLLLoss (for demonstration purposes)
        target = torch.randint(0, 10, (batch_size, x.size(1)), dtype=torch.float32).to(x.device)
        
        # Apply PoissonNLLLoss
        loss = self.poisson_nll_loss(x, target)
        
        # Return the loss as the output (since PoissonNLLLoss is a loss function)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
