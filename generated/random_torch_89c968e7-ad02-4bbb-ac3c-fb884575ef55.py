
# This is a random torch model generated by the following modules: ['MSELoss', 'FractionalMaxPool3d', 'Linear', 'Sequential', 'Conv2d', 'AvgPool1d', 'Softsign', 'ModuleList', 'LSTM', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.softsign = nn.Softsign()
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 10)
        self.module_list = nn.ModuleList([nn.Linear(64, 64) for _ in range(3)])
        self.sequential = nn.Sequential(
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 16)
        )
        self.mseloss = nn.MSELoss()

    def forward(self, x):
        # Conv2d
        x = self.conv1(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a dummy dimension for 3D pooling
        x = self.fractional_max_pool3d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool1d(x)
        
        # Softsign
        x = self.softsign(x)
        
        # Reshape for LSTM
        x = x.permute(0, 2, 1)  # Swap dimensions for LSTM input
        x, _ = self.lstm(x)
        
        # Linear layers
        x = self.linear1(x[:, -1, :])  # Use the last time step's output
        x = F.relu(x)
        
        # ModuleList
        for layer in self.module_list:
            x = layer(x)
            x = F.relu(x)
        
        # Sequential
        x = self.sequential(x)
        
        # Linear layer for final output
        x = self.linear2(x)
        
        # MSELoss (assuming we have a target for demonstration)
        target = torch.randn_like(x)
        loss = self.mseloss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

