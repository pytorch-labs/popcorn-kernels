
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'LazyInstanceNorm3d', 'Mish', 'GroupNorm', 'AdaptiveMaxPool2d', 'Flatten', 'Softmax', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.mish = nn.Mish()
        self.group_norm = nn.GroupNorm(4, 16)  # Assuming 16 channels
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((8, 8))
        self.flatten = nn.Flatten()
        self.softmax = nn.Softmax(dim=1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(10)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.adaptive_avg_pool3d(x)
        x = self.lazy_instance_norm3d(x)
        x = self.mish(x)
        
        # Reshape to 4D (batch, channels, height, width) for GroupNorm and AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Flatten depth into height
        x = self.group_norm(x)
        x = self.adaptive_max_pool2d(x)
        
        # Flatten for Softmax
        x = self.flatten(x)
        x = self.softmax(x)
        
        # Reshape to 3D (batch, channels, length) for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

