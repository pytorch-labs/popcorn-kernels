
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'ReflectionPad1d', 'LazyLinear', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.lazy_linear3 = nn.LazyLinear(10)
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.reflection_pad1d(x)  # Apply ReflectionPad1d
        x = self.fractional_max_pool2d(x)  # Apply FractionalMaxPool2d
        
        # Flatten the tensor for linear layers
        x = x.view(x.size(0), -1)
        
        x = F.relu(self.lazy_linear1(x))  # Apply LazyLinear and ReLU
        x = F.relu(self.lazy_linear2(x))  # Apply LazyLinear and ReLU
        x = self.lazy_linear3(x)  # Apply LazyLinear
        
        # Apply log_softmax for NLLLoss2d compatibility
        x = F.log_softmax(x, dim=1)
        
        # Reshape back to 4D for NLLLoss2d
        x = x.view(x.size(0), -1, 1, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

