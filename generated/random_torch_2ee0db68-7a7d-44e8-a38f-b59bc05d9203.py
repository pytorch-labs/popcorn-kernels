
# This is a random torch model generated by the following modules: ['LazyConv1d', 'BatchNorm2d', 'SoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.BatchNorm2d(64)
        self.conv3 = nn.LazyConv1d(out_channels=128, kernel_size=3)
        self.bn3 = nn.BatchNorm2d(128)
        self.loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 32, length - 2)
        x = x.unsqueeze(2)  # Shape: (batch_size, 32, 1, length - 2)
        x = self.bn1(x)  # Shape: (batch_size, 32, 1, length - 2)
        x = x.squeeze(2)  # Shape: (batch_size, 32, length - 2)
        
        x = self.conv2(x)  # Shape: (batch_size, 64, length - 4)
        x = x.unsqueeze(2)  # Shape: (batch_size, 64, 1, length - 4)
        x = self.bn2(x)  # Shape: (batch_size, 64, 1, length - 4)
        x = x.squeeze(2)  # Shape: (batch_size, 64, length - 4)
        
        x = self.conv3(x)  # Shape: (batch_size, 128, length - 6)
        x = x.unsqueeze(2)  # Shape: (batch_size, 128, 1, length - 6)
        x = self.bn3(x)  # Shape: (batch_size, 128, 1, length - 6)
        x = x.squeeze(2)  # Shape: (batch_size, 128, length - 6)
        
        # Dummy target for SoftMarginLoss (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1), x.size(2)), device=x.device).float()
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
