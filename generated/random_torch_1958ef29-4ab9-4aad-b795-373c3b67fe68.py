
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'ZeroPad3d', 'Hardtanh', 'Threshold', 'LayerNorm', 'LocalResponseNorm', 'CircularPad1d', 'PixelShuffle', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.layer_norm = nn.LayerNorm([8, 8, 8])
        self.local_response_norm = nn.LocalResponseNorm(size=2)
        self.circular_pad1d = nn.CircularPad1d(1)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_avg_pool3d(x)
        x = self.zero_pad3d(x)
        x = self.hardtanh(x)
        x = self.threshold(x)
        x = self.layer_norm(x)
        x = self.local_response_norm(x)
        
        # Reshape for CircularPad1d (assuming we need to treat one dimension as 1D)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.circular_pad1d(x)
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Reshape back
        
        # Reshape for PixelShuffle (assuming we need to treat the last two dimensions as height and width)
        x = x.view(x.size(0), x.size(1), -1, 8, 8)  # Flatten the depth dimension
        x = self.pixel_shuffle(x)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), x.size(1), 8, 8, 8)
        
        # Assuming we have a target tensor for NLLLoss
        target = torch.randint(0, x.size(1), (x.size(0), 8, 8, 8)).long()
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

