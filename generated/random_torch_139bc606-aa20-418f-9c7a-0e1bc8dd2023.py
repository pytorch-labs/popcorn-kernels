
# This is a random torch model generated by the following modules: ['Hardswish', 'GELU', 'LogSigmoid', 'LazyConvTranspose3d', 'RMSNorm', 'PReLU', 'Module', 'CELU', 'Flatten', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.rms_norm1 = nn.RMSNorm(16)
        self.prelu1 = nn.PReLU()
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2)
        self.rms_norm2 = nn.RMSNorm(32)
        self.celu1 = nn.CELU()
        self.flatten = nn.Flatten()
        self.fc1 = nn.LazyLinear(128)
        self.hardswish = nn.Hardswish()
        self.fc2 = nn.LazyLinear(64)
        self.gelu = nn.GELU()
        self.fc3 = nn.LazyLinear(10)
        self.log_sigmoid = nn.LogSigmoid()
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.rms_norm1(x)
        x = self.prelu1(x)
        x = self.conv_transpose2(x)
        x = self.rms_norm2(x)
        x = self.celu1(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.hardswish(x)
        x = self.fc2(x)
        x = self.gelu(x)
        x = self.fc3(x)
        x = self.log_sigmoid(x)
        x = self.relu(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

