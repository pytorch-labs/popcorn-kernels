
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'ConvTranspose3d', 'MaxUnpool3d', 'Conv2d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv2d = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv_transpose3d = nn.ConvTranspose3d(16, 8, kernel_size=3, stride=2, padding=1)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)
        self.rnn_cell = nn.RNNCell(8, 16)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(16, 10, [4, 6])

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = F.relu(self.conv2d(x))  # Shape: (batch_size, 16, height, width)
        
        # Reshape to 3D for ConvTranspose3d
        x = x.unsqueeze(2)  # Shape: (batch_size, 16, 1, height, width)
        x = self.conv_transpose3d(x)  # Shape: (batch_size, 8, 2, height*2, width*2)
        
        # MaxUnpool3d requires indices from a previous MaxPool3d operation
        # For simplicity, we assume a dummy pooling operation here
        pool_output, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(pool_output, indices)  # Shape: (batch_size, 8, 2, height*2, width*2)
        
        # Flatten the spatial dimensions for RNNCell
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 8, 2*height*2*width*2)
        x = x.permute(2, 0, 1)  # Shape: (2*height*2*width*2, batch_size, 8)
        
        # Apply RNNCell
        hx = torch.zeros(x.size(1), 16).to(x.device)  # Initial hidden state
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)  # Shape: (2*height*2*width*2, batch_size, 16)
        
        # Reshape back to (batch_size, 16, 2*height*2*width*2)
        x = x.permute(1, 2, 0)
        
        # AdaptiveLogSoftmaxWithLoss expects input of shape (batch_size, num_classes)
        x = x.mean(dim=2)  # Shape: (batch_size, 16)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        # Note: AdaptiveLogSoftmaxWithLoss is typically used during training with targets
        # Here, we just return the log probabilities
        log_probs = self.adaptive_log_softmax.log_prob(x)
        return log_probs


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
