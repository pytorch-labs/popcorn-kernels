
# This is a random torch model generated by the following modules: ['Softshrink', 'TransformerDecoderLayer', 'Softplus', 'ReflectionPad3d', 'LSTM', 'LPPool1d', 'TripletMarginLoss', 'AdaptiveLogSoftmaxWithLoss', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.softplus = nn.Softplus()
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[4, 8])
        self.circular_pad3d = nn.CircularPad3d(padding=1)

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Reshape for LSTM
        batch_size, *rest = x.shape
        x = x.view(batch_size, -1, 64)  # Reshape to (batch_size, seq_len, 64)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Apply LPPool1d
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, 128, seq_len)
        x = self.lp_pool1d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply TransformerDecoderLayer
        x = x.permute(1, 0, 2)  # Reshape to (seq_len, batch_size, 128)
        x = self.transformer_decoder_layer(x, x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for AdaptiveLogSoftmaxWithLoss
        x = x.permute(1, 0, 2)  # Reshape to (batch_size, seq_len, 128)
        x = x.mean(dim=1)  # Average over sequence length
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.randint(0, 10, (batch_size,)).to(x.device))
        
        return output

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
