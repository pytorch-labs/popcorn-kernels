
# This is a random torch model generated by the following modules: ['Container', 'ZeroPad2d', 'LazyInstanceNorm1d', 'ParameterDict', 'InstanceNorm1d', 'RMSNorm', 'LayerNorm', 'ELU', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.ZeroPad2d(2),
            nn.LazyInstanceNorm1d(),
            nn.InstanceNorm1d(128),
            nn.RMSNorm(128),
            nn.LayerNorm(128),
            nn.ELU(),
            nn.Softmin(dim=1)
        )
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(128)),
            'param2': nn.Parameter(torch.randn(128))
        })

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = x.view(x.size(0), -1)  # Flatten the input to (batch_size, features)
        x = x.unsqueeze(1)  # Add a dimension to make it (batch_size, 1, features)
        x = self.container(x)
        x = x.squeeze(1)  # Remove the added dimension
        x = x * self.parameter_dict['param1'] + self.parameter_dict['param2']
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
