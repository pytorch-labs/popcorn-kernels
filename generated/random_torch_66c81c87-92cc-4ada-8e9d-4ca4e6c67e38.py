
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'LazyInstanceNorm2d', 'ReflectionPad3d', 'PReLU', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.instance_norm1 = nn.LazyInstanceNorm2d()
        self.reflection_pad1 = nn.ReflectionPad3d(padding=1)
        self.prelu1 = nn.PReLU()
        self.circular_pad1 = nn.CircularPad1d(padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=4, stride=2, padding=1)
        self.instance_norm2 = nn.LazyInstanceNorm2d()
        self.reflection_pad2 = nn.ReflectionPad3d(padding=1)
        self.prelu2 = nn.PReLU()
        self.circular_pad2 = nn.CircularPad1d(padding=1)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.conv_transpose1(x)
        x = self.instance_norm1(x)
        x = self.prelu1(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.reflection_pad1(x)
        x = x.squeeze(2)  # Remove the depth dimension
        
        # Reshape to 3D for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.circular_pad1(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        
        x = self.conv_transpose2(x)
        x = self.instance_norm2(x)
        x = self.prelu2(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.reflection_pad2(x)
        x = x.squeeze(2)  # Remove the depth dimension
        
        # Reshape to 3D for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x = self.circular_pad2(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

