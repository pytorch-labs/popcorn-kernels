
# This is a random torch model generated by the following modules: ['ELU', 'Hardshrink', 'Softshrink', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU(alpha=1.0)
        self.hardshrink1 = nn.Hardshrink(lambd=0.5)
        self.softshrink1 = nn.Softshrink(lambd=0.5)
        self.maxpool1d1 = nn.MaxPool1d(kernel_size=2, stride=2)
        self.elu2 = nn.ELU(alpha=1.0)
        self.hardshrink2 = nn.Hardshrink(lambd=0.5)
        self.softshrink2 = nn.Softshrink(lambd=0.5)
        self.maxpool1d2 = nn.MaxPool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Ensure the input is at least 1D
        if x.dim() == 0:
            x = x.unsqueeze(0)
        
        # Reshape input to be compatible with MaxPool1d
        if x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Shape: (batch_size, channels, length)
        elif x.dim() == 2:
            x = x.unsqueeze(1)  # Shape: (batch_size, channels, length)
        elif x.dim() > 3:
            x = x.view(x.size(0), -1, x.size(-1))  # Flatten all dimensions except the last one
        
        x = self.elu1(x)
        x = self.hardshrink1(x)
        x = self.softshrink1(x)
        x = self.maxpool1d1(x)
        x = self.elu2(x)
        x = self.hardshrink2(x)
        x = self.softshrink2(x)
        x = self.maxpool1d2(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Example input with shape (batch_size, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
