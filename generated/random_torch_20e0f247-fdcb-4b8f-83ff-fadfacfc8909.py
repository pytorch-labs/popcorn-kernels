
# This is a random torch model generated by the following modules: ['LazyLinear', 'AdaptiveAvgPool3d', 'PixelShuffle', 'ReLU6', 'LazyConv2d', 'EmbeddingBag', 'L1Loss', 'AdaptiveMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.relu6 = nn.ReLU6()
        self.lazy_conv2d = nn.LazyConv2d(32, kernel_size=3, stride=1, padding=1)
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming x is of arbitrary shape, we first flatten it
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear layers
        x = self.lazy_linear1(x)
        x = self.relu6(x)
        x = self.lazy_linear2(x)
        x = self.relu6(x)
        
        # Reshape to 3D for pooling
        x = x.view(x.size(0), 1, 8, 8, 8)
        
        # Apply AdaptiveAvgPool3d and AdaptiveMaxPool3d
        x_avg = self.adaptive_avg_pool3d(x)
        x_max = self.adaptive_max_pool3d(x)
        
        # Combine the pooled outputs
        x = torch.cat([x_avg, x_max], dim=1)
        
        # Reshape to 2D for Conv2d
        x = x.view(x.size(0), -1, 8, 8)
        
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        x = self.relu6(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for EmbeddingBag
        x = x.view(x.size(0), -1)
        x = self.embedding_bag(x)
        
        # Compute L1Loss (dummy target for demonstration)
        target = torch.zeros_like(x)
        loss = self.l1_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

