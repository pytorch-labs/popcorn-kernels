
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'LogSigmoid', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)
        self.pad1 = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.pad2 = nn.ReplicationPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.upsample1(x)
        x = self.pad1(x.unsqueeze(2)).squeeze(2)  # Add and remove a dimension to use ReplicationPad3d
        x = self.upsample2(x)
        x = self.pad2(x.unsqueeze(2)).squeeze(2)  # Add and remove a dimension to use ReplicationPad3d
        x = self.log_sigmoid(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
