
# This is a random torch model generated by the following modules: ['Threshold', 'AdaptiveAvgPool2d', 'CrossEntropyLoss', 'Dropout', 'Conv3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.threshold = nn.Threshold(0.1, 0.5)
        self.dropout = nn.Dropout(p=0.5)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.fc1 = nn.Linear(20 * 5 * 5, 50)
        self.fc2 = nn.Linear(50, 10)
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.conv3d_2(x)
        
        # Reduce dimensions to 2D by averaging over the depth dimension
        x = torch.mean(x, dim=2)  # Shape: (batch_size, channels, height, width)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Flatten the tensor for the fully connected layers
        x = x.view(x.size(0), -1)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Fully connected layers
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        
        # Return the output (no loss calculation in forward pass)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

