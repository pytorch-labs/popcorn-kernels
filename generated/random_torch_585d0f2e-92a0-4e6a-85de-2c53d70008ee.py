
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'Dropout1d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(16)
        self.dropout1 = nn.Dropout1d(0.5)
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.bn2 = nn.BatchNorm3d(32)
        self.dropout2 = nn.Dropout1d(0.5)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.bn3 = nn.BatchNorm3d(64)
        self.dropout3 = nn.Dropout1d(0.5)
        self.conv_transpose3 = nn.LazyConvTranspose2d(out_channels=128, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten to 3D for Dropout1d
        x = self.dropout1(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.conv_transpose1(x)
        x = x.unsqueeze(2)  # Add depth dimension for BatchNorm3d
        x = self.bn2(x)
        x = x.squeeze(2)  # Remove depth dimension for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten to 3D for Dropout1d
        x = self.dropout2(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.conv_transpose2(x)
        x = x.unsqueeze(2)  # Add depth dimension for BatchNorm3d
        x = self.bn3(x)
        x = x.squeeze(2)  # Remove depth dimension for Dropout1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten to 3D for Dropout1d
        x = self.dropout3(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.conv_transpose3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 8, 8, 8).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
