
# This is a random torch model generated by the following modules: ['ReflectionPad3d', 'Sequential', 'AlphaDropout', 'ReflectionPad2d', 'LPPool2d', 'FractionalMaxPool2d', 'ModuleDict', 'AdaptiveAvgPool2d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.sequential = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=3),
            nn.ReLU(),
            nn.Conv2d(10, 20, kernel_size=3),
            nn.ReLU()
        )
        self.alpha_dropout = nn.AlphaDropout(0.5)
        self.reflection_pad2d = nn.ReflectionPad2d(1)
        self.lp_pool2d = nn.LPPool2d(2, kernel_size=2, stride=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(10, 10))
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(20, 30, kernel_size=3),
            'conv2': nn.Conv2d(30, 40, kernel_size=3)
        })
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.flatten = nn.Flatten()
        self.fc = nn.Linear(40 * 5 * 5, 10)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.reflection_pad3d(x.unsqueeze(2)).squeeze(2)  # Add and remove 3D padding
        x = self.sequential(x)
        x = self.alpha_dropout(x)
        x = self.reflection_pad2d(x)
        x = self.lp_pool2d(x)
        x = self.fractional_max_pool2d(x)
        x = self.module_dict['conv1'](x)
        x = self.module_dict['conv2'](x)
        x = self.adaptive_avg_pool2d(x)
        x = self.flatten(x)
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
