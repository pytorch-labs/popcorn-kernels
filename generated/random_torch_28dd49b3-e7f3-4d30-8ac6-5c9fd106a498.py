
# This is a random torch model generated by the following modules: ['ReLU', 'LeakyReLU', 'Bilinear', 'LazyConv2d', 'LazyInstanceNorm3d', 'MaxPool1d', 'SyncBatchNorm', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.instance_norm = nn.LazyInstanceNorm3d()
        self.max_pool = nn.MaxPool1d(kernel_size=2)
        self.sync_batch_norm = nn.SyncBatchNorm(16)
        self.circular_pad = nn.CircularPad1d(padding=1)
        self.bilinear = nn.Bilinear(16, 16, 32)
        self.relu = nn.ReLU()
        self.leaky_relu = nn.LeakyReLU()

    def forward(self, x):
        # Apply LazyConv2d
        x = self.conv1(x)
        
        # Reshape for LazyInstanceNorm3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D
        x = self.instance_norm(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.max_pool(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Apply CircularPad1d
        x = self.circular_pad(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), -1)  # Flatten all but batch dimension
        x = self.bilinear(x, x)  # Use the same tensor for both inputs
        
        # Apply ReLU and LeakyReLU
        x = self.relu(x)
        x = self.leaky_relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
