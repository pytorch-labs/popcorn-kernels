
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'PairwiseDistance', 'Upsample', 'Embedding', 'ReplicationPad3d', 'RNNCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.rnn_cell = nn.RNNCell(128, 64)  # RNNCell layer
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')  # Upsample layer
        self.upsampling_nearest_2d = nn.UpsamplingNearest2d(scale_factor=2)  # UpsamplingNearest2d layer
        self.replication_pad_3d = nn.ReplicationPad3d(1)  # ReplicationPad3d layer
        self.pairwise_distance = nn.PairwiseDistance(p=2)  # PairwiseDistance layer

    def forward(self, x):
        # Assume x is a tensor of arbitrary shape
        # First, pass through the embedding layer
        x = self.embedding(x)
        
        # Reshape for RNNCell
        x = x.view(-1, 128)
        hx = torch.zeros(x.size(0), 64).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Reshape for Upsample
        x = x.view(-1, 64, 1, 1)
        x = self.upsample(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(-1, 64, 2, 2)
        x = self.upsampling_nearest_2d(x)
        
        # Reshape for ReplicationPad3d
        x = x.view(-1, 64, 2, 2, 1)
        x = self.replication_pad_3d(x)
        
        # Reshape for PairwiseDistance
        x = x.view(-1, 64, 2, 2)
        x1 = x[:, :, 0, :]
        x2 = x[:, :, 1, :]
        x = self.pairwise_distance(x1, x2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for embedding layer
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

