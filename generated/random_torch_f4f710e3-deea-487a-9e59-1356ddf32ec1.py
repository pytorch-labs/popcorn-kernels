
# This is a random torch model generated by the following modules: ['Conv3d', 'Unflatten', 'MaxPool1d', 'Softmax2d', 'SELU', 'LPPool2d', 'ZeroPad2d', 'ReplicationPad3d', 'Unfold', 'Softsign']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=(3, 3, 3))
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=(3, 3, 3))
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)
        self.softmax2d = nn.Softmax2d()
        self.selu = nn.SELU()
        self.lppool2d = nn.LPPool2d(norm_type=2, kernel_size=2)
        self.zeropad2d = nn.ZeroPad2d(1)
        self.replicationpad3d = nn.ReplicationPad3d(1)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.softsign = nn.Softsign()
        self.unflatten = nn.Unflatten(1, (10, 2))

    def forward(self, x):
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.conv3d_2(x)
        
        # Apply ReplicationPad3d
        x = self.replicationpad3d(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.maxpool1d(x)
        
        # Reshape back for 3D operations
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        
        # Apply SELU activation
        x = self.selu(x)
        
        # Reshape for LPPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.lppool2d(x)
        
        # Apply ZeroPad2d
        x = self.zeropad2d(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Apply Softsign activation
        x = self.softsign(x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), x.size(1), x.size(2), 1)
        x = self.softmax2d(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
