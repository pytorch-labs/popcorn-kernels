
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'InstanceNorm2d', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.instance_norm1 = nn.InstanceNorm2d(num_features=32)
        self.relu6_1 = nn.ReLU6()
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.instance_norm2 = nn.InstanceNorm2d(num_features=64)
        self.relu6_2 = nn.ReLU6()
        self.conv_transpose3 = nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=2)
        self.instance_norm3 = nn.InstanceNorm2d(num_features=128)
        self.relu6_3 = nn.ReLU6()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        # Reshape to fit InstanceNorm2d
        x = x.unsqueeze(2)  # Add height dimension
        x = self.instance_norm1(x)
        x = self.relu6_1(x)
        x = x.squeeze(2)  # Remove height dimension
        
        x = self.conv_transpose2(x)
        x = x.unsqueeze(2)
        x = self.instance_norm2(x)
        x = self.relu6_2(x)
        x = x.squeeze(2)
        
        x = self.conv_transpose3(x)
        x = x.unsqueeze(2)
        x = self.instance_norm3(x)
        x = self.relu6_3(x)
        x = x.squeeze(2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 128).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

