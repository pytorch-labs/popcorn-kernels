
# This is a random torch model generated by the following modules: ['AvgPool3d', 'PixelUnshuffle', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.pixel_unshuffle1 = nn.PixelUnshuffle(downscale_factor=2)
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.avgpool2 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.pixel_unshuffle2 = nn.PixelUnshuffle(downscale_factor=2)
        self.threshold2 = nn.Threshold(threshold=0.5, value=0.0)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avgpool1(x)
        x = x.permute(0, 2, 1, 3, 4)  # Swap channels and depth for PixelUnshuffle
        x = x.reshape(x.size(0), -1, x.size(3), x.size(4))  # Flatten depth and channels
        x = self.pixel_unshuffle1(x)
        x = x.reshape(x.size(0), -1, x.size(2), x.size(3))  # Reshape back to 4D
        x = x.permute(0, 2, 1, 3, 4)  # Swap back to original dimensions
        x = self.threshold1(x)
        
        x = self.avgpool2(x)
        x = x.permute(0, 2, 1, 3, 4)  # Swap channels and depth for PixelUnshuffle
        x = x.reshape(x.size(0), -1, x.size(3), x.size(4))  # Flatten depth and channels
        x = self.pixel_unshuffle2(x)
        x = x.reshape(x.size(0), -1, x.size(2), x.size(3))  # Reshape back to 4D
        x = x.permute(0, 2, 1, 3, 4)  # Swap back to original dimensions
        x = self.threshold2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

