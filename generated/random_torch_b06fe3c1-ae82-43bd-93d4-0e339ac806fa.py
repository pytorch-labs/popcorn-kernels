
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'RMSNorm', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.rms_norm1 = RMSNorm(8 * 8 * 8)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.rms_norm2 = RMSNorm(16 * 16)
        self.adaptive_max_pool3d_2 = nn.AdaptiveMaxPool3d((4, 4, 4))
        self.rms_norm3 = RMSNorm(4 * 4 * 4)
        self.upsampling_nearest2d_2 = nn.UpsamplingNearest2d(scale_factor=4)
        self.rms_norm4 = RMSNorm(16 * 16)
        self.adaptive_max_pool3d_3 = nn.AdaptiveMaxPool3d((2, 2, 2))
        self.rms_norm5 = RMSNorm(2 * 2 * 2)

    def forward(self, x):
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        # Flatten the output for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm1(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(x.size(0), 8, 8, 8)
        x = x.permute(0, 3, 1, 2)  # Change to (batch, channels, height, width)
        x = self.upsampling_nearest2d(x)
        
        # Flatten the output for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm2(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(x.size(0), 16, 16, 1)
        x = x.permute(0, 3, 1, 2)  # Change to (batch, channels, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.adaptive_max_pool3d_2(x)
        
        # Flatten the output for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm3(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(x.size(0), 4, 4, 4)
        x = x.permute(0, 3, 1, 2)  # Change to (batch, channels, height, width)
        x = self.upsampling_nearest2d_2(x)
        
        # Flatten the output for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm4(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(x.size(0), 16, 16, 1)
        x = x.permute(0, 3, 1, 2)  # Change to (batch, channels, height, width)
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.adaptive_max_pool3d_3(x)
        
        # Flatten the output for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm5(x)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim: int, eps: float = 1e-8):
        super().__init__()
        self.scale = dim ** -0.5
        self.eps = eps
        self.g = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, p=2, dim=-1, keepdim=True) * self.scale
        return x / norm.clamp(min=self.eps) * self.g


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
