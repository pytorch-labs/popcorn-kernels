
# This is a random torch model generated by the following modules: ['Embedding', 'FractionalMaxPool3d', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer with 1000 tokens and 128-dimensional embeddings
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))  # FractionalMaxPool3d layer
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(64)  # AdaptiveAvgPool1d layer with output size 64

    def forward(self, x):
        # Assume input x is a tensor of arbitrary shape
        # First, we need to convert the input to a suitable shape for the embedding layer
        # Assuming x is a batch of token indices (e.g., for NLP tasks)
        x = self.embedding(x)  # Shape: (batch_size, seq_len, embedding_dim)
        
        # Reshape to add a dummy dimension for 3D pooling
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, seq_len, embedding_dim)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, 1, 10, 10, 10)
        
        # Reshape to remove the dummy dimension and prepare for AdaptiveAvgPool1d
        x = x.squeeze(1)  # Shape: (batch_size, 10, 10, 10)
        
        # Reshape to combine the last two dimensions for 1D pooling
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 10, 100)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)  # Shape: (batch_size, 10, 64)
        
        # Flatten the output for final processing
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 640)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # Example input: batch of 32 sequences, each with 50 tokens
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

