
# This is a random torch model generated by the following modules: ['LazyInstanceNorm3d', 'LazyConv2d', 'PReLU', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm3d()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.prelu1 = nn.PReLU()
        self.pad1 = nn.ReplicationPad1d(1)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.prelu2 = nn.PReLU()
        self.norm2 = nn.LazyInstanceNorm3d()
        self.pad2 = nn.ReplicationPad1d(1)
        self.conv3 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.prelu3 = nn.PReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.norm1(x)
        
        # Reshape to 2D for Conv2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        
        x = self.conv1(x)
        x = self.prelu1(x)
        
        # Reshape back to 3D for ReplicationPad1d
        x = x.view(batch_size, depth, x.shape[1], x.shape[2], x.shape[3])
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, channels, depth, height, width)
        x = self.pad1(x)
        
        # Reshape back to 2D for Conv2d
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, depth, channels, height, width)
        x = x.view(batch_size * depth, x.shape[2], x.shape[3], x.shape[4])
        
        x = self.conv2(x)
        x = self.prelu2(x)
        
        # Reshape back to 3D for InstanceNorm3d
        x = x.view(batch_size, depth, x.shape[1], x.shape[2], x.shape[3])
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, channels, depth, height, width)
        x = self.norm2(x)
        
        # Reshape back to 2D for Conv2d
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, depth, channels, height, width)
        x = x.view(batch_size * depth, x.shape[2], x.shape[3], x.shape[4])
        
        x = self.conv3(x)
        x = self.prelu3(x)
        
        # Reshape back to 3D for final output
        x = x.view(batch_size, depth, x.shape[1], x.shape[2], x.shape[3])
        x = x.permute(0, 2, 1, 3, 4)  # (batch_size, channels, depth, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

