
# This is a random torch model generated by the following modules: ['AlphaDropout', 'GRU', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=(2, 2, 2))

    def forward(self, x):
        # Apply the first AlphaDropout
        x = self.alpha_dropout1(x)
        
        # Reshape the input to fit the GRU layer
        batch_size, *rest = x.shape
        x = x.view(batch_size, -1, 64)  # Assuming the last dimension is 64
        
        # Pass through the GRU layer
        x, _ = self.gru(x)
        
        # Apply the second AlphaDropout
        x = self.alpha_dropout2(x)
        
        # Reshape the output to fit the AvgPool3d layer
        x = x.view(batch_size, 1, 128, -1, 1)  # Reshape to 5D tensor for AvgPool3d
        
        # Apply the AvgPool3d layer
        x = self.avg_pool3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

