
# This is a random torch model generated by the following modules: ['KLDivLoss', 'CosineSimilarity', 'Sigmoid', 'Conv1d', 'Hardsigmoid', 'LazyBatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.bn1 = nn.LazyBatchNorm2d()
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.bn2 = nn.LazyBatchNorm2d()
        self.sigmoid = nn.Sigmoid()
        self.hardsigmoid = nn.Hardsigmoid()
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 10, length - 4)
        x = x.unsqueeze(2)  # Shape: (batch_size, 10, 1, length - 4)
        x = self.bn1(x)  # Shape: (batch_size, 10, 1, length - 4)
        x = x.squeeze(2)  # Shape: (batch_size, 10, length - 4)
        
        x = self.conv2(x)  # Shape: (batch_size, 20, length - 8)
        x = x.unsqueeze(2)  # Shape: (batch_size, 20, 1, length - 8)
        x = self.bn2(x)  # Shape: (batch_size, 20, 1, length - 8)
        x = x.squeeze(2)  # Shape: (batch_size, 20, length - 8)
        
        x = self.sigmoid(x)  # Shape: (batch_size, 20, length - 8)
        x = self.hardsigmoid(x)  # Shape: (batch_size, 20, length - 8)
        
        # Split the tensor into two parts for cosine similarity
        x1, x2 = x.chunk(2, dim=1)  # Shape: (batch_size, 10, length - 8) each
        x = self.cosine_sim(x1, x2)  # Shape: (batch_size, length - 8)
        
        # Compute KLDivLoss between x and a target tensor (randomly generated)
        target = torch.rand_like(x).softmax(dim=1)
        x = self.kldivloss(F.log_softmax(x, dim=1), target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

