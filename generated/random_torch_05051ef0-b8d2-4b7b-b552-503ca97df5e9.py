
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'AvgPool1d', 'RReLU', 'PoissonNLLLoss', 'BatchNorm3d', 'Flatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn1 = nn.SyncBatchNorm(10)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.rrelu = nn.RReLU()
        self.batch_norm3d = nn.BatchNorm3d(20)
        self.flatten = nn.Flatten()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, *dims)
        # Reshape input to fit SyncBatchNorm
        x = x.view(x.size(0), 10, -1)  # Reshape to (batch_size, 10, *)
        x = self.sync_bn1(x)
        
        # Reshape for AvgPool1d
        x = x.view(x.size(0), 10, -1)  # Reshape to (batch_size, 10, *)
        x = self.avg_pool1d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape for BatchNorm3d
        x = x.view(x.size(0), 20, 5, 5, -1)  # Reshape to (batch_size, 20, 5, 5, *)
        x = self.batch_norm3d(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # Dummy target for PoissonNLLLoss (assuming target is the same shape as input)
        target = torch.randn_like(x)
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

