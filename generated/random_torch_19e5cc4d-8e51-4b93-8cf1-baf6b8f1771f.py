
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'ChannelShuffle', 'ConvTranspose1d', 'KLDivLoss', 'Dropout2d', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.channel_shuffle = nn.ChannelShuffle(2)
        self.conv_transpose1d = nn.ConvTranspose1d(16, 32, kernel_size=3, stride=2)
        self.dropout2d = nn.Dropout2d(0.5)
        self.softmax2d = nn.Softmax2d()
        self.kldivloss = nn.KLDivLoss(reduction='batchmean')

    def forward(self, x):
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        
        # Apply ConvTranspose1d
        x = self.conv_transpose1d(x)
        
        # Reshape back to 4D for Dropout2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Compute KLDivLoss (assuming a target tensor is provided)
        target = torch.ones_like(x) / x.size(1)  # Uniform distribution as target
        loss = self.kldivloss(x.log(), target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

