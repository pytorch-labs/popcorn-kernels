
# This is a random torch model generated by the following modules: ['Unfold', 'LazyLinear', 'ConvTranspose1d', 'ZeroPad3d', 'LazyConvTranspose2d', 'ConstantPad3d', 'AdaptiveAvgPool1d', 'CrossEntropyLoss', 'Identity', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.conv_transpose1d = nn.ConvTranspose1d(64, 32, kernel_size=3, stride=2)
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(32, kernel_size=3, stride=2)
        self.constant_pad3d = nn.ConstantPad3d(1, 0.5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.identity = nn.Identity()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.adaptive_log_softmax_with_loss = nn.AdaptiveLogSoftmaxWithLoss(64, 10, [32, 64])

    def forward(self, x):
        # Unfold
        x = self.unfold(x)
        
        # LazyLinear
        x = x.view(x.size(0), -1)  # Flatten
        x = self.lazy_linear1(x)
        x = F.relu(x)
        x = self.lazy_linear2(x)
        x = F.relu(x)
        
        # ConvTranspose1d
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.conv_transpose1d(x)
        x = F.relu(x)
        
        # ZeroPad3d
        x = x.unsqueeze(1)  # Add height dimension
        x = x.unsqueeze(1)  # Add width dimension
        x = self.zero_pad3d(x)
        
        # LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        x = F.relu(x)
        
        # ConstantPad3d
        x = self.constant_pad3d(x)
        
        # AdaptiveAvgPool1d
        x = x.view(x.size(0), -1)  # Flatten
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.adaptive_avg_pool1d(x)
        
        # Identity
        x = self.identity(x)
        
        # AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten
        x = self.adaptive_log_softmax_with_loss(x, torch.zeros(x.size(0), dtype=torch.long))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
