
# This is a random torch model generated by the following modules: ['ConvTranspose2d', 'ELU', 'ConstantPad3d', 'Flatten', 'LeakyReLU', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5, stride=2)
        self.elu1 = nn.ELU()
        self.constant_pad3d1 = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.flatten = nn.Flatten()
        self.leaky_relu1 = nn.LeakyReLU(negative_slope=0.1)
        self.nll_loss2d = nn.NLLLoss2d()
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5, stride=2)
        self.elu2 = nn.ELU()
        self.constant_pad3d2 = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.leaky_relu2 = nn.LeakyReLU(negative_slope=0.1)

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.elu1(x)
        x = self.constant_pad3d1(x)
        x = self.conv_transpose2(x)
        x = self.elu2(x)
        x = self.constant_pad3d2(x)
        x = self.leaky_relu1(x)
        x = self.flatten(x)
        x = self.leaky_relu2(x)
        # Assuming the target is provided externally for NLLLoss2d
        target = torch.randint(0, 20, (x.size(0), 1, x.size(2), x.size(3)))
        loss = self.nll_loss2d(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

