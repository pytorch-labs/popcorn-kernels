
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'Embedding', 'NLLLoss2d', 'LayerNorm', 'Hardswish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)  # Upsampling layer
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)  # Upsampling layer
        self.layer_norm = nn.LayerNorm(128)  # Layer normalization
        self.hardswish = nn.Hardswish()  # Hardswish activation
        self.nll_loss = nn.NLLLoss2d()  # NLLLoss2d layer (typically used for loss, but included in forward pass for demonstration)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Shape: (batch_size, sequence_length, embedding_dim)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, sequence_length, embedding_dim)
        x = self.upsample1(x)  # Shape: (batch_size, 1, sequence_length*2, embedding_dim*2)
        x = self.upsample2(x)  # Shape: (batch_size, 1, sequence_length*4, embedding_dim*4)
        x = x.squeeze(1)  # Shape: (batch_size, sequence_length*4, embedding_dim*4)
        x = self.layer_norm(x)  # Shape: (batch_size, sequence_length*4, embedding_dim*4)
        x = self.hardswish(x)  # Shape: (batch_size, sequence_length*4, embedding_dim*4)
        
        # For demonstration, we create a dummy target for NLLLoss2d
        target = torch.randint(0, 10, (x.size(0), x.size(1), x.size(2)))  # Dummy target
        loss = self.nll_loss(x, target)  # Shape: scalar (loss value)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10, 20)).cuda()  # Example input: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
