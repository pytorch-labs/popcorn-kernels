
# This is a random torch model generated by the following modules: ['Dropout', 'ReflectionPad3d', 'Softmin', 'LPPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.reflection_pad3d1 = nn.ReflectionPad3d(padding=1)
        self.lp_pool1d1 = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.softmin1 = nn.Softmin(dim=1)
        self.dropout2 = nn.Dropout(p=0.5)
        self.reflection_pad3d2 = nn.ReflectionPad3d(padding=1)
        self.lp_pool1d2 = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.softmin2 = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply Dropout
        x = self.dropout1(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d1(x)
        
        # Reshape back to 3D for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LPPool1d
        x = self.lp_pool1d1(x)
        
        # Apply Softmin
        x = self.softmin1(x)
        
        # Apply Dropout again
        x = self.dropout2(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d2(x)
        
        # Reshape back to 3D for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LPPool1d
        x = self.lp_pool1d2(x)
        
        # Apply Softmin
        x = self.softmin2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
