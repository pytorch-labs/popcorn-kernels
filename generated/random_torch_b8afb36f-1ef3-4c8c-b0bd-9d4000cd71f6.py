
# This is a random torch model generated by the following modules: ['Container', 'LazyConv1d', 'Linear', 'AdaptiveAvgPool2d', 'RNNCell', 'Identity', 'MaxUnpool3d', 'ConstantPad1d', 'GroupNorm', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.LazyConv1d(out_channels=32, kernel_size=3),
            nn.ConstantPad1d(padding=2, value=0),
            nn.GroupNorm(num_groups=8, num_channels=32),
            nn.LazyConv1d(out_channels=64, kernel_size=3),
            nn.AdaptiveAvgPool2d(output_size=(16, 16)),
            nn.ConvTranspose2d(in_channels=64, out_channels=32, kernel_size=3, stride=2),
            nn.MaxUnpool3d(kernel_size=2, stride=2),
            nn.Linear(in_features=32 * 16 * 16, out_features=128),
            nn.RNNCell(input_size=128, hidden_size=64),
            nn.Identity()
        )

    def forward(self, x):
        # Reshape input to fit 1D convolution
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        x = self.container(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
