
# This is a random torch model generated by the following modules: ['GRU', 'LazyConv2d', 'Hardtanh', 'Dropout3d', 'LPPool1d', 'Embedding', 'UpsamplingNearest2d', 'FractionalMaxPool2d', 'ConvTranspose3d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming vocab size of 1000
        self.gru = nn.GRU(128, 256, batch_first=True)
        self.lazy_conv2d = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.hardtanh = nn.Hardtanh()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.conv_transpose3d = nn.ConvTranspose3d(64, 32, kernel_size=3, stride=2)
        self.rnn_cell_base = nn.RNNCellBase(256, 128)  # Assuming input_size=256, hidden_size=128

    def forward(self, x):
        # Assuming x is a tensor of shape (batch_size, sequence_length) for embedding
        x = self.embedding(x)
        
        # Reshape for GRU
        x, _ = self.gru(x)
        
        # Reshape for LazyConv2d
        x = x.unsqueeze(1)  # Add channel dimension
        x = self.lazy_conv2d(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Apply Dropout3d
        x = x.unsqueeze(0)  # Add batch dimension for 3D dropout
        x = self.dropout3d(x)
        x = x.squeeze(0)  # Remove batch dimension
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lp_pool1d(x)
        
        # Reshape for UpsamplingNearest2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        x = self.upsampling_nearest2d(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Reshape for ConvTranspose3d
        x = x.unsqueeze(0)  # Add batch dimension
        x = self.conv_transpose3d(x)
        x = x.squeeze(0)  # Remove batch dimension
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.rnn_cell_base(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

