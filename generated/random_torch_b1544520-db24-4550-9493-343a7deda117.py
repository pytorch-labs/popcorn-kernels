
# This is a random torch model generated by the following modules: ['Hardshrink', 'ParameterDict', 'LPPool2d', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink = nn.Hardshrink()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Reshape to apply ParameterDict parameters
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = x * self.parameter_dict['param1']  # Multiply by parameter
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

