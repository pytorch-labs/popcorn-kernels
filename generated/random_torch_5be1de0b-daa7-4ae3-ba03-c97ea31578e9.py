
# This is a random torch model generated by the following modules: ['L1Loss', 'GRUCell', 'MaxUnpool2d', 'Hardswish', 'ConvTranspose3d', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=64, hidden_size=128)
        self.gru_cell2 = nn.GRUCell(input_size=128, hidden_size=256)
        self.conv_transpose3d = nn.ConvTranspose3d(in_channels=256, out_channels=128, kernel_size=3, stride=2, padding=1)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.hardswish = nn.Hardswish()
        self.sigmoid = nn.Sigmoid()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 128).to(x.device)
        h2 = torch.zeros(batch_size, 256).to(x.device)
        
        # Process sequence through GRUCells
        for t in range(seq_len):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape for ConvTranspose3d
        x = h2.view(batch_size, 256, 1, 1, 1)
        x = self.conv_transpose3d(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(batch_size, 128, 2, 2)
        x, indices = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool2d(x, indices)
        
        # Apply Hardswish and Sigmoid
        x = self.hardswish(x)
        x = self.sigmoid(x)
        
        # Compute L1Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

