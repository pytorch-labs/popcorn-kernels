
# This is a random torch model generated by the following modules: ['Container', 'LogSoftmax', 'AvgPool3d', 'MultiLabelMarginLoss', 'Hardswish', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(16),
            nn.Hardswish(),
            nn.AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2)),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm2d(32),
            nn.Hardswish(),
            nn.AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2)),
        )
        self.fc = nn.Linear(32 * 8 * 8, 10)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Add a dummy temporal dimension for AvgPool3d
        x = x.unsqueeze(2)  # Shape: (batch, channels, 1, height, width)
        x = self.container(x)
        x = x.squeeze(2)  # Remove the temporal dimension
        x = x.view(x.size(0), -1)  # Flatten
        x = self.fc(x)
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(*inputs)
# print(output.shape)
