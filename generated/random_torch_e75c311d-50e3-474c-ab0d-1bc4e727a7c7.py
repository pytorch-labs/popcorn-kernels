
# This is a random torch model generated by the following modules: ['TripletMarginWithDistanceLoss', 'LazyConvTranspose3d', 'BatchNorm2d', 'ConvTranspose1d', 'Softshrink', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.batch_norm2d = nn.BatchNorm2d(num_features=16)
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=16, out_channels=32, kernel_size=3, stride=2)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.tanhshrink = nn.Tanhshrink()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_conv_transpose3d(x)  # Shape: (batch_size, 16, depth_out, height_out, width_out)
        
        # Reshape to 2D for BatchNorm2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Shape: (batch_size, 16, depth_out * height_out, width_out)
        x = self.batch_norm2d(x)  # Shape: (batch_size, 16, depth_out * height_out, width_out)
        
        # Reshape back to 1D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 16, depth_out * height_out * width_out)
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 32, depth_out * height_out * width_out * 2)
        
        # Apply Softshrink and Tanhshrink
        x = self.softshrink(x)  # Shape: (batch_size, 32, depth_out * height_out * width_out * 2)
        x = self.tanhshrink(x)  # Shape: (batch_size, 32, depth_out * height_out * width_out * 2)
        
        # For TripletMarginWithDistanceLoss, we need three inputs: anchor, positive, negative
        # Here, we just use x as anchor, positive, and negative for demonstration
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
