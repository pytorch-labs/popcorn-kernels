
# This is a random torch model generated by the following modules: ['LogSoftmax', 'LazyBatchNorm1d', 'Mish']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.mish1 = nn.Mish()
        self.bn2 = nn.LazyBatchNorm1d()
        self.mish2 = nn.Mish()
        self.bn3 = nn.LazyBatchNorm1d()
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Flatten the input to make it compatible with BatchNorm1d
        x = x.view(x.size(0), -1)
        
        x = self.bn1(x)
        x = self.mish1(x)
        x = self.bn2(x)
        x = self.mish2(x)
        x = self.bn3(x)
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

