
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'LazyConv1d', 'UpsamplingNearest2d', 'ReLU6', 'AlphaDropout', 'Softshrink', 'GroupNorm', 'MultiLabelSoftMarginLoss', 'MaxPool2d', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv1d_1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.lazy_batchnorm1d_1 = nn.LazyBatchNorm1d()
        self.relu6_1 = nn.ReLU6()
        self.alpha_dropout_1 = nn.AlphaDropout(p=0.5)
        self.softshrink_1 = nn.Softshrink(lambd=0.5)
        self.groupnorm_1 = nn.GroupNorm(num_groups=8, num_channels=32)
        self.maxpool2d_1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.upsampling_nearest2d_1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.lazy_batchnorm1d_2 = nn.LazyBatchNorm1d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.multilabel_softmargin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # Reshape to 1D for LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels * height, width)
        
        x = self.lazy_conv1d_1(x)
        x = self.lazy_batchnorm1d_1(x)
        x = self.relu6_1(x)
        x = self.alpha_dropout_1(x)
        x = self.softshrink_1(x)
        x = self.groupnorm_1(x)
        
        # Reshape back to 2D for MaxPool2d
        x = x.view(x.size(0), 32, -1, x.size(-1))  # Reshape to (batch_size, 32, height, width)
        
        x = self.maxpool2d_1(x)
        x = self.upsampling_nearest2d_1(x)
        
        # Reshape back to 1D for LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels * height, width)
        
        x = self.lazy_conv1d_2(x)
        x = self.lazy_batchnorm1d_2(x)
        
        # Compute loss (for demonstration purposes, we use dummy targets)
        target_poisson = torch.randn_like(x)
        loss_poisson = self.poisson_nll_loss(x, target_poisson)
        
        target_multilabel = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        loss_multilabel = self.multilabel_softmargin_loss(x, target_multilabel)
        
        # Return the sum of losses (for demonstration purposes)
        return loss_poisson + loss_multilabel


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
