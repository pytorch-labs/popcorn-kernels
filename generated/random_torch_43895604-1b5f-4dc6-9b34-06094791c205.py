
# This is a random torch model generated by the following modules: ['Unfold', 'MaxPool1d', 'RReLU', 'PairwiseDistance', 'ELU', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)
        self.rrelu = nn.RReLU()
        self.pairwise_distance = nn.PairwiseDistance()
        self.elu = nn.ELU()
        self.rnn_cell = nn.RNNCellBase(input_size=10, hidden_size=20)

    def forward(self, x):
        # Unfold the input tensor
        x = self.unfold(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply MaxPool1d
        x = self.maxpool1d(x)
        
        # Reshape for RReLU
        x = x.view(x.size(0), -1)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1, 10)
        x1 = x[:, 0, :]
        x2 = x[:, 1, :]
        
        # Apply PairwiseDistance
        x = self.pairwise_distance(x1, x2)
        
        # Reshape for ELU
        x = x.view(x.size(0), -1)
        
        # Apply ELU
        x = self.elu(x)
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1, 10)
        hx = torch.zeros(x.size(0), 20).to(x.device)
        
        # Apply RNNCellBase
        for i in range(x.size(1)):
            hx = self.rnn_cell(x[:, i, :], hx)
        
        return hx


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
