
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'ReplicationPad2d', 'MaxPool2d', 'Softmin', 'AdaptiveMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((5, 5))
        self.softmin = nn.Softmin(dim=1)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply MaxPool2d
        x = self.max_pool(x)
        
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool(x)
        
        # Reshape for Softmin
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = x.unsqueeze(1)  # Add a dimension for Softmin
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape back to a 2D tensor for BCEWithLogitsLoss
        x = x.squeeze(1)
        
        # Generate a dummy target for BCEWithLogitsLoss
        target = torch.zeros_like(x)
        
        # Apply BCEWithLogitsLoss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

