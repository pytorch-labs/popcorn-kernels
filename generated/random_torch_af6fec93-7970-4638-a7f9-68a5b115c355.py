
# This is a random torch model generated by the following modules: ['LazyInstanceNorm3d', 'LazyConv1d', 'BatchNorm2d', 'Mish', 'MaxUnpool1d', 'LazyConvTranspose3d', 'AdaptiveAvgPool3d', 'ConstantPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=32)
        self.mish = nn.Mish()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d(output_size=(8, 8, 8))
        self.constant_pad2d = nn.ConstantPad2d(padding=1, value=0)
        
    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.lazy_instance_norm3d(x)
        
        # Reshape to 3D for Conv1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lazy_conv1d(x)
        
        # Reshape back to 4D for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.batch_norm2d(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Reshape to 3D for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        # Reshape to 5D for ConvTranspose3d
        x = x.view(x.size(0), x.size(1), 8, 8, 8)
        x = self.lazy_conv_transpose3d(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to 4D for ConstantPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.constant_pad2d(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
