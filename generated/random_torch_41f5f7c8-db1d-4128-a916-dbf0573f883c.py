
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'Softmin', 'GLU', 'InstanceNorm3d', 'ReplicationPad2d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.instance_norm1 = nn.InstanceNorm3d(10)
        self.glu1 = nn.GLU(dim=1)
        self.replication_pad1 = nn.ReplicationPad2d(2)
        self.silu1 = nn.SiLU()
        self.conv_transpose2 = nn.ConvTranspose3d(5, 20, kernel_size=3, stride=2, padding=1)
        self.instance_norm2 = nn.InstanceNorm3d(20)
        self.glu2 = nn.GLU(dim=1)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv_transpose1(x)
        x = self.instance_norm1(x)
        x = self.glu1(x)
        
        # Reshape to 2D for ReplicationPad2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        x = self.replication_pad1(x)
        x = x.view(batch_size, channels, depth, height + 4, width + 4)
        
        x = self.silu1(x)
        x = self.conv_transpose2(x)
        x = self.instance_norm2(x)
        x = self.glu2(x)
        x = self.softmin(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
