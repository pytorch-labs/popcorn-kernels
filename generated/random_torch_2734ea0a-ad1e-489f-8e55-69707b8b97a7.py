
# This is a random torch model generated by the following modules: ['Dropout2d', 'LazyBatchNorm2d', 'LogSigmoid', 'MaxUnpool2d', 'Tanh', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.lazy_batchnorm2d = nn.LazyBatchNorm2d()
        self.log_sigmoid = nn.LogSigmoid()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.tanh = nn.Tanh()
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        
        # Additional layers to accommodate the input and output shapes
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, return_indices=True)
        self.fc1 = nn.Linear(32 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        # Initial convolution and pooling
        x = self.conv1(x)
        x, indices = self.pool(x)
        
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batchnorm2d(x)
        
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Apply MaxUnpool2d
        x = self.max_unpool2d(x, indices)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Apply another convolution
        x = self.conv2(x)
        
        # Flatten the tensor for the fully connected layer
        x = x.view(x.size(0), -1)
        
        # Apply the first fully connected layer
        x = self.fc1(x)
        
        # Apply LogSigmoid activation
        x = self.log_sigmoid(x)
        
        # Apply the second fully connected layer
        x = self.fc2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
