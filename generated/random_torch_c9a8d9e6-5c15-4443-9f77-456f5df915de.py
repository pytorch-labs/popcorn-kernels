
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'ConvTranspose3d', 'MultiMarginLoss', 'RMSNorm', 'RNNCellBase', 'Threshold', 'SELU', 'HingeEmbeddingLoss', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=5)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=5)
        self.rnn_cell = nn.RNNCellBase(input_size=20, hidden_size=50)
        self.rms_norm = nn.RMSNorm(50)
        self.threshold = nn.Threshold(0.5, 1.0)
        self.selu = nn.SELU()
        self.softmax = nn.Softmax(dim=1)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply ConvTranspose3d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape for RNNCellBase
        x = x.view(x.size(0), -1)  # Flatten the spatial dimensions
        x = self.rnn_cell(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply SELU
        x = self.selu(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Compute losses (dummy targets for demonstration)
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        gaussian_loss = self.gaussian_nll_loss(x, target, torch.ones_like(x))
        margin_loss = self.multi_margin_loss(x, target)
        hinge_loss = self.hinge_embedding_loss(x, target)
        
        # Return the losses (for demonstration purposes)
        return gaussian_loss, margin_loss, hinge_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input for ConvTranspose3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

