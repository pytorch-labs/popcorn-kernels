
# This is a random torch model generated by the following modules: ['Hardtanh', 'LazyConv1d', 'InstanceNorm1d', 'Softshrink', 'TransformerDecoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.instance_norm = nn.InstanceNorm1d(num_features=32)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=32, nhead=4)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.fc = nn.LazyLinear(out_features=10)

    def forward(self, x):
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Reshape input to 1D if necessary
        if x.dim() > 3:
            x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d
        x = self.conv1(x)
        
        # Apply InstanceNorm1d
        x = self.instance_norm(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for TransformerDecoderLayer
        x = x.permute(2, 0, 1)  # (seq_len, batch, features)
        
        # Apply TransformerDecoderLayer
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape back to original format
        x = x.permute(1, 2, 0)
        
        # Apply second LazyConv1d
        x = self.conv2(x)
        
        # Global average pooling
        x = x.mean(dim=2)
        
        # Apply fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

