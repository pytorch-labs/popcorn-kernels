
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'FractionalMaxPool3d', 'ZeroPad2d', 'InstanceNorm3d', 'LogSoftmax', 'Unflatten', 'UpsamplingBilinear2d', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.zero_pad2d = nn.ZeroPad2d(padding=2)
        self.instance_norm3d = nn.InstanceNorm3d(num_features=16)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(16, 8, 8))
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.channel_shuffle(x)
        
        # Reshape to 5D for FractionalMaxPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.fractional_max_pool3d(x)
        
        # Reshape back to 4D for ZeroPad2d
        x = x.squeeze(2)
        x = self.zero_pad2d(x)
        
        # Reshape to 5D for InstanceNorm3d
        x = x.unsqueeze(2)
        x = self.instance_norm3d(x)
        
        # Reshape back to 4D for Unflatten
        x = x.squeeze(2)
        x = self.unflatten(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsampling_bilinear2d(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # Apply BCEWithLogitsLoss (assuming target is provided externally)
        # For demonstration, we'll just return the logits
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

