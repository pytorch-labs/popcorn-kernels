
# This is a random torch model generated by the following modules: ['CircularPad3d', 'GroupNorm', 'Hardswish', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.CircularPad3d(1)
        self.gn1 = nn.GroupNorm(2, 10)
        self.hardswish = nn.Hardswish()
        self.gelu = nn.GELU()
        self.pad2 = nn.CircularPad3d(2)
        self.gn2 = nn.GroupNorm(4, 20)
        self.pad3 = nn.CircularPad3d(1)
        self.gn3 = nn.GroupNorm(2, 10)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.pad1(x)
        x = self.gn1(x)
        x = self.hardswish(x)
        x = self.gelu(x)
        x = self.pad2(x)
        x = self.gn2(x)
        x = self.hardswish(x)
        x = self.pad3(x)
        x = self.gn3(x)
        x = self.gelu(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

