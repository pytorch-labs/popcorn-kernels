
# This is a random torch model generated by the following modules: ['BCELoss', 'NLLLoss', 'ConvTranspose1d', 'LazyBatchNorm3d', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv_transpose1d = nn.ConvTranspose1d(16, 8, kernel_size=3, stride=1, padding=1)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.conv2 = nn.Conv2d(8, 1, kernel_size=3, stride=1, padding=1)
        self.bce_loss = nn.BCELoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = F.relu(self.conv1(x))  # Apply Conv2d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for ConvTranspose1d
        x = F.relu(self.conv_transpose1d(x))  # Apply ConvTranspose1d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Reshape for LazyBatchNorm3d
        x = self.lazy_batch_norm3d(x)  # Apply LazyBatchNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2))  # Reshape back for Conv2d
        x = x.unsqueeze(-1).unsqueeze(-1)  # Add dimensions for Conv2d
        x = torch.sigmoid(self.conv2(x))  # Apply Conv2d and sigmoid for BCELoss
        target = torch.randint(0, 2, x.shape).float()  # Random target for BCELoss
        bce_loss = self.bce_loss(x, target)  # Apply BCELoss
        x = x.view(x.size(0), -1)  # Flatten for NLLLoss
        target_nll = torch.randint(0, x.size(1), (x.size(0),))  # Random target for NLLLoss
        nll_loss = self.nll_loss(F.log_softmax(x, dim=1), target_nll)  # Apply NLLLoss
        return bce_loss + nll_loss  # Return combined loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

