
# This is a random torch model generated by the following modules: ['InstanceNorm3d', 'ConvTranspose1d', 'AvgPool3d', 'Sigmoid', 'Module', 'AdaptiveMaxPool1d', 'MaxPool3d', 'AdaptiveMaxPool2d', 'PixelUnshuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm3d(16)
        self.conv_transpose1d = nn.ConvTranspose1d(16, 32, kernel_size=3, stride=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.instance_norm(x)
        
        # Reshape to 3D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.conv_transpose1d(x)
        
        # Reshape back to 5D for AvgPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(2), x.size(2))
        x = self.avg_pool3d(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Reshape to 3D for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        # Reshape back to 5D for MaxPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(2), x.size(2))
        x = self.max_pool3d(x)
        
        # Reshape to 4D for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape to 4D for PixelUnshuffle
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.pixel_unshuffle(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
