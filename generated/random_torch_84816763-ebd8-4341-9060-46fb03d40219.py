
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'CircularPad3d', 'NLLLoss2d', 'Conv3d', 'RReLU', 'GroupNorm', 'PixelUnshuffle', 'ReplicationPad2d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.rrelu = nn.RReLU()
        self.group_norm = nn.GroupNorm(2, 10)
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.replication_pad2d = nn.ReplicationPad2d(1)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.conv3d_2 = nn.Conv3d(10, 1, kernel_size=3)
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input is 5D (batch, channel, depth, height, width)
        x = self.conv3d_1(x)
        x = self.circular_pad3d(x)
        x = self.fractional_max_pool3d(x)
        x = self.rrelu(x)
        x = self.group_norm(x)
        
        # Reshape to 4D for PixelUnshuffle
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.pixel_unshuffle(x)
        
        # Reshape back to 5D for Conv3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.replication_pad2d(x)
        x = self.upsampling_nearest2d(x)
        x = self.conv3d_2(x)
        
        # Reshape to 4D for NLLLoss2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.nll_loss2d(x, torch.zeros_like(x).long())
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

