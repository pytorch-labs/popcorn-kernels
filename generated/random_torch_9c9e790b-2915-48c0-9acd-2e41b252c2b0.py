
# This is a random torch model generated by the following modules: ['AvgPool1d', 'RReLU', 'AdaptiveMaxPool3d', 'Unfold', 'Hardshrink', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.rrelu = nn.RReLU()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(4, 4, 4))
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.hardshrink = nn.Hardshrink()
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.constant_pad1d(x)  # Apply padding to ensure compatibility with AvgPool1d
        x = self.avg_pool1d(x)  # Apply AvgPool1d
        x = self.rrelu(x)  # Apply RReLU
        
        # Reshape to 3D for AdaptiveMaxPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Add two dimensions to make it 5D (batch_size, channels, 1, 1, length)
        x = self.adaptive_max_pool3d(x)  # Apply AdaptiveMaxPool3d
        
        # Reshape back to 2D for Unfold
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last three dimensions
        x = self.unfold(x)  # Apply Unfold
        
        x = self.hardshrink(x)  # Apply Hardshrink
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

