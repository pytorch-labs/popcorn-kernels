
# This is a random torch model generated by the following modules: ['GRUCell', 'RMSNorm', 'AdaptiveLogSoftmaxWithLoss', 'AdaptiveMaxPool3d', 'CrossEntropyLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=512)
        self.rms_norm = nn.RMSNorm(512)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(1, 1, 1))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=512, n_classes=10, cutoffs=[2, 4])
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 512).to(x.device)
        
        # Process sequence with GRUCell
        for t in range(seq_len):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Apply RMSNorm
        x = self.rms_norm(h2)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(batch_size, 512, 1, 1, 1)
        x = self.adaptive_max_pool3d(x)
        
        # Flatten the output
        x = x.view(batch_size, -1)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        log_probs = self.adaptive_log_softmax.log_prob(x)
        
        # Return log probabilities
        return log_probs

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, seq_len, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
