
# This is a random torch model generated by the following modules: ['PReLU', 'Container', 'ConstantPad2d', 'ParameterList', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.prelu3 = nn.PReLU()
        self.prelu4 = nn.PReLU()
        self.prelu5 = nn.PReLU()
        
        self.container = nn.Sequential(
            nn.ConstantPad2d(2, 3.5),
            nn.ReflectionPad3d(1),
            nn.ConstantPad2d(1, 2.0),
            nn.ReflectionPad3d(2),
            nn.ConstantPad2d(3, 1.5)
        )
        
        self.parameter_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])

    def forward(self, x):
        # Apply PReLU activations
        x = self.prelu1(x)
        x = self.prelu2(x)
        x = self.prelu3(x)
        x = self.prelu4(x)
        x = self.prelu5(x)
        
        # Apply container with padding layers
        x = self.container(x)
        
        # Apply ParameterList (though typically used for parameters, not directly in forward)
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1, 1)  # Assuming x is 5D after ReflectionPad3d
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Assuming 3D input for ReflectionPad3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
