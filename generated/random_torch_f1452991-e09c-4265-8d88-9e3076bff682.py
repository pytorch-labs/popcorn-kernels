
# This is a random torch model generated by the following modules: ['LeakyReLU', 'PoissonNLLLoss', 'MaxUnpool1d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm2d(3)  # Assuming input has 3 channels
        self.bn2 = nn.BatchNorm2d(6)
        self.bn3 = nn.BatchNorm2d(12)
        self.unpool1 = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.unpool2 = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.leaky_relu1 = nn.LeakyReLU(negative_slope=0.1)
        self.leaky_relu2 = nn.LeakyReLU(negative_slope=0.1)
        self.leaky_relu3 = nn.LeakyReLU(negative_slope=0.1)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.bn1(x)
        x = self.leaky_relu1(x)
        
        # Reshape for MaxUnpool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)  # Reshape to (batch_size, channels*height, width)
        
        # Apply MaxUnpool1d
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.unpool1(x, indices)
        
        # Reshape back to 4D
        x = x.view(batch_size, channels, height, width)
        
        x = self.bn2(x)
        x = self.leaky_relu2(x)
        
        # Reshape for MaxUnpool1d again
        x = x.view(batch_size, channels * height, width)
        
        # Apply MaxUnpool1d
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.unpool2(x, indices)
        
        # Reshape back to 4D
        x = x.view(batch_size, channels, height, width)
        
        x = self.bn3(x)
        x = self.leaky_relu3(x)
        
        # Compute PoissonNLLLoss (assuming target is the same as input for demonstration)
        loss = self.poisson_nll_loss(x, x)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with 3 channels, 32x32 height and width
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

