
# This is a random torch model generated by the following modules: ['LSTMCell', 'RReLU', 'FractionalMaxPool2d', 'Hardsigmoid', 'AdaptiveLogSoftmaxWithLoss', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm_cell1 = nn.LSTMCell(input_size=128, hidden_size=64)
        self.lstm_cell2 = nn.LSTMCell(input_size=64, hidden_size=32)
        self.rrelu = nn.RReLU()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.hardsigmoid = nn.Hardsigmoid()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=32, n_classes=10, cutoffs=[2, 4])
        self.container = nn.Sequential(
            nn.Linear(32, 128),
            nn.RReLU(),
            nn.Linear(128, 64),
            nn.RReLU(),
            nn.Linear(64, 32)
        )

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.size()
        
        # Reshape for LSTMCell
        x = x.view(batch_size, -1)  # Flatten the input for LSTMCell
        hx1 = torch.zeros(batch_size, 64).to(x.device)
        cx1 = torch.zeros(batch_size, 64).to(x.device)
        hx1, cx1 = self.lstm_cell1(x, (hx1, cx1))
        
        hx2 = torch.zeros(batch_size, 32).to(x.device)
        cx2 = torch.zeros(batch_size, 32).to(x.device)
        hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
        
        # Apply RReLU
        x = self.rrelu(hx2)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(batch_size, 1, 8, 4)  # Reshape to (batch_size, 1, 8, 4)
        x = self.fractional_max_pool(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Flatten for AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)
        
        # Apply Container
        x = self.container(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

