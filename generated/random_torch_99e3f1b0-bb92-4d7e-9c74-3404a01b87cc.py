
# This is a random torch model generated by the following modules: ['AvgPool3d', 'AdaptiveMaxPool3d', 'BCELoss', 'ZeroPad2d', 'LazyConv1d', 'Softplus']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(4, 4, 4))
        self.zero_pad2d = nn.ZeroPad2d(padding=1)
        self.lazy_conv1d_1 = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.softplus = nn.Softplus()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.avg_pool3d(x)
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for ZeroPad2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.zero_pad2d(x)
        
        # Reshape to 3D (batch, channels, sequence_length) for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lazy_conv1d_1(x)
        x = self.lazy_conv1d_2(x)
        
        # Apply Softplus activation
        x = self.softplus(x)
        
        # Compute BCE loss (assuming a target tensor is provided)
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
