
# This is a random torch model generated by the following modules: ['RMSNorm', 'Unfold', 'Identity', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rms_norm1 = RMSNorm(64)
        self.unfold1 = nn.Unfold(kernel_size=3, stride=1)
        self.identity1 = nn.Identity()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.rms_norm2 = RMSNorm(64)
        self.unfold2 = nn.Unfold(kernel_size=3, stride=1)
        self.identity2 = nn.Identity()
        self.hardsigmoid2 = nn.Hardsigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Apply RMSNorm
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.rms_norm1(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back
        
        # Apply Unfold
        x = self.unfold1(x)
        x = x.view(batch_size, -1, height, width)  # Reshape back
        
        # Apply Identity
        x = self.identity1(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid1(x)
        
        # Apply RMSNorm again
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.rms_norm2(x)
        x = x.view(batch_size, channels, height, width)  # Reshape back
        
        # Apply Unfold again
        x = self.unfold2(x)
        x = x.view(batch_size, -1, height, width)  # Reshape back
        
        # Apply Identity again
        x = self.identity2(x)
        
        # Apply Hardsigmoid again
        x = self.hardsigmoid2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

