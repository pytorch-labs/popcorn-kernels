
# This is a random torch model generated by the following modules: ['LazyLinear', 'MultiLabelMarginLoss', 'ConvTranspose2d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.lazy_linear3 = nn.LazyLinear(32)
        self.conv_transpose1 = nn.ConvTranspose2d(32, 16, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose2d(16, 8, kernel_size=3, stride=2, padding=1)
        self.celu = nn.CELU()
        self.loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Flatten the input for LazyLinear layers
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear layers
        x = self.lazy_linear1(x)
        x = self.celu(x)
        x = self.lazy_linear2(x)
        x = self.celu(x)
        x = self.lazy_linear3(x)
        x = self.celu(x)
        
        # Reshape for ConvTranspose2d layers
        x = x.view(x.size(0), 32, 4, 4)
        
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.celu(x)
        x = self.conv_transpose2(x)
        x = self.celu(x)
        
        # Compute loss (assuming some target labels)
        target = torch.randint(0, 8, (x.size(0), 8)).to(x.device)
        loss = self.loss(x.view(x.size(0), -1), target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
