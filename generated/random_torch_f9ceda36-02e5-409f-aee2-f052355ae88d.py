
# This is a random torch model generated by the following modules: ['LazyConv2d', 'UpsamplingNearest2d', 'AdaptiveLogSoftmaxWithLoss', 'CELU', 'CosineEmbeddingLoss', 'AlphaDropout', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.celu = nn.CELU()
        self.dropout = nn.AlphaDropout(p=0.5)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)
        self.module_dict = nn.ModuleDict({
            'conv3': nn.LazyConv2d(out_channels=64, kernel_size=3),
            'conv4': nn.LazyConv2d(out_channels=128, kernel_size=3)
        })
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5, 10])
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        x = self.conv1(x)
        x = self.upsample1(x)
        x = self.celu(x)
        x = self.dropout(x)
        x = self.conv2(x)
        x = self.upsample2(x)
        x = self.module_dict['conv3'](x)
        x = self.module_dict['conv4'](x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        output = self.adaptive_log_softmax(x, torch.randint(0, 10, (x.size(0),)).to(x.device))
        return output

    def compute_cosine_loss(self, x1, x2, target):
        return self.cosine_loss(x1, x2, target)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
