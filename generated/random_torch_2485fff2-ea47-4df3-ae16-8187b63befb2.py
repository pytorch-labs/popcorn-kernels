
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'SyncBatchNorm', 'LazyLinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid1 = nn.Hardsigmoid()
        self.hardsigmoid2 = nn.Hardsigmoid()
        self.sync_batchnorm1 = nn.SyncBatchNorm(128)
        self.sync_batchnorm2 = nn.SyncBatchNorm(64)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.lazy_linear3 = nn.LazyLinear(10)

    def forward(self, x):
        # Apply first Hardsigmoid
        x = self.hardsigmoid1(x)
        
        # Flatten the input for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply first LazyLinear
        x = self.lazy_linear1(x)
        
        # Apply first SyncBatchNorm
        x = self.sync_batchnorm1(x)
        
        # Apply second Hardsigmoid
        x = self.hardsigmoid2(x)
        
        # Apply second LazyLinear
        x = self.lazy_linear2(x)
        
        # Apply second SyncBatchNorm
        x = self.sync_batchnorm2(x)
        
        # Apply third LazyLinear
        x = self.lazy_linear3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

