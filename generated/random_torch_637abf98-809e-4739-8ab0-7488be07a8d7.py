
# This is a random torch model generated by the following modules: ['Dropout2d', 'ReLU', 'LazyBatchNorm2d', 'Dropout3d', 'CrossMapLRN2d', 'CrossEntropyLoss', 'AdaptiveMaxPool2d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.relu = nn.ReLU()
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm2d(x)
        
        # Reshape for Dropout3d (assuming 3D input is needed)
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout3d(x)
        x = x.squeeze(1)  # Remove the added channel dimension
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool2d(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Flatten the output for CrossEntropyLoss
        x = x.view(x.size(0), -1)
        
        # Assuming we have a target for CrossEntropyLoss
        # For demonstration, we create a dummy target
        target = torch.randint(0, 10, (x.size(0),), device=x.device)
        
        # Apply CrossEntropyLoss
        loss = self.cross_entropy_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

