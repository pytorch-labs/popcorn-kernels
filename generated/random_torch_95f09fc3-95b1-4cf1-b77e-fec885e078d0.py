
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'Hardswish', 'NLLLoss2d', 'LPPool3d', 'LSTM', 'Transformer', 'AdaptiveMaxPool2d', 'Softplus', 'Conv3d', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.lp_pool3d = nn.LPPool3d(2, kernel_size=2, stride=2)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.lstm = nn.LSTM(input_size=100, hidden_size=50, num_layers=2, batch_first=True)
        self.transformer = nn.Transformer(d_model=50, nhead=5, num_encoder_layers=2, num_decoder_layers=2)
        self.softplus = nn.Softplus()
        self.hardswish = nn.Hardswish()
        self.nll_loss = nn.NLLLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Apply Conv3d layers
        x = self.conv3d_1(x)
        x = self.hardswish(x)
        x = self.conv3d_2(x)
        x = self.hardswish(x)
        
        # Apply LPPool3d
        x = self.lp_pool3d(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), x.size(1), -1)
        x, _ = self.lstm(x)
        
        # Reshape for Transformer
        x = x.permute(1, 0, 2)
        x = self.transformer(x, x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), x.size(1), -1)
        x = x.permute(0, 2, 1)
        
        # Apply NLLLoss2d
        target = torch.randint(0, x.size(2), (x.size(0), x.size(1)), device=x.device)
        x = self.nll_loss2d(x, target)
        
        # Apply NLLLoss
        x = x.view(x.size(0), -1)
        target = torch.randint(0, x.size(1), (x.size(0),), device=x.device)
        x = self.nll_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

