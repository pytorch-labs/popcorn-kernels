
# This is a random torch model generated by the following modules: ['ParameterList', 'BCELoss', 'Unflatten', 'LazyBatchNorm1d', 'Hardswish', 'Identity', 'CTCLoss', 'MultiMarginLoss', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.params = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(3)])
        self.unflatten = nn.Unflatten(1, (2, 5))
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()
        self.hardswish = nn.Hardswish()
        self.identity = nn.Identity()
        self.sigmoid = nn.Sigmoid()
        self.bce_loss = nn.BCELoss()
        self.ctc_loss = nn.CTCLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply Unflatten to reshape the input
        x = self.unflatten(x)
        
        # Apply LazyBatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten for BatchNorm
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Apply Hardswish activation
        x = self.hardswish(x)
        
        # Apply Identity (no change)
        x = self.identity(x)
        
        # Apply Sigmoid activation
        x = self.sigmoid(x)
        
        # Compute BCE Loss (dummy target for demonstration)
        target = torch.rand_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Compute CTC Loss (dummy input and target for demonstration)
        log_probs = torch.randn(50, 16, 20).log_softmax(2).detach().requires_grad_()
        targets = torch.randint(1, 20, (16, 30), dtype=torch.long)
        input_lengths = torch.full((16,), 50, dtype=torch.long)
        target_lengths = torch.randint(10, 30, (16,), dtype=torch.long)
        ctc_loss = self.ctc_loss(log_probs, targets, input_lengths, target_lengths)
        
        # Compute MultiMargin Loss (dummy input and target for demonstration)
        input_margin = torch.randn(10, 5)
        target_margin = torch.randint(0, 5, (10,))
        multi_margin_loss = self.multi_margin_loss(input_margin, target_margin)
        
        # Return the final output and losses
        return x, bce_loss, ctc_loss, multi_margin_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(16, 10).cuda()  # Arbitrary shape input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
