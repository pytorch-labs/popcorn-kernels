
# This is a random torch model generated by the following modules: ['Container', 'LazyConv2d', 'ConvTranspose3d', 'BatchNorm3d', 'ELU', 'MaxPool1d', 'GELU', 'AdaptiveMaxPool1d', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.LazyConv2d(out_channels=16, kernel_size=3, stride=1, padding=1),
            nn.ConvTranspose3d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1),
            nn.BatchNorm3d(num_features=32),
            nn.ELU(),
            nn.MaxPool1d(kernel_size=2, stride=2),
            nn.GELU(),
            nn.AdaptiveMaxPool1d(output_size=16),
            nn.ConvTranspose2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1),
        )
        self.fc = nn.Linear(64 * 16 * 16, 10)  # Assuming final output is 10 classes

    def forward(self, x):
        # Reshape input to fit the 3D convolution
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D convolution
        x = self.container(x)
        # Reshape back to 2D for the final fully connected layer
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3-channel input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

