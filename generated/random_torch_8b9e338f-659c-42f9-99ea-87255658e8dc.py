
# This is a random torch model generated by the following modules: ['BCELoss', 'RNN', 'L1Loss', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.rnn2 = nn.RNN(input_size=20, hidden_size=10, num_layers=1, batch_first=True)
        self.threshold1 = nn.Threshold(threshold=0.5, value=0.0)
        self.threshold2 = nn.Threshold(threshold=0.2, value=0.0)
        self.bce_loss = nn.BCELoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Pass through the first RNN
        x, _ = self.rnn1(x)  # Output shape: (batch_size, seq_len, hidden_size=20)
        
        # Apply the first threshold
        x = self.threshold1(x)
        
        # Pass through the second RNN
        x, _ = self.rnn2(x)  # Output shape: (batch_size, seq_len, hidden_size=10)
        
        # Apply the second threshold
        x = self.threshold2(x)
        
        # Reshape for loss computation
        x = x.view(batch_size, -1)  # Flatten the sequence and hidden dimensions
        
        # Generate a random target for BCELoss
        target_bce = torch.rand_like(x)
        bce_loss = self.bce_loss(torch.sigmoid(x), target_bce)
        
        # Generate a random target for L1Loss
        target_l1 = torch.rand_like(x)
        l1_loss = self.l1_loss(x, target_l1)
        
        # Return the sum of the losses as the final output
        return bce_loss + l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 5, 10).cuda()  # Example input: (batch_size=1, sequence_length=5, input_size=10)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

