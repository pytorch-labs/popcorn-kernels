
# This is a random torch model generated by the following modules: ['Sigmoid', 'ReplicationPad2d', 'Upsample', 'BCELoss', 'AdaptiveAvgPool2d', 'ConstantPad2d', 'Identity', 'TripletMarginLoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.constant_pad = nn.ConstantPad2d(1, 0.5)
        self.identity = nn.Identity()
        self.celu = nn.CELU()
        self.sigmoid = nn.Sigmoid()
        self.bce_loss = nn.BCELoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool(x)
        
        # Apply ConstantPad2d
        x = self.constant_pad(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Calculate BCELoss (requires a target, so we create a dummy target)
        target = torch.ones_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Calculate TripletMarginLoss (requires anchor, positive, and negative, so we create dummy tensors)
        anchor = x
        positive = torch.ones_like(x)
        negative = torch.zeros_like(x)
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return the final output and the losses
        return x, bce_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
