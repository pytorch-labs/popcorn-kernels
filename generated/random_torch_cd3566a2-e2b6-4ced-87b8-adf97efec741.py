
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'CircularPad1d', 'LogSigmoid', 'Dropout2d', 'MaxPool1d', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.circular_pad1d = nn.CircularPad1d(2)
        self.log_sigmoid = nn.LogSigmoid()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        
    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Reshape to 1D for CircularPad1d
        x = x.view(x.size(0), -1)
        x = self.circular_pad1d(x)
        
        # Reshape back to 3D for Dropout2d
        x = x.view(x.size(0), 1, -1, x.size(1))
        x = self.dropout2d(x)
        
        # Reshape to 1D for MaxPool1d
        x = x.view(x.size(0), -1)
        x = self.max_pool1d(x)
        
        # Reshape to 3D for ReplicationPad3d
        x = x.view(x.size(0), 1, -1, x.size(1))
        x = self.replication_pad3d(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
