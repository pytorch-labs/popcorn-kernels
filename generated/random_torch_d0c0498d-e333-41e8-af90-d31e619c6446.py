
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'ReflectionPad2d', 'CrossMapLRN2d', 'ConvTranspose1d', 'Softmax', 'Conv3d', 'ConstantPad2d', 'SyncBatchNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad3d = nn.ConstantPad3d(1, 1.0)
        self.pad2d = nn.ReflectionPad2d(2)
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.conv_transpose1d = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.softmax = nn.Softmax(dim=1)
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.pad2d_2 = nn.ConstantPad2d(1, 2.0)
        self.sync_bn = nn.SyncBatchNorm(10)

    def forward(self, x):
        # Assuming input is 3D, pad it with ConstantPad3d
        x = self.pad3d(x)
        
        # Reshape to 4D for ReflectionPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.pad2d(x)
        
        # Apply CrossMapLRN2d
        x = self.lrn(x)
        
        # Reshape to 3D for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.conv_transpose1d(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Reshape to 5D for Conv3d
        x = x.view(x.size(0), 1, x.size(1), x.size(2), -1)
        x = self.conv3d(x)
        
        # Reshape to 4D for ConstantPad2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.pad2d_2(x)
        
        # Reshape to 2D for SyncBatchNorm
        x = x.view(x.size(0), x.size(1), -1)
        x = self.sync_bn(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

