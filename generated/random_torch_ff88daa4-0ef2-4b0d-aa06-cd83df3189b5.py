
# This is a random torch model generated by the following modules: ['ConstantPad1d', 'ReplicationPad3d', 'Conv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.conv1d_1 = nn.Conv1d(in_channels=1, out_channels=10, kernel_size=3)
        self.conv1d_2 = nn.Conv1d(in_channels=10, out_channels=20, kernel_size=3)
        self.conv1d_3 = nn.Conv1d(in_channels=20, out_channels=30, kernel_size=3)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.pad1d(x)  # Apply ConstantPad1d
        x = x.unsqueeze(1)  # Add a dimension to make it 3D for ReplicationPad3d
        x = self.replication_pad3d(x)  # Apply ReplicationPad3d
        x = x.squeeze(1)  # Remove the added dimension to make it 1D again
        x = F.relu(self.conv1d_1(x))  # Apply Conv1d and ReLU
        x = F.relu(self.conv1d_2(x))  # Apply Conv1d and ReLU
        x = self.conv1d_3(x)  # Apply Conv1d
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape (batch_size=1, channels=1, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

