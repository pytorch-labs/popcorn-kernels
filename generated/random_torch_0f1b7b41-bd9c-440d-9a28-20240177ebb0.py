
# This is a random torch model generated by the following modules: ['ReLU6', 'ChannelShuffle', 'PReLU', 'NLLLoss2d', 'GaussianNLLLoss', 'ZeroPad1d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.relu6 = nn.ReLU6()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.prelu = nn.PReLU()
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.nll_loss2d = nn.NLLLoss2d()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply ZeroPad1d to the input
        x = self.zero_pad1d(x)
        
        # Reshape the input to fit the ChannelShuffle module
        x = x.view(x.size(0), 2, -1, x.size(-1))
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Reshape back to original shape
        x = x.view(x.size(0), -1, x.size(-2), x.size(-1))
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Apply ParameterDict parameters
        x = x * self.parameter_dict['param1'].view(1, -1, 1, 1)
        x = x + self.parameter_dict['param2'].view(1, -1, 1, 1)
        
        # Compute NLLLoss2d (assuming target is provided)
        target = torch.randint(0, 10, (x.size(0), x.size(2), x.size(3)), dtype=torch.long)
        nll_loss = self.nll_loss2d(F.log_softmax(x, dim=1), target)
        
        # Compute GaussianNLLLoss (assuming target and var are provided)
        target_gaussian = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_nll_loss(x, target_gaussian, var)
        
        # Return both losses
        return nll_loss, gaussian_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

