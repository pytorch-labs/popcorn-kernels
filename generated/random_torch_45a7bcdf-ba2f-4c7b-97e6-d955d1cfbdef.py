
# This is a random torch model generated by the following modules: ['LogSoftmax', 'FractionalMaxPool2d', 'LocalResponseNorm', 'Linear', 'AdaptiveMaxPool3d', 'LazyBatchNorm3d', 'UpsamplingBilinear2d', 'MaxUnpool3d', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.linear1 = nn.Linear(14 * 14 * 3, 128)
        self.linear2 = nn.Linear(128, 64)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.fractional_max_pool2d(x)
        x = self.local_response_norm(x)
        
        # Reshape for Linear layer
        x = x.view(x.size(0), -1)
        x = F.relu(self.linear1(x))
        x = F.relu(self.linear2(x))
        
        # Reshape for 3D operations
        x = x.view(x.size(0), 1, 8, 8, 8)
        x = self.adaptive_max_pool3d(x)
        x = self.lazy_batch_norm3d(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), 1, 8, 8)
        x = self.upsampling_bilinear2d(x)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), 1, 16, 16, 1)
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), -1)
        x = self.max_pool1d(x.unsqueeze(1)).squeeze(1)
        
        # Final log softmax
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
