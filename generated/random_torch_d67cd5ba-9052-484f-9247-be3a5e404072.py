
# This is a random torch model generated by the following modules: ['SELU', 'LPPool2d', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu1 = nn.SELU()
        self.lppool1 = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.selu2 = nn.SELU()
        self.lppool2 = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)

    def forward(self, x):
        x = self.selu1(x)
        x = self.lppool1(x)
        x = self.upsample1(x)
        x = self.selu2(x)
        x = self.lppool2(x)
        x = self.upsample2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
