
# This is a random torch model generated by the following modules: ['ConvTranspose1d', 'Softmin', 'GELU', 'LazyBatchNorm1d', 'Upsample', 'AvgPool3d', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.gelu1 = nn.GELU()
        self.lazy_bn1 = nn.LazyBatchNorm1d()
        self.upsample1 = nn.Upsample(scale_factor=2)
        self.avg_pool3d1 = nn.AvgPool3d(kernel_size=2)
        self.softmin1 = nn.Softmin(dim=1)
        self.log_sigmoid1 = nn.LogSigmoid()
        self.conv_transpose2 = nn.ConvTranspose1d(10, 20, kernel_size=5)
        self.gelu2 = nn.GELU()
        self.lazy_bn2 = nn.LazyBatchNorm1d()
        self.upsample2 = nn.Upsample(scale_factor=2)
        self.avg_pool3d2 = nn.AvgPool3d(kernel_size=2)
        self.softmin2 = nn.Softmin(dim=1)
        self.log_sigmoid2 = nn.LogSigmoid()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.gelu1(x)
        x = self.lazy_bn1(x)
        x = self.upsample1(x)
        
        # Reshape to 3D for AvgPool3d
        x = x.unsqueeze(2)  # Add a new dimension
        x = self.avg_pool3d1(x)
        x = x.squeeze(2)  # Remove the added dimension
        
        x = self.softmin1(x)
        x = self.log_sigmoid1(x)
        
        x = self.conv_transpose2(x)
        x = self.gelu2(x)
        x = self.lazy_bn2(x)
        x = self.upsample2(x)
        
        # Reshape to 3D for AvgPool3d
        x = x.unsqueeze(2)  # Add a new dimension
        x = self.avg_pool3d2(x)
        x = x.squeeze(2)  # Remove the added dimension
        
        x = self.softmin2(x)
        x = self.log_sigmoid2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
