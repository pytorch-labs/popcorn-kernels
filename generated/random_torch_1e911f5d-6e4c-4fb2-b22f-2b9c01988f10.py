
# This is a random torch model generated by the following modules: ['GroupNorm', 'Unflatten', 'LazyBatchNorm3d', 'LazyConvTranspose2d', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm1 = nn.GroupNorm(4, 8)  # Assuming 4 groups and 8 channels
        self.unflatten = nn.Unflatten(1, (8, 4, 4))  # Unflatten to (batch_size, 8, 4, 4)
        self.lazy_bn3d1 = nn.LazyBatchNorm3d()
        self.lazy_conv_transpose2d1 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.lazy_bn3d2 = nn.LazyBatchNorm3d()
        self.lazy_conv_transpose2d2 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.group_norm2 = nn.GroupNorm(8, 32)  # Assuming 8 groups and 32 channels

    def forward(self, x):
        # Apply GroupNorm
        x = self.group_norm1(x)
        
        # Reshape the input to fit the Unflatten layer
        x = x.view(x.size(0), -1)  # Flatten the input
        x = self.unflatten(x)
        
        # Add a dummy dimension to make it 5D for LazyBatchNorm3d
        x = x.unsqueeze(2)
        
        # Apply LazyBatchNorm3d
        x = self.lazy_bn3d1(x)
        
        # Remove the dummy dimension to make it 4D for LazyConvTranspose2d
        x = x.squeeze(2)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d1(x)
        
        # Add a dummy dimension to make it 5D for AdaptiveAvgPool3d
        x = x.unsqueeze(2)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Apply LazyBatchNorm3d again
        x = self.lazy_bn3d2(x)
        
        # Remove the dummy dimension to make it 4D for LazyConvTranspose2d
        x = x.squeeze(2)
        
        # Apply LazyConvTranspose2d again
        x = self.lazy_conv_transpose2d2(x)
        
        # Apply GroupNorm again
        x = self.group_norm2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 8, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
