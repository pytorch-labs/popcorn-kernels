
# This is a random torch model generated by the following modules: ['PixelShuffle', 'RNN', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(8)
        self.rnn1 = nn.RNN(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.pixel_shuffle1 = nn.PixelShuffle(2)
        self.bn2 = nn.BatchNorm3d(4)
        self.rnn2 = nn.RNN(input_size=32, hidden_size=64, num_layers=2, batch_first=True)
        self.pixel_shuffle2 = nn.PixelShuffle(2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # Apply BatchNorm3d
        x = x.permute(0, 2, 1, 3, 4)  # Reshape for RNN: (batch_size, depth, channels, height, width)
        batch_size, depth, channels, height, width = x.shape
        x = x.reshape(batch_size, depth, -1)  # Flatten height and width for RNN
        x, _ = self.rnn1(x)  # Apply RNN
        x = x.reshape(batch_size, depth, channels, height, width)  # Reshape back
        x = x.permute(0, 2, 1, 3, 4)  # Reshape back to (batch_size, channels, depth, height, width)
        x = self.pixel_shuffle1(x)  # Apply PixelShuffle
        x = self.bn2(x)  # Apply BatchNorm3d
        x = x.permute(0, 2, 1, 3, 4)  # Reshape for RNN: (batch_size, depth, channels, height, width)
        batch_size, depth, channels, height, width = x.shape
        x = x.reshape(batch_size, depth, -1)  # Flatten height and width for RNN
        x, _ = self.rnn2(x)  # Apply RNN
        x = x.reshape(batch_size, depth, channels, height, width)  # Reshape back
        x = x.permute(0, 2, 1, 3, 4)  # Reshape back to (batch_size, channels, depth, height, width)
        x = self.pixel_shuffle2(x)  # Apply PixelShuffle
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 8, 16, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

