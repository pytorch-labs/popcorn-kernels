
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'MaxPool2d', 'LocalResponseNorm', 'Module', 'AdaptiveAvgPool1d', 'LPPool3d', 'PReLU', 'SyncBatchNorm', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=16)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.prelu = nn.PReLU()
        self.sync_batch_norm = nn.SyncBatchNorm(16)
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        
    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for MaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.max_pool2d(x)
        
        # Reshape back to 5D for LocalResponseNorm
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        x = self.local_response_norm(x)
        
        # Reshape to 3D (batch, channels, length) for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back to 5D for LPPool3d
        x = x.view(x.size(0), x.size(1), 1, 1, x.size(2))
        x = self.lp_pool3d(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Reshape to 3D (batch, channels, length) for SyncBatchNorm
        x = x.view(x.size(0), x.size(1), -1)
        x = self.sync_batch_norm(x)
        
        # Reshape to 3D (batch, channels, length) for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
