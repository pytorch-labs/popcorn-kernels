
# This is a random torch model generated by the following modules: ['RNN', 'ChannelShuffle', 'GRU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn1 = nn.RNN(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.channel_shuffle1 = nn.ChannelShuffle(groups=4)
        self.gru1 = nn.GRU(input_size=256, hidden_size=128, num_layers=2, batch_first=True)
        self.rnn2 = nn.RNN(input_size=128, hidden_size=64, num_layers=1, batch_first=True)
        self.channel_shuffle2 = nn.ChannelShuffle(groups=2)
        self.gru2 = nn.GRU(input_size=64, hidden_size=32, num_layers=1, batch_first=True)
        self.fc = nn.Linear(32, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.size()
        
        # Reshape and permute for RNN input
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # (batch_size, height*width, channels)
        
        # Pass through RNN
        x, _ = self.rnn1(x)
        
        # Reshape and permute back for ChannelShuffle
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)  # (batch_size, hidden_size, height, width)
        
        # ChannelShuffle
        x = self.channel_shuffle1(x)
        
        # Reshape and permute for GRU input
        x = x.view(batch_size, -1, height*width).permute(0, 2, 1)  # (batch_size, height*width, hidden_size)
        
        # Pass through GRU
        x, _ = self.gru1(x)
        
        # Reshape and permute back for RNN input
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)  # (batch_size, hidden_size, height, width)
        
        # Pass through RNN
        x, _ = self.rnn2(x)
        
        # Reshape and permute back for ChannelShuffle
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)  # (batch_size, hidden_size, height, width)
        
        # ChannelShuffle
        x = self.channel_shuffle2(x)
        
        # Reshape and permute for GRU input
        x = x.view(batch_size, -1, height*width).permute(0, 2, 1)  # (batch_size, height*width, hidden_size)
        
        # Pass through GRU
        x, _ = self.gru2(x)
        
        # Take the last output of the GRU
        x = x[:, -1, :]
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

