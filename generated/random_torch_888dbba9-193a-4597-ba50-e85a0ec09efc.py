
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'Linear', 'Sequential', 'Bilinear', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.linear1 = nn.Linear(64, 128)
        self.sequential = nn.Sequential(
            nn.Linear(128, 64),
            nn.Tanhshrink(),
            nn.Linear(64, 32)
        )
        self.bilinear = nn.Bilinear(32, 32, 16)
        self.linear2 = nn.Linear(16, 10)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = F.tanhshrink(self.linear1(x))
        x = self.sequential(x)
        # Duplicate x for Bilinear layer
        x_dup = x.clone()
        x = self.bilinear(x, x_dup)
        x = self.linear2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

