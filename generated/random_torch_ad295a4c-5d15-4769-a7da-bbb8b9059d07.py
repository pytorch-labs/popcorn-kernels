
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'MaxPool2d', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        # First, apply MaxPool2d to reduce spatial dimensions
        x = self.max_pool2d(x)
        
        # Reshape the tensor to fit AdaptiveAvgPool1d
        # Flatten the height and width dimensions into a single dimension
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Shape: (batch_size, channels, height * width)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        
        # Reshape back to a 2D tensor for Softmin
        x = x.view(batch_size, -1)  # Shape: (batch_size, channels * output_size)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input: batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

