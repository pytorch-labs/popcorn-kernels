
# This is a random torch model generated by the following modules: ['PixelShuffle', 'BatchNorm3d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad3d(padding=1, value=0)
        self.bn1 = nn.BatchNorm3d(8)
        self.pixel_shuffle1 = nn.PixelShuffle(2)
        self.pad2 = nn.ConstantPad3d(padding=2, value=0)
        self.bn2 = nn.BatchNorm3d(4)
        self.pixel_shuffle2 = nn.PixelShuffle(2)
        self.pad3 = nn.ConstantPad3d(padding=1, value=0)
        self.bn3 = nn.BatchNorm3d(1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.pad1(x)
        x = self.bn1(x)
        x = self.pixel_shuffle1(x)
        x = self.pad2(x)
        x = self.bn2(x)
        x = self.pixel_shuffle2(x)
        x = self.pad3(x)
        x = self.bn3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 8, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
