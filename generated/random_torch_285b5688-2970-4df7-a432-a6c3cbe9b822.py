
# This is a random torch model generated by the following modules: ['AvgPool3d', 'AdaptiveAvgPool1d', 'ZeroPad2d', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool3d = nn.AvgPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        self.adaptiveavgpool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.zeropad2d = nn.ZeroPad2d(padding=(1, 1, 1, 1))
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Ensure the input has at least 5 dimensions for AvgPool3d
        if x.dim() == 4:
            x = x.unsqueeze(1)  # Add a channel dimension if necessary
        x = self.avgpool3d(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptiveavgpool1d(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to 2D
        x = self.zeropad2d(x)
        
        # Reshape for Softmin
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with 5 dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

