
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'ReplicationPad2d', 'AdaptiveAvgPool1d', 'MaxPool2d', 'GELU', 'PixelUnshuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(3)
        self.replication_pad = nn.ReplicationPad2d(2)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(128)
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.gelu = nn.GELU()
        self.pixel_unshuffle = nn.PixelUnshuffle(2)

    def forward(self, x):
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply MaxPool2d
        x = self.max_pool(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape for AdaptiveAvgPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool(x)
        
        # Reshape back to 4D tensor
        x = x.view(batch_size, channels, height, -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
