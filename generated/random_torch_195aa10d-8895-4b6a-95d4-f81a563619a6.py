
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'Container', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.container1 = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, padding=1),
            nn.ReLU()
        )
        self.avgpool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)
        self.container2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU()
        )
        self.avgpool2 = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        x = self.upsample1(x)
        x = self.container1(x)
        x = self.avgpool1(x)
        x = self.upsample2(x)
        x = self.container2(x)
        x = self.avgpool2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
