
# This is a random torch model generated by the following modules: ['CrossEntropyLoss', 'AdaptiveMaxPool3d', 'ReflectionPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pool = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.pad = nn.ReflectionPad1d(2)
        self.loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.pool(x)  # Shape: (batch_size, channels, 5, 5, 5)
        
        # Reshape to apply ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, 125)
        x = self.pad(x)  # Shape: (batch_size, channels, 129)
        
        # Reshape back to 3D for CrossEntropyLoss
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Shape: (batch_size, channels, 5, 5, 5)
        
        # Dummy target for CrossEntropyLoss (assuming classification task)
        target = torch.randint(0, x.size(1), (x.size(0), 5, 5, 5)).to(x.device)
        
        # Compute loss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

