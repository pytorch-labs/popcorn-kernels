
# This is a random torch model generated by the following modules: ['Conv3d', 'GELU', 'LogSigmoid', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv2 = nn.Conv3d(10, 20, kernel_size=3)
        self.conv3 = nn.Conv3d(20, 30, kernel_size=3)
        self.conv4 = nn.Conv3d(30, 40, kernel_size=3)
        self.conv5 = nn.Conv3d(40, 50, kernel_size=3)
        self.gelu = nn.GELU()
        self.log_sigmoid = nn.LogSigmoid()
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        x = self.conv1(x)
        x = self.gelu(x)
        x = self.conv2(x)
        x = self.log_sigmoid(x)
        x = self.conv3(x)
        x = self.hardsigmoid(x)
        x = self.conv4(x)
        x = self.gelu(x)
        x = self.conv5(x)
        x = self.log_sigmoid(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
