
# This is a random torch model generated by the following modules: ['Fold', 'MaxUnpool2d', 'Tanhshrink', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d_1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d_2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=(5, 5), stride=(2, 2))
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.conv_transpose3d_1(x)
        x = self.tanhshrink(x)
        x = self.conv_transpose3d_2(x)
        x = self.tanhshrink(x)
        
        # Reshape to 4D (batch, channels, height, width) for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        # Dummy indices for MaxUnpool2d (assuming max pooling was done before)
        indices = torch.zeros_like(x, dtype=torch.long)
        x = self.max_unpool2d(x, indices)
        
        # Reshape to 3D (batch, channels, height*width) for Fold
        x = x.view(x.size(0), x.size(1), -1)
        
        # Fold the tensor
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

