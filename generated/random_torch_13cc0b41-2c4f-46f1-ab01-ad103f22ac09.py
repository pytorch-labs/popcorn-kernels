
# This is a random torch model generated by the following modules: ['GRU', 'BatchNorm3d', 'RNNBase']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.batch_norm3d = nn.BatchNorm3d(num_features=64)
        self.rnn_base = nn.RNNBase(input_size=256, hidden_size=128, num_layers=1, nonlinearity='tanh', batch_first=True)
        self.gru2 = nn.GRU(input_size=128, hidden_size=64, num_layers=1, batch_first=True)
        self.fc = nn.Linear(64, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # First, reshape to (batch_size, depth, height * width * channels)
        batch_size, channels, depth, height, width = x.size()
        x = x.view(batch_size, depth, -1)  # Reshape to (batch_size, depth, height * width * channels)
        
        # Pass through GRU1
        x, _ = self.gru1(x)
        
        # Reshape back to 5D for BatchNorm3d
        x = x.view(batch_size, depth, channels, height, width)
        x = x.permute(0, 2, 1, 3, 4)  # Permute to (batch_size, channels, depth, height, width)
        x = self.batch_norm3d(x)
        
        # Reshape back to 3D for RNNBase
        x = x.permute(0, 2, 1, 3, 4)  # Permute back to (batch_size, depth, channels, height, width)
        x = x.view(batch_size, depth, -1)  # Reshape to (batch_size, depth, channels * height * width)
        
        # Pass through RNNBase
        x, _ = self.rnn_base(x)
        
        # Pass through GRU2
        x, _ = self.gru2(x)
        
        # Take the last output of the GRU2 sequence
        x = x[:, -1, :]
        
        # Fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

