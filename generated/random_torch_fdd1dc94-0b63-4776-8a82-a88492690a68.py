
# This is a random torch model generated by the following modules: ['CELU', 'LazyBatchNorm3d', 'AlphaDropout', 'LayerNorm', 'GRUCell', 'LPPool2d', 'Upsample', 'CircularPad2d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu = nn.CELU()
        self.bn1 = nn.LazyBatchNorm3d()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.layer_norm = nn.LayerNorm(128)
        self.gru_cell = nn.GRUCell(128, 64)
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.circular_pad = nn.CircularPad2d(1)
        self.upsample_nearest = nn.UpsamplingNearest2d(scale_factor=2)

    def forward(self, x):
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply LazyBatchNorm3d
        x = x.unsqueeze(1)  # Add a channel dimension to make it 5D
        x = self.bn1(x)
        x = x.squeeze(1)  # Remove the channel dimension
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply LayerNorm
        x = x.view(-1, 128)  # Reshape to (batch_size, 128)
        x = self.layer_norm(x)
        x = x.view(-1, 128, 1, 1)  # Reshape back to original shape
        
        # Apply GRUCell
        x = x.view(-1, 128)  # Reshape to (batch_size, 128)
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        x = x.view(-1, 64, 1, 1)  # Reshape back to original shape
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsample_nearest(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

