
# This is a random torch model generated by the following modules: ['GroupNorm', 'ZeroPad3d', 'FractionalMaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.group_norm1 = nn.GroupNorm(4, 16)  # Assuming 16 channels for GroupNorm
        self.zero_pad3d1 = nn.ZeroPad3d(1)  # Padding of 1 on all sides
        self.fractional_max_pool3d1 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.group_norm2 = nn.GroupNorm(4, 16)  # Repeating GroupNorm
        self.zero_pad3d2 = nn.ZeroPad3d(1)  # Repeating ZeroPad3d
        self.fractional_max_pool3d2 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.group_norm3 = nn.GroupNorm(4, 16)  # Repeating GroupNorm
        self.zero_pad3d3 = nn.ZeroPad3d(1)  # Repeating ZeroPad3d
        self.fractional_max_pool3d3 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(2, 2, 2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.group_norm1(x)
        x = self.zero_pad3d1(x)
        x = self.fractional_max_pool3d1(x)
        x = self.group_norm2(x)
        x = self.zero_pad3d2(x)
        x = self.fractional_max_pool3d2(x)
        x = self.group_norm3(x)
        x = self.zero_pad3d3(x)
        x = self.fractional_max_pool3d3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
