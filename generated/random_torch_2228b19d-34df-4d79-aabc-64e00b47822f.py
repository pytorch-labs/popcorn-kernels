
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'GRU', 'AvgPool3d', 'PixelUnshuffle', 'ReplicationPad2d', 'NLLLoss', 'TransformerDecoderLayer', 'MarginRankingLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.replication_pad2d = nn.ReplicationPad2d(padding=2)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=256, nhead=8)
        self.transformer_decoder = nn.TransformerDecoder(self.transformer_decoder_layer, num_layers=3)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=256, n_classes=10, cutoffs=[2, 4])
        self.nll_loss = nn.NLLLoss()
        self.margin_ranking_loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, height, width)
        x = self.pixel_unshuffle(x)  # Shape: (batch_size, channels * 4, height // 2, width // 2)
        x = self.replication_pad2d(x)  # Shape: (batch_size, channels * 4, height // 2 + 4, width // 2 + 4)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, channels * 4, height // 2 + 4, width // 2 + 4)
        x = self.avg_pool3d(x)  # Shape: (batch_size, 1, channels * 4, height // 4 + 2, width // 4 + 2)
        
        # Reshape for GRU
        x = x.view(x.size(0), x.size(2), -1)  # Shape: (batch_size, channels * 4, (height // 4 + 2) * (width // 4 + 2))
        x = x.permute(0, 2, 1)  # Shape: (batch_size, (height // 4 + 2) * (width // 4 + 2), channels * 4)
        
        # GRU
        x, _ = self.gru(x)  # Shape: (batch_size, (height // 4 + 2) * (width // 4 + 2), 256)
        
        # TransformerDecoder
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)  # Shape: (batch_size, (height // 4 + 2) * (width // 4 + 2), 256)
        
        # AdaptiveLogSoftmaxWithLoss
        x = x.mean(dim=1)  # Shape: (batch_size, 256)
        output = self.adaptive_log_softmax.log_prob(x)  # Shape: (batch_size, 10)
        
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
