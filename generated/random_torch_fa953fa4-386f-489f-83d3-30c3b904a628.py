
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'LPPool1d', 'LazyConvTranspose2d', 'ReLU6', 'ConstantPad3d', 'LazyBatchNorm1d', 'GroupNorm', 'Hardswish', 'InstanceNorm2d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.lp_pool = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.relu6 = nn.ReLU6()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.batch_norm = nn.LazyBatchNorm1d()
        self.group_norm = nn.GroupNorm(num_groups=8, num_channels=32)
        self.hardswish = nn.Hardswish()
        self.instance_norm = nn.InstanceNorm2d(num_features=32)
        self.linear = nn.Linear(128, 10)

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lp_pool(x)
        
        # Reshape back for ConvTranspose2d
        x = x.view(x.size(0), 32, 16, 16)
        x = self.conv_transpose(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Pad the input
        x = self.pad(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.batch_norm(x)
        
        # Reshape back for GroupNorm
        x = x.view(x.size(0), 32, 16, 16)
        x = self.group_norm(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Flatten for Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
