
# This is a random torch model generated by the following modules: ['ModuleList', 'FractionalMaxPool3d', 'Linear', 'SoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.module_list = nn.ModuleList([
            nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5)),
            nn.FractionalMaxPool3d(kernel_size=2, output_size=(3, 3, 3)),
            nn.FractionalMaxPool3d(kernel_size=2, output_size=(2, 2, 2))
        ])
        self.fc1 = nn.Linear(2 * 2 * 2 * 10, 50)
        self.fc2 = nn.Linear(50, 10)
        self.loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply FractionalMaxPool3d layers from the ModuleList
        for layer in self.module_list:
            x = layer(x)
        
        # Flatten the output for the Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        
        # Compute the loss (assuming target is provided externally)
        # For demonstration, we'll create a dummy target
        target = torch.ones_like(x)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

