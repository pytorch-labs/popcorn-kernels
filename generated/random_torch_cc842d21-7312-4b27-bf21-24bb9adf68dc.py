
# This is a random torch model generated by the following modules: ['Transformer', 'GroupNorm', 'AvgPool1d', 'Unflatten', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer1 = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.group_norm1 = nn.GroupNorm(8, 64)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.unflatten = nn.Unflatten(1, (8, 8))
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.transformer2 = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.group_norm2 = nn.GroupNorm(8, 64)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # Transformer 1
        x = self.transformer1(x, x)
        
        # GroupNorm 1
        x = x.permute(1, 2, 0)  # (seq_len, d_model, batch_size)
        x = self.group_norm1(x)
        x = x.permute(2, 0, 1)  # (batch_size, seq_len, d_model)
        
        # AvgPool1d
        x = x.permute(0, 2, 1)  # (batch_size, d_model, seq_len)
        x = self.avg_pool1d(x)
        x = x.permute(0, 2, 1)  # (batch_size, seq_len // 2, d_model)
        
        # Unflatten
        x = x.view(batch_size, -1)  # Flatten to (batch_size, seq_len // 2 * d_model)
        x = self.unflatten(x)  # Unflatten to (batch_size, 8, 8)
        
        # PairwiseDistance
        x1 = x[:, 0, :]  # (batch_size, 8)
        x2 = x[:, 1, :]  # (batch_size, 8)
        x = self.pairwise_distance(x1, x2)  # (batch_size,)
        
        # Transformer 2
        x = x.unsqueeze(0).unsqueeze(-1)  # (1, batch_size, 1)
        x = self.transformer2(x, x)
        
        # GroupNorm 2
        x = x.permute(1, 2, 0)  # (batch_size, 1, 1)
        x = self.group_norm2(x)
        x = x.permute(2, 0, 1)  # (1, batch_size, 1)
        
        return x.squeeze(0).squeeze(-1)  # (batch_size,)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(10, 16, 64).cuda()  # (batch_size=10, seq_len=16, d_model=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

