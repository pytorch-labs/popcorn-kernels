
# This is a random torch model generated by the following modules: ['Linear', 'BatchNorm3d', 'ReLU', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 256)
        self.bn1 = nn.BatchNorm3d(8)
        self.relu1 = nn.ReLU()
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((7, 7))
        self.linear2 = nn.Linear(256, 128)
        self.bn2 = nn.BatchNorm3d(16)
        self.relu2 = nn.ReLU()

    def forward(self, x):
        # Reshape input to fit Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear1(x)
        
        # Reshape to fit BatchNorm3d
        x = x.view(x.size(0), 8, 4, 4, 4)
        x = self.bn1(x)
        
        # Reshape to fit ReLU
        x = x.view(x.size(0), -1)
        x = self.relu1(x)
        
        # Reshape to fit AdaptiveAvgPool2d
        x = x.view(x.size(0), 16, 16, 16)
        x = self.adaptive_avg_pool2d(x)
        
        # Reshape to fit Linear layer
        x = x.view(x.size(0), -1)
        x = self.linear2(x)
        
        # Reshape to fit BatchNorm3d
        x = x.view(x.size(0), 16, 4, 4, 4)
        x = self.bn2(x)
        
        # Reshape to fit ReLU
        x = x.view(x.size(0), -1)
        x = self.relu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
