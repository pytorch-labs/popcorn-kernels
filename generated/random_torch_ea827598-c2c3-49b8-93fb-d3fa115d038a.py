
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'AdaptiveMaxPool2d', 'RNNCellBase', 'Hardtanh', 'UpsamplingNearest2d', 'Sigmoid', 'ReflectionPad1d', 'FractionalMaxPool3d', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.rnn_cell = nn.RNNCell(10, 20)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.sigmoid = nn.Sigmoid()
        self.reflection_pad1d = nn.ReflectionPad1d(2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv_transpose3d(x)  # Shape: (batch_size, 10, depth_out, height_out, width_out)
        x = x.mean(dim=2)  # Reduce depth dimension to match AdaptiveMaxPool2d input
        x = self.adaptive_max_pool2d(x)  # Shape: (batch_size, 10, 16, 16)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, 10*16*16)
        x = self.rnn_cell(x)  # Shape: (batch_size, 20)
        x = self.hardtanh(x)  # Shape: (batch_size, 20)
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 20, 1, 1)
        x = self.upsampling_nearest2d(x)  # Shape: (batch_size, 20, 2, 2)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, 20*2*2)
        x = self.sigmoid(x)  # Shape: (batch_size, 80)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 80)
        x = self.reflection_pad1d(x)  # Shape: (batch_size, 1, 84)
        x = x.unsqueeze(1).unsqueeze(1)  # Shape: (batch_size, 1, 1, 1, 84)
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, 1, 8, 8, 8)
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, 512)
        x = self.log_softmax(x)  # Shape: (batch_size, 512)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 8, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

