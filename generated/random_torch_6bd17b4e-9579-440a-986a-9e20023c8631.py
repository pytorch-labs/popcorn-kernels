
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'Linear', 'ModuleDict', 'ParameterList', 'Softmax2d', 'LPPool1d', 'PoissonNLLLoss', 'AdaptiveMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.LocalResponseNorm(size=5)
        self.linear1 = nn.Linear(128, 256)
        self.linear2 = nn.Linear(256, 128)
        self.module_dict = nn.ModuleDict({
            'pool1': nn.LPPool1d(norm_type=2, kernel_size=3),
            'pool2': nn.AdaptiveMaxPool2d((5, 5))
        })
        self.param_list = nn.ParameterList([
            nn.Parameter(torch.randn(10)),
            nn.Parameter(torch.randn(10))
        ])
        self.softmax2d = nn.Softmax2d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply LocalResponseNorm
        x = self.lrn(x)
        
        # Reshape for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = F.relu(self.linear1(x))
        x = self.linear2(x)
        
        # Reshape for ModuleDict operations
        x = x.view(x.size(0), 1, -1)
        
        # Apply LPPool1d from ModuleDict
        x = self.module_dict['pool1'](x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(x.size(0), 1, x.size(1), x.size(2))
        
        # Apply AdaptiveMaxPool2d from ModuleDict
        x = self.module_dict['pool2'](x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Apply PoissonNLLLoss (assuming target is provided externally)
        # For demonstration, we create a dummy target
        target = torch.poisson(x)
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
