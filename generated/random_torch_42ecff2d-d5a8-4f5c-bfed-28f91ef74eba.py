
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'FractionalMaxPool3d', 'CircularPad3d', 'AdaptiveMaxPool1d', 'ReflectionPad3d', 'Sequential', 'Container', 'Flatten', 'GRUCell', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.circular_pad3d = nn.CircularPad3d(1)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=16)
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.sequential = nn.Sequential(
            nn.Conv3d(1, 10, kernel_size=3),
            nn.ReLU(),
            nn.Conv3d(10, 20, kernel_size=3),
            nn.ReLU()
        )
        self.container = nn.ModuleList([nn.Conv3d(20, 30, kernel_size=3), nn.ReLU()])
        self.flatten = nn.Flatten()
        self.gru_cell = nn.GRUCell(input_size=30*4*4*4, hidden_size=128)
        self.instance_norm3d = nn.InstanceNorm3d(128)

    def forward(self, x):
        x = self.zero_pad1d(x)
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.fractional_max_pool3d(x)
        x = self.circular_pad3d(x)
        x = self.adaptive_max_pool1d(x.view(x.size(0), x.size(1), -1))
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Reshape back to 3D
        x = self.reflection_pad3d(x)
        x = self.sequential(x)
        for layer in self.container:
            x = layer(x)
        x = self.flatten(x)
        hx = torch.zeros(x.size(0), 128).to(x.device)
        x = self.gru_cell(x, hx)
        x = x.unsqueeze(2).unsqueeze(3).unsqueeze(4)  # Reshape to 5D for InstanceNorm3d
        x = self.instance_norm3d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

