
# This is a random torch model generated by the following modules: ['CircularPad3d', 'LayerNorm', 'MultiMarginLoss', 'Threshold', 'Hardswish', 'LazyConv2d', 'PoissonNLLLoss', 'RNNBase', 'InstanceNorm2d', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad3d(1)
        self.layer_norm = nn.LayerNorm(64)
        self.threshold = nn.Threshold(0.1, 0.5)
        self.hardswish = nn.Hardswish()
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.rnn = nn.RNNBase(input_size=32, hidden_size=64, num_layers=2)
        self.instance_norm = nn.InstanceNorm2d(32)
        self.container = nn.Sequential(
            nn.LazyConv2d(out_channels=64, kernel_size=3),
            nn.Hardswish(),
            nn.InstanceNorm2d(64)
        )
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad(x)
        
        # Reshape for LayerNorm
        x = x.view(x.size(0), -1)
        x = self.layer_norm(x)
        x = x.view(-1, 1, 64, 64)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Apply LazyConv2d
        x = self.lazy_conv2d(x)
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Reshape for RNN
        x = x.view(x.size(0), x.size(1), -1)
        x, _ = self.rnn(x)
        
        # Reshape back for Container
        x = x.view(x.size(0), 32, 8, 8)
        x = self.container(x)
        
        # Reshape for MultiMarginLoss and PoissonNLLLoss
        x = x.view(x.size(0), -1)
        target = torch.randint(0, 64, (x.size(0),)).to(x.device)
        loss1 = self.multi_margin_loss(x, target)
        loss2 = self.poisson_nll_loss(x, target.float())
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
