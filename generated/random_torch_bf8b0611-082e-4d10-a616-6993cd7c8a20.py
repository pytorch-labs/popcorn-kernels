
# This is a random torch model generated by the following modules: ['ReflectionPad3d', 'CircularPad1d', 'MarginRankingLoss', 'ConvTranspose1d', 'AvgPool3d', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad3d(1)
        self.circular_pad = nn.CircularPad1d(2)
        self.conv_transpose = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.avg_pool = nn.AvgPool3d(kernel_size=2, stride=2)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.margin_loss = nn.MarginRankingLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.reflection_pad(x)
        
        # Reshape for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.circular_pad(x)
        
        # Reshape back for ConvTranspose1d
        x = x.view(x.size(0), 10, -1)
        x = self.conv_transpose(x)
        
        # Reshape for AvgPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.avg_pool(x)
        
        # Reshape for CosineSimilarity
        x1 = x.view(x.size(0), -1)
        x2 = torch.randn_like(x1)
        x = self.cosine_sim(x1, x2)
        
        # Reshape for MarginRankingLoss
        x = x.view(1, -1)
        target = torch.tensor([1.0])
        x = self.margin_loss(x, torch.zeros_like(x), target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

