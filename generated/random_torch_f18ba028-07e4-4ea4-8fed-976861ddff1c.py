
# This is a random torch model generated by the following modules: ['RNNCellBase', 'BatchNorm1d', 'Upsample', 'Tanhshrink', 'Softmax', 'CircularPad3d', 'ReflectionPad2d', 'ModuleDict', 'Softplus', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.batch_norm = nn.BatchNorm1d(256)
        self.upsample = nn.Upsample(scale_factor=2)
        self.tanhshrink = nn.Tanhshrink()
        self.softmax = nn.Softmax(dim=1)
        self.circular_pad = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.reflection_pad = nn.ReflectionPad2d(padding=(1, 1, 1, 1))
        self.module_dict = nn.ModuleDict({
            'softplus': nn.Softplus(),
            'replication_pad': nn.ReplicationPad2d(padding=(1, 1, 1, 1))
        })
        
    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Initialize hidden state for RNNCell
        hx = torch.zeros(batch_size, 256).to(x.device)
        
        # Process through RNNCell
        for t in range(seq_len):
            hx = self.rnn_cell(x[:, t, :], hx)
        
        # Apply BatchNorm1d
        x = self.batch_norm(hx)
        
        # Reshape for Upsample
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 256, 1, 1)
        x = self.upsample(x)  # Shape: (batch_size, 256, 2, 2)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply Softmax
        x = x.view(batch_size, -1)  # Flatten for Softmax
        x = self.softmax(x)
        
        # Reshape for CircularPad3d
        x = x.view(batch_size, 1, 16, 16)  # Shape: (batch_size, 1, 16, 16)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 1, 16, 16)
        x = self.circular_pad(x)  # Shape: (batch_size, 1, 3, 18, 18)
        
        # Reshape for ReflectionPad2d
        x = x.squeeze(1)  # Shape: (batch_size, 3, 18, 18)
        x = self.reflection_pad(x)  # Shape: (batch_size, 3, 20, 20)
        
        # Apply ModuleDict layers
        x = self.module_dict['softplus'](x)
        x = self.module_dict['replication_pad'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

