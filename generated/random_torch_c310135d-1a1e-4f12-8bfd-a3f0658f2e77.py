
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'AdaptiveMaxPool3d', 'LazyBatchNorm1d', 'Module', 'GaussianNLLLoss', 'ModuleDict', 'Tanhshrink', 'Sequential', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.module_dict = nn.ModuleDict({
            'tanhshrink': nn.Tanhshrink(),
            'sequential': nn.Sequential(
                nn.LazyBatchNorm1d(),
                nn.Tanhshrink(),
                nn.LazyBatchNorm1d()
            )
        })
        self.softmax2d = nn.Softmax2d()
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Reshape input to 5D for AdaptiveMaxPool3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.adaptive_max_pool3d(x)
        
        # Flatten the output for LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.lazy_batch_norm1d(x)
        
        # Apply ModuleDict operations
        x = self.module_dict['tanhshrink'](x)
        x = self.module_dict['sequential'](x)
        
        # Reshape for Softmax2d
        x = x.view(x.size(0), 1, int(x.size(1) ** 0.5), int(x.size(1) ** 0.5))
        x = self.softmax2d(x)
        
        # Dummy target for loss functions
        target = torch.randint(0, 2, (x.size(0), x.size(1), x.size(2), x.size(3)), device=x.device)
        var = torch.ones_like(x)
        
        # Apply loss functions (not typically done in forward, but included for module usage)
        loss1 = self.multi_margin_loss(x, target.view(-1))
        loss2 = self.gaussian_nll_loss(x, target, var)
        
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

