
# This is a random torch model generated by the following modules: ['TripletMarginWithDistanceLoss', 'ZeroPad1d', 'FeatureAlphaDropout', 'AdaptiveLogSoftmaxWithLoss', 'ReplicationPad3d', 'AvgPool2d', 'AlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.replication_pad3d = nn.ReplicationPad3d(1)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[4, 8])
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.zero_pad1d(x.view(x.size(0), x.size(1), -1))  # Reshape and apply ZeroPad1d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.feature_alpha_dropout(x)
        x = self.replication_pad3d(x)
        x = self.avg_pool2d(x)
        x = self.alpha_dropout(x)
        x = x.view(x.size(0), -1)  # Flatten for AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        return x

    def compute_loss(self, anchor, positive, negative):
        return self.triplet_loss(anchor, positive, negative)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

