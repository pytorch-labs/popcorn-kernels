
# This is a random torch model generated by the following modules: ['Hardswish', 'ELU', 'LazyInstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm3d()
        self.elu1 = nn.ELU()
        self.hardswish1 = nn.Hardswish()
        self.norm2 = nn.LazyInstanceNorm3d()
        self.elu2 = nn.ELU()
        self.hardswish2 = nn.Hardswish()
        self.norm3 = nn.LazyInstanceNorm3d()
        self.elu3 = nn.ELU()
        self.hardswish3 = nn.Hardswish()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.norm1(x)
        x = self.elu1(x)
        x = self.hardswish1(x)
        
        x = self.norm2(x)
        x = self.elu2(x)
        x = self.hardswish2(x)
        
        x = self.norm3(x)
        x = self.elu3(x)
        x = self.hardswish3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
