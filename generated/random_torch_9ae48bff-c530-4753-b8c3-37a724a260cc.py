
# This is a random torch model generated by the following modules: ['ConvTranspose2d', 'Linear', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(3, 16, kernel_size=4, stride=2, padding=1)
        self.avg_pool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.linear1 = nn.Linear(16 * 16 * 16, 128)
        self.linear2 = nn.Linear(128, 10)
        self.conv_transpose2 = nn.ConvTranspose2d(16, 32, kernel_size=4, stride=2, padding=1)
        self.avg_pool2 = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply ConvTranspose2d to increase spatial dimensions
        x = self.conv_transpose1(x)
        # Apply AvgPool2d to reduce spatial dimensions
        x = self.avg_pool1(x)
        # Apply ConvTranspose2d again
        x = self.conv_transpose2(x)
        # Apply AvgPool2d again
        x = self.avg_pool2(x)
        # Flatten the tensor for the Linear layer
        x = x.view(x.size(0), -1)
        # Apply Linear layer
        x = F.relu(self.linear1(x))
        # Apply final Linear layer
        x = self.linear2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
