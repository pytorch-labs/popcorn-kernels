
# This is a random torch model generated by the following modules: ['Identity', 'LazyBatchNorm2d', 'TransformerEncoderLayer', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.instance_norm = nn.LazyInstanceNorm1d()
        self.fc = nn.LazyLinear(10)

    def forward(self, x):
        x = self.identity(x)
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        x = self.transformer_encoder_layer(x)
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)  # Reshape back
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(batch_size, channels, -1)
        x = self.instance_norm(x)
        x = x.view(batch_size, channels, height, width)
        
        # Global average pooling and flatten
        x = x.mean(dim=[2, 3])
        x = self.fc(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
