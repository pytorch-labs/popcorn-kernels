
# This is a random torch model generated by the following modules: ['MaxPool3d', 'Linear', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.batchnorm1 = nn.LazyBatchNorm1d()
        self.batchnorm2 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.maxpool3d(x)
        
        # Flatten the tensor to 2D (batch, features)
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers with BatchNorm in between
        x = self.linear1(x)
        x = self.batchnorm1(x)
        x = F.relu(x)
        
        x = self.linear2(x)
        x = self.batchnorm2(x)
        x = F.relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 64, 64).cuda()  # Example input: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

