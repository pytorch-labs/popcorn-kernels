
# This is a random torch model generated by the following modules: ['Softmin', 'RNNCellBase', 'Softshrink', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softmin = nn.Softmin(dim=1)
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.conv_transpose3d = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d_3 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)

    def forward(self, x):
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape for RNNCellBase
        batch_size = x.size(0)
        x = x.view(batch_size, -1, 128)  # Assuming input size is compatible with RNNCellBase
        hx = torch.zeros(batch_size, 256).to(x.device)
        x = self.rnn_cell(x[:, 0, :], hx)  # Process the first sequence element
        
        # Reshape for Softshrink
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions for 3D convolution
        x = self.softshrink(x)
        
        # Apply LazyConvTranspose3d layers
        x = self.conv_transpose3d(x)
        x = self.conv_transpose3d_2(x)
        x = self.conv_transpose3d_3(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
