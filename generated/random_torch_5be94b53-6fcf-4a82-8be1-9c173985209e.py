
# This is a random torch model generated by the following modules: ['AdaptiveLogSoftmaxWithLoss', 'LocalResponseNorm', 'MaxUnpool3d', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3, stride=1, padding=1)
        self.lrn1 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.lazy_conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3, stride=1, padding=1)
        self.lrn2 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=32, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.lazy_conv1(x)
        x = self.lrn1(x)
        x = self.lazy_conv2(x)
        x = self.lrn2(x)
        
        # Reshape for MaxUnpool3d (assuming we add a dummy depth dimension)
        x = x.unsqueeze(2)  # Add depth dimension
        x = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x, indices = x
        x = self.max_unpool3d(x, indices)
        
        # Remove the depth dimension
        x = x.squeeze(2)
        
        # Flatten for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        x = self.adaptive_log_softmax.log_prob(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3 input channels
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

