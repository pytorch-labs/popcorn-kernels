
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'FractionalMaxPool3d', 'TripletMarginWithDistanceLoss', 'LogSigmoid', 'InstanceNorm1d', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad3d(1)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.instance_norm = nn.InstanceNorm1d(64)
        self.avg_pool = nn.AvgPool3d(kernel_size=2)
        self.log_sigmoid = nn.LogSigmoid()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Apply ReplicationPad3d
        x = self.replication_pad(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool(x)
        
        # Reshape for InstanceNorm1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten spatial dimensions
        x = self.instance_norm(x)
        x = x.view(batch_size, channels, depth, height, width)  # Reshape back
        
        # Apply AvgPool3d
        x = self.avg_pool(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # For TripletMarginWithDistanceLoss, we need anchor, positive, and negative samples
        # Here, we use the same input as anchor, positive, and negative for simplicity
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

