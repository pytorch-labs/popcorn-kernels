
# This is a random torch model generated by the following modules: ['Conv1d', 'ModuleDict', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.module_dict = nn.ModuleDict({
            'fc1': nn.Linear(20 * 12, 50),
            'fc2': nn.Linear(50, 1)
        })
        self.loss_fn = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 1, sequence_length)
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = F.relu(self.module_dict['fc1'](x))
        x = self.module_dict['fc2'](x)
        return x

    def compute_loss(self, output, target):
        return self.loss_fn(output, target)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape (batch_size=1, channels=1, sequence_length=100)
    target = torch.randn(1, 1).cuda()  # Example target shape (batch_size=1, output_size=1)
    return [x, target]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

