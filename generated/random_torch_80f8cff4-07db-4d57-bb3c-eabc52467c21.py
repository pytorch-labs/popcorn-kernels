
# This is a random torch model generated by the following modules: ['PReLU', 'InstanceNorm1d', 'UpsamplingBilinear2d', 'AdaptiveAvgPool1d', 'AvgPool2d', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.instance_norm1d = nn.InstanceNorm1d(64)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(128)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2, stride=2)
        self.dropout3d = nn.Dropout3d(p=0.5)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.prelu1(x)  # Apply PReLU
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.instance_norm1d(x)  # Apply InstanceNorm1d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 4D
        x = self.upsampling_bilinear2d(x)  # Apply UpsamplingBilinear2d
        x = self.avg_pool2d(x)  # Apply AvgPool2d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        x = x.unsqueeze(2)  # Add a dimension to make it 3D
        x = x.unsqueeze(3)  # Add another dimension to make it 4D
        x = self.dropout3d(x)  # Apply Dropout3d
        x = self.prelu2(x)  # Apply PReLU again
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size=1, channels=3, height=64, width=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
