
# This is a random torch model generated by the following modules: ['Softplus', 'LazyBatchNorm1d', 'LazyLinear', 'LPPool1d', 'Dropout3d', 'ReflectionPad1d', 'Sequential', 'CTCLoss', 'Unfold', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.bn1 = nn.LazyBatchNorm1d()
        self.linear1 = nn.LazyLinear(128)
        self.lp_pool = nn.LPPool1d(norm_type=2, kernel_size=3)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.sequential = nn.Sequential(
            nn.LazyLinear(64),
            nn.Softplus(),
            nn.LazyLinear(32)
        )
        self.ctc_loss = nn.CTCLoss()
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.bn1(x)
        
        # Apply LazyLinear
        x = self.linear1(x)
        
        # Reshape for LPPool1d
        x = x.unsqueeze(1)
        x = self.lp_pool(x)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(1).unsqueeze(1)
        x = self.dropout3d(x)
        
        # Reshape for ReflectionPad1d
        x = x.squeeze(1).squeeze(1)
        x = self.reflection_pad(x)
        
        # Apply Sequential
        x = self.sequential(x)
        
        # Reshape for Unfold
        x = x.view(x.size(0), 1, 8, 8)
        x = self.unfold(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
