
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'Linear', 'SELU', 'FractionalMaxPool2d', 'Upsample', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.sync_bn1 = nn.SyncBatchNorm(3)  # Assuming input has 3 channels
        self.linear1 = nn.Linear(3, 16)
        self.selu1 = nn.SELU()
        self.frac_max_pool1 = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.upsample1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.elu1 = nn.ELU()
        self.linear2 = nn.Linear(16, 10)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.sync_bn1(x)
        x = x.permute(0, 2, 3, 1)  # Reshape to (batch_size, height, width, channels)
        x = self.linear1(x)
        x = self.selu1(x)
        x = x.permute(0, 3, 1, 2)  # Reshape back to (batch_size, channels, height, width)
        x = self.frac_max_pool1(x)
        x = self.upsample1(x)
        x = self.elu1(x)
        x = x.permute(0, 2, 3, 1)  # Reshape to (batch_size, height, width, channels)
        x = self.linear2(x)
        x = x.mean(dim=[1, 2])  # Global average pooling
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

