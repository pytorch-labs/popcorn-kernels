
# This is a random torch model generated by the following modules: ['LazyConv3d', 'ConstantPad1d', 'Softmax2d', 'LeakyReLU', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.pad1 = nn.ConstantPad1d(padding=2, value=0)
        self.softmax2d = nn.Softmax2d()
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.rms_norm = RMSNorm(16)  # Assuming RMSNorm is a custom layer

    def forward(self, x):
        # Apply LazyConv3d
        x = self.conv1(x)
        
        # Reshape to 2D for ConstantPad1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        
        # Apply ConstantPad1d
        x = self.pad1(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, -1)
        
        # Apply Softmax2d
        x = self.softmax2d(x[:, :, 0, :, :])  # Apply Softmax2d on the first depth slice
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        return x

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=1) * self.scale * self.gamma

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
