
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'AdaptiveMaxPool1d', 'Sigmoid', 'LazyBatchNorm3d', 'AvgPool2d', 'TransformerEncoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.avg_pool = nn.AvgPool2d(kernel_size=2)
        self.transformer_encoder = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=32)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # Apply batch norm
        x = x.squeeze(2)  # Remove depth dimension for 2D pooling
        x = self.avg_pool(x)  # Apply average pooling
        x = x.flatten(2)  # Flatten height and width dimensions
        x = x.permute(2, 0, 1)  # Reshape for transformer (seq_len, batch_size, features)
        x = self.transformer_encoder(x)  # Apply transformer encoder
        x = self.transformer_decoder(x, x)  # Apply transformer decoder
        x = x.permute(1, 2, 0)  # Reshape for adaptive max pooling
        x = self.adaptive_max_pool(x)  # Apply adaptive max pooling
        x = x.mean(dim=2)  # Reduce sequence dimension
        x = self.sigmoid(x)  # Apply sigmoid activation
        return x


def get_inputs():
    # Randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # Randomly generate tensors required for initialization based on the model architecture
    return []

