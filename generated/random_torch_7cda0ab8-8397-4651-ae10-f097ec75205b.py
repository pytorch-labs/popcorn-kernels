
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'LazyBatchNorm1d', 'ConvTranspose3d', 'Bilinear', 'PairwiseDistance', 'CrossEntropyLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.bilinear = nn.Bilinear(10, 10, 20)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for LazyBatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.lazy_batch_norm1d(x)
        
        # Reshape for ConvTranspose3d
        x = x.view(x.size(0), 1, 10, 10, 10)
        x = self.conv_transpose3d(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), 10, -1)
        x = self.bilinear(x, x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)
        x = self.pairwise_distance(x, x)
        
        # Reshape for CrossEntropyLoss
        x = x.view(x.size(0), -1)
        x = self.cross_entropy_loss(x, torch.zeros(x.size(0), dtype=torch.long))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

