
# This is a random torch model generated by the following modules: ['ReplicationPad1d', 'LazyConvTranspose1d', 'SiLU', 'LazyBatchNorm2d', 'GELU', 'AvgPool1d', 'Upsample', 'LazyConvTranspose2d', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad1d = nn.ReplicationPad1d(2)
        self.lazy_conv_transpose1d_1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.silu = nn.SiLU()
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.gelu = nn.GELU()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.lazy_conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=2)

    def forward(self, x):
        # Assuming input is 1D, we start with 1D operations
        x = self.replication_pad1d(x)
        x = self.lazy_conv_transpose1d_1(x)
        x = self.silu(x)
        x = self.avg_pool1d(x)
        
        # Reshape to 2D for 2D operations
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.lazy_batch_norm2d(x)
        x = self.gelu(x)
        x = self.lazy_conv_transpose2d(x)
        x = self.upsample(x)
        
        # Reshape back to 1D for 1D operations
        x = x.squeeze(1)  # Remove the channel dimension
        x = self.max_unpool1d(x, indices=torch.arange(x.size(2)).unsqueeze(0).unsqueeze(0).repeat(x.size(0), 1, 1))
        x = self.lazy_conv_transpose1d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 128).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

