
# This is a random torch model generated by the following modules: ['ModuleList', 'UpsamplingBilinear2d', 'ConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.layers = nn.ModuleList([
            nn.ConvTranspose2d(3, 16, kernel_size=3, stride=2, padding=1),
            nn.UpsamplingBilinear2d(scale_factor=2),
            nn.ConvTranspose2d(16, 32, kernel_size=3, stride=2, padding=1),
            nn.UpsamplingBilinear2d(scale_factor=2),
            nn.ConvTranspose2d(32, 64, kernel_size=3, stride=2, padding=1)
        ])

    def forward(self, x):
        for layer in self.layers:
            x = layer(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
