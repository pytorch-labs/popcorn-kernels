
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool1d', 'RNNBase', 'AvgPool3d', 'CELU', 'Hardsigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=10)
        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.celu = nn.CELU()
        self.hardsigmoid = nn.Hardsigmoid()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        # Reshape to 1D for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, length)
        x = self.adaptive_avg_pool1d(x)  # Output shape: (batch_size, channels, 10)
        
        # Reshape for RNN
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, 10, channels)
        x, _ = self.rnn(x)  # Output shape: (batch_size, 10, 20)
        
        # Reshape for AvgPool3d
        x = x.unsqueeze(1)  # Add a dimension for channels: (batch_size, 1, 10, 20)
        x = x.unsqueeze(4)  # Add a dimension for depth: (batch_size, 1, 10, 20, 1)
        x = self.avg_pool3d(x)  # Output shape: (batch_size, 1, 5, 10, 1)
        
        # Reshape for CELU
        x = x.squeeze(4).squeeze(1)  # Remove extra dimensions: (batch_size, 5, 10)
        x = self.celu(x)  # Output shape: (batch_size, 5, 10)
        
        # Reshape for Hardsigmoid
        x = x.view(x.size(0), -1)  # Flatten: (batch_size, 50)
        x = self.hardsigmoid(x)  # Output shape: (batch_size, 50)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 100).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

