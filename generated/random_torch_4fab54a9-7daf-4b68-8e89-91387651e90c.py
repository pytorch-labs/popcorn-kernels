
# This is a random torch model generated by the following modules: ['LogSigmoid', 'MaxUnpool2d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.max_unpool1 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.max_unpool2 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.gelu1 = nn.GELU()
        self.gelu2 = nn.GELU()
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, height, width)
        batch_size, channels, height, width = x.shape
        
        # Apply GELU activation
        x = self.gelu1(x)
        
        # Perform max pooling to get indices for unpooling
        x, indices1 = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        
        # Apply GELU activation again
        x = self.gelu2(x)
        
        # Perform max pooling to get indices for unpooling
        x, indices2 = F.max_pool2d(x, kernel_size=2, stride=2, return_indices=True)
        
        # Apply MaxUnpool2d to unpool the tensor
        x = self.max_unpool1(x, indices2)
        x = self.max_unpool2(x, indices1)
        
        # Apply LogSigmoid activation
        x = self.log_sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

