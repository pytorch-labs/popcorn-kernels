
# This is a random torch model generated by the following modules: ['ELU', 'Tanhshrink', 'Hardtanh', 'AvgPool2d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu = nn.ELU()
        self.tanhshrink = nn.Tanhshrink()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.avgpool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.fractional_maxpool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))

    def forward(self, x):
        # Apply ELU activation
        x = self.elu(x)
        
        # Apply Tanhshrink activation
        x = self.tanhshrink(x)
        
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Apply AvgPool2d
        x = self.avgpool(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_maxpool(x)
        
        # Reshape the output to a 1D tensor
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
