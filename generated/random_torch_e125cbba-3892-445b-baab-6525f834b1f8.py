
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'ConvTranspose2d', 'Fold', 'CELU', 'HingeEmbeddingLoss', 'UpsamplingBilinear2d', 'MSELoss', 'ZeroPad1d', 'LazyInstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.conv_transpose2d = nn.ConvTranspose2d(3, 6, kernel_size=3, stride=2)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.celu = nn.CELU()
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm2d(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsampling_bilinear2d(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1)
        
        # Apply ZeroPad1d
        x = self.zero_pad1d(x)
        
        # Reshape back for Fold
        x = x.view(x.size(0), 6, 8, 8)
        
        # Apply Fold
        x = self.fold(x)
        
        # Compute HingeEmbeddingLoss (dummy target for demonstration)
        target = torch.ones_like(x)
        hinge_loss = self.hinge_embedding_loss(x, target)
        
        # Compute MSELoss (dummy target for demonstration)
        mse_loss = self.mse_loss(x, target)
        
        # Return the sum of losses for demonstration purposes
        return hinge_loss + mse_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

