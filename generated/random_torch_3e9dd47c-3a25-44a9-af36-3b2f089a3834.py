
# This is a random torch model generated by the following modules: ['Conv3d', 'CrossMapLRN2d', 'GRU', 'FractionalMaxPool3d', 'MultiheadAttention']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.lrn = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.gru = nn.GRU(input_size=20, hidden_size=50, num_layers=2, batch_first=True)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.multihead_attention = nn.MultiheadAttention(embed_dim=50, num_heads=5)

    def forward(self, x):
        # Apply Conv3d layers
        x = F.relu(self.conv3d_1(x))
        x = F.relu(self.conv3d_2(x))
        
        # Reshape for CrossMapLRN2d (assuming 4D input)
        x = x.permute(0, 2, 1, 3, 4)  # Swap channels and depth
        x = x.reshape(-1, x.size(2), x.size(3), x.size(4))  # Flatten batch and depth
        x = self.lrn(x)
        
        # Reshape back to 5D
        x = x.reshape(-1, 20, x.size(1), x.size(2), x.size(3))
        x = x.permute(0, 2, 1, 3, 4)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape for GRU (flatten spatial dimensions)
        x = x.permute(0, 2, 1, 3, 4)  # Swap channels and depth
        x = x.reshape(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x, _ = self.gru(x)
        
        # Reshape for MultiheadAttention
        x = x.permute(1, 0, 2)  # (seq_len, batch, embed_dim)
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(1, 0, 2)  # (batch, seq_len, embed_dim)
        
        # Flatten and return
        x = x.reshape(x.size(0), -1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

