
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'Softshrink', 'MaxUnpool3d', 'Tanh', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.softshrink1 = nn.Softshrink()
        self.maxunpool1 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.tanh1 = nn.Tanh()
        self.convtranspose1 = nn.ConvTranspose1d(10, 20, kernel_size=5, stride=2)
        self.bn2 = nn.LazyBatchNorm3d()
        self.softshrink2 = nn.Softshrink()
        self.maxunpool2 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.tanh2 = nn.Tanh()
        self.convtranspose2 = nn.ConvTranspose1d(20, 30, kernel_size=5, stride=2)
        self.bn3 = nn.LazyBatchNorm3d()
        self.softshrink3 = nn.Softshrink()
        self.maxunpool3 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.tanh3 = nn.Tanh()
        self.convtranspose3 = nn.ConvTranspose1d(30, 40, kernel_size=5, stride=2)
        self.bn4 = nn.LazyBatchNorm3d()
        self.softshrink4 = nn.Softshrink()
        self.maxunpool4 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.tanh4 = nn.Tanh()
        self.convtranspose4 = nn.ConvTranspose1d(40, 50, kernel_size=5, stride=2)
        self.bn5 = nn.LazyBatchNorm3d()
        self.softshrink5 = nn.Softshrink()
        self.maxunpool5 = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.tanh5 = nn.Tanh()
        self.convtranspose5 = nn.ConvTranspose1d(50, 60, kernel_size=5, stride=2)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        x = self.softshrink1(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten to 3D for ConvTranspose1d
        x = self.convtranspose1(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # Reshape back to 5D
        x = self.maxunpool1(x)
        x = self.tanh1(x)
        
        x = self.bn2(x)
        x = self.softshrink2(x)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.convtranspose2(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.maxunpool2(x)
        x = self.tanh2(x)
        
        x = self.bn3(x)
        x = self.softshrink3(x)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.convtranspose3(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.maxunpool3(x)
        x = self.tanh3(x)
        
        x = self.bn4(x)
        x = self.softshrink4(x)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.convtranspose4(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.maxunpool4(x)
        x = self.tanh4(x)
        
        x = self.bn5(x)
        x = self.softshrink5(x)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.convtranspose5(x)
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x = self.maxunpool5(x)
        x = self.tanh5(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

