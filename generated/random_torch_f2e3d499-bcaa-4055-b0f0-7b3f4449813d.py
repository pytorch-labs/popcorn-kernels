
# This is a random torch model generated by the following modules: ['LocalResponseNorm', 'Conv2d', 'UpsamplingNearest2d', 'ChannelShuffle', 'ReplicationPad2d', 'PReLU', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lrn = nn.LocalResponseNorm(size=5)
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.channel_shuffle = nn.ChannelShuffle(groups=4)
        self.replication_pad = nn.ReplicationPad2d(padding=2)
        self.prelu = nn.PReLU()
        self.container = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.PReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.PReLU(),
            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.PReLU(),
        )

    def forward(self, x):
        x = self.lrn(x)
        x = self.conv1(x)
        x = self.upsample(x)
        x = self.channel_shuffle(x)
        x = self.replication_pad(x)
        x = self.prelu(x)
        x = self.container(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
