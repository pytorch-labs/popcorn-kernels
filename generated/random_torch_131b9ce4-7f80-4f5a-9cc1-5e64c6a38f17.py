
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'MSELoss', 'SyncBatchNorm', 'LazyConvTranspose1d', 'LeakyReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=512, nhead=8), num_layers=3
        )
        self.sync_batch_norm = nn.SyncBatchNorm(512)
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=256, kernel_size=3, stride=2)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # TransformerDecoder expects input of shape (seq_len, batch_size, d_model)
        x = x.permute(1, 0, 2)
        memory = torch.zeros_like(x)  # Dummy memory for TransformerDecoder
        x = self.transformer_decoder(x, memory)
        
        # SyncBatchNorm expects input of shape (batch_size, channels, seq_len)
        x = x.permute(1, 2, 0)
        x = self.sync_batch_norm(x)
        
        # LazyConvTranspose1d expects input of shape (batch_size, channels, seq_len)
        x = self.conv_transpose1d(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Compute MSE loss with a dummy target
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 512).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
