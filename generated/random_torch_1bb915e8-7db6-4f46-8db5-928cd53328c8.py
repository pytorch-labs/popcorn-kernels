
# This is a random torch model generated by the following modules: ['MultiheadAttention', 'AdaptiveAvgPool3d', 'AdaptiveMaxPool1d', 'LazyInstanceNorm2d', 'Dropout1d', 'RNN']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.multihead_attention = nn.MultiheadAttention(embed_dim=64, num_heads=8)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(32)
        self.lazy_instance_norm2d = nn.LazyInstanceNorm2d()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.rnn = nn.RNN(input_size=64, hidden_size=128, num_layers=2, batch_first=True)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, embed_dim)
        batch_size, seq_len, embed_dim = x.shape
        
        # MultiheadAttention expects (seq_len, batch_size, embed_dim)
        x = x.permute(1, 0, 2)
        x, _ = self.multihead_attention(x, x, x)
        x = x.permute(1, 0, 2)  # Back to (batch_size, seq_len, embed_dim)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(batch_size, 1, seq_len, embed_dim, 1)
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(batch_size, -1, seq_len * embed_dim)
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for LazyInstanceNorm2d
        x = x.view(batch_size, -1, 32, 32)
        x = self.lazy_instance_norm2d(x)
        
        # Reshape for Dropout1d
        x = x.view(batch_size, -1, 32 * 32)
        x = self.dropout1d(x)
        
        # Reshape for RNN
        x = x.view(batch_size, -1, 64)
        x, _ = self.rnn(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, embed_dim)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

