
# This is a random torch model generated by the following modules: ['LazyConv1d', 'CTCLoss', 'CrossEntropyLoss', 'Softmax2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.softmax2d = nn.Softmax2d()
        self.ctc_loss = nn.CTCLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply the first LazyConv1d layer
        x = self.conv1(x)
        
        # Apply the second LazyConv1d layer
        x = self.conv2(x)
        
        # Reshape the tensor to fit Softmax2d input requirements
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        x = self.softmax2d(x)
        
        # Reshape the tensor to fit CTC Loss input requirements
        x = x.squeeze(1)  # Remove the dummy channel dimension
        x = x.permute(2, 0, 1)  # CTC Loss expects (T, N, C)
        
        # Dummy target for CTC Loss (assuming input is of shape (N, C, L))
        target = torch.randint(0, x.size(2), (x.size(1), x.size(0)), dtype=torch.long)
        input_lengths = torch.full((x.size(1),), x.size(0), dtype=torch.long)
        target_lengths = torch.randint(1, x.size(0) + 1, (x.size(1),), dtype=torch.long)
        
        # Compute CTC Loss
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Reshape the tensor to fit CrossEntropyLoss input requirements
        x = x.permute(1, 2, 0)  # CrossEntropyLoss expects (N, C, T)
        x = x.reshape(-1, x.size(2))  # Flatten the batch and sequence dimensions
        
        # Dummy target for CrossEntropyLoss
        target = torch.randint(0, x.size(1), (x.size(0),), dtype=torch.long)
        
        # Compute CrossEntropyLoss
        cross_entropy_loss = self.cross_entropy_loss(x, target)
        
        # Return the sum of the losses as the final output
        return ctc_loss + cross_entropy_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 128).cuda()  # Example input shape (N, C, L)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
