
# This is a random torch model generated by the following modules: ['CircularPad3d', 'AdaptiveAvgPool3d', 'AvgPool3d', 'Dropout2d', 'MaxUnpool2d', 'Dropout3d', 'ChannelShuffle', 'InstanceNorm1d', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad3d = nn.CircularPad3d(1)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((16, 16, 16))
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.instance_norm1d = nn.InstanceNorm1d(16)
        self.hardshrink = nn.Hardshrink()

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Reshape for Dropout2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.dropout2d(x)
        
        # Reshape back for MaxUnpool2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.max_unpool2d(x, indices=torch.zeros_like(x, dtype=torch.long))
        
        # Apply Dropout3d
        x = self.dropout3d(x)
        
        # Reshape for ChannelShuffle
        x = x.view(x.size(0), x.size(1), -1)
        x = self.channel_shuffle(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.instance_norm1d(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

