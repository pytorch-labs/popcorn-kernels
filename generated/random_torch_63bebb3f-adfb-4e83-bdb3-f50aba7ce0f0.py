
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'Softsign', 'ELU', 'MaxPool2d', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.softsign = nn.Softsign()
        self.elu1 = nn.ELU()
        self.elu2 = nn.ELU()
        self.maxpool = nn.MaxPool2d(kernel_size=2)
        self.embedding_bag = nn.EmbeddingBag(1000, 10, mode='mean')

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        x = self.softsign(x)
        x = self.elu1(x)
        
        # Reshape to 4D (batch, channels, height, width) for MaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        x = self.maxpool(x)
        
        # Reshape back to 5D for BatchNorm3d
        x = x.view(x.size(0), x.size(1), 1, x.size(2), x.size(3))
        x = self.bn2(x)
        x = self.elu2(x)
        
        # Reshape to 2D (batch, features) for EmbeddingBag
        x = x.view(x.size(0), -1)
        x = self.embedding_bag(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

