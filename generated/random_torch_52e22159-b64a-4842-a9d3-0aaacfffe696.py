
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'GRUCell', 'BCEWithLogitsLoss', 'BatchNorm1d', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=16, kernel_size=4, stride=2, padding=1)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=64)
        self.loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(1)  # Add a dummy dimension to make it 5D
        x = self.max_pool3d(x)
        
        # Flatten for BatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.batch_norm1d(x)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Apply BCEWithLogitsLoss (assuming a target is provided externally)
        # For demonstration, we'll just return the output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Assuming 3-channel input
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

