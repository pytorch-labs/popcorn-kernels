
# This is a random torch model generated by the following modules: ['LogSigmoid', 'PReLU', 'PixelShuffle', 'ReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.relu = nn.ReLU()
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Apply PReLU
        x = self.prelu1(x)
        
        # Reshape for PixelShuffle (assuming input is 4D: batch, channels, height, width)
        # PixelShuffle requires the number of channels to be divisible by (upscale_factor ** 2)
        # Here, we assume the input has 4 channels to make it divisible by 4 (2^2)
        x = x.view(x.size(0), 4, x.size(2), x.size(3))
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply PReLU again
        x = self.prelu2(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    # Assuming input is 4D: batch, channels, height, width
    # We set channels to 4 to make it compatible with PixelShuffle
    x = torch.randn(1, 4, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
