
# This is a random torch model generated by the following modules: ['PixelShuffle', 'LeakyReLU', 'MultiMarginLoss', 'Hardswish', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.hardswish = nn.Hardswish()
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.nll_loss_2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Reshape for MultiMarginLoss
        x = x.view(x.size(0), -1)  # Flatten the tensor
        target = torch.randint(0, x.size(1), (x.size(0),)).to(x.device)
        loss1 = self.multi_margin_loss(x, target)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), 1, int(x.size(1) ** 0.5), int(x.size(1) ** 0.5))  # Reshape to 4D
        target = torch.randint(0, x.size(1), (x.size(0), x.size(2), x.size(3))).to(x.device)
        loss2 = self.nll_loss_2d(x, target)
        
        # Return the sum of the losses
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 16, 16).cuda()  # Input shape compatible with PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

