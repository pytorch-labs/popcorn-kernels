
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool2d', 'ConstantPad3d', 'InstanceNorm2d', 'ModuleList', 'Container', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.norm = nn.InstanceNorm2d(num_features=3)
        self.avg_pool = nn.AdaptiveAvgPool2d(output_size=(5, 5))
        
        # Using ModuleList to hold multiple Sequential containers
        self.module_list = nn.ModuleList([
            nn.Sequential(
                nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0),
                nn.InstanceNorm2d(num_features=3)
            ),
            nn.Sequential(
                nn.AdaptiveAvgPool2d(output_size=(5, 5)),
                nn.InstanceNorm2d(num_features=3)
            )
        ])
        
        # Using Container to hold multiple layers
        self.container = nn.Container({
            'pad': nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0),
            'norm': nn.InstanceNorm2d(num_features=3)
        })

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Apply instance normalization
        x = self.norm(x)
        
        # Apply adaptive average pooling
        x = self.avg_pool(x)
        
        # Apply layers from ModuleList
        for module in self.module_list:
            x = module(x)
        
        # Apply layers from Container
        x = self.container['pad'](x)
        x = self.container['norm'](x)
        
        # Reshape the output to a 1D tensor
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
