
# This is a random torch model generated by the following modules: ['Softsign', 'AvgPool2d', 'LocalResponseNorm', 'LSTM']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.avgpool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.avgpool2 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.local_response_norm = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.lstm = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.fc = nn.Linear(128, 10)

    def forward(self, x):
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply AvgPool2d twice
        x = self.avgpool1(x)
        x = self.avgpool2(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Reshape for LSTM
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels * height, width)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply LSTM
        x, _ = self.lstm(x)
        
        # Take the last output of the LSTM
        x = x[:, -1, :]
        
        # Apply a fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 height and width
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

