
# This is a random torch model generated by the following modules: ['ReLU6', 'AlphaDropout', 'LazyConv1d', 'RNNBase', 'Unflatten', 'MaxPool1d', 'PoissonNLLLoss', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm3d()
        self.relu6 = nn.ReLU6()
        self.maxpool1 = nn.MaxPool1d(kernel_size=2)
        self.rnn = nn.RNNBase(input_size=32, hidden_size=64, num_layers=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(32, 8))
        self.conv2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.bn2 = nn.LazyBatchNorm3d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 32, length-2)
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 32, 1, 1, length-2)
        x = self.bn1(x)  # Shape: (batch_size, 32, 1, 1, length-2)
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, 32, length-2)
        x = self.relu6(x)  # Shape: (batch_size, 32, length-2)
        x = self.maxpool1(x)  # Shape: (batch_size, 32, (length-2)//2)
        x = x.permute(2, 0, 1)  # Shape: ((length-2)//2, batch_size, 32)
        x, _ = self.rnn(x)  # Shape: ((length-2)//2, batch_size, 64)
        x = x.permute(1, 2, 0)  # Shape: (batch_size, 64, (length-2)//2)
        x = self.alpha_dropout(x)  # Shape: (batch_size, 64, (length-2)//2)
        x = self.unflatten(x)  # Shape: (batch_size, 32, 8, (length-2)//2)
        x = x.view(x.size(0), 32, -1)  # Shape: (batch_size, 32, 8*(length-2)//2)
        x = self.conv2(x)  # Shape: (batch_size, 64, 8*(length-2)//2 - 2)
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 64, 1, 1, 8*(length-2)//2 - 2)
        x = self.bn2(x)  # Shape: (batch_size, 64, 1, 1, 8*(length-2)//2 - 2)
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, 64, 8*(length-2)//2 - 2)
        x = self.relu6(x)  # Shape: (batch_size, 64, 8*(length-2)//2 - 2)
        x = x.mean(dim=2)  # Shape: (batch_size, 64)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape: (batch_size=1, channels=3, length=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
