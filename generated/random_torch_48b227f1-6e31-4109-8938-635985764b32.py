
# This is a random torch model generated by the following modules: ['GLU', 'Conv1d', 'TransformerDecoder', 'MaxUnpool3d', 'ConstantPad3d', 'CrossEntropyLoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.glu = nn.GLU(dim=1)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=10, nhead=2), num_layers=2
        )
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.celu = nn.CELU()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1d(x)  # Shape: (batch_size, 10, length - kernel_size + 1)
        x = self.glu(x)  # Shape: (batch_size, 5, length - kernel_size + 1)
        
        # Reshape for TransformerDecoder
        x = x.permute(2, 0, 1)  # Shape: (length - kernel_size + 1, batch_size, 5)
        x = self.transformer_decoder(x, x)  # Shape: (length - kernel_size + 1, batch_size, 5)
        x = x.permute(1, 2, 0)  # Shape: (batch_size, 5, length - kernel_size + 1)
        
        # Reshape for MaxUnpool3d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 5, length - kernel_size + 1, 1)
        x = self.constant_pad3d(x)  # Shape: (batch_size, 1, 7, length - kernel_size + 3, 3)
        x, _ = torch.max(x, dim=2, keepdim=True)  # Dummy max pooling for unpooling
        x = self.max_unpool3d(x, torch.zeros_like(x))  # Shape: (batch_size, 1, 14, 2*(length - kernel_size + 3), 6)
        
        # Reshape for CELU
        x = x.squeeze(1)  # Shape: (batch_size, 14, 2*(length - kernel_size + 3), 6)
        x = self.celu(x)  # Shape: (batch_size, 14, 2*(length - kernel_size + 3), 6)
        
        # Flatten for CrossEntropyLoss
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 14 * 2*(length - kernel_size + 3) * 6)
        target = torch.randint(0, 10, (x.size(0),), device=x.device)  # Dummy target for loss
        loss = self.cross_entropy_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

