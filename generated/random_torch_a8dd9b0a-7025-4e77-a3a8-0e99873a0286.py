
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'NLLLoss2d', 'LazyLinear', 'LazyConvTranspose2d', 'BCEWithLogitsLoss', 'Unfold', 'RMSNorm', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReplicationPad3d(1)
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3, stride=2)
        self.unfold = nn.Unfold(kernel_size=3, stride=1)
        self.rms_norm = RMSNorm(16 * 3 * 3)  # Assuming RMSNorm is a custom layer
        self.adaptive_pool = nn.AdaptiveAvgPool1d(output_size=64)
        self.linear = nn.LazyLinear(out_features=10)
        self.nll_loss = nn.NLLLoss2d()
        self.bce_loss = nn.BCEWithLogitsLoss()

    def forward(self, x):
        # Apply ReplicationPad3d
        x = self.pad(x)
        
        # Apply LazyConvTranspose2d
        x = self.conv_transpose(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for RMSNorm
        x = x.view(x.size(0), -1)
        x = self.rms_norm(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), 1, -1)
        x = self.adaptive_pool(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)
        x = self.linear(x)
        
        # Apply NLLLoss2d (assuming target is provided externally)
        # Note: NLLLoss2d is typically used in the loss computation, not in the forward pass
        # So, we skip applying it here and assume it will be used during training
        
        # Apply BCEWithLogitsLoss (assuming target is provided externally)
        # Similarly, BCEWithLogitsLoss is typically used in the loss computation, not in the forward pass
        # So, we skip applying it here and assume it will be used during training
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Assuming RMSNorm is a custom layer, here is a simple implementation
class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma
