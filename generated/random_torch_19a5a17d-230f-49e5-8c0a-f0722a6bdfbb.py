
# This is a random torch model generated by the following modules: ['Dropout2d', 'RMSNorm', 'Unfold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.rms_norm = RMSNorm(64)  # Assuming 64 channels for RMSNorm
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))

    def forward(self, x):
        # Apply Dropout2d
        x = self.dropout2d(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape the output to a 2D tensor
        x = x.view(x.size(0), -1)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim: int, eps: float = 1e-8):
        super().__init__()
        self.scale = dim ** -0.5
        self.eps = eps
        self.g = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, p=2, dim=1, keepdim=True) * self.scale
        return x / norm.clamp(min=self.eps) * self.g


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()  # Example input with 64 channels
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
