
# This is a random torch model generated by the following modules: ['UpsamplingBilinear2d', 'Dropout1d', 'AlphaDropout', 'ConstantPad1d', 'BCELoss', 'Tanh', 'LazyLinear', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.tanh = nn.Tanh()
        self.lazy_linear = nn.LazyLinear(128)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Initial convolution
        x = self.conv1(x)
        
        # Upsample the feature map
        x = self.upsample(x)
        
        # Reshape to 1D for Dropout1d and ConstantPad1d
        x = x.view(x.size(0), -1)
        x = self.dropout1d(x)
        x = self.pad1d(x)
        
        # Reshape back to 2D for further processing
        x = x.view(x.size(0), 16, -1)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Tanh activation
        x = self.tanh(x)
        
        # Flatten and apply LazyLinear
        x = x.view(x.size(0), -1)
        x = self.lazy_linear(x)
        
        # Reshape back to 2D for final convolution
        x = x.view(x.size(0), 16, -1)
        x = self.conv2(x)
        
        # Apply Tanh activation again
        x = self.tanh(x)
        
        # Compute BCE loss (assuming binary classification)
        target = torch.zeros_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
