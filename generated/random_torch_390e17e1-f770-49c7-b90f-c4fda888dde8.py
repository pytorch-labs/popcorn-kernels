
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'AdaptiveMaxPool2d', 'AvgPool1d', 'InstanceNorm2d', 'FractionalMaxPool3d', 'SiLU', 'MaxPool1d', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.instance_norm2d = nn.InstanceNorm2d(16)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.silu = nn.SiLU()
        self.max_pool1d = nn.MaxPool1d(kernel_size=2)
        self.bce_loss = nn.BCELoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.adaptive_max_pool2d(x)  # Shape: (batch_size, channels, 16, 16)
        x = self.instance_norm2d(x)  # Shape: (batch_size, 16, 16, 16)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, 16, 256)
        x = self.avg_pool1d(x)  # Shape: (batch_size, 16, 128)
        x = self.max_pool1d(x)  # Shape: (batch_size, 16, 64)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), x.size(1), 8, 8, -1)  # Shape: (batch_size, 16, 8, 8, 8)
        x = self.fractional_max_pool3d(x)  # Shape: (batch_size, 16, 8, 8, 8)
        
        # Apply SiLU activation
        x = self.silu(x)  # Shape: (batch_size, 16, 8, 8, 8)
        
        # Flatten for loss computation
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 16*8*8*8)
        
        # Dummy target for loss computation (assuming binary classification)
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32).to(x.device)
        
        # Compute BCE loss
        bce_loss = self.bce_loss(torch.sigmoid(x), target)
        
        # Compute MultiLabelSoftMarginLoss
        multi_label_loss = self.multi_label_soft_margin_loss(x, target)
        
        # Return both losses for demonstration purposes
        return bce_loss, multi_label_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
