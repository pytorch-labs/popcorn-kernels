
# This is a random torch model generated by the following modules: ['CircularPad1d', 'Softplus', 'AdaptiveMaxPool2d', 'LocalResponseNorm', 'ReplicationPad2d', 'LazyConvTranspose3d', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1d = nn.CircularPad1d(2)
        self.softplus = nn.Softplus()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.local_response_norm = nn.LocalResponseNorm(2)
        self.replication_pad2d = nn.ReplicationPad2d(1)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.embedding = nn.Embedding(num_embeddings=100, embedding_dim=16)

    def forward(self, x):
        # Assuming x is a 1D tensor for CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(1, 1, 28, 28)  # Example reshape to 4D tensor
        x = self.adaptive_max_pool2d(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad2d(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(1, 1, 5, 5, 5)  # Example reshape to 5D tensor
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape for Embedding
        x = x.view(-1).long()  # Flatten and convert to long for embedding
        x = self.embedding(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 28).cuda()  # Example input for CircularPad1d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

