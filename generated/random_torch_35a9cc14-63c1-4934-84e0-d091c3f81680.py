
# This is a random torch model generated by the following modules: ['PixelShuffle', 'CrossMapLRN2d', 'LazyLinear', 'AvgPool3d', 'Hardsigmoid', 'SmoothL1Loss', 'MaxPool3d', 'PReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.lazy_linear = nn.LazyLinear(128)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.prelu = nn.PReLU()

    def forward(self, x):
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply CrossMapLRN2d
        x = self.cross_map_lrn2d(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D (batch, channels, depth, height, width)
        
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Remove the dummy dimension
        x = x.squeeze(2)
        
        # Flatten the tensor for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear
        x = self.lazy_linear(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Compute SmoothL1Loss (assuming a dummy target for demonstration)
        dummy_target = torch.zeros_like(x)
        loss = self.smooth_l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

