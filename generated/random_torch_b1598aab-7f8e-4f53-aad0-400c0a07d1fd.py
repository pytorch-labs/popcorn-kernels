
# This is a random torch model generated by the following modules: ['Unfold', 'PReLU', 'TransformerDecoderLayer', 'ReplicationPad2d', 'Bilinear', 'BatchNorm1d', 'Upsample', 'BatchNorm3d', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), padding=1)
        self.prelu = nn.PReLU()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.replication_pad = nn.ReplicationPad2d(2)
        self.bilinear = nn.Bilinear(64, 64, 128)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.batch_norm3d = nn.BatchNorm3d(32)
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))

    def forward(self, x):
        # Unfold the input
        x = self.unfold(x)
        x = x.view(x.size(0), -1, x.size(2), x.size(3))
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Reshape for TransformerDecoderLayer
        x = x.view(x.size(0), x.size(1), -1).permute(2, 0, 1)
        x = self.transformer_decoder_layer(x, x)
        x = x.permute(1, 2, 0).view(x.size(1), x.size(2), -1)
        
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), -1, x.size(2), x.size(3))
        x = self.bilinear(x, x)
        
        # Apply BatchNorm1d
        x = x.view(x.size(0), -1)
        x = self.batch_norm1d(x)
        x = x.view(x.size(0), -1, x.size(1))
        
        # Apply Upsample
        x = x.view(x.size(0), x.size(1), 1, 1)
        x = self.upsample(x)
        
        # Apply BatchNorm3d
        x = x.view(x.size(0), 32, -1, x.size(2), x.size(3))
        x = self.batch_norm3d(x)
        x = x.view(x.size(0), -1, x.size(3), x.size(4))
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

