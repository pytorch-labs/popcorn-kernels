
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'ModuleList', 'RNNCell', 'Softshrink', 'Conv1d', 'ParameterList', 'AdaptiveMaxPool3d', 'AdaptiveAvgPool1d', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.conv1d = nn.Conv1d(64, 128, kernel_size=3)
        self.rnn_cells = nn.ModuleList([nn.RNNCell(128, 128) for _ in range(3)])
        self.softshrink = nn.Softshrink()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(10)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(64)) for _ in range(2)])

    def forward(self, x):
        # Assume x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = x.unsqueeze(1)  # Add a channel dimension for Conv1d
        x = self.conv1d(x)
        x = x.squeeze(1)  # Remove the channel dimension for RNNCell
        for rnn_cell in self.rnn_cells:
            x = rnn_cell(x)
        x = self.softshrink(x)
        x = x.unsqueeze(1)  # Add a channel dimension for AdaptiveAvgPool1d
        x = self.adaptive_avg_pool1d(x)
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions for LazyConvTranspose3d
        x = self.lazy_conv_transpose3d(x)
        x = self.adaptive_max_pool3d(x)
        # Use parameters from ParameterList
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1, 1)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []


# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(*inputs)
# print(output.shape)
