
# This is a random torch model generated by the following modules: ['ParameterList', 'Embedding', 'Bilinear', 'Container', 'FractionalMaxPool2d', 'Softmax', 'RReLU', 'CircularPad2d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.bilinear = nn.Bilinear(128, 128, 64)  # Bilinear layer
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))  # FractionalMaxPool2d layer
        self.rrelu = nn.RReLU()  # RReLU layer
        self.circular_pad = nn.CircularPad2d(1)  # CircularPad2d layer
        self.linear1 = nn.Linear(64 * 14 * 14, 256)  # Linear layer
        self.linear2 = nn.Linear(256, 10)  # Linear layer
        self.softmax = nn.Softmax(dim=1)  # Softmax layer
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(128)) for _ in range(5)])  # ParameterList

    def forward(self, x):
        # Assume input x is of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Shape: (batch_size, sequence_length, 128)
        x = x.mean(dim=1)  # Shape: (batch_size, 128)
        
        # Use ParameterList
        for param in self.parameter_list:
            x = x + param  # Shape: (batch_size, 128)
        
        # Use Bilinear layer
        x = self.bilinear(x, x)  # Shape: (batch_size, 64)
        
        # Reshape for FractionalMaxPool2d
        x = x.unsqueeze(1).unsqueeze(1)  # Shape: (batch_size, 1, 1, 64)
        x = self.circular_pad(x)  # Shape: (batch_size, 1, 3, 66)
        x = self.fractional_max_pool(x)  # Shape: (batch_size, 1, 14, 14)
        
        # Flatten for Linear layer
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 64 * 14 * 14)
        
        # Apply RReLU
        x = self.rrelu(x)  # Shape: (batch_size, 64 * 14 * 14)
        
        # Linear layers
        x = self.linear1(x)  # Shape: (batch_size, 256)
        x = self.rrelu(x)  # Shape: (batch_size, 256)
        x = self.linear2(x)  # Shape: (batch_size, 10)
        
        # Apply Softmax
        x = self.softmax(x)  # Shape: (batch_size, 10)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # Shape: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
