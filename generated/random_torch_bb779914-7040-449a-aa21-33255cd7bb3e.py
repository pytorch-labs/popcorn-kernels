
# This is a random torch model generated by the following modules: ['BCELoss', 'Upsample', 'Softmax2d', 'ParameterDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.softmax2d = nn.Softmax2d()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1, 3, 64, 64)),
            'param2': nn.Parameter(torch.randn(1, 3, 128, 128)),
        })
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Upsample the input
        x = self.upsample(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Add a parameter from ParameterDict
        if x.shape == self.parameter_dict['param1'].shape:
            x = x + self.parameter_dict['param1']
        else:
            x = x + self.parameter_dict['param2']
        
        # Compute BCE loss with a dummy target
        target = torch.zeros_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
