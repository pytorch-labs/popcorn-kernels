
# This is a random torch model generated by the following modules: ['ParameterDict', 'GRU', 'Softsign', 'MaxUnpool2d', 'Softmax2d', 'PoissonNLLLoss', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.params = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.gru1 = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=20, hidden_size=10, num_layers=1, batch_first=True)
        self.softsign = nn.Softsign()
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.softmax2d = nn.Softmax2d()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assume x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Use GRU layers
        x, _ = self.gru1(x)
        x, _ = self.gru2(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(batch_size, 10, sequence_length // 2, 2)
        
        # Apply MaxUnpool2d (assuming indices are available)
        indices = torch.randint(0, 2, (batch_size, 10, sequence_length // 2, 2))
        x = self.max_unpool2d(x, indices)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Reshape back to original sequence shape
        x = x.view(batch_size, sequence_length, -1)
        
        # Compute PoissonNLLLoss and GaussianNLLLoss (assuming target is available)
        target_poisson = torch.randint(0, 10, (batch_size, sequence_length, 10)).float()
        target_gaussian = torch.randn(batch_size, sequence_length, 10)
        var_gaussian = torch.ones(batch_size, sequence_length, 10)
        
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        gaussian_loss = self.gaussian_nll_loss(x, target_gaussian, var_gaussian)
        
        # Return both the output and the losses
        return x, poisson_loss, gaussian_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20, 10).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
