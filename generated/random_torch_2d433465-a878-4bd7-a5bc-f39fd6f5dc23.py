
# This is a random torch model generated by the following modules: ['MaxPool2d', 'CosineSimilarity', 'CELU', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.circular_pad1 = nn.CircularPad1d(padding=1)
        self.circular_pad2 = nn.CircularPad1d(padding=1)

    def forward(self, x):
        # Apply MaxPool2d
        x = self.maxpool1(x)
        x = self.maxpool2(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), -1)  # Flatten to 1D
        
        # Apply CircularPad1d
        x = x.unsqueeze(1)  # Add a dummy dimension for 1D padding
        x = self.circular_pad1(x)
        x = self.circular_pad2(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Apply CELU
        x = self.celu1(x)
        x = self.celu2(x)
        
        # Reshape back to 2D for CosineSimilarity
        x = x.view(x.size(0), -1, 1)  # Reshape to (batch_size, features, 1)
        y = torch.ones_like(x)  # Create a tensor of ones for CosineSimilarity
        x = F.cosine_similarity(x, y, dim=1)  # Apply CosineSimilarity
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

