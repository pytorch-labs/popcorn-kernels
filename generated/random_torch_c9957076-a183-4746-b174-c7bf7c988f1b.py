
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'TransformerEncoderLayer', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReflectionPad2d(2)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=64, nhead=8)
        self.adaptive_avg_pool = nn.AdaptiveAvgPool1d(output_size=10)
        
    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.pad(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, d_model)
        
        # Apply TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)
        
        # Reshape back to (batch_size, channels, seq_len)
        x = x.permute(1, 2, 0)
        
        # Apply AdaptiveAvgPool1d
        x = self.adaptive_avg_pool(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input: batch_size=1, channels=3, height=32, width=32
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
