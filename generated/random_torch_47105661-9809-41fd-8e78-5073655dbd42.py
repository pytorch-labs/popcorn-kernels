
# This is a random torch model generated by the following modules: ['LazyLinear', 'Softshrink', 'LazyConvTranspose1d', 'PairwiseDistance', 'Module', 'Softmin', 'Dropout1d', 'Upsample', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_linear1 = nn.LazyLinear(128)
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.softmin = nn.Softmin(dim=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.lazy_linear2 = nn.LazyLinear(10)

    def forward(self, x):
        # Flatten the input to fit LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear and Softshrink
        x = self.softshrink(self.lazy_linear1(x))
        
        # Reshape for LazyConvTranspose1d
        x = x.unsqueeze(1)
        x = self.lazy_conv_transpose1d(x)
        
        # Apply PairwiseDistance (requires two inputs)
        x1 = x[:, :x.size(1)//2, :]
        x2 = x[:, x.size(1)//2:, :]
        x = self.pairwise_distance(x1, x2)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape for Dropout1d
        x = x.unsqueeze(1)
        x = self.dropout1d(x)
        
        # Apply Upsample
        x = self.upsample(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Flatten for final LazyLinear
        x = x.view(x.size(0), -1)
        x = self.lazy_linear2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
