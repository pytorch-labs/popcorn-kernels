
# This is a random torch model generated by the following modules: ['Softplus', 'Mish', 'AdaptiveLogSoftmaxWithLoss', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self, input_dim: int = 128, output_dim: int = 10) -> None:
        super().__init__()
        self.softplus1 = nn.Softplus()
        self.mish1 = nn.Mish()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(input_dim, output_dim, [input_dim // 2, input_dim // 4])
        self.sigmoid1 = nn.Sigmoid()
        self.softplus2 = nn.Softplus()
        self.mish2 = nn.Mish()
        self.sigmoid2 = nn.Sigmoid()

    def forward(self, x):
        # Flatten the input to a 1D tensor
        x = x.view(x.size(0), -1)
        
        # Apply the first Softplus
        x = self.softplus1(x)
        
        # Apply the first Mish
        x = self.mish1(x)
        
        # Apply the first Sigmoid
        x = self.sigmoid1(x)
        
        # Apply the second Softplus
        x = self.softplus2(x)
        
        # Apply the second Mish
        x = self.mish2(x)
        
        # Apply the second Sigmoid
        x = self.sigmoid2(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Assuming input_dim is 128
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
