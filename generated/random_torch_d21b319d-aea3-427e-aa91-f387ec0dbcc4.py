
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'LazyConvTranspose1d', 'Fold', 'LSTM', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=2)
        self.fold = nn.Fold(output_size=(16, 16), kernel_size=(3, 3))
        self.lstm = nn.LSTM(input_size=16, hidden_size=32, num_layers=2, batch_first=True)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=3, kernel_size=3, stride=2)

    def forward(self, x):
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        # Reshape for LazyConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1)  # Reshape to (batch_size, channels * height, 1)
        x = self.fold(x)
        
        # Reshape for LSTM
        x = x.view(x.size(0), -1, 16)  # Reshape to (batch_size, seq_len, input_size)
        x, _ = self.lstm(x)
        
        # Reshape for LazyConvTranspose2d
        x = x.view(x.size(0), 32, 8, 8)  # Reshape to (batch_size, channels, height, width)
        x = self.lazy_conv_transpose2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

