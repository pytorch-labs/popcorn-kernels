
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'ModuleList', 'BatchNorm2d', 'LazyInstanceNorm2d', 'UpsamplingBilinear2d', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.batch_norm = nn.BatchNorm2d(3)
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.upsampling = nn.UpsamplingBilinear2d(scale_factor=2)
        self.max_unpool = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.module_list = nn.ModuleList([
            nn.BatchNorm2d(3),
            nn.LazyInstanceNorm2d(),
            nn.UpsamplingBilinear2d(scale_factor=2),
            nn.MaxUnpool1d(kernel_size=2, stride=2)
        ])
        self.pairwise_distance = nn.PairwiseDistance()

    def forward(self, x):
        # Apply BatchNorm2d
        x = self.batch_norm(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsampling(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        
        # Apply MaxUnpool1d
        indices = torch.arange(0, x.size(2), 2).repeat(x.size(0), x.size(1), 1).to(x.device)
        x = self.max_unpool(x, indices)
        
        # Apply ModuleList
        for module in self.module_list:
            if isinstance(module, nn.MaxUnpool1d):
                x = module(x, indices)
            else:
                x = module(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        
        # Apply PairwiseDistance
        x1 = x[:, :x.size(1)//2]
        x2 = x[:, x.size(1)//2:]
        x = self.pairwise_distance(x1, x2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
