
# This is a random torch model generated by the following modules: ['Softmax', 'GRUCell', 'CircularPad3d', 'AdaptiveLogSoftmaxWithLoss', 'Hardtanh', 'TripletMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.circular_pad3d = nn.CircularPad3d(padding=(1, 1, 1, 1, 1, 1))
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])
        self.triplet_margin_loss = nn.TripletMarginLoss(margin=1.0, p=2)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process sequence through GRUCells
        for t in range(sequence_length):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape and apply CircularPad3d
        x = h2.view(batch_size, 1, 8, 8, 2)  # Reshape to 5D tensor for CircularPad3d
        x = self.circular_pad3d(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Flatten and apply AdaptiveLogSoftmaxWithLoss
        x = x.view(batch_size, -1)
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Compute TripletMarginLoss (dummy anchors and negatives for demonstration)
        anchor = torch.randn_like(x)
        positive = torch.randn_like(x)
        negative = torch.randn_like(x)
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
