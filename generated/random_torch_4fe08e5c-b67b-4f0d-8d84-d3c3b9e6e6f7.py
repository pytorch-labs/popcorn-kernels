
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'ConstantPad1d', 'Hardshrink', 'Softmin', 'LazyConvTranspose3d', 'ReflectionPad3d', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.hardshrink = nn.Hardshrink(lambd=0.5)
        self.softmin = nn.Softmin(dim=1)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.pairwise_distance = nn.PairwiseDistance(p=2)

    def forward(self, x):
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.constant_pad1d(x)
        
        # Reshape back for Hardshrink
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.hardshrink(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_conv_transpose3d(x)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d(x)
        
        # Reshape for PairwiseDistance
        x = x.view(x.size(0), x.size(1), -1)
        x = self.pairwise_distance(x[:, 0], x[:, 1])
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

