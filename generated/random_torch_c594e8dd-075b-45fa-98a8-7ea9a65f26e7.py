
# This is a random torch model generated by the following modules: ['Softmin', 'AlphaDropout', 'PoissonNLLLoss', 'ConvTranspose1d', 'AdaptiveLogSoftmaxWithLoss', 'CosineSimilarity', 'BatchNorm1d', 'NLLLoss', 'Tanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1d = nn.ConvTranspose1d(1, 10, kernel_size=5)
        self.batch_norm1d = nn.BatchNorm1d(10)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.tanh = nn.Tanh()
        self.softmin = nn.Softmin(dim=1)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(10, 5, [2, 3])
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 1, sequence_length)
        x = self.conv_transpose1d(x)  # Shape: (batch_size, 10, sequence_length + 4)
        x = self.batch_norm1d(x)  # Shape: (batch_size, 10, sequence_length + 4)
        x = self.alpha_dropout(x)  # Shape: (batch_size, 10, sequence_length + 4)
        x = self.tanh(x)  # Shape: (batch_size, 10, sequence_length + 4)
        x = self.softmin(x)  # Shape: (batch_size, 10, sequence_length + 4)
        
        # Reshape for cosine similarity
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 10 * (sequence_length + 4))
        x = self.cosine_similarity(x, x)  # Shape: (batch_size,)
        
        # Reshape for adaptive log softmax
        x = x.view(-1, 1)  # Shape: (batch_size, 1)
        x = self.adaptive_log_softmax(x, torch.zeros(x.size(0), dtype=torch.long).to(x.device))  # Shape: (batch_size, 5)
        
        # Apply PoissonNLLLoss and NLLLoss (assuming dummy targets for demonstration)
        dummy_targets = torch.zeros(x.size(0), dtype=torch.long).to(x.device)
        poisson_loss = self.poisson_nll_loss(x, dummy_targets.float())
        nll_loss = self.nll_loss(x, dummy_targets)
        
        # Return the final output (for demonstration, returning the sum of losses)
        return poisson_loss + nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Shape: (batch_size, 1, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

