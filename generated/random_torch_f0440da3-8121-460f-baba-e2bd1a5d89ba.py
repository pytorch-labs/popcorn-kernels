
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'TripletMarginWithDistanceLoss', 'PixelShuffle', 'EmbeddingBag']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=100, embedding_dim=10, mode='mean')
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming x is a 4D tensor (batch_size, channels, height, width)
        x = self.fractional_max_pool(x)
        
        # Reshape to fit PixelShuffle input requirements
        x = x.view(x.size(0), x.size(1) * 4, x.size(2) // 2, x.size(3) // 2)
        x = self.pixel_shuffle(x)
        
        # Flatten the spatial dimensions for EmbeddingBag
        x = x.view(x.size(0), x.size(1), -1).permute(0, 2, 1)
        x = self.embedding_bag(x)
        
        # Generate anchor, positive, and negative samples for TripletMarginWithDistanceLoss
        anchor = x[0:1]
        positive = x[1:2]
        negative = x[2:3]
        
        # Compute triplet loss
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(4, 3, 28, 28).cuda()  # Example input: batch_size=4, channels=3, height=28, width=28
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

