
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'MaxPool3d', 'Mish', 'Hardtanh']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(1)
        self.maxpool1 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.mish1 = nn.Mish()
        self.hardtanh1 = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.bn2 = nn.BatchNorm3d(1)
        self.maxpool2 = nn.MaxPool3d(kernel_size=2, stride=2)
        self.mish2 = nn.Mish()
        self.hardtanh2 = nn.Hardtanh(min_val=-1.0, max_val=1.0)

    def forward(self, x):
        x = self.bn1(x)
        x = self.maxpool1(x)
        x = self.mish1(x)
        x = self.hardtanh1(x)
        x = self.bn2(x)
        x = self.maxpool2(x)
        x = self.mish2(x)
        x = self.hardtanh2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()  # Example input shape for 3D data
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
