
# This is a random torch model generated by the following modules: ['Identity', 'Upsample', 'Hardsigmoid', 'LeakyReLU', 'Softmax', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.upsample = nn.Upsample(scale_factor=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.leaky_relu = nn.LeakyReLU()
        self.softmax = nn.Softmax(dim=1)
        self.conv1d_1 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.conv1d_2 = nn.LazyConv1d(out_channels=64, kernel_size=3)
        self.conv1d_3 = nn.LazyConv1d(out_channels=128, kernel_size=3)

    def forward(self, x):
        x = self.identity(x)  # Identity layer
        x = self.upsample(x)  # Upsample layer
        x = self.hardsigmoid(x)  # Hardsigmoid layer
        x = self.leaky_relu(x)  # LeakyReLU layer
        
        # Reshape for Conv1d layers
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        
        x = self.conv1d_1(x)  # First Conv1d layer
        x = self.leaky_relu(x)  # LeakyReLU layer
        x = self.conv1d_2(x)  # Second Conv1d layer
        x = self.leaky_relu(x)  # LeakyReLU layer
        x = self.conv1d_3(x)  # Third Conv1d layer
        
        # Reshape back to original shape
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch_size, channels, sequence_length)
        
        x = self.softmax(x)  # Softmax layer
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

