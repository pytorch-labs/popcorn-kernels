
# This is a random torch model generated by the following modules: ['GRUCell', 'ConvTranspose2d', 'NLLLoss', 'Softplus', 'LayerNorm', 'TripletMarginLoss', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.conv_transpose1 = nn.ConvTranspose2d(in_channels=128, out_channels=64, kernel_size=4, stride=2, padding=1)
        self.conv_transpose2 = nn.ConvTranspose2d(in_channels=64, out_channels=32, kernel_size=4, stride=2, padding=1)
        self.layer_norm = nn.LayerNorm(32)
        self.softplus = nn.Softplus()
        self.sigmoid = nn.Sigmoid()
        self.nll_loss = nn.NLLLoss()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Assuming x is of shape (batch_size, seq_len, input_size)
        batch_size, seq_len, input_size = x.shape
        
        # Initialize hidden states for GRUCell
        h1 = torch.zeros(batch_size, 256).to(x.device)
        h2 = torch.zeros(batch_size, 128).to(x.device)
        
        # Process sequence through GRUCells
        for t in range(seq_len):
            h1 = self.gru_cell1(x[:, t, :], h1)
            h2 = self.gru_cell2(h1, h2)
        
        # Reshape for ConvTranspose2d
        x = h2.view(batch_size, 128, 1, 1)
        
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply LayerNorm
        x = self.layer_norm(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Flatten for loss computation
        x = x.view(batch_size, -1)
        
        # Dummy target for NLLLoss (assuming classification task)
        target = torch.randint(0, 32, (batch_size,)).to(x.device)
        
        # Compute NLLLoss
        nll_loss = self.nll_loss(F.log_softmax(x, dim=1), target)
        
        # Dummy anchors, positives, negatives for TripletMarginLoss
        anchor = torch.randn(batch_size, 32).to(x.device)
        positive = torch.randn(batch_size, 32).to(x.device)
        negative = torch.randn(batch_size, 32).to(x.device)
        
        # Compute TripletMarginLoss
        triplet_loss = self.triplet_margin_loss(anchor, positive, negative)
        
        # Return both losses (for demonstration purposes)
        return nll_loss, triplet_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, seq_len, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

