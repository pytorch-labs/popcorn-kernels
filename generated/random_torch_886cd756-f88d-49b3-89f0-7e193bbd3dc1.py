
# This is a random torch model generated by the following modules: ['NLLLoss', 'ZeroPad2d', 'MaxPool3d', 'LayerNorm', 'Conv3d', 'Sequential', 'TripletMarginWithDistanceLoss', 'Unflatten', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad2d(1)
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2, return_indices=True)
        self.layer_norm = nn.LayerNorm([10, 12, 12, 12])
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.unflatten = nn.Unflatten(1, (20, 10, 10))
        self.sequential = nn.Sequential(
            nn.Conv3d(20, 30, kernel_size=3),
            nn.ReLU(),
            nn.Conv3d(30, 40, kernel_size=3)
        )
        self.nll_loss = nn.NLLLoss()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss()

    def forward(self, x):
        # ZeroPad2d
        x = self.zero_pad(x)
        
        # Conv3d
        x = self.conv3d_1(x)
        
        # MaxPool3d
        x, indices = self.max_pool3d(x)
        
        # LayerNorm
        x = self.layer_norm(x)
        
        # Conv3d
        x = self.conv3d_2(x)
        
        # MaxUnpool3d
        x = self.max_unpool3d(x, indices)
        
        # Unflatten
        x = self.unflatten(x)
        
        # Sequential
        x = self.sequential(x)
        
        # NLLLoss and TripletMarginWithDistanceLoss are typically used in the loss computation,
        # so they are not directly applied in the forward pass.
        # However, we can return the output for further processing.
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

