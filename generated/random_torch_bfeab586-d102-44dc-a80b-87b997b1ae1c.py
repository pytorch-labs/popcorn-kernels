
# This is a random torch model generated by the following modules: ['ELU', 'Conv2d', 'ConstantPad3d', 'ReplicationPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.constant_pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0.5)
        self.replication_pad = nn.ReplicationPad2d(padding=(1, 1, 1, 1))
        self.elu = nn.ELU(alpha=1.0)

    def forward(self, x):
        # Apply Conv2d
        x = self.conv1(x)
        x = self.elu(x)
        
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Apply Conv2d again
        x = self.conv2(x)
        x = self.elu(x)
        
        # Reshape for ConstantPad3d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D
        x = self.constant_pad(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Apply ELU
        x = self.elu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
