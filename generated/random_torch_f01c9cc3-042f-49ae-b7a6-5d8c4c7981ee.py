
# This is a random torch model generated by the following modules: ['ConstantPad2d', 'PReLU', 'MultiLabelMarginLoss', 'ModuleList', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad2d(2, 3.0)
        self.prelu1 = nn.PReLU()
        self.pad2 = nn.ZeroPad3d((1, 1, 1, 1, 1, 1))
        self.prelu2 = nn.PReLU()
        self.module_list = nn.ModuleList([nn.ConstantPad2d(1, 2.0), nn.PReLU(), nn.ZeroPad3d((0, 0, 0, 0, 0, 0))])
        self.loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        x = self.pad1(x)
        x = self.prelu1(x)
        x = self.pad2(x)
        x = self.prelu2(x)
        
        for module in self.module_list:
            x = module(x)
        
        # Assuming the target is a tensor of appropriate shape for MultiLabelMarginLoss
        target = torch.randint(0, 2, (x.size(0), x.size(1))).long()
        loss = self.loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
