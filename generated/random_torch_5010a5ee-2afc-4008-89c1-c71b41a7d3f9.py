
# This is a random torch model generated by the following modules: ['AvgPool2d', 'Softplus', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool1 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.avgpool2 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.softplus = nn.Softplus()
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2), stride=(2, 2))

    def forward(self, x):
        # Apply the first AvgPool2d
        x = self.avgpool1(x)
        
        # Apply the Softplus activation
        x = self.softplus(x)
        
        # Apply the second AvgPool2d
        x = self.avgpool2(x)
        
        # Reshape the tensor to fit the Fold module
        batch_size = x.size(0)
        channels = x.size(1)
        x = x.view(batch_size, channels * 4, -1)  # Reshape to (batch_size, channels * 4, height * width)
        
        # Apply the Fold operation
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

