
# This is a random torch model generated by the following modules: ['MaxPool1d', 'UpsamplingBilinear2d', 'GRUCell', 'Sequential', 'Unfold', 'Mish', 'CELU', 'Module', 'PixelUnshuffle', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.gru_cell = nn.GRUCell(input_size=64, hidden_size=128)
        self.sequential = nn.Sequential(
            nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )
        self.unfold = nn.Unfold(kernel_size=3, padding=1)
        self.mish = nn.Mish()
        self.celu = nn.CELU()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.channel_shuffle = nn.ChannelShuffle(groups=4)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.pixel_unshuffle(x)  # Reduce spatial dimensions, increase channels
        x = self.channel_shuffle(x)  # Shuffle channels
        x = self.sequential(x)  # Apply sequential layers
        x = self.mish(x)  # Apply Mish activation
        x = self.celu(x)  # Apply CELU activation
        
        # Reshape for MaxPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)  # Combine channels and height
        x = self.maxpool1d(x)  # Apply MaxPool1d
        x = x.view(batch_size, channels, height, -1)  # Reshape back
        
        # Reshape for Unfold
        x = self.unfold(x)  # Apply Unfold
        x = x.view(batch_size, -1, height, width)  # Reshape back
        
        # Reshape for UpsamplingBilinear2d
        x = self.upsample(x)  # Apply UpsamplingBilinear2d
        
        # Reshape for GRUCell
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, -1)  # Flatten for GRUCell
        hx = torch.zeros(batch_size, 128).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)  # Apply GRUCell
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
