
# This is a random torch model generated by the following modules: ['Conv1d', 'InstanceNorm1d', 'Dropout3d', 'AdaptiveAvgPool3d', 'ZeroPad1d', 'LazyLinear', 'GRUCell', 'SyncBatchNorm', 'MaxUnpool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d_1 = nn.Conv1d(1, 10, kernel_size=5)
        self.instance_norm1d_1 = nn.InstanceNorm1d(10)
        self.zero_pad1d_1 = nn.ZeroPad1d(2)
        self.conv1d_2 = nn.Conv1d(10, 20, kernel_size=5)
        self.sync_batch_norm_1 = nn.SyncBatchNorm(20)
        self.dropout3d_1 = nn.Dropout3d(0.5)
        self.adaptive_avg_pool3d_1 = nn.AdaptiveAvgPool3d((10, 10, 10))
        self.gru_cell_1 = nn.GRUCell(2000, 100)
        self.lazy_linear_1 = nn.LazyLinear(50)
        self.max_unpool2d_1 = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.lazy_linear_2 = nn.LazyLinear(10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1d_1(x)
        x = self.instance_norm1d_1(x)
        x = self.zero_pad1d_1(x)
        x = self.conv1d_2(x)
        x = self.sync_batch_norm_1(x)
        
        # Reshape for Dropout3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 20, 1, 1, length)
        x = self.dropout3d_1(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.permute(0, 4, 1, 2, 3)  # Shape: (batch_size, length, 20, 1, 1)
        x = self.adaptive_avg_pool3d_1(x)
        
        # Flatten for GRUCell
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 2000)
        hx = torch.zeros(x.size(0), 100).to(x.device)  # Initial hidden state for GRUCell
        x = self.gru_cell_1(x, hx)
        
        # LazyLinear layers
        x = self.lazy_linear_1(x)
        x = F.relu(x)
        x = self.lazy_linear_2(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(x.size(0), 1, 10, 10)  # Shape: (batch_size, 1, 10, 10)
        indices = torch.arange(0, 100).view(1, 1, 10, 10).expand(x.size(0), 1, 10, 10).to(x.device)
        x = self.max_unpool2d_1(x, indices)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

