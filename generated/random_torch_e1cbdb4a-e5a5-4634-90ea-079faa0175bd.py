
# This is a random torch model generated by the following modules: ['LazyConvTranspose3d', 'BatchNorm1d', 'ReplicationPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.batch_norm1 = nn.BatchNorm1d(16)
        self.replication_pad1 = nn.ReplicationPad3d(1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(out_channels=32, kernel_size=3, stride=2, padding=1)
        self.batch_norm2 = nn.BatchNorm1d(32)
        self.replication_pad2 = nn.ReplicationPad3d(1)
        self.conv_transpose3 = nn.LazyConvTranspose3d(out_channels=64, kernel_size=3, stride=2, padding=1)
        self.batch_norm3 = nn.BatchNorm1d(64)
        self.replication_pad3 = nn.ReplicationPad3d(1)

    def forward(self, x):
        # Apply first set of layers
        x = self.conv_transpose1(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions for BatchNorm1d
        x = self.batch_norm1(x)
        x = x.view(x.size(0), 16, -1, -1, -1)  # Reshape back to 3D
        x = self.replication_pad1(x)
        
        # Apply second set of layers
        x = self.conv_transpose2(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions for BatchNorm1d
        x = self.batch_norm2(x)
        x = x.view(x.size(0), 32, -1, -1, -1)  # Reshape back to 3D
        x = self.replication_pad2(x)
        
        # Apply third set of layers
        x = self.conv_transpose3(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions for BatchNorm1d
        x = self.batch_norm3(x)
        x = x.view(x.size(0), 64, -1, -1, -1)  # Reshape back to 3D
        x = self.replication_pad3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
