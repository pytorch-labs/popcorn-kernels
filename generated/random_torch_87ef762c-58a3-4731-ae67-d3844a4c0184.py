
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'RNN', 'BatchNorm1d', 'Bilinear', 'EmbeddingBag', 'MultiMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.rnn = nn.RNN(64, 128, batch_first=True)
        self.batch_norm = nn.BatchNorm1d(128)
        self.bilinear = nn.Bilinear(128, 128, 64)
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Assuming x is a tensor of shape (batch_size, sequence_length)
        x = self.embedding_bag(x)
        
        # RNN expects input of shape (batch_size, sequence_length, embedding_dim)
        x, _ = self.rnn(x.unsqueeze(1))
        
        # Remove the sequence dimension
        x = x.squeeze(1)
        
        # Apply batch normalization
        x = self.batch_norm(x)
        
        # Apply bilinear transformation
        x = self.bilinear(x, x)
        
        # Compute PoissonNLLLoss (requires target, so we skip it in forward pass)
        # poisson_loss = self.poisson_nll_loss(x, target)
        
        # Compute MultiMarginLoss (requires target, so we skip it in forward pass)
        # margin_loss = self.multi_margin_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 10)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

