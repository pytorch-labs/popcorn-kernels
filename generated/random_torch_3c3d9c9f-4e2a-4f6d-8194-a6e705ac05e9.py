
# This is a random torch model generated by the following modules: ['PReLU', 'HingeEmbeddingLoss', 'BatchNorm3d', 'KLDivLoss', 'AdaptiveAvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.prelu1 = nn.PReLU()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=5)
        self.bn2 = nn.BatchNorm3d(5)
        self.prelu2 = nn.PReLU()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()
        self.kl_div_loss = nn.KLDivLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # Apply BatchNorm3d
        x = self.prelu1(x)  # Apply PReLU
        
        # Reshape to apply AdaptiveAvgPool1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)  # Reshape to (batch_size, channels*depth*height, width)
        x = self.adaptive_avg_pool1d(x)  # Apply AdaptiveAvgPool1d
        
        # Reshape back to 5D tensor
        x = x.view(batch_size, 5, depth, height, -1)  # Reshape to (batch_size, 5, depth, height, new_width)
        x = self.bn2(x)  # Apply BatchNorm3d
        x = self.prelu2(x)  # Apply PReLU
        
        # Compute HingeEmbeddingLoss (requires target, so we create a dummy target)
        dummy_target = torch.ones(batch_size, 5, depth, height, x.size(-1)).to(x.device)
        hinge_loss = self.hinge_embedding_loss(x, dummy_target)
        
        # Compute KLDivLoss (requires log-probabilities and probabilities, so we create dummy inputs)
        log_probs = F.log_softmax(x, dim=1)
        probs = F.softmax(torch.randn_like(x), dim=1)
        kl_loss = self.kl_div_loss(log_probs, probs)
        
        # Return the sum of losses as the output (this is just a random choice)
        return hinge_loss + kl_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 8, 16, 16).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
