
# This is a random torch model generated by the following modules: ['RMSNorm', 'LogSoftmax', 'Transformer', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.gamma * self.scale

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rms_norm1 = RMSNorm(64)
        self.transformer1 = nn.Transformer(d_model=64, nhead=8, num_encoder_layers=3, num_decoder_layers=3)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.rms_norm2 = RMSNorm(64)
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        batch_size, channels, depth, height, width = x.shape
        
        # Reshape to (batch_size * depth, channels, height, width) for RMSNorm
        x = x.view(batch_size * depth, channels, height, width)
        x = self.rms_norm1(x)
        
        # Reshape back to (batch_size, depth, channels, height, width)
        x = x.view(batch_size, depth, channels, height, width)
        
        # Reshape to (batch_size, depth, channels * height * width) for Transformer
        x = x.view(batch_size, depth, -1)
        
        # Transformer expects input of shape (sequence_length, batch_size, feature_dim)
        x = x.permute(1, 0, 2)
        x = self.transformer1(x, x)
        
        # Reshape back to (batch_size, depth, channels, height, width)
        x = x.permute(1, 0, 2)
        x = x.view(batch_size, depth, channels, height, width)
        
        # AdaptiveAvgPool3d expects input of shape (batch_size, channels, depth, height, width)
        x = x.permute(0, 2, 1, 3, 4)
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to (batch_size, channels)
        x = x.view(batch_size, -1)
        
        # Apply RMSNorm
        x = self.rms_norm2(x)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 10, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
