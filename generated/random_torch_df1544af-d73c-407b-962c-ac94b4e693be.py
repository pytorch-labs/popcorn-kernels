
# This is a random torch model generated by the following modules: ['CircularPad2d', 'LazyLinear', 'Conv1d', 'Softmin', 'LazyBatchNorm2d', 'MaxPool3d', 'Unfold', 'LPPool1d', 'RReLU', 'ZeroPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.conv1d = nn.Conv1d(1, 10, kernel_size=3)
        self.lazy_batch_norm = nn.LazyBatchNorm2d()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=2)
        self.rrelu = nn.RReLU()
        self.zero_pad3d = nn.ZeroPad3d(1)
        self.lazy_linear1 = nn.LazyLinear(128)
        self.lazy_linear2 = nn.LazyLinear(64)
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), 1, -1)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Reshape for LazyBatchNorm2d
        x = x.unsqueeze(-1).unsqueeze(-1)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm(x)
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(1)
        
        # Apply MaxPool3d
        x = self.max_pool3d(x)
        
        # Reshape for Unfold
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply Unfold
        x = self.unfold(x)
        
        # Reshape for LPPool1d
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LPPool1d
        x = self.lp_pool1d(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape for ZeroPad3d
        x = x.unsqueeze(1)
        
        # Apply ZeroPad3d
        x = self.zero_pad3d(x)
        
        # Flatten for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear
        x = self.lazy_linear1(x)
        x = self.lazy_linear2(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
