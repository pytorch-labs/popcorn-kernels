
# This is a random torch model generated by the following modules: ['Embedding', 'Tanhshrink', 'LazyBatchNorm1d', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming a vocabulary size of 1000
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()
        self.bn3 = nn.LazyBatchNorm1d()
        self.selu1 = nn.SELU()
        self.selu2 = nn.SELU()
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Assuming x is a tensor of indices for embedding
        x = self.embedding(x)
        
        # Reshape to (batch_size, sequence_length, embedding_dim) -> (batch_size, embedding_dim, sequence_length)
        x = x.permute(0, 2, 1)
        
        # Apply batch normalization
        x = self.bn1(x)
        
        # Apply SELU activation
        x = self.selu1(x)
        
        # Reshape back to (batch_size, sequence_length, embedding_dim)
        x = x.permute(0, 2, 1)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Reshape to (batch_size, sequence_length * embedding_dim)
        x = x.reshape(x.size(0), -1)
        
        # Apply batch normalization
        x = self.bn2(x)
        
        # Apply SELU activation
        x = self.selu2(x)
        
        # Reshape to (batch_size, 1, sequence_length * embedding_dim)
        x = x.unsqueeze(1)
        
        # Apply batch normalization
        x = self.bn3(x)
        
        # Remove the extra dimension
        x = x.squeeze(1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 10)).cuda()  # (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

