
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'Dropout', 'LazyConvTranspose1d', 'Hardsigmoid', 'LazyInstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.instance_norm1 = nn.LazyInstanceNorm3d()
        self.hardsigmoid = nn.Hardsigmoid()
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.dropout2 = nn.Dropout(p=0.5)
        self.instance_norm2 = nn.LazyInstanceNorm3d()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        x = self.dropout1(x)
        x = self.conv_transpose1(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to 5D for InstanceNorm3d
        x = self.instance_norm1(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back to 3D
        x = self.hardsigmoid(x)
        x = self.conv_transpose2(x)
        x = self.dropout2(x)
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to 5D for InstanceNorm3d
        x = self.instance_norm2(x)
        x = x.squeeze(3).squeeze(2)  # Reshape back to 3D
        return x

    def compute_loss(self, output, target):
        return self.multi_margin_loss(output, target)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 128).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

