
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'Hardshrink', 'PixelShuffle', 'LazyConvTranspose3d', 'Unfold', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.hardshrink = nn.Hardshrink()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.unfold = nn.Unfold(kernel_size=2, stride=2)
        self.lazy_conv2d = nn.LazyConv2d(out_channels=32, kernel_size=3, stride=1)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.fractional_max_pool(x)
        x = self.hardshrink(x)
        x = self.pixel_shuffle(x)
        
        # Reshape to 5D for LazyConvTranspose3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.lazy_conv_transpose3d(x)
        
        # Reshape back to 4D for Unfold
        x = x.squeeze(2)  # Remove the depth dimension
        x = self.unfold(x)
        
        # Reshape to 4D for LazyConv2d
        x = x.view(x.size(0), -1, 14, 14)  # Arbitrary reshape to fit LazyConv2d
        x = self.lazy_conv2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
