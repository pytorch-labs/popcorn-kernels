
# This is a random torch model generated by the following modules: ['Hardshrink', 'UpsamplingBilinear2d', 'ReplicationPad1d', 'RReLU', 'MaxUnpool2d', 'LazyConvTranspose3d', 'SyncBatchNorm', 'RNNCell', 'Linear', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink = nn.Hardshrink()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.replication_pad = nn.ReplicationPad1d(2)
        self.rrelu = nn.RReLU()
        self.max_unpool = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2)
        self.sync_batch_norm = nn.SyncBatchNorm(16)
        self.rnn_cell = nn.RNNCell(input_size=16, hidden_size=32)
        self.linear = nn.Linear(32, 10)
        self.unflatten = nn.Unflatten(1, (2, 5))

    def forward(self, x):
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for UpsamplingBilinear2d
        x = x.view(-1, 1, x.shape[-2], x.shape[-1])
        x = self.upsample(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.shape[0], -1)
        x = self.replication_pad(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        # Reshape for MaxUnpool2d
        x = x.view(x.shape[0], 1, x.shape[-1] // 2, 2)
        x, indices = F.max_pool2d_with_indices(x, kernel_size=2, stride=2)
        x = self.max_unpool(x, indices)
        
        # Reshape for LazyConvTranspose3d
        x = x.view(x.shape[0], 1, x.shape[-2], x.shape[-1], 1)
        x = self.conv_transpose3d(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Reshape for RNNCell
        x = x.view(x.shape[0], -1)
        hx = torch.zeros(x.shape[0], 32).to(x.device)
        x = self.rnn_cell(x, hx)
        
        # Apply Linear
        x = self.linear(x)
        
        # Apply Unflatten
        x = self.unflatten(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
