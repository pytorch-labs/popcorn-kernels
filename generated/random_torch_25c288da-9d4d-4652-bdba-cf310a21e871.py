
# This is a random torch model generated by the following modules: ['GaussianNLLLoss', 'PoissonNLLLoss', 'ReflectionPad3d', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReflectionPad3d(1)
        self.norm1 = nn.InstanceNorm3d(10)
        self.norm2 = nn.InstanceNorm3d(20)
        self.norm3 = nn.InstanceNorm3d(30)
        self.norm4 = nn.InstanceNorm3d(40)
        self.norm5 = nn.InstanceNorm3d(50)
        self.gaussian_loss = nn.GaussianNLLLoss()
        self.poisson_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply ReflectionPad3d
        x = self.pad(x)
        
        # Apply InstanceNorm3d multiple times
        x = self.norm1(x)
        x = self.norm2(x)
        x = self.norm3(x)
        x = self.norm4(x)
        x = self.norm5(x)
        
        # Compute GaussianNLLLoss and PoissonNLLLoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        gaussian_loss = self.gaussian_loss(x, target, var)
        poisson_loss = self.poisson_loss(x, target)
        
        # Return the losses as a tuple
        return gaussian_loss, poisson_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

