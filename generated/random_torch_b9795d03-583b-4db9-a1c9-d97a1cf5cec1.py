
# This is a random torch model generated by the following modules: ['Embedding', 'LogSoftmax', 'Sequential', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.sequential = nn.Sequential(
            nn.Linear(128, 256),
            nn.ReLU(),
            nn.Linear(256, 512),
            nn.ReLU()
        )  # Sequential layer
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))  # FractionalMaxPool2d layer
        self.log_softmax = nn.LogSoftmax(dim=1)  # LogSoftmax layer

    def forward(self, x):
        # Assume input is a tensor of indices for embedding
        x = self.embedding(x)
        
        # Reshape for Sequential layer
        x = x.view(-1, 128)
        x = self.sequential(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(-1, 1, 32, 32)  # Arbitrary reshape to fit FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Flatten for LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (1, 10)).cuda()  # Random indices for embedding
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

