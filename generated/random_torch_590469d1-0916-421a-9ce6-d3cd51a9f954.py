
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'L1Loss', 'CrossMapLRN2d', 'Conv3d', 'UpsamplingBilinear2d', 'AlphaDropout', 'Threshold', 'LayerNorm', 'HingeEmbeddingLoss', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.layer_norm = nn.LayerNorm([20, 10, 10])
        self.conv_transpose3d = nn.ConvTranspose3d(20, 10, kernel_size=3)
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.l1_loss = nn.L1Loss()
        self.hinge_embedding_loss = nn.HingeEmbeddingLoss()

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d_1(x)
        
        # Reshape for CrossMapLRN2d (assuming 4D input)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.cross_map_lrn2d(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply Conv3d again
        x = self.conv3d_2(x)
        
        # Reshape for UpsamplingBilinear2d (assuming 4D input)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.upsampling_bilinear2d(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for LayerNorm (assuming 4D input)
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.layer_norm(x)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d(x)
        
        # Apply BCEWithLogitsLoss (dummy target)
        target = torch.ones_like(x)
        bce_loss = self.bce_with_logits_loss(x, target)
        
        # Apply L1Loss (dummy target)
        l1_loss = self.l1_loss(x, target)
        
        # Apply HingeEmbeddingLoss (dummy target)
        hinge_target = torch.ones(x.size(0))
        hinge_loss = self.hinge_embedding_loss(x.view(x.size(0), -1).mean(dim=1), hinge_target)
        
        # Return the losses as a tuple
        return bce_loss, l1_loss, hinge_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
