
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'TransformerEncoderLayer', 'Conv1d', 'BatchNorm1d', 'CELU', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=32, kernel_size=4, stride=2, padding=1)
        self.transformer_encoder = nn.TransformerEncoderLayer(d_model=32, nhead=4)
        self.conv1d = nn.Conv1d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1)
        self.batch_norm = nn.BatchNorm1d(num_features=64)
        self.celu = nn.CELU()
        self.softshrink = nn.Softshrink(lambd=0.5)

    def forward(self, x):
        # Apply ConvTranspose2d to increase spatial dimensions
        x = self.conv_transpose(x)
        
        # Reshape and permute to fit TransformerEncoderLayer input shape (sequence_length, batch_size, feature_dim)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)
        
        # Apply TransformerEncoderLayer
        x = self.transformer_encoder(x)
        
        # Reshape back to (batch_size, channels, sequence_length)
        x = x.permute(1, 2, 0)
        
        # Apply Conv1d
        x = self.conv1d(x)
        
        # Apply BatchNorm1d
        x = self.batch_norm(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with 3 channels and 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
