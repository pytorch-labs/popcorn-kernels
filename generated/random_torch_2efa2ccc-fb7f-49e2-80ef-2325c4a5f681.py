
# This is a random torch model generated by the following modules: ['Softshrink', 'BatchNorm3d', 'Sigmoid', 'LazyConvTranspose3d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink()
        self.bn1 = nn.BatchNorm3d(16)
        self.bn2 = nn.BatchNorm3d(32)
        self.sigmoid = nn.Sigmoid()
        self.conv_transpose1 = nn.LazyConvTranspose3d(16, kernel_size=3, stride=2, padding=1)
        self.conv_transpose2 = nn.LazyConvTranspose3d(32, kernel_size=3, stride=2, padding=1)
        self.rnn_cell = nn.RNNCellBase(input_size=32, hidden_size=64)

    def forward(self, x):
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape to 5D tensor for 3D operations
        x = x.view(x.size(0), -1, 8, 8, 8)  # Arbitrary reshaping to fit 3D operations
        
        # Apply BatchNorm3d
        x = self.bn1(x)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose1(x)
        
        # Apply BatchNorm3d again
        x = self.bn2(x)
        
        # Apply ConvTranspose3d again
        x = self.conv_transpose2(x)
        
        # Flatten for RNNCellBase
        x = x.view(x.size(0), -1)
        
        # Apply RNNCellBase
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x, hx)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

