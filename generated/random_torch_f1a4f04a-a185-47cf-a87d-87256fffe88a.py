
# This is a random torch model generated by the following modules: ['NLLLoss', 'Hardshrink', 'ReflectionPad2d', 'AdaptiveAvgPool2d', 'Sequential', 'ReLU6', 'Flatten', 'Module', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.hardshrink = nn.Hardshrink()
        self.relu6 = nn.ReLU6()
        self.flatten = nn.Flatten()
        self.sequential = nn.Sequential(
            nn.Linear(16 * 5 * 5, 120),
            nn.ReLU6(),
            nn.Linear(120, 84),
            nn.Hardshrink(),
            nn.Linear(84, 10)
        )
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.reflection_pad(x)
        # Reshape to 5D (batch, channels, depth, height, width) for ConvTranspose3d
        x = x.unsqueeze(2)  # Add depth dimension
        x = self.lazy_conv_transpose3d(x)
        # Remove depth dimension to return to 4D
        x = x.squeeze(2)
        x = self.adaptive_avg_pool2d(x)
        x = self.hardshrink(x)
        x = self.relu6(x)
        x = self.flatten(x)
        x = self.sequential(x)
        x = F.log_softmax(x, dim=1)  # For NLLLoss
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 height/width
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

# Example usage:
# model = Model().cuda()
# inputs = get_inputs()
# output = model(inputs[0])
# print(output.shape)
