
# This is a random torch model generated by the following modules: ['MaxPool2d', 'Linear', 'ReLU', 'Conv2d', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class RandomModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)  # Input channels: 3, Output channels: 16
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)  # Input channels: 16, Output channels: 32
        self.pool = nn.MaxPool2d(2, 2)  # 2x2 pooling
        self.fc1 = nn.Linear(32 * 16 * 16, 128)  # Linear layer following flattening
        self.fc2 = nn.Linear(128, 10)  # Final output layer (for 10 classes)

    def forward(self, x):
        # Applying first convolution and activation
        x = F.relu(self.conv1(x))  
        x = self.pool(x)  # MaxPooling after first convolution
        
        # Applying second convolution and activation
        x = F.relu(self.conv2(x))
        x = self.pool(x)  # MaxPooling after second convolution
        
        # Flattening the tensor for fully connected layer
        x = x.view(-1, 32 * 16 * 16)  # Reshape for linear layer
        
        # First fully connected layer with ReLU
        x = F.relu(self.fc1(x))
        
        # Final output layer
        x = self.fc2(x)
        
        return F.log_softmax(x, dim=1)  # Applying LogSoftmax on the output


def get_random_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64)  # 1 sample, 3 channels, 64x64 image
    return [x]

