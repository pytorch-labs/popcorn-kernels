
# This is a random torch model generated by the following modules: ['RReLU', 'GRUCell', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rrelu1 = nn.RReLU()
        self.rrelu2 = nn.RReLU()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(2, 2))

    def forward(self, x):
        # Apply RReLU activation
        x = self.rrelu1(x)
        
        # Reshape input for GRUCell
        batch_size = x.size(0)
        x = x.view(batch_size, -1)  # Flatten all dimensions except batch
        
        # Pass through GRUCell layers
        hx1 = torch.zeros(batch_size, 256).to(x.device)
        hx1 = self.gru_cell1(x, hx1)
        
        hx2 = torch.zeros(batch_size, 128).to(x.device)
        hx2 = self.gru_cell2(hx1, hx2)
        
        # Reshape for Fold layer
        x = hx2.view(batch_size, -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.fold(x)
        
        # Apply final RReLU activation
        x = self.rrelu2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 10, 10).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

