
# This is a random torch model generated by the following modules: ['CircularPad2d', 'ReLU', 'FeatureAlphaDropout', 'MultiMarginLoss', 'Linear', 'SoftMarginLoss', 'ParameterList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(2)
        self.relu = nn.ReLU()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(32, 16)) for _ in range(5)])
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for Linear layers
        x = x.view(x.size(0), -1)
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.relu(x)
        x = self.linear2(x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = torch.matmul(x, param)
        
        # Apply MultiMarginLoss (assuming target is provided)
        target = torch.randint(0, 16, (x.size(0),), device=x.device)
        loss1 = self.multi_margin_loss(x, target)
        
        # Apply SoftMarginLoss (assuming target is provided)
        target2 = torch.randint(0, 2, (x.size(0),), device=x.device).float()
        loss2 = self.soft_margin_loss(x, target2)
        
        # Return both losses
        return loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
