
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'GRUCell', 'CTCLoss', 'PairwiseDistance', 'AdaptiveMaxPool1d', 'InstanceNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.gru_cell = nn.GRUCell(input_size=128, hidden_size=256)
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=64)
        self.instance_norm = nn.InstanceNorm2d(num_features=64)
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply LazyBatchNorm3d
        x = self.bn1(x)
        
        # Reshape for GRUCell
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1, depth * height * width)
        x = x.permute(0, 2, 1)  # (batch_size, depth*height*width, channels)
        
        # Apply GRUCell
        hx = torch.zeros(batch_size, 256).to(x.device)  # Initialize hidden state
        gru_outputs = []
        for t in range(x.size(1)):
            hx = self.gru_cell(x[:, t, :], hx)
            gru_outputs.append(hx)
        x = torch.stack(gru_outputs, dim=1)
        
        # Reshape for PairwiseDistance
        x = x.view(batch_size, -1)
        x = x.unsqueeze(1)  # Add a dimension for pairwise distance
        x = self.pairwise_distance(x, x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.adaptive_max_pool(x)
        
        # Reshape for InstanceNorm2d
        x = x.view(batch_size, 64, 8, 8)  # Reshape to 4D tensor
        x = self.instance_norm(x)
        
        # Reshape for CTCLoss
        x = x.view(batch_size, -1)
        log_probs = F.log_softmax(x, dim=1)
        targets = torch.randint(0, 64, (batch_size, 10), dtype=torch.long).to(x.device)
        input_lengths = torch.full((batch_size,), 64, dtype=torch.long).to(x.device)
        target_lengths = torch.randint(1, 10, (batch_size,), dtype=torch.long).to(x.device)
        loss = self.ctc_loss(log_probs, targets, input_lengths, target_lengths)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
