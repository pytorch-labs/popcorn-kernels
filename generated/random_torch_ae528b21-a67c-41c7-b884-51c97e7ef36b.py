
# This is a random torch model generated by the following modules: ['Mish', 'LazyBatchNorm2d', 'Softplus', 'GRU', 'Dropout2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.mish1 = nn.Mish()
        self.bn2 = nn.LazyBatchNorm2d()
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.softplus1 = nn.Softplus()
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.mish2 = nn.Mish()
        self.bn3 = nn.LazyBatchNorm2d()
        self.dropout3 = nn.Dropout2d(p=0.5)
        self.softplus2 = nn.Softplus()
        self.gru2 = nn.GRU(input_size=64, hidden_size=32, num_layers=1, batch_first=True)
        self.mish3 = nn.Mish()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.bn1(x)
        x = self.dropout1(x)
        x = self.mish1(x)
        x = self.bn2(x)
        x = self.dropout2(x)
        x = self.softplus1(x)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = x.permute(0, 2, 1)  # Swap dimensions for GRU input (batch_size, seq_len, input_size)
        
        x, _ = self.gru(x)
        x = self.mish2(x)
        
        # Reshape back to 4D for BatchNorm and Dropout
        x = x.permute(0, 2, 1)  # Swap back to (batch_size, input_size, seq_len)
        x = x.view(batch_size, -1, height, width)  # Reshape to (batch_size, channels, height, width)
        
        x = self.bn3(x)
        x = self.dropout3(x)
        x = self.softplus2(x)
        
        # Reshape for second GRU
        x = x.view(batch_size, channels, -1)
        x = x.permute(0, 2, 1)
        
        x, _ = self.gru2(x)
        x = self.mish3(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
