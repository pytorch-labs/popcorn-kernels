
# This is a random torch model generated by the following modules: ['Softshrink', 'SELU', 'FeatureAlphaDropout', 'Mish', 'LPPool3d', 'MSELoss', 'Conv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.lppool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.mish = nn.Mish()
        self.selu = nn.SELU()
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.mseloss = nn.MSELoss()

    def forward(self, x):
        # Apply Conv2d layers
        x = self.conv1(x)
        x = self.mish(x)
        x = self.conv2(x)
        x = self.selu(x)
        x = self.conv3(x)
        x = self.softshrink(x)
        
        # Reshape for LPPool3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D pooling
        x = self.lppool3d(x)
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Flatten the output for MSELoss
        x = x.view(x.size(0), -1)
        
        # Dummy target for MSELoss (for demonstration purposes)
        target = torch.zeros_like(x)
        loss = self.mseloss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

