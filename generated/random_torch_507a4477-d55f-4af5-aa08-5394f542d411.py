
# This is a random torch model generated by the following modules: ['Fold', 'LazyBatchNorm1d', 'BatchNorm2d', 'GaussianNLLLoss', 'LazyConv3d', 'MaxUnpool3d', 'ParameterList', 'LogSoftmax']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv3d = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(num_features=16)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.fold = nn.Fold(output_size=(8, 8), kernel_size=(2, 2))
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(16)) for _ in range(5)])
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply LazyConv3d
        x = self.lazy_conv3d(x)
        
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.batch_norm2d(x)
        
        # Reshape for LazyBatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.lazy_batch_norm1d(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x, _ = self.max_unpool3d(x)
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, x.size(2) * x.size(3))
        x = self.fold(x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1)
        
        # Apply LogSoftmax
        x = self.log_softmax(x)
        
        # GaussianNLLLoss requires target and variance, so we return x for further processing
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
