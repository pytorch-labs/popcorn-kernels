
# This is a random torch model generated by the following modules: ['Embedding', 'FractionalMaxPool3d', 'AdaptiveMaxPool3d', 'Mish', 'InstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))  # FractionalMaxPool3d layer
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))  # AdaptiveMaxPool3d layer
        self.mish = nn.Mish()  # Mish activation
        self.instance_norm1d = nn.InstanceNorm1d(128)  # InstanceNorm1d layer

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for the embedding layer
        x = self.embedding(x)
        
        # Reshape to 5D tensor for 3D pooling layers
        x = x.unsqueeze(0).unsqueeze(0)  # Shape: (batch_size, channels, depth, height, width)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        # Reshape back to 2D tensor for InstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Shape: (batch_size, channels, flattened_dim)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32,)).cuda()  # Random indices for embedding
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

