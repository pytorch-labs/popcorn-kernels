
# This is a random torch model generated by the following modules: ['Identity', 'AdaptiveAvgPool2d', 'AdaptiveMaxPool2d', 'EmbeddingBag', 'RNNCell', 'SELU', 'AdaptiveMaxPool3d', 'ReflectionPad2d', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.identity = nn.Identity()
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.embedding_bag = nn.EmbeddingBag(1000, 10, mode='mean')
        self.rnn_cell = nn.RNNCell(10, 20)
        self.selu = nn.SELU()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((5, 5, 5))
        self.reflection_pad2d = nn.ReflectionPad2d(2)
        self.constant_pad1d = nn.ConstantPad1d(2, 3.5)

    def forward(self, x):
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for 2D operations
        if x.dim() == 3:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        
        # Apply ReflectionPad2d
        x = self.reflection_pad2d(x)
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptive_avg_pool2d(x)
        
        # Apply AdaptiveMaxPool2d
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), -1)  # Flatten for 1D operations
        
        # Apply ConstantPad1d
        x = self.constant_pad1d(x)
        
        # Reshape for EmbeddingBag
        x = x.long()  # Convert to long for embedding
        x = self.embedding_bag(x)
        
        # Apply RNNCell
        hx = torch.zeros(x.size(0), 20).to(x.device)  # Initialize hidden state
        x = self.rnn_cell(x, hx)
        
        # Apply SELU
        x = self.selu(x)
        
        # Reshape for 3D operations
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions for 3D pooling
        
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

