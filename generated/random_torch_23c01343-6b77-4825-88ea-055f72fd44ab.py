
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool2d', 'ZeroPad2d', 'Sigmoid', 'AdaptiveAvgPool2d', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool = nn.AdaptiveMaxPool2d((16, 16))
        self.zero_pad = nn.ZeroPad2d(2)
        self.sigmoid = nn.Sigmoid()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((8, 8))
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(3, 16, kernel_size=3, padding=1),
            'conv2': nn.Conv2d(16, 32, kernel_size=3, padding=1),
        })

    def forward(self, x):
        x = self.adaptive_max_pool(x)
        x = self.zero_pad(x)
        x = self.sigmoid(x)
        x = self.module_dict['conv1'](x)
        x = self.adaptive_avg_pool(x)
        x = self.module_dict['conv2'](x)
        x = self.sigmoid(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
