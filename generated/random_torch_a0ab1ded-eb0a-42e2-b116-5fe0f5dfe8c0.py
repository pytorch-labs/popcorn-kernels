
# This is a random torch model generated by the following modules: ['MaxUnpool1d', 'GRU', 'Mish', 'UpsamplingBilinear2d', 'GELU', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.mish = nn.Mish()
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.gelu = nn.GELU()
        self.selu = nn.SELU()

    def forward(self, x):
        # Assuming x is of shape (batch_size, channels, length)
        batch_size, channels, length = x.shape
        
        # MaxUnpool1d requires indices from a previous MaxPool1d operation
        # For simplicity, we'll create dummy indices
        pool_output, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(pool_output, indices)
        
        # Reshape for GRU
        x = x.permute(0, 2, 1)  # (batch_size, length, channels)
        x, _ = self.gru(x)
        
        # Apply Mish activation
        x = self.mish(x)
        
        # Reshape for UpsamplingBilinear2d
        x = x.permute(0, 2, 1)  # (batch_size, channels, length)
        x = x.unsqueeze(-1)  # (batch_size, channels, length, 1)
        x = self.upsampling_bilinear2d(x)
        
        # Apply GELU activation
        x = self.gelu(x)
        
        # Apply SELU activation
        x = self.selu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 64).cuda()  # (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

