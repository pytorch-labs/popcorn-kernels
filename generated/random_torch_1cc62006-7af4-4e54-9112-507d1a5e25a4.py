
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'LazyBatchNorm2d', 'BatchNorm2d', 'Hardswish', 'BCELoss', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.batch_norm2d = nn.BatchNorm2d(10)
        self.hardswish = nn.Hardswish()
        self.bce_loss = nn.BCELoss()
        self.threshold = nn.Threshold(0.1, 0.5)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.fractional_max_pool3d(x)
        
        # Reshape to 4D (batch, channels, height, width) for 2D operations
        x = x.view(x.size(0), x.size(1), x.size(3), x.size(4))
        
        x = self.lazy_batch_norm2d(x)
        x = self.batch_norm2d(x)
        x = self.hardswish(x)
        
        # Apply threshold
        x = self.threshold(x)
        
        # Reshape back to 5D for BCELoss (assuming binary classification)
        x = x.view(x.size(0), -1)
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

