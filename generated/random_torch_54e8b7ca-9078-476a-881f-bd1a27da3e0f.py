
# This is a random torch model generated by the following modules: ['CosineEmbeddingLoss', 'Hardshrink', 'LazyBatchNorm2d', 'UpsamplingNearest2d', 'CircularPad1d', 'BCELoss', 'PoissonNLLLoss', 'BCEWithLogitsLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn = nn.LazyBatchNorm2d()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.circular_pad = nn.CircularPad1d(padding=2)
        self.hardshrink = nn.Hardshrink()
        self.bce_loss = nn.BCELoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.lazy_bn(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsample(x)
        
        # Reshape for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.circular_pad(x)
        
        # Reshape back to original dimensions
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Compute BCE loss (dummy target)
        target_bce = torch.ones_like(x)
        bce_loss = self.bce_loss(x, target_bce)
        
        # Compute PoissonNLL loss (dummy target)
        target_poisson = torch.ones_like(x)
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Compute BCEWithLogits loss (dummy target)
        target_bce_logits = torch.ones_like(x)
        bce_logits_loss = self.bce_with_logits_loss(x, target_bce_logits)
        
        # Compute CosineEmbedding loss (dummy input2 and target)
        input2 = torch.ones_like(x)
        target_cosine = torch.ones(x.size(0))
        cosine_loss = self.cosine_embedding_loss(x.view(x.size(0), -1), input2.view(input2.size(0), -1), target_cosine)
        
        # Return the sum of all losses as the output
        return bce_loss + poisson_loss + bce_logits_loss + cosine_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
