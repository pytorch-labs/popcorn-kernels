
# This is a random torch model generated by the following modules: ['Softmax2d', 'Hardsigmoid', 'LocalResponseNorm', 'LazyConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose3d = nn.LazyConvTranspose3d(out_channels=16, kernel_size=3, stride=2, padding=1)
        self.local_response_norm = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.hardsigmoid = nn.Hardsigmoid()
        self.softmax2d = nn.Softmax2d()
        self.lazy_conv_transpose3d_2 = nn.LazyConvTranspose3d(out_channels=8, kernel_size=3, stride=1, padding=1)
        self.local_response_norm_2 = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=1.0)
        self.hardsigmoid_2 = nn.Hardsigmoid()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.lazy_conv_transpose3d(x)
        x = self.local_response_norm(x)
        x = self.hardsigmoid(x)
        
        # Reshape to 2D for Softmax2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        x = self.softmax2d(x)
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)
        
        x = self.lazy_conv_transpose3d_2(x)
        x = self.local_response_norm_2(x)
        x = self.hardsigmoid_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

