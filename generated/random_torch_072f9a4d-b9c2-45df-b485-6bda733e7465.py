
# This is a random torch model generated by the following modules: ['LazyInstanceNorm2d', 'AvgPool2d', 'AvgPool1d', 'Flatten', 'CTCLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm2d()
        self.pool2d = nn.AvgPool2d(kernel_size=2)
        self.pool1d = nn.AvgPool1d(kernel_size=2)
        self.flatten = nn.Flatten()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Apply LazyInstanceNorm2d
        x = self.norm1(x)
        
        # Apply AvgPool2d
        x = self.pool2d(x)
        
        # Reshape to 1D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, -1)
        
        # Apply AvgPool1d
        x = self.pool1d(x)
        
        # Flatten the output
        x = self.flatten(x)
        
        # For CTC Loss, we need to return log probabilities and target sequences
        # Here, we assume the model outputs log probabilities directly
        # and the target sequences are provided externally.
        # In practice, you would need to compute the log probabilities using a log_softmax layer.
        log_probs = F.log_softmax(x, dim=1)
        
        # CTC Loss requires input_lengths and target_lengths, which are not provided here.
        # For the sake of this example, we will return the log_probs and let the user handle the loss computation.
        return log_probs


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

