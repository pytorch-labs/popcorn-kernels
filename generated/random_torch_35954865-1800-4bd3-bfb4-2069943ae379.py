
# This is a random torch model generated by the following modules: ['ModuleList', 'ConvTranspose1d', 'ZeroPad1d', 'AvgPool3d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        # Define a ModuleList to hold multiple ConvTranspose1d and LazyConvTranspose1d layers
        self.conv_transpose_layers = nn.ModuleList([
            nn.ConvTranspose1d(1, 10, kernel_size=5),
            nn.LazyConvTranspose1d(10, 20, kernel_size=5),
            nn.ConvTranspose1d(20, 30, kernel_size=5),
            nn.LazyConvTranspose1d(30, 40, kernel_size=5),
            nn.ConvTranspose1d(40, 50, kernel_size=5)
        ])
        
        # Define a ZeroPad1d layer
        self.zero_pad = nn.ZeroPad1d(2)
        
        # Define an AvgPool3d layer
        self.avg_pool = nn.AvgPool3d(kernel_size=2)

    def forward(self, x):
        # Reshape the input to fit 1D convolutions
        x = x.view(x.size(0), 1, -1)
        
        # Apply the ConvTranspose1d and LazyConvTranspose1d layers
        for layer in self.conv_transpose_layers:
            x = F.relu(layer(x))
        
        # Apply ZeroPad1d
        x = self.zero_pad(x)
        
        # Reshape the output to fit AvgPool3d
        x = x.unsqueeze(1).unsqueeze(1)  # Add dummy dimensions for 3D pooling
        x = self.avg_pool(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
