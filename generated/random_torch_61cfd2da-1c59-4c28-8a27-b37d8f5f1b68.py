
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'LazyInstanceNorm2d', 'ReLU6', 'AdaptiveMaxPool3d', 'Softmax2d', 'ConstantPad1d', 'MaxUnpool3d', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.relu6 = nn.ReLU6()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(8, 8, 8))
        self.softmax2d = nn.Softmax2d()
        self.constant_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2, padding=0)
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm(x)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(4)  # Add a depth dimension
        x = self.adaptive_max_pool3d(x)
        
        # Reshape back for Softmax2d
        x = x.squeeze(4)  # Remove depth dimension
        x = x.squeeze(1)  # Remove channel dimension
        x = self.softmax2d(x)
        
        # Reshape for ConstantPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.constant_pad1d(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), 8, 8, 8)  # Reshape to 3D
        x, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(x, indices)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.replication_pad1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

