
# This is a random torch model generated by the following modules: ['CELU', 'Container', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.celu1 = nn.CELU()
        self.celu2 = nn.CELU()
        self.container = nn.Sequential(
            nn.CELU(),
            nn.ELU(),
            nn.CELU(),
            nn.ELU(),
            nn.CELU()
        )
        self.elu1 = nn.ELU()
        self.elu2 = nn.ELU()

    def forward(self, x):
        x = self.celu1(x)
        x = self.container(x)
        x = self.elu1(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor
        x = self.celu2(x)
        x = self.elu2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

