
# This is a random torch model generated by the following modules: ['Unfold', 'ChannelShuffle', 'NLLLoss', 'AvgPool2d', 'ReLU', 'Sequential', 'MaxPool3d', 'LogSigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.relu = nn.ReLU()
        self.sequential = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU()
        )
        self.max_pool3d = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))
        self.log_sigmoid = nn.LogSigmoid()
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Unfold the input tensor
        x = self.unfold(x)
        x = x.view(x.size(0), 16, 16, -1)  # Reshape to fit ChannelShuffle
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply AvgPool2d
        x = self.avg_pool(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Pass through Sequential
        x = self.sequential(x)
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(2)  # Add a temporal dimension
        x = self.max_pool3d(x)
        
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        
        # Flatten the output for NLLLoss
        x = x.view(x.size(0), -1)
        
        # Assuming a target tensor for NLLLoss (dummy target for demonstration)
        target = torch.zeros(x.size(0), dtype=torch.long).to(x.device)
        
        # Apply NLLLoss (usually used in training, but included here as per the module list)
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

