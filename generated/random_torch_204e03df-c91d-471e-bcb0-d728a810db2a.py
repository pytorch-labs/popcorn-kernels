
# This is a random torch model generated by the following modules: ['ReplicationPad2d', 'LSTMCell', 'Unfold', 'TransformerDecoderLayer', 'ZeroPad3d', 'Fold', 'ModuleDict', 'MaxPool1d', 'AdaptiveMaxPool1d', 'Threshold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.replication_pad = nn.ReplicationPad2d(2)
        self.lstm_cell = nn.LSTMCell(64, 128)
        self.unfold = nn.Unfold(kernel_size=(3, 3), stride=(1, 1))
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=128, nhead=8)
        self.zero_pad = nn.ZeroPad3d(1)
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=(3, 3), stride=(1, 1))
        self.module_dict = nn.ModuleDict({
            'max_pool1d': nn.MaxPool1d(kernel_size=2, stride=2),
            'adaptive_max_pool1d': nn.AdaptiveMaxPool1d(output_size=64),
            'threshold': nn.Threshold(threshold=0.5, value=0.0)
        })
        
    def forward(self, x):
        # Apply ReplicationPad2d
        x = self.replication_pad(x)
        
        # Reshape for LSTMCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1, height * width).permute(2, 0, 1)  # (seq_len, batch, input_size)
        hx = torch.zeros(batch_size, 128).to(x.device)
        cx = torch.zeros(batch_size, 128).to(x.device)
        outputs = []
        for i in range(x.size(0)):
            hx, cx = self.lstm_cell(x[i], (hx, cx))
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        
        # Apply Unfold
        x = x.permute(1, 2, 0).unsqueeze(1)  # (batch, 1, 128, seq_len)
        x = self.unfold(x)
        
        # Apply TransformerDecoderLayer
        x = x.permute(2, 0, 1)  # (seq_len, batch, features)
        memory = torch.zeros_like(x)
        x = self.transformer_decoder_layer(x, memory)
        
        # Apply ZeroPad3d
        x = x.permute(1, 2, 0).unsqueeze(1)  # (batch, 1, features, seq_len)
        x = self.zero_pad(x)
        
        # Apply Fold
        x = self.fold(x)
        
        # Apply ModuleDict operations
        x = x.view(batch_size, -1, x.size(-1))  # (batch, features, seq_len)
        x = self.module_dict['max_pool1d'](x)
        x = self.module_dict['adaptive_max_pool1d'](x)
        x = self.module_dict['threshold'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
