
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'Hardshrink', 'ReLU', 'UpsamplingBilinear2d', 'LazyConvTranspose1d', 'LeakyReLU', 'ReflectionPad1d', 'ConstantPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.hardshrink = nn.Hardshrink()
        self.relu = nn.ReLU()
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.leaky_relu = nn.LeakyReLU()
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.constant_pad = nn.ConstantPad3d(padding=1, value=0)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.bn2 = nn.LazyBatchNorm1d()
        self.conv_transpose3 = nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=2)
        self.bn3 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        x = self.bn1(x.view(x.size(0), x.size(1), -1))  # Flatten height and width
        x = self.hardshrink(x)
        x = self.relu(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        x = self.upsample(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width again
        x = self.conv_transpose1(x)
        x = self.leaky_relu(x)
        x = self.reflection_pad(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back to 2D
        x = self.constant_pad(x)
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width again
        x = self.conv_transpose2(x)
        x = self.bn2(x)
        x = self.conv_transpose3(x)
        x = self.bn3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

