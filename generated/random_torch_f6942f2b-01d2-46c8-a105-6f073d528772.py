
# This is a random torch model generated by the following modules: ['Tanhshrink', 'CosineSimilarity', 'CrossEntropyLoss', 'Hardsigmoid', 'CosineEmbeddingLoss', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.tanhshrink = nn.Tanhshrink()
        self.hardsigmoid = nn.Hardsigmoid()
        self.module_dict = nn.ModuleDict({
            'cosine_sim': nn.CosineSimilarity(dim=1),
            'cosine_embedding_loss': nn.CosineEmbeddingLoss(),
            'cross_entropy_loss': nn.CrossEntropyLoss()
        })
        
    def forward(self, x):
        # Apply Tanhshrink and Hardsigmoid
        x = self.tanhshrink(x)
        x = self.hardsigmoid(x)
        
        # Reshape for CosineSimilarity
        x_reshaped = x.view(x.size(0), -1)
        x1 = x_reshaped[:, :x_reshaped.size(1)//2]
        x2 = x_reshaped[:, x_reshaped.size(1)//2:]
        
        # Apply CosineSimilarity
        cosine_sim = self.module_dict['cosine_sim'](x1, x2)
        
        # Dummy target for CosineEmbeddingLoss
        target = torch.ones(x.size(0)).to(x.device)
        
        # Apply CosineEmbeddingLoss
        cosine_embedding_loss = self.module_dict['cosine_embedding_loss'](x1, x2, target)
        
        # Dummy target for CrossEntropyLoss
        dummy_logits = torch.randn(x.size(0), 10).to(x.device)
        dummy_labels = torch.randint(0, 10, (x.size(0),)).to(x.device)
        
        # Apply CrossEntropyLoss
        cross_entropy_loss = self.module_dict['cross_entropy_loss'](dummy_logits, dummy_labels)
        
        # Return the cosine similarity and the losses
        return cosine_sim, cosine_embedding_loss, cross_entropy_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
