
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'Module', 'LPPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
        self.pool1 = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.pool2 = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.module1 = nn.Module()
        self.module2 = nn.Module()

    def forward(self, x):
        # Apply batch normalization
        x = self.bn1(x)
        
        # Reshape to 1D for LPPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)
        
        # Apply LPPool1d
        x = self.pool1(x)
        
        # Reshape back to 2D for batch normalization
        x = x.view(batch_size, channels, height, -1)
        
        # Apply batch normalization again
        x = self.bn2(x)
        
        # Reshape to 1D for LPPool1d
        x = x.view(batch_size, channels * height, -1)
        
        # Apply LPPool1d again
        x = self.pool2(x)
        
        # Reshape back to 2D for module
        x = x.view(batch_size, channels, height, -1)
        
        # Apply module
        x = self.module1(x)
        x = self.module2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
