
# This is a random torch model generated by the following modules: ['Conv3d', 'Hardswish', 'SoftMarginLoss', 'ReLU', 'LeakyReLU', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=(3, 3, 3))
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=(3, 3, 3))
        self.avgpool2d = nn.AvgPool2d(kernel_size=2)
        self.relu = nn.ReLU()
        self.leaky_relu = nn.LeakyReLU()
        self.hardswish = nn.Hardswish()
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.conv3d_1(x)
        x = self.hardswish(x)
        x = self.conv3d_2(x)
        x = self.leaky_relu(x)
        
        # Reduce the 5D tensor to 4D by averaging over the depth dimension
        x = torch.mean(x, dim=2)  # Shape: (batch, channels, height, width)
        
        x = self.avgpool2d(x)
        x = self.relu(x)
        
        # Flatten the tensor for loss computation
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        
        # Dummy target for SoftMarginLoss (assuming binary classification)
        target = torch.ones_like(x[:, 0])  # Binary target for simplicity
        loss = self.soft_margin_loss(x[:, 0], target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 64, 64).cuda()  # Example input shape: (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

