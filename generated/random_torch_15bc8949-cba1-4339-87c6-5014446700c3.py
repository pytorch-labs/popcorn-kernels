
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'UpsamplingBilinear2d', 'LSTMCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.lstm_cell1 = nn.LSTMCell(input_size=64, hidden_size=128)
        self.lstm_cell2 = nn.LSTMCell(input_size=128, hidden_size=64)

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # First, reshape to 1D for ConvTranspose1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Reshape to (batch_size, channels, height * width)
        
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape back to 2D for UpsamplingBilinear2d
        x = x.view(batch_size, -1, height, width)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Flatten for LSTMCell
        x = x.view(batch_size, -1)
        
        # Initialize hidden and cell states for LSTMCell
        hx1 = torch.zeros(batch_size, 128).to(x.device)
        cx1 = torch.zeros(batch_size, 128).to(x.device)
        hx2 = torch.zeros(batch_size, 64).to(x.device)
        cx2 = torch.zeros(batch_size, 64).to(x.device)
        
        # Apply LSTMCell layers
        hx1, cx1 = self.lstm_cell1(x, (hx1, cx1))
        hx2, cx2 = self.lstm_cell2(hx1, (hx2, cx2))
        
        return hx2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

