
# This is a random torch model generated by the following modules: ['ConvTranspose3d', 'LogSoftmax', 'RReLU', 'ZeroPad3d', 'AvgPool3d', 'LazyInstanceNorm2d', 'MSELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=5)
        self.zero_pad1 = nn.ZeroPad3d(2)
        self.avg_pool1 = nn.AvgPool3d(kernel_size=2)
        self.rrelu1 = nn.RReLU()
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=5)
        self.zero_pad2 = nn.ZeroPad3d(2)
        self.avg_pool2 = nn.AvgPool3d(kernel_size=2)
        self.rrelu2 = nn.RReLU()
        self.lazy_instance_norm = nn.LazyInstanceNorm2d()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.mse_loss = nn.MSELoss()

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.zero_pad1(x)
        x = self.avg_pool1(x)
        x = self.rrelu1(x)
        x = self.conv_transpose2(x)
        x = self.zero_pad2(x)
        x = self.avg_pool2(x)
        x = self.rrelu2(x)
        # Reshape to 2D for LazyInstanceNorm2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))
        x = self.lazy_instance_norm(x)
        # Reshape back to 3D
        x = x.view(x.size(0), x.size(1), -1, x.size(-2), x.size(-1))
        x = self.log_softmax(x)
        # Compute MSE loss with a dummy target (for demonstration purposes)
        target = torch.zeros_like(x)
        loss = self.mse_loss(x, target)
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

