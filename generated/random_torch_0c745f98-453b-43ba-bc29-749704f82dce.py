
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'ConstantPad3d', 'Identity']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(output_size=10)
        self.identity = nn.Identity()

    def forward(self, x):
        # Apply ConstantPad3d to the input
        x = self.pad(x)
        
        # Reshape the tensor to fit AdaptiveMaxPool1d
        # Assuming the input is 3D, we reshape it to 2D for AdaptiveMaxPool1d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * channels * depth * height, width)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool(x)
        
        # Reshape back to a 3D tensor
        x = x.view(batch_size, channels, depth, height, -1)
        
        # Apply Identity
        x = self.identity(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input with shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
