
# This is a random torch model generated by the following modules: ['LazyConvTranspose2d', 'FractionalMaxPool3d', 'AvgPool1d', 'ConstantPad2d', 'ReflectionPad3d', 'RNNCellBase']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose = nn.LazyConvTranspose2d(out_channels=16, kernel_size=3, stride=2)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.constant_pad = nn.ConstantPad2d(padding=2, value=1.0)
        self.reflection_pad = nn.ReflectionPad3d(padding=1)
        self.rnn_cell = nn.RNNCellBase(input_size=128, hidden_size=64)

    def forward(self, x):
        # Apply LazyConvTranspose2d
        x = self.conv_transpose(x)
        
        # Reshape to 5D for FractionalMaxPool3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.fractional_max_pool(x)
        
        # Reshape back to 4D for ConstantPad2d
        x = x.squeeze(2)
        x = self.constant_pad(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.unsqueeze(2)
        x = self.reflection_pad(x)
        
        # Reshape to 2D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.avg_pool(x)
        
        # Reshape to 2D for RNNCellBase
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        x = self.rnn_cell(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

