
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'InstanceNorm1d', 'PReLU', 'RNNCellBase']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.instance_norm1d = nn.InstanceNorm1d(125)
        self.prelu = nn.PReLU()
        self.rnn_cell_base = nn.RNNCellBase(input_size=125, hidden_size=64)
        self.rnn_cell_base2 = nn.RNNCellBase(input_size=64, hidden_size=32)
        self.rnn_cell_base3 = nn.RNNCellBase(input_size=32, hidden_size=16)
        self.rnn_cell_base4 = nn.RNNCellBase(input_size=16, hidden_size=8)
        self.rnn_cell_base5 = nn.RNNCellBase(input_size=8, hidden_size=4)

    def forward(self, x):
        # Apply AdaptiveAvgPool3d to reduce spatial dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten the tensor to fit InstanceNorm1d
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Apply InstanceNorm1d
        x = self.instance_norm1d(x)
        
        # Apply PReLU activation
        x = self.prelu(x)
        
        # Reshape for RNNCellBase
        x = x.view(batch_size, -1)
        
        # Apply RNNCellBase layers
        hx = torch.zeros(batch_size, 64).to(x.device)
        x = self.rnn_cell_base(x, hx)
        
        hx = torch.zeros(batch_size, 32).to(x.device)
        x = self.rnn_cell_base2(x, hx)
        
        hx = torch.zeros(batch_size, 16).to(x.device)
        x = self.rnn_cell_base3(x, hx)
        
        hx = torch.zeros(batch_size, 8).to(x.device)
        x = self.rnn_cell_base4(x, hx)
        
        hx = torch.zeros(batch_size, 4).to(x.device)
        x = self.rnn_cell_base5(x, hx)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
