
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'SmoothL1Loss', 'AdaptiveMaxPool1d', 'FeatureAlphaDropout', 'L1Loss', 'Conv1d', 'FractionalMaxPool2d', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(5, 5))
        self.l1_loss = nn.L1Loss()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)
        
        # Reshape for BatchNorm3d
        x = x.unsqueeze(2).unsqueeze(3)  # Shape: (batch_size, 10, 1, 1, length)
        x = self.batch_norm3d(x)
        x = x.squeeze(3).squeeze(2)  # Shape: (batch_size, 10, length)
        
        x = self.adaptive_max_pool1d(x)
        x = self.feature_alpha_dropout(x)
        x = self.conv2(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.unsqueeze(2)  # Shape: (batch_size, 20, 1, length)
        x = self.fractional_max_pool2d(x)
        x = x.squeeze(2)  # Shape: (batch_size, 20, 5)
        
        # Compute losses (dummy targets for demonstration)
        target_l1 = torch.zeros_like(x)
        target_smooth_l1 = torch.zeros_like(x)
        target_multi_label = torch.zeros_like(x).sigmoid()  # Multi-label targets should be binary
        
        l1_loss = self.l1_loss(x, target_l1)
        smooth_l1_loss = self.smooth_l1_loss(x, target_smooth_l1)
        multi_label_soft_margin_loss = self.multi_label_soft_margin_loss(x, target_multi_label)
        
        # Return the sum of losses (for demonstration purposes)
        return l1_loss + smooth_l1_loss + multi_label_soft_margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

