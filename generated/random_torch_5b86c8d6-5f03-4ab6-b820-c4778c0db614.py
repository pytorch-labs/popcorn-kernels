
# This is a random torch model generated by the following modules: ['MaxPool1d', 'AdaptiveAvgPool2d', 'PoissonNLLLoss', 'LazyConv3d', 'LogSigmoid', 'ZeroPad1d', 'ZeroPad2d', 'ReLU', 'LazyBatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2)
        self.adaptiveavgpool2d = nn.AdaptiveAvgPool2d((5, 5))
        self.lazyconv3d_1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.lazyconv3d_2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.logsigmoid = nn.LogSigmoid()
        self.zeropad1d = nn.ZeroPad1d(padding=1)
        self.zeropad2d = nn.ZeroPad2d(padding=1)
        self.relu = nn.ReLU()
        self.lazybatchnorm3d = nn.LazyBatchNorm3d()
        self.poissonnllloss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = x.unsqueeze(1)  # Add a dimension to make it 3D for MaxPool1d
        x = self.maxpool1d(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Reshape to 4D for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.adaptiveavgpool2d(x)
        
        # Reshape to 5D for LazyConv3d
        x = x.unsqueeze(1)  # Add a dimension to make it 5D
        x = self.lazyconv3d_1(x)
        x = self.lazybatchnorm3d(x)
        x = self.relu(x)
        x = self.lazyconv3d_2(x)
        x = self.lazybatchnorm3d(x)
        x = self.relu(x)
        
        # Apply ZeroPad1d and ZeroPad2d
        x = x.squeeze(1)  # Remove the added dimension for ZeroPad1d
        x = self.zeropad1d(x)
        x = x.unsqueeze(1)  # Add a dimension back for ZeroPad2d
        x = self.zeropad2d(x)
        
        # Apply LogSigmoid
        x = self.logsigmoid(x)
        
        # Apply PoissonNLLLoss (assuming target is the same as input for demonstration)
        target = x.detach()  # Detach to avoid backpropagation through target
        loss = self.poissonnllloss(x, target)
        
        return loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

