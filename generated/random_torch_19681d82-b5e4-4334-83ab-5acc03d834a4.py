
# This is a random torch model generated by the following modules: ['Dropout1d', 'CircularPad1d', 'ModuleDict', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.circular_pad1d = nn.CircularPad1d(padding=2)
        self.module_dict = nn.ModuleDict({
            'feature_alpha_dropout1': nn.FeatureAlphaDropout(p=0.5),
            'feature_alpha_dropout2': nn.FeatureAlphaDropout(p=0.5),
            'feature_alpha_dropout3': nn.FeatureAlphaDropout(p=0.5)
        })
        self.dropout1d_2 = nn.Dropout1d(p=0.5)
        self.circular_pad1d_2 = nn.CircularPad1d(padding=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.dropout1d(x)
        x = self.circular_pad1d(x)
        
        # Apply FeatureAlphaDropout from ModuleDict
        x = self.module_dict['feature_alpha_dropout1'](x)
        x = self.module_dict['feature_alpha_dropout2'](x)
        x = self.module_dict['feature_alpha_dropout3'](x)
        
        x = self.dropout1d_2(x)
        x = self.circular_pad1d_2(x)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input shape (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
