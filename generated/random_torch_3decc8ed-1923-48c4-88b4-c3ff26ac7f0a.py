
# This is a random torch model generated by the following modules: ['MaxUnpool3d', 'RMSNorm', 'Dropout', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Assuming a vocabulary size of 1000
        self.rms_norm1 = RMSNorm(128)
        self.dropout1 = nn.Dropout(0.5)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.rms_norm2 = RMSNorm(128)
        self.dropout2 = nn.Dropout(0.5)
        self.rms_norm3 = RMSNorm(128)
        self.dropout3 = nn.Dropout(0.5)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for embedding
        x = self.embedding(x)
        
        # Reshape to 3D for MaxUnpool3d
        x = x.view(-1, 128, 1, 1, 1)
        
        # Apply RMSNorm and Dropout
        x = self.rms_norm1(x)
        x = self.dropout1(x)
        
        # Apply MaxUnpool3d (assuming some pooling was done before)
        # For simplicity, we assume the indices are all zeros (no actual pooling was done)
        indices = torch.zeros_like(x, dtype=torch.long)
        x = self.max_unpool3d(x, indices)
        
        # Apply RMSNorm and Dropout again
        x = self.rms_norm2(x)
        x = self.dropout2(x)
        
        # Reshape back to 2D
        x = x.view(-1, 128)
        
        # Apply RMSNorm and Dropout one more time
        x = self.rms_norm3(x)
        x = self.dropout3(x)
        
        return x


class RMSNorm(nn.Module):
    def __init__(self, dim: int, eps: float = 1e-8):
        super().__init__()
        self.scale = dim ** -0.5
        self.eps = eps
        self.g = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, p=2, dim=-1, keepdim=True) * self.scale
        return x / norm.clamp(min=self.eps) * self.g


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for embedding
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

