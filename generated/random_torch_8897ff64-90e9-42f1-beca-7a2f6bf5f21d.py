
# This is a random torch model generated by the following modules: ['InstanceNorm1d', 'LazyBatchNorm1d', 'LeakyReLU', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm1d(128)
        self.lazy_batch_norm = nn.LazyBatchNorm1d()
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.linear1 = nn.Linear(128, 64)
        self.linear2 = nn.Linear(64, 32)
        self.linear3 = nn.Linear(32, 10)

    def forward(self, x):
        # Reshape input to have a sequence length dimension
        x = x.view(x.size(0), -1, x.size(-1))  # (batch_size, sequence_length, features)
        
        # Apply InstanceNorm1d
        x = self.instance_norm(x)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Flatten the sequence dimension
        x = x.view(x.size(0), -1)  # (batch_size, sequence_length * features)
        
        # Apply Linear layers
        x = self.linear1(x)
        x = self.leaky_relu(x)
        x = self.linear2(x)
        x = self.leaky_relu(x)
        x = self.linear3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
