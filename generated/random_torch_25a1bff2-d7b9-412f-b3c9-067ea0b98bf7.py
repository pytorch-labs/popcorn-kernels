
# This is a random torch model generated by the following modules: ['AvgPool3d', 'LazyConv3d', 'SiLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.avgpool1 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.silu1 = nn.SiLU()
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.avgpool2 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.silu2 = nn.SiLU()
        self.conv3 = nn.LazyConv3d(out_channels=64, kernel_size=3)
        self.avgpool3 = nn.AvgPool3d(kernel_size=2, stride=2)
        self.silu3 = nn.SiLU()

    def forward(self, x):
        x = self.conv1(x)
        x = self.avgpool1(x)
        x = self.silu1(x)
        x = self.conv2(x)
        x = self.avgpool2(x)
        x = self.silu2(x)
        x = self.conv3(x)
        x = self.avgpool3(x)
        x = self.silu3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64, 64).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

