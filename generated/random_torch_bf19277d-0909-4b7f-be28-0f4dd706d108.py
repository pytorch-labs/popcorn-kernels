
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'ConstantPad2d', 'AdaptiveMaxPool3d', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(padding=2)
        self.constant_pad2d = nn.ConstantPad2d(padding=2, value=1.0)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))
        self.lazy_conv1d_1 = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.lazy_conv1d_2 = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.lazy_conv1d_3 = nn.LazyConv1d(out_channels=64, kernel_size=3)

    def forward(self, x):
        # Apply ZeroPad1d
        x = self.zero_pad1d(x)
        
        # Reshape to 2D for ConstantPad2d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last dimension
        x = self.constant_pad2d(x)
        
        # Reshape to 3D for AdaptiveMaxPool3d
        x = x.view(x.size(0), x.size(1), 5, 5, 5)  # Reshape to 3D
        x = self.adaptive_max_pool3d(x)
        
        # Reshape to 1D for LazyConv1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten the last two dimensions
        x = self.lazy_conv1d_1(x)
        x = self.lazy_conv1d_2(x)
        x = self.lazy_conv1d_3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input with shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

