
# This is a random torch model generated by the following modules: ['Tanh', 'Dropout3d', 'RNN', 'Embedding']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding = nn.Embedding(1000, 128)  # Embedding layer
        self.rnn = nn.RNN(128, 256, num_layers=2, batch_first=True)  # RNN layer
        self.dropout3d = nn.Dropout3d(p=0.5)  # Dropout3d layer
        self.tanh = nn.Tanh()  # Tanh activation

    def forward(self, x):
        # Assume input x is of shape (batch_size, sequence_length)
        x = self.embedding(x)  # Shape: (batch_size, sequence_length, embedding_dim)
        
        # Reshape for Dropout3d: (batch_size, channels, depth, height, width)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, sequence_length, embedding_dim)
        x = self.dropout3d(x)  # Apply Dropout3d
        x = x.squeeze(1)  # Shape: (batch_size, sequence_length, embedding_dim)
        
        # Pass through RNN
        x, _ = self.rnn(x)  # Shape: (batch_size, sequence_length, hidden_size)
        
        # Apply Tanh activation
        x = self.tanh(x)  # Shape: (batch_size, sequence_length, hidden_size)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 50)).cuda()  # Example input: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

