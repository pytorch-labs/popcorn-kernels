
# This is a random torch model generated by the following modules: ['UpsamplingNearest2d', 'ReflectionPad3d', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.UpsamplingNearest2d(scale_factor=2)
        self.pad1 = nn.ReflectionPad3d(padding=1)
        self.upsample2 = nn.UpsamplingNearest2d(scale_factor=2)
        self.pad2 = nn.ReflectionPad3d(padding=1)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Upsample the input
        x = self.upsample1(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.pad1(x)
        
        # Remove the dummy dimension to return to 4D
        x = x.squeeze(2)
        
        # Upsample again
        x = self.upsample2(x)
        
        # Reshape to 5D for ReflectionPad3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.pad2(x)
        
        # Remove the dummy dimension to return to 4D
        x = x.squeeze(2)
        
        # Apply softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape: (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
