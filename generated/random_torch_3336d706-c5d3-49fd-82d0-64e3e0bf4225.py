
# This is a random torch model generated by the following modules: ['MultiLabelSoftMarginLoss', 'AvgPool3d', 'PoissonNLLLoss', 'MultiLabelMarginLoss', 'Conv2d', 'Dropout3d', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.avgpool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.tanhshrink = nn.Tanhshrink()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.conv1(x)  # Apply Conv2d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for Dropout3d
        x = self.dropout3d(x)  # Apply Dropout3d
        x = x.squeeze(2)  # Remove the dummy dimension
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D for AvgPool3d
        x = self.avgpool3d(x)  # Apply AvgPool3d
        x = x.squeeze(2)  # Remove the dummy dimension
        x = self.conv2(x)  # Apply Conv2d
        x = self.tanhshrink(x)  # Apply Tanhshrink
        
        # Assuming we have some target labels for the loss functions
        target_soft_margin = torch.randint(0, 2, (x.size(0), x.size(1))).float()
        target_poisson = torch.randint(0, 10, (x.size(0), x.size(1))).float()
        target_margin = torch.randint(0, 2, (x.size(0), x.size(1))).long()
        
        # Apply loss functions (usually not done in forward, but included here as per the requirement)
        loss1 = self.multi_label_soft_margin_loss(x, target_soft_margin)
        loss2 = self.poisson_nll_loss(x, target_poisson)
        loss3 = self.multi_label_margin_loss(x, target_margin)
        
        # Return the losses (usually you would return the model output, but here we return the losses for demonstration)
        return loss1, loss2, loss3

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
