
# This is a random torch model generated by the following modules: ['Threshold', 'Upsample', 'GRUCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.threshold1 = nn.Threshold(0.1, 0.5)
        self.upsample1 = nn.Upsample(scale_factor=2, mode='nearest')
        self.gru_cell1 = nn.GRUCell(128, 64)
        self.gru_cell2 = nn.GRUCell(64, 32)
        self.threshold2 = nn.Threshold(0.2, 0.3)
        self.upsample2 = nn.Upsample(scale_factor=2, mode='nearest')
        self.gru_cell3 = nn.GRUCell(32, 16)
        self.gru_cell4 = nn.GRUCell(16, 8)
        self.threshold3 = nn.Threshold(0.3, 0.1)

    def forward(self, x):
        # Apply first threshold
        x = self.threshold1(x)
        
        # Upsample the input
        x = self.upsample1(x)
        
        # Flatten the input for GRUCell
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        
        # Pass through GRUCells
        hx1 = torch.zeros(batch_size, 64).to(x.device)
        x = self.gru_cell1(x, hx1)
        
        hx2 = torch.zeros(batch_size, 32).to(x.device)
        x = self.gru_cell2(x, hx2)
        
        # Apply second threshold
        x = self.threshold2(x)
        
        # Upsample again
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape to 4D for Upsample
        x = self.upsample2(x)
        
        # Flatten again for GRUCell
        x = x.view(batch_size, -1)
        
        # Pass through more GRUCells
        hx3 = torch.zeros(batch_size, 16).to(x.device)
        x = self.gru_cell3(x, hx3)
        
        hx4 = torch.zeros(batch_size, 8).to(x.device)
        x = self.gru_cell4(x, hx4)
        
        # Apply final threshold
        x = self.threshold3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

