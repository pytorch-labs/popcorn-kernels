
# This is a random torch model generated by the following modules: ['LogSoftmax', 'Hardswish', 'ConstantPad3d', 'PReLU', 'UpsamplingNearest2d', 'Dropout', 'Container', 'Module', 'LazyBatchNorm2d', 'AdaptiveLogSoftmaxWithLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=1, value=0)
        self.prelu = nn.PReLU()
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.dropout = nn.Dropout(p=0.5)
        self.bn = nn.LazyBatchNorm2d()
        self.hardswish = nn.Hardswish()
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[2, 4])

    def forward(self, x):
        x = self.pad(x)
        x = self.prelu(x)
        x = self.upsample(x)
        x = self.dropout(x)
        x = self.bn(x)
        x = self.hardswish(x)
        x = x.view(x.size(0), -1)  # Flatten the tensor for AdaptiveLogSoftmaxWithLoss
        x = self.log_softmax(x)
        x = self.adaptive_log_softmax.log_prob(x)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

