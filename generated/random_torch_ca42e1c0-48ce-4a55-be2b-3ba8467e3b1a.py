
# This is a random torch model generated by the following modules: ['CircularPad1d', 'RNNCellBase', 'GaussianNLLLoss', 'Linear', 'AvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad1d(2)
        self.rnn_cell = nn.RNNCellBase(input_size=10, hidden_size=20)
        self.linear1 = nn.Linear(20, 50)
        self.linear2 = nn.Linear(50, 10)
        self.avg_pool = nn.AvgPool3d(kernel_size=2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.circular_pad(x)  # Apply circular padding
        x = x.view(-1, 10)  # Reshape to fit RNNCellBase input size
        hx = torch.zeros(x.size(0), 20)  # Initialize hidden state for RNNCellBase
        x = self.rnn_cell(x, hx)  # Apply RNNCellBase
        x = F.relu(self.linear1(x))  # Apply first linear layer with ReLU
        x = self.linear2(x)  # Apply second linear layer
        x = x.view(-1, 1, 10, 1, 1)  # Reshape to fit AvgPool3d input size
        x = self.avg_pool(x)  # Apply average pooling
        x = x.view(-1, 10)  # Reshape to fit GaussianNLLLoss input size
        target = torch.randn_like(x)  # Generate random target for GaussianNLLLoss
        var = torch.ones_like(x)  # Generate variance for GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, var)  # Apply GaussianNLLLoss
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10).cuda()  # Example input shape (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

