
# This is a random torch model generated by the following modules: ['BCELoss', 'Linear', 'SyncBatchNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear1 = nn.Linear(128, 64)
        self.sync_bn1 = nn.SyncBatchNorm(64)
        self.linear2 = nn.Linear(64, 32)
        self.sync_bn2 = nn.SyncBatchNorm(32)
        self.linear3 = nn.Linear(32, 1)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Flatten the input to fit the Linear layer
        x = x.view(x.size(0), -1)
        
        # Apply the first Linear layer and SyncBatchNorm
        x = self.linear1(x)
        x = self.sync_bn1(x)
        x = torch.sigmoid(x)  # Adding a non-linearity
        
        # Apply the second Linear layer and SyncBatchNorm
        x = self.linear2(x)
        x = self.sync_bn2(x)
        x = torch.sigmoid(x)  # Adding a non-linearity
        
        # Apply the third Linear layer
        x = self.linear3(x)
        x = torch.sigmoid(x)  # Ensure output is in [0, 1] for BCELoss
        
        # Compute the loss (assuming target is provided externally)
        # For demonstration, we'll create a dummy target
        target = torch.randint(0, 2, (x.size(0), 1)).float()
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

