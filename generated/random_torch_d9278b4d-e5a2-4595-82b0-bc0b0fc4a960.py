
# This is a random torch model generated by the following modules: ['LSTM', 'EmbeddingBag', 'Identity']
import torch
import torch.nn as nn


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.lstm1 = nn.LSTM(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.lstm2 = nn.LSTM(input_size=128, hidden_size=64, num_layers=1, batch_first=True)
        self.identity = nn.Identity()

    def forward(self, x):
        # Assuming x is a tensor of shape (batch_size, sequence_length)
        x = self.embedding_bag(x)
        x = x.unsqueeze(1)  # Add a sequence dimension
        x, _ = self.lstm1(x)
        x, _ = self.lstm2(x)
        x = x.squeeze(1)  # Remove the sequence dimension
        x = self.identity(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (32, 10)).cuda()  # (batch_size, sequence_length)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

