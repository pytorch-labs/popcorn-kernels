
# This is a random torch model generated by the following modules: ['Softsign', 'Conv3d', 'CircularPad3d', 'Softmax', 'TripletMarginWithDistanceLoss', 'Softplus', 'TransformerDecoder', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.max_pool3d = nn.MaxPool3d(kernel_size=2, stride=2)
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=20, nhead=5), num_layers=2
        )
        self.softsign = nn.Softsign()
        self.softmax = nn.Softmax(dim=1)
        self.softplus = nn.Softplus()
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(
            distance_function=lambda x, y: F.pairwise_distance(x, y, p=2)
        )

    def forward(self, x):
        # Apply Conv3d and MaxPool3d
        x = self.conv3d_1(x)
        x = self.max_pool3d(x)
        x = self.conv3d_2(x)
        x = self.max_pool3d(x)
        
        # Apply CircularPad3d
        x = self.circular_pad3d(x)
        
        # Reshape for TransformerDecoder
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoder
        memory = torch.zeros_like(x)
        x = self.transformer_decoder(x, memory)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, channels, depth, height, width)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Compute TripletMarginWithDistanceLoss (dummy example)
        anchor = x[:, :, 0, 0, 0].unsqueeze(1)
        positive = x[:, :, 1, 1, 1].unsqueeze(1)
        negative = x[:, :, 2, 2, 2].unsqueeze(1)
        loss = self.triplet_loss(anchor, positive, negative)
        
        return x, loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
