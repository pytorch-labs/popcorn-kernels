
# This is a random torch model generated by the following modules: ['BCEWithLogitsLoss', 'SoftMarginLoss', 'ZeroPad3d', 'GELU', 'Container', 'MultiLabelMarginLoss', 'Bilinear', 'Sequential', 'MaxUnpool3d', 'RNNBase']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.gelu = nn.GELU()
        self.bilinear = nn.Bilinear(10, 20, 30)
        self.rnn = nn.RNNBase(input_size=30, hidden_size=50, num_layers=2)
        self.max_unpool = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.sequential = nn.Sequential(
            nn.Linear(50, 40),
            nn.GELU(),
            nn.Linear(40, 30)
        )
        self.bce_loss = nn.BCEWithLogitsLoss()
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()

    def forward(self, x):
        # Apply ZeroPad3d
        x = self.zero_pad(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Reshape for Bilinear
        x = x.view(-1, 10, 20)
        x = self.bilinear(x[:, :, :10], x[:, :, 10:])
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Apply MaxUnpool3d
        x = x.view(-1, 50, 1, 1, 1)
        x = self.max_unpool(x, torch.zeros_like(x))
        
        # Apply Sequential
        x = x.view(-1, 50)
        x = self.sequential(x)
        
        # Apply BCEWithLogitsLoss (assuming target is provided)
        target = torch.randn_like(x)
        bce_loss = self.bce_loss(x, target)
        
        # Apply SoftMarginLoss (assuming target is provided)
        soft_margin_loss = self.soft_margin_loss(x, target)
        
        # Apply MultiLabelMarginLoss (assuming target is provided)
        multi_label_margin_loss = self.multi_label_margin_loss(x, target)
        
        # Return the losses as outputs
        return bce_loss, soft_margin_loss, multi_label_margin_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 20, 20).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
