
# This is a random torch model generated by the following modules: ['GRU', 'FeatureAlphaDropout', 'PoissonNLLLoss', 'Softmax2d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.softmax2d = nn.Softmax2d()
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # Reshape for GRU
        batch_size, *rest = x.shape
        x = x.view(batch_size, -1, 128)  # Reshape to (batch_size, sequence_length, 128)
        
        # Pass through GRU
        x, _ = self.gru(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for 2D operations
        x = x.view(batch_size, 256, 16, 16)  # Reshape to (batch_size, 256, 16, 16)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        # Reshape back to original shape for PoissonNLLLoss
        x = x.view(batch_size, -1)
        
        # Compute PoissonNLLLoss (assuming target is the same as input for simplicity)
        loss = self.poisson_nll_loss(x, x.view(batch_size, -1))
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input shape (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

