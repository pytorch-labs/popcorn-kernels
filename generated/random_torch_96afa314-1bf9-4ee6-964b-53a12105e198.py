
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'ConstantPad3d', 'Dropout1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.pad1 = nn.ConstantPad3d(1, 0.5)
        self.dropout1 = nn.Dropout1d(0.5)
        self.bn2 = nn.LazyBatchNorm3d()
        self.pad2 = nn.ConstantPad3d(2, 0.5)
        self.dropout2 = nn.Dropout1d(0.5)
        self.bn3 = nn.LazyBatchNorm3d()

    def forward(self, x):
        x = self.bn1(x)
        x = self.pad1(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 2D for Dropout1d
        x = self.dropout1(x)
        x = x.view(x.size(0), x.size(1), int((x.size(2))**(1/3)), int((x.size(2))**(1/3)), int((x.size(2))**(1/3)))  # Reshape back to 3D
        x = self.bn2(x)
        x = self.pad2(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to 2D for Dropout1d
        x = self.dropout2(x)
        x = x.view(x.size(0), x.size(1), int((x.size(2))**(1/3)), int((x.size(2))**(1/3)), int((x.size(2))**(1/3)))  # Reshape back to 3D
        x = self.bn3(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

