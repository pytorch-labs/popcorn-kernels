
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'BCELoss', 'ConstantPad2d', 'LeakyReLU', 'MaxUnpool1d', 'GLU', 'RMSNorm', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.instance_norm = nn.InstanceNorm2d(10)
        self.leaky_relu = nn.LeakyReLU(0.1)
        self.glu = nn.GLU(dim=1)
        self.rms_norm = RMSNorm(20)
        self.upsample = nn.UpsamplingNearest2d(scale_factor=2)
        self.max_unpool = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply padding
        x = self.pad(x)
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Reshape for GLU
        x = x.view(x.size(0), -1, x.size(2), x.size(3))
        x = self.glu(x)
        
        # Apply RMSNorm
        x = self.rms_norm(x)
        
        # Upsample
        x = self.upsample(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool(x, indices)
        
        # Reshape back to original shape
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply BCELoss (assuming a binary target tensor)
        target = torch.randint(0, 2, x.shape).float()
        loss = self.bce_loss(torch.sigmoid(x), target)
        
        return loss

class RMSNorm(nn.Module):
    def __init__(self, dim, eps=1e-8):
        super().__init__()
        self.scale = dim ** -0.5
        self.eps = eps
        self.g = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        norm = torch.norm(x, p=2, dim=1, keepdim=True) * self.scale
        return x / norm.clamp(min=self.eps) * self.g

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

