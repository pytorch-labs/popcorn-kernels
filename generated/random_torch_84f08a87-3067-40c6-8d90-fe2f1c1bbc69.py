
# This is a random torch model generated by the following modules: ['L1Loss', 'ReLU6', 'PairwiseDistance', 'InstanceNorm2d', 'Hardtanh', 'LocalResponseNorm', 'CosineEmbeddingLoss', 'Dropout1d', 'CELU', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.instance_norm = nn.InstanceNorm2d(10)
        self.relu6 = nn.ReLU6()
        self.hardtanh = nn.Hardtanh()
        self.local_response_norm = nn.LocalResponseNorm(2)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.celu = nn.CELU()
        
        # ModuleDict to hold multiple layers
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv2d(1, 10, kernel_size=3),
            'conv2': nn.Conv2d(10, 20, kernel_size=3),
        })
        
        # Loss functions
        self.l1_loss = nn.L1Loss()
        self.pairwise_distance = nn.PairwiseDistance()
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Apply conv1 from ModuleDict
        x = self.module_dict['conv1'](x)
        x = self.instance_norm(x)
        x = self.relu6(x)
        x = self.hardtanh(x)
        x = self.local_response_norm(x)
        
        # Apply conv2 from ModuleDict
        x = self.module_dict['conv2'](x)
        x = self.dropout1d(x.view(x.size(0), x.size(1), -1)).view(x.size())
        x = self.celu(x)
        
        # Compute pairwise distance and cosine embedding loss
        x1 = x.view(x.size(0), -1)
        x2 = x1.clone()  # Create a copy for pairwise distance
        pairwise_dist = self.pairwise_distance(x1, x2)
        
        # Compute cosine embedding loss
        target = torch.ones(x1.size(0)).to(x.device)
        cosine_loss = self.cosine_embedding_loss(x1, x2, target)
        
        # Compute L1 loss
        l1_loss = self.l1_loss(x1, x2)
        
        # Return the final output and losses
        return x, pairwise_dist, cosine_loss, l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

