
# This is a random torch model generated by the following modules: ['GRU', 'ReplicationPad1d', 'LocalResponseNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru1 = nn.GRU(input_size=128, hidden_size=256, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=256, hidden_size=128, num_layers=1, batch_first=True)
        self.pad1 = nn.ReplicationPad1d(padding=2)
        self.pad2 = nn.ReplicationPad1d(padding=1)
        self.lrn1 = nn.LocalResponseNorm(size=5)
        self.lrn2 = nn.LocalResponseNorm(size=3)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        # Pass through the first GRU
        x, _ = self.gru1(x)
        
        # Apply LocalResponseNorm
        x = self.lrn1(x)
        
        # Reshape for ReplicationPad1d
        x = x.permute(0, 2, 1)  # (batch_size, input_size, sequence_length)
        x = self.pad1(x)
        
        # Reshape back for GRU
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, input_size)
        
        # Pass through the second GRU
        x, _ = self.gru2(x)
        
        # Apply LocalResponseNorm
        x = self.lrn2(x)
        
        # Reshape for ReplicationPad1d
        x = x.permute(0, 2, 1)  # (batch_size, input_size, sequence_length)
        x = self.pad2(x)
        
        # Reshape back to original shape
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, input_size)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

