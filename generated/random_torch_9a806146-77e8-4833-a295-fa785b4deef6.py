
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'ReflectionPad2d', 'BatchNorm1d', 'MaxUnpool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.reflection_pad = nn.ReflectionPad2d(2)
        self.batch_norm1d = nn.BatchNorm1d(128)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.reflection_pad(x)
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten the input for BatchNorm1d
        x = self.batch_norm1d(x)
        
        # Reshape back to 3D for MaxUnpool3d
        x = x.view(x.size(0), 1, 8, 8, 8)  # Arbitrary shape for MaxUnpool3d
        
        # Apply MaxUnpool3d (assuming indices are precomputed or random)
        indices = torch.randint(0, 2, x.size()).to(x.device)
        x = self.max_unpool3d(x, indices)
        
        # Compute PoissonNLLLoss (assuming target is precomputed or random)
        target = torch.poisson(x)  # Generate a random target
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

