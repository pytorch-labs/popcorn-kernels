
# This is a random torch model generated by the following modules: ['CosineEmbeddingLoss', 'UpsamplingBilinear2d', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample1 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.upsample2 = nn.UpsamplingBilinear2d(scale_factor=2)
        self.softmax = nn.Softmax(dim=1)
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        # Upsample the input twice
        x = self.upsample1(x)
        x = self.upsample2(x)
        
        # Apply softmax along the channel dimension
        x = self.softmax(x)
        
        # For demonstration, we'll create a dummy target tensor for the CosineEmbeddingLoss
        # This is just an example and may not be meaningful in a real scenario
        target = torch.ones_like(x)
        loss = self.cosine_loss(x, target, torch.tensor(1.0))
        
        # Return the loss as part of the output for demonstration purposes
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

