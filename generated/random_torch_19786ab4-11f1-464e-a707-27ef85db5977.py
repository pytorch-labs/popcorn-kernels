
# This is a random torch model generated by the following modules: ['CosineSimilarity', 'PReLU', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.bn2 = nn.BatchNorm3d(20)
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.prelu3 = nn.PReLU()
        self.cosine_sim = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)  # Apply BatchNorm3d
        x = self.prelu1(x)  # Apply PReLU
        x = self.bn2(x)  # Apply BatchNorm3d again
        x = self.prelu2(x)  # Apply PReLU again
        
        # Split the tensor into two parts along the channel dimension for CosineSimilarity
        x1, x2 = torch.split(x, x.size(1) // 2, dim=1)
        x = self.cosine_sim(x1, x2)  # Apply CosineSimilarity
        
        x = self.prelu3(x)  # Apply PReLU one more time
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

