
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'Hardsigmoid', 'MSELoss', 'FractionalMaxPool2d', 'ReLU', 'ParameterDict', 'Sigmoid', 'CosineEmbeddingLoss', 'Sequential']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm2d()
        self.hardsigmoid = nn.Hardsigmoid()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.relu = nn.ReLU()
        self.param_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1, 10)),
            'param2': nn.Parameter(torch.randn(10, 1))
        })
        self.sigmoid = nn.Sigmoid()
        self.sequential = nn.Sequential(
            nn.LazyBatchNorm2d(),
            nn.ReLU(),
            nn.LazyBatchNorm2d(),
            nn.Hardsigmoid(),
            nn.LazyBatchNorm2d()
        )
        self.mse_loss = nn.MSELoss()
        self.cosine_loss = nn.CosineEmbeddingLoss()

    def forward(self, x):
        x = self.bn1(x)
        x = self.hardsigmoid(x)
        x = self.fractional_max_pool(x)
        x = self.relu(x)
        
        # Use ParameterDict
        param1 = self.param_dict['param1']
        param2 = self.param_dict['param2']
        x = x.view(x.size(0), -1)  # Flatten
        x = torch.matmul(x, param1)
        x = torch.matmul(x, param2)
        
        x = self.sigmoid(x)
        x = self.sequential(x)
        
        # Compute loss (dummy target for demonstration)
        target = torch.randn_like(x)
        mse_loss = self.mse_loss(x, target)
        
        # Compute cosine embedding loss (dummy target and input2 for demonstration)
        input2 = torch.randn_like(x)
        target_cosine = torch.ones(x.size(0))
        cosine_loss = self.cosine_loss(x, input2, target_cosine)
        
        return x, mse_loss, cosine_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
