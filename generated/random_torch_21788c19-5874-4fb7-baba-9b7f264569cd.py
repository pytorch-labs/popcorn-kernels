
# This is a random torch model generated by the following modules: ['RNNCell', 'InstanceNorm2d', 'LazyBatchNorm3d', 'InstanceNorm3d', 'MaxUnpool2d', 'UpsamplingNearest2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell1 = nn.RNNCell(input_size=64, hidden_size=128)
        self.rnn_cell2 = nn.RNNCell(input_size=128, hidden_size=256)
        self.instance_norm2d = nn.InstanceNorm2d(num_features=256)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.instance_norm3d = nn.InstanceNorm3d(num_features=128)
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.upsampling_nearest2d = nn.UpsamplingNearest2d(scale_factor=2)

    def forward(self, x):
        # Assuming x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Initialize hidden states for RNN cells
        h1 = torch.zeros(batch_size, 128).to(x.device)
        h2 = torch.zeros(batch_size, 256).to(x.device)
        
        # Process sequence through RNN cells
        for t in range(seq_len):
            h1 = self.rnn_cell1(x[:, t, :], h1)
            h2 = self.rnn_cell2(h1, h2)
        
        # Reshape for 2D operations
        x = h2.view(batch_size, 256, 1, 1)
        
        # Apply InstanceNorm2d
        x = self.instance_norm2d(x)
        
        # Reshape for 3D operations
        x = x.view(batch_size, 256, 1, 1, 1)
        
        # Apply LazyBatchNorm3d
        x = self.lazy_batch_norm3d(x)
        
        # Apply InstanceNorm3d
        x = self.instance_norm3d(x)
        
        # Reshape back to 2D for MaxUnpool2d
        x = x.view(batch_size, 128, 2, 2)
        
        # Apply MaxUnpool2d (assuming indices are available)
        indices = torch.randint(0, 4, (batch_size, 128, 2, 2)).to(x.device)
        x = self.max_unpool2d(x, indices)
        
        # Apply UpsamplingNearest2d
        x = self.upsampling_nearest2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

