
# This is a random torch model generated by the following modules: ['AlphaDropout', 'CircularPad1d', 'Softmin', 'LazyBatchNorm1d', 'LazyConvTranspose1d', 'SyncBatchNorm', 'LocalResponseNorm', 'GroupNorm', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.circular_pad1d = nn.CircularPad1d(padding=1)
        self.softmin = nn.Softmin(dim=1)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=1)
        self.sync_batch_norm = nn.SyncBatchNorm(num_features=32)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.group_norm = nn.GroupNorm(num_groups=8, num_channels=32)
        self.channel_shuffle = nn.ChannelShuffle(groups=4)

    def forward(self, x):
        # Ensure the input is at least 3D (batch, channels, length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add a channel dimension
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply LazyConvTranspose1d
        x = self.lazy_conv_transpose1d(x)
        
        # Apply LazyBatchNorm1d
        x = self.lazy_batch_norm1d(x)
        
        # Apply SyncBatchNorm
        x = self.sync_batch_norm(x)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Apply GroupNorm
        x = self.group_norm(x)
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Apply AlphaDropout
        x = self.alpha_dropout(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 64).cuda()  # Example input shape (batch, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

