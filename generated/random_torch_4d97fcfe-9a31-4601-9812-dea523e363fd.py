
# This is a random torch model generated by the following modules: ['Flatten', 'Container', 'GaussianNLLLoss', 'MaxUnpool2d', 'CrossEntropyLoss', 'TransformerDecoderLayer', 'LSTM', 'FractionalMaxPool3d', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.flatten = nn.Flatten()
        self.container = nn.Sequential(
            nn.Linear(128, 256),
            nn.CELU(),
            nn.Linear(256, 128),
            nn.CELU()
        )
        self.max_unpool2d = nn.MaxUnpool2d(kernel_size=2, stride=2)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=128, nhead=8)
        self.lstm = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(32, 32, 32))
        self.celu = nn.CELU()
        
        # Loss functions (not used in forward, but included as per the module list)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.flatten(x)  # Flatten the input
        x = self.container(x)  # Pass through the container
        x = x.view(-1, 128, 1, 1)  # Reshape for MaxUnpool2d
        x = self.max_unpool2d(x, indices=torch.zeros_like(x).long())  # MaxUnpool2d
        x = x.view(-1, 128)  # Reshape for TransformerDecoderLayer
        x = self.transformer_decoder_layer(x.unsqueeze(0), x.unsqueeze(0)).squeeze(0)  # TransformerDecoderLayer
        x, _ = self.lstm(x.unsqueeze(0))  # LSTM
        x = x.view(-1, 1, 64, 64, 64)  # Reshape for FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)  # FractionalMaxPool3d
        x = self.celu(x)  # CELU activation
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
