
# This is a random torch model generated by the following modules: ['LogSoftmax', 'ReflectionPad1d', 'ModuleList', 'Softmin', 'AdaptiveMaxPool1d', 'EmbeddingBag', 'Sigmoid']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.reflection_pad = nn.ReflectionPad1d(2)
        self.adaptive_max_pool = nn.AdaptiveMaxPool1d(10)
        self.module_list = nn.ModuleList([
            nn.Softmin(dim=1),
            nn.Sigmoid(),
            nn.LogSoftmax(dim=1)
        ])

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        x = x.unsqueeze(1)  # Add a dimension for ReflectionPad1d
        x = self.reflection_pad(x)
        x = self.adaptive_max_pool(x)
        x = x.squeeze(1)  # Remove the added dimension
        
        # Apply ModuleList modules
        for module in self.module_list:
            x = module(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

