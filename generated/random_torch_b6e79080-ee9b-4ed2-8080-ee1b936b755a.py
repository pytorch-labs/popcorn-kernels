
# This is a random torch model generated by the following modules: ['BatchNorm2d', 'RNNBase', 'PairwiseDistance', 'Conv1d', 'Hardswish', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm2d(3)
        self.conv1 = nn.Conv1d(3, 16, kernel_size=3)
        self.rnn = nn.RNNBase(input_size=16, hidden_size=32, num_layers=2)
        self.bn2 = nn.BatchNorm2d(16)
        self.hardswish = nn.Hardswish()
        self.adaptive_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self.pairwise_distance = nn.PairwiseDistance()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.bn1(x)
        
        # Reshape for Conv1d: (batch_size, channels, height * width)
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        
        x = self.conv1(x)
        
        # Reshape back to 4D for BatchNorm2d: (batch_size, out_channels, height, width)
        x = x.view(batch_size, x.size(1), height, width)
        x = self.bn2(x)
        
        # Reshape for RNN: (sequence_length, batch_size, input_size)
        x = x.view(x.size(2) * x.size(3), batch_size, x.size(1))
        x, _ = self.rnn(x)
        
        # Reshape back to 4D: (batch_size, hidden_size, height, width)
        x = x.view(batch_size, x.size(1), height, width)
        
        x = self.hardswish(x)
        x = self.adaptive_avg_pool(x)
        
        # Flatten for PairwiseDistance: (batch_size, hidden_size)
        x = x.view(batch_size, -1)
        
        # Compute pairwise distance between x and itself
        x = self.pairwise_distance(x, x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

