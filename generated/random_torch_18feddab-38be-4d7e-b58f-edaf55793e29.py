
# This is a random torch model generated by the following modules: ['Hardsigmoid', 'Hardtanh', 'Flatten', 'Threshold', 'GRU', 'GroupNorm', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardsigmoid = nn.Hardsigmoid()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.flatten = nn.Flatten()
        self.threshold = nn.Threshold(threshold=0.5, value=0.0)
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.groupnorm = nn.GroupNorm(num_groups=4, num_channels=64)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)

    def forward(self, x):
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Flatten the input
        x = self.flatten(x)
        
        # Apply Threshold
        x = self.threshold(x)
        
        # Reshape for GRU
        x = x.view(x.size(0), -1, 128)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply GroupNorm
        x = self.groupnorm(x)
        
        # Reshape for CosineSimilarity
        x = x.view(x.size(0), -1)  # Flatten for CosineSimilarity
        
        # Create a random tensor for CosineSimilarity
        random_tensor = torch.randn_like(x)
        
        # Apply CosineSimilarity
        x = self.cosine_similarity(x, random_tensor)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
