
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool3d', 'ConstantPad3d', 'MultiLabelSoftMarginLoss', 'ReplicationPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))
        self.loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply ConstantPad3d to the input
        x = self.pad3d(x)
        
        # Reshape the tensor to apply ReplicationPad1d
        original_shape = x.shape
        x = x.view(original_shape[0], -1, original_shape[-1])  # Flatten all dimensions except the last one
        x = self.replication_pad1d(x)
        x = x.view(original_shape)  # Reshape back to the original shape
        
        # Apply AdaptiveMaxPool3d
        x = self.adaptive_max_pool3d(x)
        
        # Compute the loss (for demonstration purposes, we assume the target is a random tensor)
        target = torch.randint(0, 2, (x.shape[0], x.shape[1])).float()
        x = x.view(x.shape[0], -1)  # Flatten the output for the loss function
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

