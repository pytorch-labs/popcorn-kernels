
# This is a random torch model generated by the following modules: ['Unfold', 'SoftMarginLoss', 'Upsample', 'BatchNorm1d', 'ReplicationPad2d', 'AdaptiveAvgPool3d', 'ZeroPad1d', 'GELU', 'ModuleList']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.upsample = nn.Upsample(scale_factor=2)
        self.bn1d = nn.BatchNorm1d(64)
        self.replication_pad2d = nn.ReplicationPad2d(1)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.gelu = nn.GELU()
        self.module_list = nn.ModuleList([
            nn.Conv2d(64, 128, kernel_size=3),
            nn.Conv2d(128, 256, kernel_size=3),
            nn.Conv2d(256, 512, kernel_size=3)
        ])
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Unfold the input
        x = self.unfold(x)
        x = x.view(x.size(0), -1, x.size(2))
        
        # Apply BatchNorm1d
        x = self.bn1d(x)
        
        # Reshape and apply ReplicationPad2d
        x = x.view(x.size(0), 64, 8, 8)
        x = self.replication_pad2d(x)
        
        # Upsample
        x = self.upsample(x)
        
        # Reshape and apply AdaptiveAvgPool3d
        x = x.view(x.size(0), 64, 8, 8, 8)
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape and apply ZeroPad1d
        x = x.view(x.size(0), 64, -1)
        x = self.zero_pad1d(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Pass through ModuleList
        for layer in self.module_list:
            x = layer(x)
        
        # Reshape and apply SoftMarginLoss
        x = x.view(x.size(0), -1)
        target = torch.ones_like(x)
        x = self.soft_margin_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
