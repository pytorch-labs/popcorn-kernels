
# This is a random torch model generated by the following modules: ['SELU', 'FeatureAlphaDropout', 'CircularPad1d', 'BCELoss', 'AvgPool1d', 'LPPool2d', 'AdaptiveAvgPool3d', 'Sigmoid', 'GroupNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.selu1 = nn.SELU()
        self.selu2 = nn.SELU()
        self.selu3 = nn.SELU()
        self.dropout1 = nn.FeatureAlphaDropout(0.5)
        self.dropout2 = nn.FeatureAlphaDropout(0.5)
        self.circular_pad1d = nn.CircularPad1d(2)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.lp_pool2d = nn.LPPool2d(norm_type=2, kernel_size=2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.sigmoid = nn.Sigmoid()
        self.group_norm1 = nn.GroupNorm(num_groups=2, num_channels=10)
        self.group_norm2 = nn.GroupNorm(num_groups=2, num_channels=10)
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Apply SELU activation
        x = self.selu1(x)
        
        # Apply FeatureAlphaDropout
        x = self.dropout1(x)
        
        # Reshape for CircularPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, length)
        x = self.circular_pad1d(x)
        
        # Apply AvgPool1d
        x = self.avg_pool1d(x)
        
        # Reshape for LPPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to (batch_size, channels, height, width)
        x = self.lp_pool2d(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a depth dimension
        x = self.adaptive_avg_pool3d(x)
        
        # Apply GroupNorm
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, depth*height*width)
        x = self.group_norm1(x)
        
        # Apply SELU activation
        x = self.selu2(x)
        
        # Apply FeatureAlphaDropout
        x = self.dropout2(x)
        
        # Apply GroupNorm
        x = self.group_norm2(x)
        
        # Apply SELU activation
        x = self.selu3(x)
        
        # Apply Sigmoid activation
        x = self.sigmoid(x)
        
        # Compute BCE Loss (assuming a target tensor is provided)
        target = torch.rand_like(x)
        loss = self.bce_loss(x, target)
        
        return x, loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

