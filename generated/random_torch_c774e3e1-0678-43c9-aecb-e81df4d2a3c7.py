
# This is a random torch model generated by the following modules: ['Module', 'LazyConv2d', 'TransformerDecoder', 'MaxPool2d', 'PReLU', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.prelu1 = nn.PReLU()
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        
        self.conv2 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.prelu2 = nn.PReLU()
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8),
            num_layers=2
        )
        
        self.module_dict = nn.ModuleDict({
            'fc1': nn.LazyLinear(128),
            'fc2': nn.LazyLinear(10)
        })
        
    def forward(self, x):
        # Apply first convolution, PReLU, and max pooling
        x = self.conv1(x)
        x = self.prelu1(x)
        x = self.maxpool1(x)
        
        # Apply second convolution, PReLU, and max pooling
        x = self.conv2(x)
        x = self.prelu2(x)
        x = self.maxpool2(x)
        
        # Reshape for TransformerDecoder
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoder
        x = self.transformer_decoder(x, x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, -1)
        
        # Apply ModuleDict layers
        x = self.module_dict['fc1'](x)
        x = self.module_dict['fc2'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

