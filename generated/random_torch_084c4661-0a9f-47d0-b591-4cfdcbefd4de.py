
# This is a random torch model generated by the following modules: ['TransformerDecoder', 'FeatureAlphaDropout', 'RNNBase', 'RMSNorm', 'GELU', 'Dropout2d', 'LazyBatchNorm3d', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.rnn = nn.RNNBase(mode='LSTM', input_size=64, hidden_size=128, num_layers=2)
        self.rms_norm = nn.RMSNorm(128)
        self.gelu = nn.GELU()
        self.dropout2d = nn.Dropout2d(p=0.2)
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.channel_shuffle = nn.ChannelShuffle(groups=4)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, seq_len, d_model)
        batch_size, seq_len, d_model = x.shape
        
        # TransformerDecoder expects (seq_len, batch_size, d_model)
        x = x.permute(1, 0, 2)
        x = self.transformer_decoder(x, x)
        x = x.permute(1, 0, 2)  # Back to (batch_size, seq_len, d_model)
        
        x = self.feature_alpha_dropout(x)
        
        # RNNBase expects (seq_len, batch_size, input_size)
        x = x.permute(1, 0, 2)
        x, _ = self.rnn(x)
        x = x.permute(1, 0, 2)  # Back to (batch_size, seq_len, hidden_size)
        
        x = self.rms_norm(x)
        x = self.gelu(x)
        
        # Reshape for Dropout2d and LazyBatchNorm3d
        x = x.view(batch_size, -1, seq_len, 1, 1)  # Reshape to (batch_size, channels, seq_len, 1, 1)
        x = self.dropout2d(x)
        x = self.lazy_batch_norm3d(x)
        
        # Reshape back to (batch_size, seq_len, hidden_size)
        x = x.view(batch_size, seq_len, -1)
        
        # ChannelShuffle expects (batch_size, channels, height, width)
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, hidden_size, seq_len)
        x = x.unsqueeze(-1)  # Add a dummy dimension for height
        x = self.channel_shuffle(x)
        x = x.squeeze(-1)  # Remove the dummy dimension
        x = x.permute(0, 2, 1)  # Back to (batch_size, seq_len, hidden_size)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64).cuda()  # (batch_size, seq_len, d_model)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
