
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'Dropout', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag1 = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.dropout1 = nn.Dropout(p=0.5)
        self.hardshrink1 = nn.Hardshrink(lambd=0.5)
        self.embedding_bag2 = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=32, mode='mean')
        self.dropout2 = nn.Dropout(p=0.3)
        self.hardshrink2 = nn.Hardshrink(lambd=0.3)

    def forward(self, x):
        # Assuming input x is a 1D tensor of indices
        x = self.embedding_bag1(x)
        x = self.dropout1(x)
        x = self.hardshrink1(x)
        x = self.embedding_bag2(x)
        x = self.dropout2(x)
        x = self.hardshrink2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (10,)).cuda()  # Example input tensor of indices
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

