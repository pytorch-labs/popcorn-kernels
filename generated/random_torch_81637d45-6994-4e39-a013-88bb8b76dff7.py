
# This is a random torch model generated by the following modules: ['BCELoss', 'ConstantPad2d', 'RNNCell', 'CELU', 'Dropout3d', 'Conv1d', 'AvgPool3d', 'BatchNorm3d', 'Identity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad2d(2, 3.5)
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.rnn_cell = nn.RNNCell(10, 20)
        self.celu = nn.CELU()
        self.dropout3d = nn.Dropout3d(0.5)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.batch_norm3d = nn.BatchNorm3d(20)
        self.identity = nn.Identity()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.pad(x)  # Apply ConstantPad2d
        x = x.view(x.size(0), 1, -1)  # Reshape for Conv1d
        x = self.conv1d(x)  # Apply Conv1d
        x = x.permute(2, 0, 1)  # Reshape for RNNCell
        hx = torch.zeros(x.size(1), 20).to(x.device)  # Initialize hidden state for RNNCell
        outputs = []
        for i in range(x.size(0)):
            hx = self.rnn_cell(x[i], hx)
            outputs.append(hx)
        x = torch.stack(outputs, dim=0)
        x = self.celu(x)  # Apply CELU
        x = x.unsqueeze(2).unsqueeze(3)  # Reshape for Dropout3d
        x = self.dropout3d(x)  # Apply Dropout3d
        x = self.avg_pool3d(x)  # Apply AvgPool3d
        x = self.batch_norm3d(x)  # Apply BatchNorm3d
        x = self.identity(x)  # Apply Identity
        x = x.view(x.size(0), -1)  # Flatten for BCELoss
        target = torch.rand_like(x)  # Random target for BCELoss
        loss = self.bce_loss(torch.sigmoid(x), target)  # Apply BCELoss
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
