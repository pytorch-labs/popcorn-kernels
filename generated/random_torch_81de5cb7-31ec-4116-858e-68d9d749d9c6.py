
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'FractionalMaxPool3d', 'Hardsigmoid', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad3d(padding=1, value=0.5)
        self.pool1 = nn.FractionalMaxPool3d(kernel_size=2, output_size=(10, 10, 10))
        self.hardsigmoid = nn.Hardsigmoid()
        self.dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.pad2 = nn.ConstantPad3d(padding=2, value=0.25)
        self.pool2 = nn.FractionalMaxPool3d(kernel_size=3, output_size=(5, 5, 5))
        self.dropout2 = nn.FeatureAlphaDropout(p=0.3)

    def forward(self, x):
        x = self.pad1(x)
        x = self.pool1(x)
        x = self.hardsigmoid(x)
        x = self.dropout1(x)
        x = self.pad2(x)
        x = self.pool2(x)
        x = self.hardsigmoid(x)
        x = self.dropout2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 20, 20, 20).cuda()  # Example input shape for 3D operations
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
