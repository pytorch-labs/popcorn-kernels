
# This is a random torch model generated by the following modules: ['GRUCell', 'LazyInstanceNorm1d', 'ReplicationPad2d', 'CircularPad1d', 'GRU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.gru_cell1 = nn.GRUCell(input_size=128, hidden_size=256)
        self.gru_cell2 = nn.GRUCell(input_size=256, hidden_size=128)
        self.lazy_instance_norm = nn.LazyInstanceNorm1d()
        self.replication_pad = nn.ReplicationPad2d(padding=2)
        self.circular_pad = nn.CircularPad1d(padding=1)
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, feature_size)
        batch_size, seq_len, feature_size = x.shape
        
        # Apply CircularPad1d to the input
        x = x.permute(0, 2, 1)  # (batch_size, feature_size, sequence_length)
        x = self.circular_pad(x)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, feature_size)
        
        # Apply LazyInstanceNorm1d
        x = x.permute(0, 2, 1)  # (batch_size, feature_size, sequence_length)
        x = self.lazy_instance_norm(x)
        x = x.permute(0, 2, 1)  # (batch_size, sequence_length, feature_size)
        
        # Apply GRUCell
        hx1 = torch.zeros(batch_size, 256).to(x.device)
        hx2 = torch.zeros(batch_size, 128).to(x.device)
        gru_outputs = []
        for t in range(seq_len):
            hx1 = self.gru_cell1(x[:, t, :], hx1)
            hx2 = self.gru_cell2(hx1, hx2)
            gru_outputs.append(hx2)
        x = torch.stack(gru_outputs, dim=1)  # (batch_size, sequence_length, 128)
        
        # Apply ReplicationPad2d (reshape to 4D tensor first)
        x = x.unsqueeze(1)  # (batch_size, 1, sequence_length, 128)
        x = self.replication_pad(x)
        x = x.squeeze(1)  # (batch_size, sequence_length + 2*padding, 128 + 2*padding)
        
        # Apply GRU
        x, _ = self.gru(x)  # (batch_size, sequence_length + 2*padding, 64)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, feature_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
