
# This is a random torch model generated by the following modules: ['AlphaDropout', 'LogSigmoid', 'UpsamplingBilinear2d', 'FeatureAlphaDropout', 'Flatten', 'ReflectionPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.log_sigmoid = nn.LogSigmoid()
        self.upsampling_bilinear = nn.UpsamplingBilinear2d(scale_factor=2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.flatten = nn.Flatten()
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)

    def forward(self, x):
        # Apply ReflectionPad3d to the input
        x = self.reflection_pad3d(x)
        
        # Apply UpsamplingBilinear2d to the padded input
        x = self.upsampling_bilinear(x)
        
        # Apply FeatureAlphaDropout to the upsampled input
        x = self.feature_alpha_dropout(x)
        
        # Apply AlphaDropout to the output of FeatureAlphaDropout
        x = self.alpha_dropout(x)
        
        # Flatten the output to prepare for LogSigmoid
        x = self.flatten(x)
        
        # Apply LogSigmoid to the flattened output
        x = self.log_sigmoid(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape for ReflectionPad3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
