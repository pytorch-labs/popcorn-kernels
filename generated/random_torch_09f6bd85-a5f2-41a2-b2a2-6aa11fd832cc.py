
# This is a random torch model generated by the following modules: ['Softmax', 'ConvTranspose2d', 'ModuleDict', 'PReLU', 'SELU', 'MaxUnpool1d', 'RNNCell', 'CircularPad3d', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.conv_transpose2 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.prelu = nn.PReLU()
        self.selu = nn.SELU()
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2)
        self.rnn_cell = nn.RNNCell(20, 20)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.instance_norm3d = nn.InstanceNorm3d(20)
        self.module_dict = nn.ModuleDict({
            'softmax': nn.Softmax(dim=1),
            'prelu2': nn.PReLU(),
            'selu2': nn.SELU()
        })

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply PReLU and SELU
        x = self.prelu(x)
        x = self.selu(x)
        
        # Reshape for MaxUnpool1d
        x = x.view(-1, 20, x.shape[2] * x.shape[3])
        x = self.max_unpool1d(x)
        
        # Apply RNNCell
        x = x.view(-1, 20)
        x = self.rnn_cell(x)
        
        # Reshape for CircularPad3d and InstanceNorm3d
        x = x.view(-1, 20, 1, 1, 1)
        x = self.circular_pad3d(x)
        x = self.instance_norm3d(x)
        
        # Apply ModuleDict layers
        x = x.view(-1, 20)
        x = self.module_dict['softmax'](x)
        x = self.module_dict['prelu2'](x)
        x = self.module_dict['selu2'](x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
