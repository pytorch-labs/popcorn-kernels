
# This is a random torch model generated by the following modules: ['Dropout', 'Softmax2d', 'PixelShuffle', 'FractionalMaxPool2d', 'Tanhshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1 = nn.Dropout(p=0.5)
        self.softmax2d = nn.Softmax2d()
        self.pixel_shuffle = nn.PixelShuffle(upscale_factor=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.tanhshrink = nn.Tanhshrink()

    def forward(self, x):
        # Apply Dropout
        x = self.dropout1(x)
        
        # Apply Softmax2d
        x = self.softmax2d(x)
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool2d(x)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 16, 64, 64).cuda()  # Example input shape that works with PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

