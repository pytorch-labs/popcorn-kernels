
# This is a random torch model generated by the following modules: ['AdaptiveAvgPool3d', 'LazyConv1d', 'GaussianNLLLoss', 'GRUCell', 'ChannelShuffle']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.gru_cell = nn.GRUCell(input_size=16, hidden_size=32)
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply AdaptiveAvgPool3d to reduce spatial dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape to fit LazyConv1d input requirements
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Reshape to fit GRUCell input requirements
        x = x.permute(0, 2, 1)  # (batch_size, seq_len, features)
        x = x.reshape(-1, x.size(2))  # (batch_size * seq_len, features)
        
        # Apply GRUCell
        hx = torch.zeros(x.size(0), 32).to(x.device)  # Initialize hidden state
        x = self.gru_cell(x, hx)
        
        # Reshape to fit ChannelShuffle input requirements
        x = x.view(batch_size, -1, 32)
        x = x.permute(0, 2, 1)
        x = x.unsqueeze(1)  # Add a dummy channel dimension
        
        # Apply ChannelShuffle
        x = self.channel_shuffle(x)
        
        # Reshape to fit GaussianNLLLoss input requirements
        x = x.squeeze(1)
        x = x.view(batch_size, -1)
        
        # Dummy target and variance for GaussianNLLLoss
        target = torch.randn_like(x)
        var = torch.ones_like(x)
        
        # Apply GaussianNLLLoss
        loss = self.gaussian_nll_loss(x, target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

