
# This is a random torch model generated by the following modules: ['InstanceNorm2d', 'LogSoftmax', 'Container']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.InstanceNorm2d(10)
        self.norm2 = nn.InstanceNorm2d(20)
        self.container = nn.Sequential(
            nn.InstanceNorm2d(10),
            nn.InstanceNorm2d(20),
            nn.InstanceNorm2d(30)
        )
        self.log_softmax = nn.LogSoftmax(dim=1)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.norm1(x)
        x = self.norm2(x)
        x = self.container(x)
        # Flatten the tensor for LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
