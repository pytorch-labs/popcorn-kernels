
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'UpsamplingBilinear2d', 'Hardsigmoid', 'ConstantPad2d', 'GRU', 'LocalResponseNorm', 'L1Loss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.upsampling = nn.UpsamplingBilinear2d(scale_factor=2)
        self.hardsigmoid = nn.Hardsigmoid()
        self.pad = nn.ConstantPad2d(2, 3.0)
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.local_response_norm = nn.LocalResponseNorm(size=5)
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsampling(x)
        
        # Apply ConstantPad2d
        x = self.pad(x)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)  # Reshape to (batch_size, seq_len, input_size)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Reshape back to 4D for LocalResponseNorm
        x = x.permute(0, 2, 1).view(batch_size, -1, height, width)
        
        # Apply LocalResponseNorm
        x = self.local_response_norm(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Compute L1Loss with a dummy target
        dummy_target = torch.zeros_like(x)
        loss = self.l1_loss(x, dummy_target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

