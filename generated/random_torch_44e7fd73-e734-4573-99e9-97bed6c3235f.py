
# This is a random torch model generated by the following modules: ['CircularPad2d', 'FractionalMaxPool3d', 'Unflatten', 'KLDivLoss', 'PoissonNLLLoss', 'BatchNorm3d', 'MultiLabelSoftMarginLoss', 'Upsample']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.fractional_max_pool = nn.FractionalMaxPool3d(kernel_size=2, output_size=(4, 4, 4))
        self.unflatten = nn.Unflatten(1, (2, 2))
        self.batch_norm = nn.BatchNorm3d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.kl_div_loss = nn.KLDivLoss(reduction='batchmean')
        self.poisson_nll_loss = nn.PoissonNLLLoss()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape to 3D for FractionalMaxPool3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        x = self.fractional_max_pool(x)
        
        # Apply BatchNorm3d
        x = self.batch_norm(x)
        
        # Upsample
        x = self.upsample(x)
        
        # Unflatten
        x = x.view(x.size(0), -1)  # Flatten to 2D
        x = self.unflatten(x)
        
        # Compute KLDivLoss (dummy target)
        target_kl = torch.softmax(torch.randn_like(x), dim=1)
        kl_loss = self.kl_div_loss(F.log_softmax(x, dim=1), target_kl)
        
        # Compute PoissonNLLLoss (dummy target)
        target_poisson = torch.randint(0, 2, x.shape).float()
        poisson_loss = self.poisson_nll_loss(x, target_poisson)
        
        # Compute MultiLabelSoftMarginLoss (dummy target)
        target_mlsm = torch.randint(0, 2, x.shape).float()
        mlsm_loss = self.multi_label_soft_margin_loss(x, target_mlsm)
        
        # Return the sum of losses as the output
        return kl_loss + poisson_loss + mlsm_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
