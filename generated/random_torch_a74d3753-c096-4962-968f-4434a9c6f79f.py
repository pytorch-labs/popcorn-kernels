
# This is a random torch model generated by the following modules: ['ZeroPad1d', 'AdaptiveAvgPool3d', 'PixelShuffle', 'RMSNorm', 'Dropout3d', 'ConvTranspose2d', 'MaxUnpool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.rms_norm = RMSNorm(64)
        self.dropout3d = nn.Dropout3d(0.5)
        self.conv_transpose2d = nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1)
        self.max_unpool1d = nn.MaxUnpool1d(kernel_size=2, stride=2, padding=0)

    def forward(self, x):
        # Assuming input is 3D (batch, channels, length)
        x = self.zero_pad1d(x)
        
        # Reshape to 5D (batch, channels, depth, height, width) for AdaptiveAvgPool3d
        x = x.unsqueeze(2).unsqueeze(3)  # Add dummy dimensions
        x = self.adaptive_avg_pool3d(x)
        
        # Reshape back to 4D (batch, channels, height, width) for PixelShuffle
        x = x.squeeze(2)  # Remove dummy depth dimension
        x = self.pixel_shuffle(x)
        
        # Apply RMSNorm
        x = x.permute(0, 2, 3, 1)  # Move channels to last dimension for RMSNorm
        x = self.rms_norm(x)
        x = x.permute(0, 3, 1, 2)  # Move channels back to second dimension
        
        # Apply Dropout3d
        x = x.unsqueeze(2)  # Add dummy depth dimension
        x = self.dropout3d(x)
        x = x.squeeze(2)  # Remove dummy depth dimension
        
        # Apply ConvTranspose2d
        x = self.conv_transpose2d(x)
        
        # Reshape to 3D (batch, channels, length) for MaxUnpool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten height and width
        x, indices = F.max_pool1d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool1d(x, indices)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
