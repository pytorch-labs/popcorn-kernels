
# This is a random torch model generated by the following modules: ['ReLU', 'Flatten', 'FractionalMaxPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.flatten = nn.Flatten()
        self.relu = nn.ReLU()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply ReLU
        x = self.relu(x)
        
        # Flatten the tensor
        x = self.flatten(x)
        
        # Apply ReLU again
        x = self.relu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
