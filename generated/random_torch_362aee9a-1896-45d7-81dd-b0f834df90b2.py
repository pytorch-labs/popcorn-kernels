
# This is a random torch model generated by the following modules: ['NLLLoss', 'Linear', 'TransformerEncoderLayer', 'AdaptiveLogSoftmaxWithLoss', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self, input_dim: int = 128, num_classes: int = 10) -> None:
        super().__init__()
        self.linear1 = nn.Linear(input_dim, 256)
        self.linear2 = nn.Linear(256, 512)
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=512, nhead=8)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(512, num_classes, [100, 200])
        self.relu6 = nn.ReLU6()

    def forward(self, x):
        # Flatten the input to (batch_size, input_dim)
        x = x.view(x.size(0), -1)
        
        # Apply linear layers with ReLU6 activation
        x = self.relu6(self.linear1(x))
        x = self.relu6(self.linear2(x))
        
        # Reshape for TransformerEncoderLayer
        x = x.unsqueeze(0)  # Add sequence dimension
        x = self.transformer_encoder_layer(x)
        x = x.squeeze(0)  # Remove sequence dimension
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x)
        return output


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128).cuda()  # Example input with shape (batch_size, input_dim)
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

