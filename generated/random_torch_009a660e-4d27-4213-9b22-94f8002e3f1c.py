
# This is a random torch model generated by the following modules: ['EmbeddingBag', 'LPPool3d', 'FractionalMaxPool2d', 'Softshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.softshrink = nn.Softshrink(lambd=0.5)
        self.fc1 = nn.Linear(14 * 14 * 64, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        # Assuming x is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape to 3D for LPPool3d
        x = x.view(1, 64, 8, 8, 8)
        x = self.lp_pool3d(x)
        
        # Reshape to 2D for FractionalMaxPool2d
        x = x.view(1, 64, 16, 16)
        x = self.fractional_max_pool2d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Flatten for fully connected layers
        x = x.view(-1, 14 * 14 * 64)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        
        return F.log_softmax(x, dim=1)


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

