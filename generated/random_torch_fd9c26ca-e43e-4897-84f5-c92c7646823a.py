
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'GRU', 'BatchNorm2d', 'CircularPad3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn3d_1 = nn.BatchNorm3d(1)
        self.bn3d_2 = nn.BatchNorm3d(10)
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.bn2d = nn.BatchNorm2d(20)
        self.circular_pad3d = nn.ConstantPad3d((1, 1, 1, 1, 1, 1), 0)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn3d_1(x)
        x = x.permute(0, 2, 1, 3, 4)  # Reshape for GRU
        batch_size, depth, channels, height, width = x.size()
        x = x.reshape(batch_size * depth, channels, height, width)
        x = self.bn3d_2(x)
        x = x.reshape(batch_size, depth, -1)  # Flatten height and width for GRU
        x, _ = self.gru(x)
        x = x.reshape(batch_size, depth, 20, height, width)
        x = x.permute(0, 2, 1, 3, 4)  # Reshape back to 5D
        x = x[:, :, -1, :, :]  # Take the last time step
        x = self.bn2d(x)
        x = x.unsqueeze(2)  # Add depth dimension for CircularPad3d
        x = self.circular_pad3d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

