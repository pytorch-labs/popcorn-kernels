
# This is a random torch model generated by the following modules: ['Unfold', 'LeakyReLU', 'ConvTranspose3d', 'ConstantPad3d', 'ConstantPad1d', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.unfold = nn.Unfold(kernel_size=(3, 3))
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.1)
        self.conv_transpose3d = nn.ConvTranspose3d(1, 10, kernel_size=(3, 3, 3), stride=(1, 1, 1))
        self.constant_pad3d = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.constant_pad1d = nn.ConstantPad1d(padding=(1, 1), value=0)
        self.unflatten = nn.Unflatten(dim=1, unflattened_size=(10, 5, 5))

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        x = self.unfold(x)  # Unfold the input
        x = self.leaky_relu(x)  # Apply LeakyReLU
        x = x.view(x.size(0), 1, -1, x.size(2), x.size(3))  # Reshape for ConvTranspose3d
        x = self.conv_transpose3d(x)  # Apply ConvTranspose3d
        x = self.constant_pad3d(x)  # Apply ConstantPad3d
        x = x.view(x.size(0), -1)  # Flatten for ConstantPad1d
        x = self.constant_pad1d(x)  # Apply ConstantPad1d
        x = x.view(x.size(0), 10, 5, 5)  # Reshape for Unflatten
        x = self.unflatten(x)  # Apply Unflatten
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

