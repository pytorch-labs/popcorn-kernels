
# This is a random torch model generated by the following modules: ['MultiMarginLoss', 'GaussianNLLLoss', 'LazyConvTranspose2d', 'RNNCell', 'Dropout3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose2d(out_channels=64, kernel_size=3, stride=2)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.rnn_cell1 = nn.RNNCell(input_size=64, hidden_size=128)
        self.rnn_cell2 = nn.RNNCell(input_size=128, hidden_size=64)
        self.multi_margin_loss = nn.MultiMarginLoss()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply ConvTranspose2d layers
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Apply Dropout3d
        x = x.unsqueeze(1)  # Add a channel dimension for Dropout3d
        x = self.dropout3d(x)
        x = x.squeeze(1)  # Remove the added channel dimension
        
        # Reshape for RNNCell
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, -1)  # Flatten spatial dimensions
        
        # Apply RNNCell layers
        hx1 = torch.zeros(batch_size, 128).to(x.device)
        hx2 = torch.zeros(batch_size, 64).to(x.device)
        x = self.rnn_cell1(x, hx1)
        x = self.rnn_cell2(x, hx2)
        
        # Reshape back to original spatial dimensions (or any desired shape)
        x = x.view(batch_size, channels, height, width)
        
        # Compute losses (for demonstration purposes, we use dummy targets)
        target = torch.randint(0, 10, (batch_size,)).to(x.device)
        multi_margin_loss = self.multi_margin_loss(x.view(batch_size, -1), target)
        
        target_mean = torch.randn_like(x)
        target_var = torch.ones_like(x)
        gaussian_nll_loss = self.gaussian_nll_loss(x, target_mean, target_var)
        
        # Return both the output and the losses for demonstration
        return x, multi_margin_loss, gaussian_nll_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with 3 channels, 32x32 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

