
# This is a random torch model generated by the following modules: ['CircularPad1d', 'ParameterList', 'GRU', 'Hardswish', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad1d(2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(3)])
        self.gru = nn.GRU(input_size=10, hidden_size=20, num_layers=2, batch_first=True)
        self.hardswish = nn.Hardswish()
        self.batch_norm = nn.LazyBatchNorm1d()
        self.fc = nn.Linear(20, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, features)
        x = self.circular_pad(x)  # Apply circular padding
        x = self.batch_norm(x)  # Apply batch normalization
        x, _ = self.gru(x)  # Pass through GRU
        x = self.hardswish(x)  # Apply Hardswish activation
        x = x[:, -1, :]  # Take the last output of the GRU
        x = self.fc(x)  # Pass through a fully connected layer
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 50, 10).cuda()  # Example input shape (batch_size=1, sequence_length=50, features=10)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

