
# This is a random torch model generated by the following modules: ['PReLU', 'CTCLoss', 'FractionalMaxPool3d', 'NLLLoss2d', 'PixelUnshuffle', 'CosineSimilarity']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(5, 5, 5))
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.ctc_loss = nn.CTCLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply PReLU
        x = self.prelu1(x)
        
        # Reshape for FractionalMaxPool3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.fractional_max_pool3d(x)
        
        # Reshape back for PixelUnshuffle
        x = x.view(-1, x.shape[2], x.shape[3], x.shape[4])
        x = self.pixel_unshuffle(x)
        
        # Apply PReLU again
        x = self.prelu2(x)
        
        # Reshape for CosineSimilarity
        x1 = x[:, :x.shape[1]//2, :, :]
        x2 = x[:, x.shape[1]//2:, :, :]
        x = self.cosine_similarity(x1, x2)
        
        # Reshape for NLLLoss2d
        x = x.view(1, -1, x.shape[1], x.shape[2])
        target = torch.randint(0, x.shape[1], (1, x.shape[2], x.shape[3]))
        x = self.nll_loss2d(x, target)
        
        # Reshape for CTCLoss
        x = x.view(1, -1, x.shape[1])
        input_lengths = torch.full((1,), x.shape[0], dtype=torch.long)
        target_lengths = torch.full((1,), x.shape[1], dtype=torch.long)
        x = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

