
# This is a random torch model generated by the following modules: ['PReLU', 'PixelUnshuffle', 'Softmax', 'CircularPad3d', 'CircularPad1d', 'MultiLabelMarginLoss', 'ConstantPad3d', 'Hardswish', 'AvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu = nn.PReLU()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.softmax = nn.Softmax(dim=1)
        self.circular_pad_3d = nn.CircularPad3d(padding=1)
        self.circular_pad_1d = nn.CircularPad1d(padding=1)
        self.multilabel_margin_loss = nn.MultiLabelMarginLoss()
        self.constant_pad_3d = nn.ConstantPad3d(padding=1, value=0.5)
        self.hardswish = nn.Hardswish()
        self.avg_pool_2d = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        # Apply CircularPad3d
        x = self.circular_pad_3d(x)
        
        # Apply ConstantPad3d
        x = self.constant_pad_3d(x)
        
        # Apply AvgPool2d
        x = self.avg_pool_2d(x)
        
        # Apply Hardswish
        x = self.hardswish(x)
        
        # Apply PReLU
        x = self.prelu(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Apply CircularPad1d (reshape to 1D first)
        x = x.view(x.size(0), -1)  # Flatten to 1D
        x = self.circular_pad_1d(x)
        
        # Reshape back to a 2D tensor for Softmax
        x = x.view(x.size(0), -1, x.size(1) // x.size(0))
        
        # Apply Softmax
        x = self.softmax(x)
        
        # Apply MultiLabelMarginLoss (requires target, so we skip it in forward)
        # self.multilabel_margin_loss(x, target)  # Uncomment if target is provided
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

