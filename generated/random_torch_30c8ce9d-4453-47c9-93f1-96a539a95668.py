
# This is a random torch model generated by the following modules: ['LazyBatchNorm1d', 'MaxPool2d', 'ConvTranspose3d', 'PairwiseDistance']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm1d()
        self.bn2 = nn.LazyBatchNorm1d()
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2)
        self.pairwise_distance = nn.PairwiseDistance()

    def forward(self, x):
        # Apply LazyBatchNorm1d
        x = x.view(x.size(0), -1)  # Flatten to 1D for BatchNorm1d
        x = self.bn1(x)
        x = self.bn2(x)
        
        # Reshape back to 3D for MaxPool2d
        x = x.view(x.size(0), 1, int(x.size(1)**0.5), int(x.size(1)**0.5))
        
        # Apply MaxPool2d
        x = self.pool1(x)
        x = self.pool2(x)
        
        # Reshape to 5D for ConvTranspose3d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.conv_transpose1(x)
        x = self.conv_transpose2(x)
        
        # Reshape to 2D for PairwiseDistance
        x = x.view(x.size(0), -1)
        x = self.pairwise_distance(x, x)  # Pairwise distance with itself
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
