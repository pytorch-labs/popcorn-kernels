
# This is a random torch model generated by the following modules: ['PixelUnshuffle', 'LazyInstanceNorm3d', 'EmbeddingBag', 'AdaptiveMaxPool2d', 'CELU', 'Identity', 'ReplicationPad1d', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_unshuffle = nn.PixelUnshuffle(downscale_factor=2)
        self.lazy_instance_norm3d = nn.LazyInstanceNorm3d()
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=100, embedding_dim=10, mode='mean')
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d(output_size=(5, 5))
        self.celu = nn.CELU()
        self.identity = nn.Identity()
        self.replication_pad1d = nn.ReplicationPad1d(padding=2)
        self.adaptive_avg_pool2d = nn.AdaptiveAvgPool2d(output_size=(3, 3))

    def forward(self, x):
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape for LazyInstanceNorm3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = self.lazy_instance_norm3d(x)
        
        # Reshape back to 4D for EmbeddingBag
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        
        # Apply EmbeddingBag (requires integer input, so we convert)
        x = x.to(torch.int64)
        x = self.embedding_bag(x.view(-1, x.size(-1)), torch.arange(x.size(0)).repeat_interleave(x.size(1) * x.size(2)).to(x.device))
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(x.size(0), -1, 5, 5)
        x = self.adaptive_max_pool2d(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Apply Identity
        x = self.identity(x)
        
        # Reshape for ReplicationPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.replication_pad1d(x)
        
        # Reshape for AdaptiveAvgPool2d
        x = x.view(x.size(0), x.size(1), 5, 5)
        x = self.adaptive_avg_pool2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
