
# This is a random torch model generated by the following modules: ['Container', 'BCELoss', 'MaxPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.container = nn.Sequential(
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.MaxPool3d(kernel_size=2, stride=2),
            nn.MaxPool3d(kernel_size=2, stride=2)
        )
        self.loss = nn.BCELoss()

    def forward(self, x):
        # Apply the container with multiple MaxPool3d layers
        x = self.container(x)
        
        # Flatten the output to match the expected input shape for BCELoss
        x = x.view(x.size(0), -1)
        
        # Apply a sigmoid to get values between 0 and 1 for BCELoss
        x = torch.sigmoid(x)
        
        # Create a dummy target tensor for BCELoss
        target = torch.zeros_like(x)
        
        # Compute the loss
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()  # Assuming 3D input for MaxPool3d
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

