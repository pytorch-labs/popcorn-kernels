
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'LazyBatchNorm1d', 'AdaptiveMaxPool1d', 'Hardswish', 'LazyConv2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.bn1 = nn.LazyBatchNorm1d()
        self.pool1 = nn.AdaptiveMaxPool1d(output_size=10)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.bn2 = nn.LazyBatchNorm1d()
        self.pool2 = nn.AdaptiveMaxPool1d(output_size=5)
        self.conv3 = nn.LazyConv2d(out_channels=64, kernel_size=3)
        self.bn3 = nn.LazyBatchNorm1d()
        self.pool3 = nn.AdaptiveMaxPool1d(output_size=2)
        self.hardswish = nn.Hardswish()
        self.nll_loss = nn.NLLLoss2d()

    def forward(self, x):
        # Apply first convolution and reshape for batch norm
        x = self.conv1(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for BatchNorm1d
        x = self.bn1(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        x = self.hardswish(x)
        
        # Apply second convolution and reshape for batch norm
        x = self.conv2(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for BatchNorm1d
        x = self.bn2(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        x = self.hardswish(x)
        
        # Apply third convolution and reshape for batch norm
        x = self.conv3(x)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for BatchNorm1d
        x = self.bn3(x)
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape back
        x = self.hardswish(x)
        
        # Apply adaptive max pooling
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for AdaptiveMaxPool1d
        x = self.pool1(x)
        x = self.pool2(x)
        x = self.pool3(x)
        
        # Reshape for NLLLoss2d
        x = x.view(x.size(0), x.size(1), 1, 1)  # Reshape to 4D for NLLLoss2d
        return self.nll_loss(x, torch.zeros(x.size(0), dtype=torch.long).cuda())


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
