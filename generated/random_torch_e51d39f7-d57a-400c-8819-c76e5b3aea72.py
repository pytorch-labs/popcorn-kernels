
# This is a random torch model generated by the following modules: ['ConvTranspose2d', 'ReflectionPad1d', 'SiLU', 'SELU', 'MaxPool1d', 'LazyLinear', 'PairwiseDistance', 'Tanhshrink', 'NLLLoss2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose2d(1, 10, kernel_size=5)
        self.reflection_pad1 = nn.ReflectionPad1d(2)
        self.silu1 = nn.SiLU()
        self.selu1 = nn.SELU()
        self.max_pool1 = nn.MaxPool1d(kernel_size=2)
        self.lazy_linear1 = nn.LazyLinear(50)
        self.lazy_linear2 = nn.LazyLinear(10)
        self.pairwise_distance = nn.PairwiseDistance()
        self.tanhshrink = nn.Tanhshrink()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Apply ConvTranspose2d
        x = self.conv_transpose1(x)
        
        # Reshape for ReflectionPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, height*width)
        x = self.reflection_pad1(x)
        
        # Apply SiLU
        x = self.silu1(x)
        
        # Apply SELU
        x = self.selu1(x)
        
        # Apply MaxPool1d
        x = self.max_pool1(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)  # Flatten to (batch_size, features)
        x = self.lazy_linear1(x)
        x = self.lazy_linear2(x)
        
        # Apply PairwiseDistance (requires two inputs)
        x2 = x.clone()  # Create a copy of x for pairwise distance
        x = self.pairwise_distance(x, x2)
        
        # Apply Tanhshrink
        x = self.tanhshrink(x)
        
        # Apply NLLLoss2d (requires target)
        # Since NLLLoss2d is a loss function, it is typically used during training, not in the forward pass.
        # For the sake of using the module, we will create a dummy target.
        target = torch.zeros_like(x, dtype=torch.long)
        x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions
        target = target.unsqueeze(0).unsqueeze(0)
        x = self.nll_loss2d(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
