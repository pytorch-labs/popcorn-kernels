
# This is a random torch model generated by the following modules: ['BCELoss', 'AdaptiveMaxPool3d', 'EmbeddingBag', 'PixelUnshuffle', 'Dropout', 'AdaptiveAvgPool3d', 'GroupNorm', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.embedding_bag = nn.EmbeddingBag(1000, 64, mode='mean')
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.dropout = nn.Dropout(0.5)
        self.conv_transpose1d = nn.ConvTranspose1d(64, 128, kernel_size=3, stride=2, padding=1)
        self.group_norm = nn.GroupNorm(8, 128)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((4, 4, 4))
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assume input is a 1D tensor of indices for EmbeddingBag
        x = self.embedding_bag(x)
        
        # Reshape for PixelUnshuffle
        x = x.view(-1, 1, 8, 8)
        x = self.pixel_unshuffle(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(-1, 64, 16)
        x = self.conv_transpose1d(x)
        
        # Apply GroupNorm
        x = self.group_norm(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.view(-1, 128, 8, 8, 8)
        x = self.adaptive_max_pool3d(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(-1, 128, 8, 8, 8)
        x = self.adaptive_avg_pool3d(x)
        
        # Final output (assuming binary classification)
        x = torch.sigmoid(x)
        target = torch.rand_like(x)  # Dummy target for BCELoss
        loss = self.bce_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randint(0, 1000, (100,)).cuda()  # Example input for EmbeddingBag
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

