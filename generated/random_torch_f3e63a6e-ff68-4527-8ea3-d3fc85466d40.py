
# This is a random torch model generated by the following modules: ['CircularPad1d', 'LazyConvTranspose1d', 'CrossMapLRN2d', 'AvgPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad1d = nn.CircularPad1d(2)
        self.lazy_conv_transpose1d = nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=2)
        self.cross_map_lrn2d = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2, stride=2)
        self.lazy_conv_transpose1d_2 = nn.LazyConvTranspose1d(out_channels=8, kernel_size=3, stride=1)
        self.avg_pool1d_2 = nn.AvgPool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input is 1D, we first pad it circularly
        x = self.circular_pad1d(x)
        
        # Apply a lazy conv transpose to increase the number of channels
        x = self.lazy_conv_transpose1d(x)
        
        # Reshape to 2D for CrossMapLRN2d
        x = x.unsqueeze(1)  # Add a dummy dimension to make it 2D
        x = self.cross_map_lrn2d(x)
        x = x.squeeze(1)  # Remove the dummy dimension
        
        # Apply average pooling
        x = self.avg_pool1d(x)
        
        # Apply another lazy conv transpose
        x = self.lazy_conv_transpose1d_2(x)
        
        # Apply another average pooling
        x = self.avg_pool1d_2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input with 3 channels and 64 time steps
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

