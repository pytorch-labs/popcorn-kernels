
# This is a random torch model generated by the following modules: ['LazyLinear', 'ConstantPad3d', 'ModuleList', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.avg_pool = nn.AdaptiveAvgPool2d((5, 5))
        self.layers = nn.ModuleList([
            nn.LazyLinear(128),
            nn.LazyLinear(64),
            nn.LazyLinear(32),
            nn.LazyLinear(16),
            nn.LazyLinear(8)
        ])
        
    def forward(self, x):
        # Apply padding to the input
        x = self.pad(x)
        
        # Reshape the input to fit the AdaptiveAvgPool2d layer
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.avg_pool(x)
        
        # Flatten the output for the linear layers
        x = x.view(x.size(0), -1)
        
        # Pass through the ModuleList of LazyLinear layers
        for layer in self.layers:
            x = F.relu(layer(x))
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 10, 10).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
