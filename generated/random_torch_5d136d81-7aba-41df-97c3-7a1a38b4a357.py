
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'SoftMarginLoss', 'CrossEntropyLoss', 'NLLLoss2d', 'ConvTranspose2d', 'RNN', 'SELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(10)
        self.conv_trans1 = nn.ConvTranspose2d(10, 20, kernel_size=5)
        self.rnn = nn.RNN(input_size=20, hidden_size=50, num_layers=2, batch_first=True)
        self.bn2 = nn.BatchNorm3d(50)
        self.conv_trans2 = nn.ConvTranspose2d(50, 10, kernel_size=5)
        self.selu = nn.SELU()
        
        # Loss functions (not used in forward pass, but included as per the module list)
        self.soft_margin_loss = nn.SoftMarginLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss_2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.bn1(x)
        
        # Reshape to 2D for ConvTranspose2d
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size * depth, channels, height, width)
        x = self.conv_trans1(x)
        
        # Reshape back to 3D for RNN
        x = x.view(batch_size, depth, -1)
        x, _ = self.rnn(x)
        
        # Reshape to 3D for BatchNorm3d
        x = x.view(batch_size, x.size(2), depth, x.size(1)//depth, -1)
        x = self.bn2(x)
        
        # Reshape to 2D for ConvTranspose2d
        x = x.view(batch_size * depth, x.size(1), x.size(3), x.size(4))
        x = self.conv_trans2(x)
        
        # Apply SELU activation
        x = self.selu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 64, 64).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
