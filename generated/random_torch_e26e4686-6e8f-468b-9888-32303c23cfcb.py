
# This is a random torch model generated by the following modules: ['Conv1d', 'MaxPool3d', 'Hardshrink', 'CosineSimilarity', 'LazyInstanceNorm1d', 'Dropout', 'RReLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.maxpool3d = nn.MaxPool3d(kernel_size=2)
        self.hardshrink = nn.Hardshrink()
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.lazy_instance_norm = nn.LazyInstanceNorm1d()
        self.dropout = nn.Dropout(p=0.5)
        self.rrelu = nn.RReLU()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv1(x)  # Shape: (batch_size, 10, length - 4)
        x = self.rrelu(x)  # Apply RReLU activation
        
        # Reshape for MaxPool3d
        x = x.unsqueeze(2)  # Add a dimension to make it 4D (batch_size, 10, 1, length - 4)
        x = x.unsqueeze(4)  # Add another dimension to make it 5D (batch_size, 10, 1, length - 4, 1)
        x = self.maxpool3d(x)  # Shape: (batch_size, 10, 1, (length - 4)//2, 1)
        
        # Reshape back to 3D for further processing
        x = x.squeeze(4).squeeze(2)  # Shape: (batch_size, 10, (length - 4)//2)
        
        x = self.lazy_instance_norm(x)  # Apply LazyInstanceNorm1d
        x = self.hardshrink(x)  # Apply Hardshrink
        
        # Create a second tensor for CosineSimilarity
        x2 = x.clone()
        x = self.cosine_sim(x, x2)  # Shape: (batch_size, (length - 4)//2)
        
        # Reshape for Dropout
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, (length - 4)//2)
        x = self.dropout(x)  # Apply Dropout
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
