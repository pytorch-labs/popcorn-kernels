
# This is a random torch model generated by the following modules: ['Dropout3d', 'Hardtanh', 'CircularPad3d', 'RMSNorm', 'EmbeddingBag', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F

class RMSNorm(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.scale = dim ** 0.5
        self.gamma = nn.Parameter(torch.ones(dim))

    def forward(self, x):
        return F.normalize(x, dim=-1) * self.scale * self.gamma

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.circular_pad3d = nn.CircularPad3d(padding=1)
        self.rms_norm = RMSNorm(dim=64)
        self.embedding_bag = nn.EmbeddingBag(num_embeddings=1000, embedding_dim=64, mode='mean')
        self.gelu = nn.GELU()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.dropout3d(x)
        x = self.hardtanh(x)
        x = self.circular_pad3d(x)
        
        # Reshape to fit RMSNorm
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, -1, 64)  # Reshape to (batch_size, seq_len, 64)
        x = self.rms_norm(x)
        
        # Reshape back to original shape
        x = x.view(batch_size, channels, depth, height, width)
        
        # Convert to 1D for EmbeddingBag
        x = x.view(-1)  # Flatten to 1D
        x = self.embedding_bag(x.view(-1, 1).long())  # Convert to long and use EmbeddingBag
        
        # Reshape back to 3D
        x = x.view(batch_size, channels, depth, height, width)
        
        x = self.gelu(x)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

