
# This is a random torch model generated by the following modules: ['Hardshrink', 'Container', 'AdaptiveLogSoftmaxWithLoss', 'AdaptiveMaxPool1d', 'MaxUnpool3d', 'Linear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink = nn.Hardshrink()
        self.container = nn.Sequential(
            nn.Linear(128, 256),
            nn.Linear(256, 128)
        )
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(128, 10, [50, 100])
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=64)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.linear1 = nn.Linear(64, 128)
        self.linear2 = nn.Linear(128, 64)
        self.linear3 = nn.Linear(64, 32)

    def forward(self, x):
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Reshape for AdaptiveMaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_max_pool1d(x)
        
        # Reshape for MaxUnpool3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)
        x, _ = self.max_unpool3d(x, torch.zeros_like(x))
        
        # Reshape for Linear layers
        x = x.view(x.size(0), -1)
        x = self.linear1(x)
        x = self.linear2(x)
        x = self.linear3(x)
        
        # Apply Container (Sequential)
        x = self.container(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 128, 128).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

