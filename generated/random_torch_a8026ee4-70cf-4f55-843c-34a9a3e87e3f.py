
# This is a random torch model generated by the following modules: ['ZeroPad3d', 'PixelUnshuffle', 'LazyLinear', 'ConvTranspose3d', 'EmbeddingBag', 'Sigmoid', 'ZeroPad2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad_3d = nn.ZeroPad3d(1)
        self.pixel_unshuffle = nn.PixelUnshuffle(2)
        self.lazy_linear = nn.LazyLinear(128)
        self.conv_transpose_3d = nn.ConvTranspose3d(16, 8, kernel_size=3, stride=2, padding=1)
        self.embedding_bag = nn.EmbeddingBag(100, 16, mode='mean')
        self.sigmoid = nn.Sigmoid()
        self.zero_pad_2d = nn.ZeroPad2d(1)

    def forward(self, x):
        # Assume input x is of arbitrary shape
        # Apply ZeroPad3d
        x = self.zero_pad_3d(x)
        
        # Apply PixelUnshuffle
        x = self.pixel_unshuffle(x)
        
        # Reshape for LazyLinear
        x = x.view(x.size(0), -1)
        x = self.lazy_linear(x)
        
        # Reshape for ConvTranspose3d
        x = x.view(x.size(0), 16, 4, 4, 4)
        x = self.conv_transpose_3d(x)
        
        # Reshape for EmbeddingBag
        x = x.view(x.size(0), -1)
        x = self.embedding_bag(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Reshape for ZeroPad2d
        x = x.view(x.size(0), 1, 8, 8)
        x = self.zero_pad_2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

