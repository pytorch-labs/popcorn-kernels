
# This is a random torch model generated by the following modules: ['LazyConv2d', 'LogSigmoid', 'AdaptiveAvgPool3d', 'Softmax', 'ModuleDict']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv2d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv2d(out_channels=32, kernel_size=3)
        self.adaptive_pool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.log_sigmoid = nn.LogSigmoid()
        self.softmax = nn.Softmax(dim=1)
        self.module_dict = nn.ModuleDict({
            'fc1': nn.LazyLinear(128),
            'fc2': nn.LazyLinear(64),
            'fc3': nn.LazyLinear(10)
        })

    def forward(self, x):
        # Apply LazyConv2d layers
        x = self.conv1(x)
        x = self.conv2(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 5D
        x = self.adaptive_pool(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        # Apply ModuleDict layers
        x = self.module_dict['fc1'](x)
        x = self.module_dict['fc2'](x)
        x = self.module_dict['fc3'](x)
        
        # Apply LogSigmoid and Softmax
        x = self.log_sigmoid(x)
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

