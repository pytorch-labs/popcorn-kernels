
# This is a random torch model generated by the following modules: ['FeatureAlphaDropout', 'LPPool3d', 'Softplus', 'CrossMapLRN2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.feature_alpha_dropout1 = nn.FeatureAlphaDropout(p=0.5)
        self.lp_pool3d1 = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.cross_map_lrn2d1 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.softplus1 = nn.Softplus()
        self.feature_alpha_dropout2 = nn.FeatureAlphaDropout(p=0.5)
        self.lp_pool3d2 = nn.LPPool3d(norm_type=2, kernel_size=3, stride=2)
        self.cross_map_lrn2d2 = nn.CrossMapLRN2d(size=5, alpha=1e-4, beta=0.75, k=1.0)
        self.softplus2 = nn.Softplus()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.feature_alpha_dropout1(x)
        x = self.lp_pool3d1(x)
        x = self.cross_map_lrn2d1(x)
        x = self.softplus1(x)
        x = self.feature_alpha_dropout2(x)
        x = self.lp_pool3d2(x)
        x = self.cross_map_lrn2d2(x)
        x = self.softplus2(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape: (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
