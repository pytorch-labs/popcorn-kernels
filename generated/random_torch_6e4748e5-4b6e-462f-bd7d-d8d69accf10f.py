
# This is a random torch model generated by the following modules: ['LazyConvTranspose1d', 'Unfold', 'ConstantPad1d', 'Container', 'Hardshrink', 'Module']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3)
        self.unfold = nn.Unfold(kernel_size=(2, 2))
        self.pad = nn.ConstantPad1d(padding=2, value=0)
        self.hardshrink = nn.Hardshrink()
        self.container = nn.Sequential(
            nn.LazyConvTranspose1d(out_channels=16, kernel_size=3),
            nn.Hardshrink(),
            nn.ConstantPad1d(padding=1, value=0)
        )

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, length)
        x = self.conv_transpose1(x)
        x = self.hardshrink(x)
        x = self.pad(x)
        x = self.conv_transpose2(x)
        x = self.hardshrink(x)
        
        # Reshape for Unfold
        x = x.unsqueeze(2)  # Add a dummy dimension to make it 4D
        x = self.unfold(x)
        
        # Reshape back to 3D
        x = x.view(x.size(0), -1, x.size(2))
        
        # Pass through the container
        x = self.container(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64).cuda()  # Example input: (batch_size=1, channels=3, length=64)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

