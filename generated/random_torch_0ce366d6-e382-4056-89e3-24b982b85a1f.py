
# This is a random torch model generated by the following modules: ['FractionalMaxPool3d', 'TransformerEncoderLayer', 'BatchNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=512, nhead=8)
        self.batch_norm3d = nn.BatchNorm3d(64)
        self.fc = nn.Linear(512, 10)

    def forward(self, x):
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Apply BatchNorm3d
        x = self.batch_norm3d(x)
        
        # Reshape for TransformerEncoderLayer
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height * width).permute(2, 0, 1)
        
        # Apply TransformerEncoderLayer
        x = self.transformer_encoder_layer(x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, -1, depth, height, width)
        
        # Global average pooling
        x = F.adaptive_avg_pool3d(x, (1, 1, 1)).view(batch_size, -1)
        
        # Final fully connected layer
        x = self.fc(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

