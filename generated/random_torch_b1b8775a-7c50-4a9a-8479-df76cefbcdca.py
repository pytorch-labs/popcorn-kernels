
# This is a random torch model generated by the following modules: ['Hardshrink', 'FeatureAlphaDropout', 'ReplicationPad3d', 'CTCLoss', 'InstanceNorm1d', 'L1Loss', 'AvgPool3d', 'Softsign']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardshrink = nn.Hardshrink()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.replication_pad3d = nn.ReplicationPad3d(padding=1)
        self.instance_norm1d = nn.InstanceNorm1d(num_features=10)
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2)
        self.softsign = nn.Softsign()
        self.ctc_loss = nn.CTCLoss()
        self.l1_loss = nn.L1Loss()

    def forward(self, x):
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Reshape for ReplicationPad3d
        x = x.view(-1, 1, x.shape[1], x.shape[2], x.shape[3])
        x = self.replication_pad3d(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.shape[0], x.shape[1], -1)
        x = self.instance_norm1d(x)
        
        # Reshape for AvgPool3d
        x = x.view(x.shape[0], x.shape[1], x.shape[2], 1, 1)
        x = self.avg_pool3d(x)
        
        # Apply Softsign
        x = self.softsign(x)
        
        # Compute CTC Loss (dummy target for demonstration)
        input_lengths = torch.full((x.shape[0],), x.shape[1], dtype=torch.long)
        target_lengths = torch.randint(1, x.shape[1], (x.shape[0],), dtype=torch.long)
        target = torch.randint(0, 10, (x.shape[0], target_lengths.max()), dtype=torch.long)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Compute L1 Loss (dummy target for demonstration)
        l1_loss = self.l1_loss(x, torch.zeros_like(x))
        
        # Return the sum of losses for demonstration purposes
        return ctc_loss + l1_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

