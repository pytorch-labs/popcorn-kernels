
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'ConstantPad2d', 'RReLU', 'MaxPool1d', 'PixelShuffle', 'MaxPool2d', 'AvgPool2d', 'RMSNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_instance_norm1d = nn.LazyInstanceNorm1d()
        self.constant_pad2d = nn.ConstantPad2d(1, 0.5)
        self.rrelu = nn.RReLU()
        self.max_pool1d = nn.MaxPool1d(kernel_size=2)
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.max_pool2d = nn.MaxPool2d(kernel_size=2)
        self.avg_pool2d = nn.AvgPool2d(kernel_size=2)
        self.rms_norm = RMSNorm(64)  # Assuming RMSNorm is a custom layer with 64 features

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.constant_pad2d(x)  # Apply padding
        x = self.rrelu(x)  # Apply RReLU
        x = self.max_pool2d(x)  # Apply MaxPool2d
        x = self.avg_pool2d(x)  # Apply AvgPool2d
        x = self.pixel_shuffle(x)  # Apply PixelShuffle
        x = x.view(x.size(0), x.size(1), -1)  # Reshape for 1D operations
        x = self.lazy_instance_norm1d(x)  # Apply LazyInstanceNorm1d
        x = self.max_pool1d(x)  # Apply MaxPool1d
        x = x.view(x.size(0), -1)  # Flatten for RMSNorm
        x = self.rms_norm(x)  # Apply RMSNorm
        return x


class RMSNorm(nn.Module):
    def __init__(self, features: int, eps: float = 1e-6):
        super().__init__()
        self.scale = nn.Parameter(torch.ones(features))
        self.eps = eps

    def forward(self, x):
        rms = torch.sqrt(torch.mean(x ** 2, dim=-1, keepdim=True) + self.eps)
        return x * self.scale / rms


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
