
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'InstanceNorm1d', 'CircularPad3d', 'LayerNorm', 'AdaptiveAvgPool3d', 'Softplus', 'AdaptiveMaxPool2d', 'MaxPool1d', 'LogSoftmax', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_bn2d = nn.LazyBatchNorm2d()
        self.instance_norm1d = nn.InstanceNorm1d(64)
        self.circular_pad3d = nn.CircularPad3d(1)
        self.layer_norm = nn.LayerNorm(128)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((8, 8, 8))
        self.softplus = nn.Softplus()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((16, 16))
        self.max_pool1d = nn.MaxPool1d(2)
        self.log_softmax = nn.LogSoftmax(dim=1)
        self.celu = nn.CELU()

    def forward(self, x):
        # Apply LazyBatchNorm2d
        x = self.lazy_bn2d(x)
        
        # Reshape for InstanceNorm1d
        x = x.view(x.size(0), -1, x.size(1))
        x = self.instance_norm1d(x)
        
        # Reshape back for CircularPad3d
        x = x.view(x.size(0), x.size(2), x.size(1), 1, 1)
        x = self.circular_pad3d(x)
        
        # Reshape for LayerNorm
        x = x.view(x.size(0), -1)
        x = self.layer_norm(x)
        
        # Reshape for AdaptiveAvgPool3d
        x = x.view(x.size(0), 1, x.size(1), 1, 1)
        x = self.adaptive_avg_pool3d(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Reshape for AdaptiveMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3))
        x = self.adaptive_max_pool2d(x)
        
        # Reshape for MaxPool1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.max_pool1d(x)
        
        # Apply CELU
        x = self.celu(x)
        
        # Reshape for LogSoftmax
        x = x.view(x.size(0), -1)
        x = self.log_softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
