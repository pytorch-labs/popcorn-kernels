
# This is a random torch model generated by the following modules: ['AlphaDropout', 'ReflectionPad3d', 'Softmax']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.alpha_dropout1 = nn.AlphaDropout(p=0.5)
        self.reflection_pad3d1 = nn.ReflectionPad3d(padding=1)
        self.alpha_dropout2 = nn.AlphaDropout(p=0.5)
        self.reflection_pad3d2 = nn.ReflectionPad3d(padding=1)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Apply AlphaDropout
        x = self.alpha_dropout1(x)
        
        # Reshape to 5D tensor for ReflectionPad3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Apply ReflectionPad3d
        x = self.reflection_pad3d1(x)
        
        # Apply AlphaDropout again
        x = self.alpha_dropout2(x)
        
        # Apply ReflectionPad3d again
        x = self.reflection_pad3d2(x)
        
        # Reshape back to original shape (excluding the last dimension added for ReflectionPad3d)
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        x = x.squeeze(-1)
        
        # Apply Softmax
        x = self.softmax(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

