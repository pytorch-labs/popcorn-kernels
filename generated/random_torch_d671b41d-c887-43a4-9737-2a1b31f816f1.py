
# This is a random torch model generated by the following modules: ['ELU', 'PixelUnshuffle', 'TransformerEncoder', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.elu1 = nn.ELU()
        self.pixel_unshuffle1 = nn.PixelUnshuffle(downscale_factor=2)
        self.transformer_encoder1 = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=64, nhead=8), num_layers=3
        )
        self.conv_transpose3d1 = nn.ConvTranspose3d(64, 32, kernel_size=3, stride=2, padding=1)
        self.conv_transpose3d2 = nn.ConvTranspose3d(32, 16, kernel_size=3, stride=2, padding=1)
        self.elu2 = nn.ELU()
        self.conv_transpose3d3 = nn.ConvTranspose3d(16, 8, kernel_size=3, stride=2, padding=1)
        self.pixel_unshuffle2 = nn.PixelUnshuffle(downscale_factor=2)
        self.transformer_encoder2 = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=32, nhead=8), num_layers=2
        )
        self.elu3 = nn.ELU()

    def forward(self, x):
        # Apply ELU activation
        x = self.elu1(x)
        
        # Apply PixelUnshuffle to reduce spatial dimensions and increase channels
        x = self.pixel_unshuffle1(x)
        
        # Reshape for TransformerEncoder
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerEncoder
        x = self.transformer_encoder1(x)
        
        # Reshape back to 3D tensor for ConvTranspose3d
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width, -1)
        
        # Apply ConvTranspose3d layers
        x = self.conv_transpose3d1(x)
        x = self.conv_transpose3d2(x)
        
        # Apply ELU activation
        x = self.elu2(x)
        
        # Apply ConvTranspose3d
        x = self.conv_transpose3d3(x)
        
        # Apply PixelUnshuffle again
        x = self.pixel_unshuffle2(x)
        
        # Reshape for TransformerEncoder
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerEncoder
        x = self.transformer_encoder2(x)
        
        # Reshape back to original shape
        x = x.permute(1, 2, 0).view(batch_size, channels, height, width)
        
        # Apply ELU activation
        x = self.elu3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels and 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

