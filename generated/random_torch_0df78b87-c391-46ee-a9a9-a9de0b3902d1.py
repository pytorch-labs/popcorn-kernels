
# This is a random torch model generated by the following modules: ['ReplicationPad3d', 'ModuleList', 'RNNCell', 'Softplus', 'RReLU', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReplicationPad3d(1)
        self.rnn_cells = nn.ModuleList([nn.RNNCell(10, 20) for _ in range(3)])
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.softplus = nn.Softplus()
        self.rrelu = nn.RReLU()

    def forward(self, x):
        # Apply ReplicationPad3d
        x = self.pad(x)
        
        # Reshape for RNNCell
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth, height, width)
        x = x.permute(0, 2, 3, 1)  # (batch_size, height, width, channels * depth)
        x = x.reshape(-1, 10)  # Flatten to (batch_size * height * width, 10)
        
        # Apply RNNCell multiple times
        for rnn_cell in self.rnn_cells:
            x = rnn_cell(x, torch.zeros(x.size(0), 20).to(x.device))
        
        # Reshape back to 4D tensor
        x = x.view(batch_size, height, width, 20)
        x = x.permute(0, 3, 1, 2)  # (batch_size, 20, height, width)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Apply Softplus
        x = self.softplus(x)
        
        # Apply RReLU
        x = self.rrelu(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 10, 32, 32).cuda()  # Example input with arbitrary shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

