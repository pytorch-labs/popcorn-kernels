
# This is a random torch model generated by the following modules: ['LazyInstanceNorm3d', 'UpsamplingBilinear2d', 'ParameterList', 'TransformerDecoder', 'ParameterDict', 'LazyConvTranspose2d', 'LazyInstanceNorm1d', 'Fold']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_instance_norm_3d = nn.LazyInstanceNorm3d()
        self.upsampling_bilinear_2d = nn.UpsamplingBilinear2d(scale_factor=2)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(3)])
        self.transformer_decoder = nn.TransformerDecoder(
            nn.TransformerDecoderLayer(d_model=64, nhead=8), num_layers=2
        )
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })
        self.lazy_conv_transpose_2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.lazy_instance_norm_1d = nn.LazyInstanceNorm1d()
        self.fold = nn.Fold(output_size=(28, 28), kernel_size=(5, 5))

    def forward(self, x):
        # Apply LazyInstanceNorm3d
        x = self.lazy_instance_norm_3d(x)
        
        # Reshape for UpsamplingBilinear2d
        x = x.view(-1, 3, 16, 16)
        x = self.upsampling_bilinear_2d(x)
        
        # Apply ParameterList (no direct effect on forward pass, but can be used in custom logic)
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1, 1)
        
        # Reshape for TransformerDecoder
        x = x.view(-1, 32, 32)
        x = x.permute(1, 0, 2)
        memory = torch.randn_like(x)
        x = self.transformer_decoder(x, memory)
        
        # Apply ParameterDict (no direct effect on forward pass, but can be used in custom logic)
        x = x + self.parameter_dict['param1'].view(1, -1, 1)
        
        # Reshape for LazyConvTranspose2d
        x = x.permute(1, 2, 0)
        x = x.view(-1, 32, 16, 16)
        x = self.lazy_conv_transpose_2d(x)
        
        # Apply LazyInstanceNorm1d
        x = x.view(-1, 32)
        x = self.lazy_instance_norm_1d(x)
        
        # Reshape for Fold
        x = x.view(-1, 32 * 5 * 5, 1)
        x = self.fold(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

