
# This is a random torch model generated by the following modules: ['TripletMarginLoss', 'AdaptiveMaxPool3d', 'Conv1d', 'Hardswish', 'BatchNorm2d', 'LazyConvTranspose2d', 'LSTMCell']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.batch_norm2d = nn.BatchNorm2d(10)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(20, kernel_size=5)
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((10, 10, 10))
        self.lstm_cell = nn.LSTMCell(1000, 50)
        self.hardswish = nn.Hardswish()
        self.triplet_margin_loss = nn.TripletMarginLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, length)
        x = self.conv1d(x)  # Shape: (batch_size, 10, length - kernel_size + 1)
        
        # Reshape for BatchNorm2d
        x = x.unsqueeze(2)  # Shape: (batch_size, 10, 1, length - kernel_size + 1)
        x = self.batch_norm2d(x)  # Shape: (batch_size, 10, 1, length - kernel_size + 1)
        
        # Reshape for LazyConvTranspose2d
        x = x.permute(0, 2, 1, 3)  # Shape: (batch_size, 1, 10, length - kernel_size + 1)
        x = self.lazy_conv_transpose2d(x)  # Shape: (batch_size, 20, height, width)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(2)  # Shape: (batch_size, 20, 1, height, width)
        x = self.adaptive_max_pool3d(x)  # Shape: (batch_size, 20, 10, 10, 10)
        
        # Flatten for LSTMCell
        x = x.view(x.size(0), -1)  # Shape: (batch_size, 20 * 10 * 10 * 10)
        hx = torch.zeros(x.size(0), 50).to(x.device)
        cx = torch.zeros(x.size(0), 50).to(x.device)
        x = self.lstm_cell(x, (hx, cx))[0]  # Shape: (batch_size, 50)
        
        # Apply Hardswish
        x = self.hardswish(x)  # Shape: (batch_size, 50)
        
        # TripletMarginLoss requires three inputs: anchor, positive, negative
        # For simplicity, we'll use the same input for all three
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_margin_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 100).cuda()  # Example input shape: (batch_size, channels, length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

