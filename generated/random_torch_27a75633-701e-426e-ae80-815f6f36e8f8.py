
# This is a random torch model generated by the following modules: ['PReLU', 'LazyConvTranspose1d', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.prelu1 = nn.PReLU()
        self.prelu2 = nn.PReLU()
        self.prelu3 = nn.PReLU()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.batch_norm1 = nn.BatchNorm2d(num_features=32)
        self.batch_norm2 = nn.BatchNorm2d(num_features=64)

    def forward(self, x):
        # Apply PReLU activation
        x = self.prelu1(x)
        
        # Reshape to 1D for ConvTranspose1d
        x = x.view(x.size(0), -1, 1)  # Reshape to (batch_size, channels, 1)
        
        # Apply ConvTranspose1d layers
        x = self.conv_transpose1(x)
        x = self.prelu2(x)
        x = self.conv_transpose2(x)
        x = self.prelu3(x)
        
        # Reshape back to 2D for BatchNorm2d
        x = x.view(x.size(0), 64, 8, 8)  # Reshape to (batch_size, 64, 8, 8)
        
        # Apply BatchNorm2d layers
        x = self.batch_norm1(x)
        x = self.batch_norm2(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

