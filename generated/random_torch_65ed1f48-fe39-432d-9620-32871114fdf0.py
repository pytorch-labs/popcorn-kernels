
# This is a random torch model generated by the following modules: ['CTCLoss', 'TransformerDecoderLayer', 'ParameterList', 'AdaptiveLogSoftmaxWithLoss', 'Bilinear', 'SmoothL1Loss', 'Sigmoid', 'Hardswish', 'ReflectionPad3d', 'ConstantPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(64, 64)) for _ in range(3)])
        self.bilinear = nn.Bilinear(64, 64, 32)
        self.reflection_pad3d = nn.ReflectionPad3d(1)
        self.constant_pad1d = nn.ConstantPad1d(2, 3.0)
        self.sigmoid = nn.Sigmoid()
        self.hardswish = nn.Hardswish()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(32, 10, [5, 5, 10])
        self.ctc_loss = nn.CTCLoss()
        self.smooth_l1_loss = nn.SmoothL1Loss()

    def forward(self, x):
        # Apply ReflectionPad3d and ConstantPad1d
        x = self.reflection_pad3d(x)
        x = self.constant_pad1d(x.squeeze(-1).squeeze(-1)).unsqueeze(-1).unsqueeze(-1)
        
        # Apply TransformerDecoderLayer
        x = x.view(-1, 64, 64)
        x = self.transformer_decoder_layer(x, x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = torch.matmul(x, param)
        
        # Apply Bilinear
        x = self.bilinear(x, x)
        
        # Apply Sigmoid and Hardswish
        x = self.sigmoid(x)
        x = self.hardswish(x)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = x.view(-1, 32)
        x = self.adaptive_log_softmax.log_prob(x)
        
        # Apply CTC Loss (dummy target for demonstration)
        target = torch.randint(0, 10, (32,), dtype=torch.long)
        input_lengths = torch.full((1,), 32, dtype=torch.long)
        target_lengths = torch.randint(1, 10, (1,), dtype=torch.long)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Apply SmoothL1Loss (dummy target for demonstration)
        smooth_l1_loss = self.smooth_l1_loss(x, torch.randn_like(x))
        
        # Return the final output (for demonstration purposes, returning the sum of losses)
        return ctc_loss + smooth_l1_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
