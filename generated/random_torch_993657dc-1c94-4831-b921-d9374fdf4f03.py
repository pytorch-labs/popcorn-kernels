
# This is a random torch model generated by the following modules: ['Hardshrink', 'ReLU', 'CosineSimilarity', 'GELU', 'ELU', 'BatchNorm1d', 'GaussianNLLLoss', 'MultiMarginLoss', 'Conv2d', 'TransformerDecoderLayer']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm1d(16)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm1d(32)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=32, nhead=4)
        self.fc1 = nn.Linear(32, 10)
        self.hardshrink = nn.Hardshrink()
        self.gelu = nn.GELU()
        self.elu = nn.ELU()
        self.gaussian_nll_loss = nn.GaussianNLLLoss()
        self.multi_margin_loss = nn.MultiMarginLoss()

    def forward(self, x):
        # Apply Conv2d and ReLU
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        
        # Reshape for BatchNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = x.permute(0, 2, 1)  # Swap dimensions for BatchNorm1d
        x = self.bn1(x)
        x = self.bn2(x)
        x = x.permute(0, 2, 1)  # Swap back
        
        # Reshape for TransformerDecoderLayer
        x = x.permute(2, 0, 1)  # Transformer expects (seq_len, batch_size, feature_dim)
        x = self.transformer_decoder_layer(x, x)
        x = x.permute(1, 2, 0)  # Swap back to (batch_size, feature_dim, seq_len)
        
        # Global average pooling
        x = x.mean(dim=2)
        
        # Fully connected layer
        x = self.fc1(x)
        
        # Apply activation functions
        x = self.hardshrink(x)
        x = self.gelu(x)
        x = self.elu(x)
        
        # Compute CosineSimilarity with a dummy tensor
        dummy_tensor = torch.ones_like(x)
        cosine_sim = F.cosine_similarity(x, dummy_tensor, dim=1)
        
        # Compute GaussianNLLLoss and MultiMarginLoss (for demonstration purposes)
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        gaussian_loss = self.gaussian_nll_loss(x, target.float(), torch.ones_like(x))
        margin_loss = self.multi_margin_loss(x, target)
        
        # Return the final output and losses (for demonstration purposes)
        return x, cosine_sim, gaussian_loss, margin_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
