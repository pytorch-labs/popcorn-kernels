
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'CTCLoss', 'SyncBatchNorm', 'AdaptiveAvgPool1d', 'FeatureAlphaDropout', 'ParameterList', 'BCELoss', 'Fold', 'SiLU', 'Hardshrink']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.batch_norm3d = nn.BatchNorm3d(10)
        self.sync_batch_norm = nn.SyncBatchNorm(10)
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(5)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.randn(10)) for _ in range(3)])
        self.fold = nn.Fold(output_size=(5, 5), kernel_size=(2, 2))
        self.silu = nn.SiLU()
        self.hardshrink = nn.Hardshrink()
        self.ctc_loss = nn.CTCLoss()
        self.bce_loss = nn.BCELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.batch_norm3d(x)
        x = self.sync_batch_norm(x)
        
        # Reshape for AdaptiveAvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.adaptive_avg_pool1d(x)
        
        x = self.feature_alpha_dropout(x)
        
        # Apply ParameterList
        for param in self.parameter_list:
            x = x + param.view(1, -1, 1)  # Add parameter to each channel
        
        # Reshape for Fold
        x = x.view(x.size(0), -1, 1, 1)  # Reshape to (batch_size, channels, 1, 1)
        x = self.fold(x)
        
        x = self.silu(x)
        x = self.hardshrink(x)
        
        # Compute CTC Loss (dummy target and input lengths)
        target = torch.randint(1, 10, (x.size(0), 5), dtype=torch.long)
        input_lengths = torch.full((x.size(0),), x.size(2), dtype=torch.long)
        target_lengths = torch.randint(1, 6, (x.size(0),), dtype=torch.long)
        ctc_loss = self.ctc_loss(x, target, input_lengths, target_lengths)
        
        # Compute BCE Loss (dummy target)
        target_bce = torch.rand_like(x)
        bce_loss = self.bce_loss(x, target_bce)
        
        return x, ctc_loss, bce_loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 5, 5, 5).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
