
# This is a random torch model generated by the following modules: ['HingeEmbeddingLoss', 'TripletMarginLoss', 'Softmax2d', 'PairwiseDistance', 'ZeroPad3d', 'CosineSimilarity', 'AvgPool1d', 'Softplus', 'PixelShuffle', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.zero_pad = nn.ZeroPad3d(1)
        self.avg_pool = nn.AvgPool1d(kernel_size=2)
        self.softmax2d = nn.Softmax2d()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.softplus = nn.Softplus()
        self.pairwise_distance = nn.PairwiseDistance()
        self.cosine_similarity = nn.CosineSimilarity(dim=1)
        self.hinge_loss = nn.HingeEmbeddingLoss()
        self.triplet_loss = nn.TripletMarginLoss()
        self.poisson_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # ZeroPad3d
        x = self.zero_pad(x)
        
        # AvgPool1d (reshape to 1D)
        x = x.view(x.size(0), -1, x.size(-1))  # Reshape to (batch, channels, length)
        x = self.avg_pool(x)
        
        # Softmax2d (reshape to 2D)
        x = x.view(x.size(0), -1, x.size(-1), x.size(-1))  # Reshape to (batch, channels, height, width)
        x = self.softmax2d(x)
        
        # PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Softplus
        x = self.softplus(x)
        
        # PairwiseDistance (requires two inputs)
        x1 = x[:, :x.size(1)//2, :, :]
        x2 = x[:, x.size(1)//2:, :, :]
        x = self.pairwise_distance(x1.view(x1.size(0), -1), x2.view(x2.size(0), -1))
        
        # CosineSimilarity (requires two inputs)
        x = self.cosine_similarity(x1.view(x1.size(0), -1), x2.view(x2.size(0), -1))
        
        # HingeEmbeddingLoss (requires target)
        target = torch.ones_like(x)
        x = self.hinge_loss(x, target)
        
        # TripletMarginLoss (requires anchor, positive, negative)
        anchor = x.unsqueeze(0)
        positive = x.unsqueeze(0) + 0.1
        negative = x.unsqueeze(0) - 0.1
        x = self.triplet_loss(anchor, positive, negative)
        
        # PoissonNLLLoss (requires target)
        x = self.poisson_loss(x, target)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
