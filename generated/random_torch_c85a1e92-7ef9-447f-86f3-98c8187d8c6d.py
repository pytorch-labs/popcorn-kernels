
# This is a random torch model generated by the following modules: ['Softmax2d', 'LazyConvTranspose1d', 'ZeroPad1d', 'ReLU6']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2)
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.zero_pad = nn.ZeroPad1d(padding=2)
        self.relu6 = nn.ReLU6()
        self.softmax2d = nn.Softmax2d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, height, width)
        # Reshape to 1D convolution input shape (batch_size, channels, length)
        x = x.view(x.size(0), x.size(1), -1)
        
        x = self.conv_transpose1(x)
        x = self.zero_pad(x)
        x = self.relu6(x)
        
        x = self.conv_transpose2(x)
        x = self.zero_pad(x)
        x = self.relu6(x)
        
        # Reshape back to 2D shape for Softmax2d
        x = x.view(x.size(0), x.size(1), int(x.size(2) ** 0.5), int(x.size(2) ** 0.5))
        x = self.softmax2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

