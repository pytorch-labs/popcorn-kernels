
# This is a random torch model generated by the following modules: ['Softsign', 'Softmin', 'RReLU', 'Sequential', 'Fold', 'AdaptiveAvgPool3d', 'Flatten', 'MaxPool3d', 'CosineEmbeddingLoss', 'Unflatten']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softsign = nn.Softsign()
        self.softmin = nn.Softmin(dim=1)
        self.rrelu = nn.RReLU()
        self.sequential = nn.Sequential(
            nn.Conv2d(1, 10, kernel_size=5),
            nn.MaxPool2d(2),
            nn.Conv2d(10, 20, kernel_size=5),
            nn.MaxPool2d(2)
        )
        self.fold = nn.Fold(output_size=(10, 10), kernel_size=(5, 5))
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.flatten = nn.Flatten()
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.cosine_embedding_loss = nn.CosineEmbeddingLoss()
        self.unflatten = nn.Unflatten(1, (10, 10))

    def forward(self, x):
        x = self.softsign(x)
        x = self.softmin(x)
        x = self.rrelu(x)
        x = self.sequential(x)
        x = x.view(x.size(0), -1, 1, 1)  # Reshape for Fold
        x = self.fold(x)
        x = x.unsqueeze(1)  # Add channel dimension for 3D pooling
        x = self.adaptive_avg_pool3d(x)
        x = self.max_pool3d(x)
        x = self.flatten(x)
        x = self.unflatten(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

