
# This is a random torch model generated by the following modules: ['ReLU6', 'LPPool1d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.relu6 = nn.ReLU6()

    def forward(self, x):
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape to 1D for LPPool1d
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels * height, width)
        
        # Apply LPPool1d
        x = self.lp_pool1d(x)
        
        # Reshape back to 2D
        x = x.view(batch_size, channels, height, -1)
        
        # Apply ReLU6
        x = self.relu6(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with 3 channels, 64x64 spatial dimensions
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
