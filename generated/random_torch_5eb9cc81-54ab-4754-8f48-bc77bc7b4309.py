
# This is a random torch model generated by the following modules: ['CircularPad2d', 'LazyConv1d', 'Softshrink', 'SoftMarginLoss', 'InstanceNorm2d', 'LPPool3d', 'LazyLinear', 'FeatureAlphaDropout', 'GELU', 'GRU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.CircularPad2d(1)
        self.lazy_conv1d = nn.LazyConv1d(out_channels=32, kernel_size=3)
        self.softshrink = nn.Softshrink(0.5)
        self.instance_norm = nn.InstanceNorm2d(num_features=32)
        self.lp_pool3d = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.lazy_linear = nn.LazyLinear(out_features=128)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.gelu = nn.GELU()
        self.gru = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.soft_margin_loss = nn.SoftMarginLoss()

    def forward(self, x):
        # Apply CircularPad2d
        x = self.circular_pad(x)
        
        # Reshape for LazyConv1d
        x = x.view(x.size(0), -1, x.size(-1))
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape for InstanceNorm2d
        x = x.unsqueeze(1)
        x = x.view(x.size(0), 32, -1, x.size(-1))
        
        # Apply InstanceNorm2d
        x = self.instance_norm(x)
        
        # Reshape for LPPool3d
        x = x.unsqueeze(1)
        
        # Apply LPPool3d
        x = self.lp_pool3d(x)
        
        # Flatten for LazyLinear
        x = x.view(x.size(0), -1)
        
        # Apply LazyLinear
        x = self.lazy_linear(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Reshape for GRU
        x = x.unsqueeze(1)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply SoftMarginLoss (assuming binary classification)
        target = torch.ones_like(x[:, -1, :])
        loss = self.soft_margin_loss(x[:, -1, :], target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

