
# This is a random torch model generated by the following modules: ['ConstantPad3d', 'LazyConvTranspose1d', 'LazyBatchNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad1 = nn.ConstantPad3d(padding=1, value=0)
        self.conv_transpose1 = nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=1)
        self.bn1 = nn.LazyBatchNorm1d()
        self.conv_transpose2 = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=1)
        self.bn2 = nn.LazyBatchNorm1d()
        self.conv_transpose3 = nn.LazyConvTranspose1d(out_channels=128, kernel_size=3, stride=1)
        self.bn3 = nn.LazyBatchNorm1d()

    def forward(self, x):
        # Assuming input is of shape (batch_size, channels, depth, height, width)
        x = self.pad1(x)
        
        # Reshape to (batch_size, channels, depth * height * width)
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels, -1)
        
        x = self.conv_transpose1(x)
        x = self.bn1(x)
        x = F.relu(x)
        
        x = self.conv_transpose2(x)
        x = self.bn2(x)
        x = F.relu(x)
        
        x = self.conv_transpose3(x)
        x = self.bn3(x)
        x = F.relu(x)
        
        # Reshape back to (batch_size, channels, depth, height, width)
        x = x.view(batch_size, -1, depth, height, width)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
