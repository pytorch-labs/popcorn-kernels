
# This is a random torch model generated by the following modules: ['LazyBatchNorm3d', 'Hardtanh', 'ReplicationPad2d', 'UpsamplingBilinear2d', 'GRUCell', 'MultiMarginLoss', 'LazyConvTranspose1d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.LazyBatchNorm3d()
        self.hardtanh = nn.Hardtanh()
        self.pad = nn.ReplicationPad2d(2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.gru_cell = nn.GRUCell(128, 64)
        self.loss = nn.MultiMarginLoss()
        self.conv_transpose1d = nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2)
        self.conv_transpose2d = nn.LazyConvTranspose2d(out_channels=32, kernel_size=3, stride=2)

    def forward(self, x):
        # Apply LazyBatchNorm3d
        x = self.bn1(x)
        
        # Reshape for ConvTranspose1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten last two dimensions
        x = self.conv_transpose1d(x)
        
        # Reshape for ConvTranspose2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))
        x = self.conv_transpose2d(x)
        
        # Apply ReplicationPad2d
        x = self.pad(x)
        
        # Apply UpsamplingBilinear2d
        x = self.upsample(x)
        
        # Reshape for GRUCell
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        hx = torch.zeros(x.size(0), 64).to(x.device)  # Initialize hidden state for GRUCell
        x = self.gru_cell(x, hx)
        
        # Apply Hardtanh
        x = self.hardtanh(x)
        
        # Compute MultiMarginLoss (assuming some target for demonstration)
        target = torch.randint(0, 64, (x.size(0),)).to(x.device)
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

