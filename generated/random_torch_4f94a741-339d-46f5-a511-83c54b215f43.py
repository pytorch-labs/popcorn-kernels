
# This is a random torch model generated by the following modules: ['BatchNorm3d', 'CircularPad1d', 'ConstantPad2d', 'LazyConvTranspose2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.bn1 = nn.BatchNorm3d(1)
        self.circular_pad1 = nn.CircularPad1d(2)
        self.constant_pad2d = nn.ConstantPad2d(1, 0.5)
        self.lazy_conv_transpose2d = nn.LazyConvTranspose2d(out_channels=10, kernel_size=3, stride=2)
        self.bn2 = nn.BatchNorm3d(10)
        self.circular_pad2 = nn.CircularPad1d(1)
        self.constant_pad2d2 = nn.ConstantPad2d(2, 0.25)
        self.lazy_conv_transpose2d2 = nn.LazyConvTranspose2d(out_channels=20, kernel_size=5, stride=1)
        self.bn3 = nn.BatchNorm3d(20)

    def forward(self, x):
        # Assuming input is 5D (batch, channels, depth, height, width)
        x = self.bn1(x)
        
        # Reduce to 3D by averaging over depth
        x = x.mean(dim=2)
        
        # Apply CircularPad1d
        x = self.circular_pad1(x)
        
        # Reshape to 4D for ConstantPad2d
        x = x.unsqueeze(1)
        x = self.constant_pad2d(x)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d(x)
        
        # Reshape back to 5D for BatchNorm3d
        x = x.unsqueeze(2)
        x = self.bn2(x)
        
        # Reduce to 3D by averaging over depth
        x = x.mean(dim=2)
        
        # Apply CircularPad1d
        x = self.circular_pad2(x)
        
        # Reshape to 4D for ConstantPad2d
        x = x.unsqueeze(1)
        x = self.constant_pad2d2(x)
        
        # Apply LazyConvTranspose2d
        x = self.lazy_conv_transpose2d2(x)
        
        # Reshape back to 5D for BatchNorm3d
        x = x.unsqueeze(2)
        x = self.bn3(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
