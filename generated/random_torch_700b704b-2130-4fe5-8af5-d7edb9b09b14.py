
# This is a random torch model generated by the following modules: ['Softmax', 'AlphaDropout', 'AdaptiveMaxPool3d', 'Hardsigmoid', 'Flatten', 'GRUCell', 'ConvTranspose3d', 'Dropout1d', 'GRU', 'GLU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d((8, 8, 8))
        self.conv_transpose3d = nn.ConvTranspose3d(1, 16, kernel_size=3, stride=2, padding=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.gru_cell = nn.GRUCell(1024, 512)
        self.gru = nn.GRU(512, 256, batch_first=True)
        self.glu = nn.GLU(dim=1)
        self.alpha_dropout = nn.AlphaDropout(p=0.5)
        self.flatten = nn.Flatten()
        self.hardsigmoid = nn.Hardsigmoid()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        # Assume input x is of shape (batch_size, channels, depth, height, width)
        x = self.adaptive_max_pool3d(x)  # Shape: (batch_size, channels, 8, 8, 8)
        x = self.conv_transpose3d(x)  # Shape: (batch_size, 16, 16, 16, 16)
        x = x.permute(0, 2, 1, 3, 4)  # Shape: (batch_size, 16, 16, 16, 16) -> (batch_size, 16, 16, 16, 16)
        x = x.reshape(x.size(0), x.size(1), -1)  # Shape: (batch_size, 16, 16*16*16)
        x = self.dropout1d(x)  # Shape: (batch_size, 16, 4096)
        x = x.reshape(x.size(0), -1)  # Shape: (batch_size, 16*4096)
        x = self.gru_cell(x, torch.zeros(x.size(0), 512).to(x.device))  # Shape: (batch_size, 512)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 512)
        x, _ = self.gru(x)  # Shape: (batch_size, 1, 256)
        x = x.squeeze(1)  # Shape: (batch_size, 256)
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, 256)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 256, 1)
        x = self.glu(x)  # Shape: (batch_size, 128, 1)
        x = x.squeeze(2)  # Shape: (batch_size, 128)
        x = self.alpha_dropout(x)  # Shape: (batch_size, 128)
        x = self.flatten(x)  # Shape: (batch_size, 128)
        x = self.hardsigmoid(x)  # Shape: (batch_size, 128)
        x = self.softmax(x)  # Shape: (batch_size, 128)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()  # Example input shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

