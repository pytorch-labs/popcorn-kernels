
# This is a random torch model generated by the following modules: ['AvgPool1d', 'LazyBatchNorm2d', 'ConvTranspose1d', 'CircularPad1d', 'AdaptiveMaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.lazy_batch_norm2d = nn.LazyBatchNorm2d()
        self.conv_transpose1d = nn.ConvTranspose1d(in_channels=10, out_channels=20, kernel_size=3, stride=2)
        self.circular_pad1d = nn.ConstantPad1d(padding=2, value=0)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)

    def forward(self, x):
        # Assuming input is 1D, reshape to 2D for LazyBatchNorm2d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(2)  # Add a height dimension to make it 2D
        x = self.lazy_batch_norm2d(x)
        
        # Reshape back to 1D for AvgPool1d
        x = x.squeeze(2).squeeze(1)
        x = self.avg_pool1d(x)
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply ConvTranspose1d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.conv_transpose1d(x)
        
        # Apply AdaptiveMaxPool1d
        x = self.adaptive_max_pool1d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Arbitrary input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
