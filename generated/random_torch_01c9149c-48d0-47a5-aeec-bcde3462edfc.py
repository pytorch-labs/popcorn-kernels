
# This is a random torch model generated by the following modules: ['Softshrink', 'ZeroPad1d', 'TransformerDecoderLayer', 'MaxPool2d', 'AdaptiveAvgPool2d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softshrink = nn.Softshrink()
        self.zeropad1d = nn.ZeroPad1d(2)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.maxpool2d = nn.MaxPool2d(kernel_size=2, stride=2)
        self.adaptiveavgpool2d = nn.AdaptiveAvgPool2d((1, 1))

    def forward(self, x):
        # Apply Softshrink
        x = self.softshrink(x)
        
        # Reshape and apply ZeroPad1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten last two dimensions
        x = self.zeropad1d(x)
        
        # Reshape back and apply MaxPool2d
        x = x.view(x.size(0), x.size(1), int(x.size(2)**0.5), int(x.size(2)**0.5))  # Reshape to 4D
        x = self.maxpool2d(x)
        
        # Apply TransformerDecoderLayer
        x = x.view(x.size(0), x.size(1), -1).permute(2, 0, 1)  # Reshape for Transformer
        x = self.transformer_decoder_layer(x, x)
        x = x.permute(1, 2, 0).view(x.size(1), x.size(2), int(x.size(0)**0.5), int(x.size(0)**0.5))  # Reshape back
        
        # Apply AdaptiveAvgPool2d
        x = self.adaptiveavgpool2d(x)
        
        # Flatten the output
        x = x.view(x.size(0), -1)
        
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
