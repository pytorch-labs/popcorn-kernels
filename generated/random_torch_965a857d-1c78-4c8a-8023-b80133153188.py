
# This is a random torch model generated by the following modules: ['NLLLoss2d', 'Dropout3d', 'Hardshrink', 'AdaptiveLogSoftmaxWithLoss', 'Softsign', 'Conv3d', 'AdaptiveMaxPool2d', 'CircularPad3d', 'ConstantPad1d', 'MultiLabelSoftMarginLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d_1 = nn.Conv3d(1, 10, kernel_size=3)
        self.conv3d_2 = nn.Conv3d(10, 20, kernel_size=3)
        self.dropout3d = nn.Dropout3d(p=0.5)
        self.hardshrink = nn.Hardshrink()
        self.softsign = nn.Softsign()
        self.adaptive_max_pool2d = nn.AdaptiveMaxPool2d((5, 5))
        self.circular_pad3d = nn.CircularPad3d(1)
        self.constant_pad1d = nn.ConstantPad1d(2, 0.5)
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(20, 10)
        self.nll_loss2d = nn.NLLLoss2d()
        self.multi_label_soft_margin_loss = nn.MultiLabelSoftMarginLoss()

    def forward(self, x):
        # Apply Conv3d layers with padding and dropout
        x = self.circular_pad3d(x)
        x = self.conv3d_1(x)
        x = self.dropout3d(x)
        x = self.conv3d_2(x)
        x = self.dropout3d(x)
        
        # Apply Hardshrink and Softsign
        x = self.hardshrink(x)
        x = self.softsign(x)
        
        # Reshape for 2D operations
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.adaptive_max_pool2d(x)
        
        # Apply ConstantPad1d (requires reshaping)
        x = x.view(x.size(0), x.size(1), -1)
        x = self.constant_pad1d(x)
        
        # Reshape back for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), x.size(1), -1)
        x = self.adaptive_log_softmax(x)
        
        # Apply NLLLoss2d and MultiLabelSoftMarginLoss (assuming targets are provided)
        # Note: These are loss functions and typically used during training, not in forward pass
        # For demonstration, we'll just return the output of AdaptiveLogSoftmaxWithLoss
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 10, 10, 10).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

