
# This is a random torch model generated by the following modules: ['CrossEntropyLoss', 'AdaptiveAvgPool1d', 'GRU', 'Flatten', 'NLLLoss2d', 'Sigmoid', 'SyncBatchNorm']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_avg_pool1d = nn.AdaptiveAvgPool1d(output_size=64)
        self.gru1 = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.gru2 = nn.GRU(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.flatten = nn.Flatten()
        self.sync_batch_norm = nn.SyncBatchNorm(64)
        self.sigmoid = nn.Sigmoid()
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.nll_loss2d = nn.NLLLoss2d()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.adaptive_avg_pool1d(x)  # Shape: (batch_size, channels, 64)
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 64, channels)
        
        # GRU layers
        x, _ = self.gru1(x)  # Shape: (batch_size, 64, 128)
        x, _ = self.gru2(x)  # Shape: (batch_size, 64, 64)
        
        # SyncBatchNorm
        x = x.permute(0, 2, 1)  # Shape: (batch_size, 64, 64)
        x = self.sync_batch_norm(x)
        
        # Flatten
        x = self.flatten(x)  # Shape: (batch_size, 64 * 64)
        
        # Sigmoid
        x = self.sigmoid(x)  # Shape: (batch_size, 64 * 64)
        
        # Reshape for NLLLoss2d
        x = x.view(-1, 64, 8, 8)  # Shape: (batch_size, 64, 8, 8)
        
        # NLLLoss2d requires log probabilities, so we apply log_softmax
        x = F.log_softmax(x, dim=1)  # Shape: (batch_size, 64, 8, 8)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 128).cuda()  # Example input shape: (batch_size, channels, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

