
# This is a random torch model generated by the following modules: ['ChannelShuffle', 'Softsign', 'Softmax', 'CosineSimilarity', 'Dropout1d', 'Identity', 'GroupNorm', 'CELU', 'AdaptiveMaxPool3d', 'PoissonNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.channel_shuffle = nn.ChannelShuffle(groups=2)
        self.softsign = nn.Softsign()
        self.softmax = nn.Softmax(dim=1)
        self.cosine_sim = nn.CosineSimilarity(dim=1)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.identity = nn.Identity()
        self.group_norm = nn.GroupNorm(num_groups=2, num_channels=10)
        self.celu = nn.CELU()
        self.adaptive_max_pool3d = nn.AdaptiveMaxPool3d(output_size=(5, 5, 5))
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, *dims)
        x = self.channel_shuffle(x)
        x = self.softsign(x)
        x = self.softmax(x)
        
        # For CosineSimilarity, we need two inputs, so we split the tensor
        x1, x2 = torch.chunk(x, 2, dim=1)
        x = self.cosine_sim(x1, x2)
        
        # Reshape for Dropout1d
        x = x.unsqueeze(1)  # Add a channel dimension
        x = self.dropout1d(x)
        x = x.squeeze(1)  # Remove the channel dimension
        
        x = self.identity(x)
        
        # Reshape for GroupNorm
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.repeat(1, 10, 1)  # Repeat to match num_channels for GroupNorm
        x = self.group_norm(x)
        x = x.mean(dim=1)  # Reduce back to original shape
        
        x = self.celu(x)
        
        # Reshape for AdaptiveMaxPool3d
        x = x.unsqueeze(1).unsqueeze(1)  # Add dimensions to make it 5D
        x = self.adaptive_max_pool3d(x)
        x = x.squeeze(1).squeeze(1)  # Remove extra dimensions
        
        # For PoissonNLLLoss, we need a target, so we generate a dummy target
        target = torch.poisson(x.abs())  # Generate a Poisson-distributed target
        loss = self.poisson_nll_loss(x, target)
        
        return x, loss

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
