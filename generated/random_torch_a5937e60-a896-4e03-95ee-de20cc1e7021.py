
# This is a random torch model generated by the following modules: ['AdaptiveMaxPool1d', 'Flatten', 'Softmin', 'LeakyReLU', 'Dropout1d', 'FeatureAlphaDropout', 'Hardshrink', 'InstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=128)
        self.flatten = nn.Flatten()
        self.softmin = nn.Softmin(dim=1)
        self.leaky_relu = nn.LeakyReLU(negative_slope=0.01)
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.hardshrink = nn.Hardshrink(lambd=0.5)
        self.instance_norm3d = nn.InstanceNorm3d(num_features=64)

    def forward(self, x):
        # Reshape input to 3D for InstanceNorm3d
        x = x.view(-1, 64, 32, 32, 32)
        x = self.instance_norm3d(x)
        
        # Reshape back to 1D for AdaptiveMaxPool1d
        x = x.view(-1, 64, 32 * 32 * 32)
        x = self.adaptive_max_pool1d(x)
        
        # Apply Dropout1d
        x = self.dropout1d(x)
        
        # Flatten the tensor
        x = self.flatten(x)
        
        # Apply LeakyReLU
        x = self.leaky_relu(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply Hardshrink
        x = self.hardshrink(x)
        
        # Apply Softmin
        x = self.softmin(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
