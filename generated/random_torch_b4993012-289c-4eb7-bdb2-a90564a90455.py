
# This is a random torch model generated by the following modules: ['PixelShuffle', 'FractionalMaxPool3d', 'LPPool1d', 'ModuleDict', 'LazyBatchNorm3d', 'ConstantPad3d', 'Dropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.lp_pool1d = nn.LPPool1d(norm_type=2, kernel_size=3, stride=2)
        self.module_dict = nn.ModuleDict({
            'conv1': nn.Conv3d(1, 10, kernel_size=3),
            'conv2': nn.Conv3d(10, 20, kernel_size=3),
        })
        self.lazy_batch_norm3d = nn.LazyBatchNorm3d()
        self.constant_pad3d = nn.ConstantPad3d(padding=1, value=0)
        self.dropout = nn.Dropout(p=0.5)

    def forward(self, x):
        # Apply PixelShuffle
        x = self.pixel_shuffle(x)
        
        # Reshape for 3D operations
        x = x.view(x.size(0), 1, x.size(1), x.size(2), x.size(3))
        
        # Apply ConstantPad3d
        x = self.constant_pad3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Apply LazyBatchNorm3d
        x = self.lazy_batch_norm3d(x)
        
        # Apply ModuleDict (Conv3d layers)
        x = self.module_dict['conv1'](x)
        x = F.relu(x)
        x = self.module_dict['conv2'](x)
        x = F.relu(x)
        
        # Reshape for 1D operations
        x = x.view(x.size(0), x.size(1), -1)
        
        # Apply LPPool1d
        x = self.lp_pool1d(x)
        
        # Apply Dropout
        x = self.dropout(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 4, 32, 32).cuda()  # Example input shape for PixelShuffle
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

