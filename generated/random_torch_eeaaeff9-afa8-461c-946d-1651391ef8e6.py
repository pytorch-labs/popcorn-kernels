
# This is a random torch model generated by the following modules: ['LazyInstanceNorm1d', 'CELU', 'AvgPool3d', 'MSELoss', 'BatchNorm2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.norm1 = nn.LazyInstanceNorm1d()
        self.celu = nn.CELU()
        self.avgpool = nn.AvgPool3d(kernel_size=2)
        self.batchnorm = nn.BatchNorm2d(10)
        self.loss = nn.MSELoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        # First, apply LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (batch_size, channels, depth*height*width)
        x = self.norm1(x)
        x = x.view(x.size(0), x.size(1), -1, x.size(2) // x.size(1), x.size(2) // x.size(1))  # Reshape back
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Apply AvgPool3d
        x = self.avgpool(x)
        
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)  # Reshape to (batch_size, channels, height, width)
        x = self.batchnorm(x)
        
        # Reshape back to original shape
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), -1)
        
        # Compute MSELoss (assuming target is the same as input for simplicity)
        target = x.detach()  # Detach to avoid backprop through target
        loss = self.loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch_size, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

