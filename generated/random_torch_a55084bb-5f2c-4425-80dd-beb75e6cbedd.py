
# This is a random torch model generated by the following modules: ['Softplus', 'SmoothL1Loss', 'MaxUnpool3d', 'CrossEntropyLoss', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.softplus = nn.Softplus()
        self.smooth_l1_loss = nn.SmoothL1Loss()
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.cross_entropy_loss = nn.CrossEntropyLoss()
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        
        # Additional layers to make the model functional
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3, stride=1, padding=1)
        self.pool3d = nn.MaxPool3d(kernel_size=2, stride=2, return_indices=True)
        self.fc1 = nn.Linear(10 * 8 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, depth, height, width)
        x = self.conv3d(x)
        x, indices = self.pool3d(x)
        x = self.feature_alpha_dropout(x)
        x = self.max_unpool3d(x, indices)
        x = self.softplus(x)
        
        # Flatten the tensor for the fully connected layers
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        
        # Assuming we have a target tensor for loss calculation
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss1 = self.smooth_l1_loss(x, target.float())
        loss2 = self.cross_entropy_loss(x, target)
        
        # Return the output and the losses
        return x, loss1, loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 16, 16, 16).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

