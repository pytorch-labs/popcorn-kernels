
# This is a random torch model generated by the following modules: ['GRU', 'CrossEntropyLoss', 'Conv2d', 'ConstantPad3d', 'GELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.pad = nn.ConstantPad3d(padding=(1, 1, 1, 1, 1, 1), value=0)
        self.gru = nn.GRU(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.gelu = nn.GELU()
        self.fc = nn.Linear(128, 10)
        self.criterion = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply Conv2d
        x = self.conv1(x)
        
        # Apply ConstantPad3d
        x = self.pad(x.unsqueeze(2)).squeeze(2)
        
        # Reshape for GRU
        batch_size, channels, height, width = x.size()
        x = x.view(batch_size, channels, -1).permute(0, 2, 1)
        
        # Apply GRU
        x, _ = self.gru(x)
        
        # Apply GELU
        x = self.gelu(x)
        
        # Take the last output of the GRU
        x = x[:, -1, :]
        
        # Apply fully connected layer
        x = self.fc(x)
        
        # Compute CrossEntropyLoss (assuming target is provided externally)
        # Note: CrossEntropyLoss is typically used in the training loop, not in the forward pass
        # For demonstration purposes, we assume a dummy target here
        if self.training:
            target = torch.randint(0, 10, (batch_size,)).to(x.device)
            loss = self.criterion(x, target)
            return x, loss
        else:
            return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
