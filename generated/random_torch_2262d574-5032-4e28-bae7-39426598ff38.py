
# This is a random torch model generated by the following modules: ['PoissonNLLLoss', 'LPPool3d', 'ParameterDict', 'InstanceNorm3d', 'ConvTranspose3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv_transpose1 = nn.ConvTranspose3d(1, 10, kernel_size=3, stride=2, padding=1)
        self.instance_norm1 = nn.InstanceNorm3d(10)
        self.lp_pool1 = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.conv_transpose2 = nn.ConvTranspose3d(10, 20, kernel_size=3, stride=2, padding=1)
        self.instance_norm2 = nn.InstanceNorm3d(20)
        self.lp_pool2 = nn.LPPool3d(norm_type=2, kernel_size=2, stride=2)
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(20, 10)),
            'param2': nn.Parameter(torch.randn(10, 5))
        })
        self.poisson_nll_loss = nn.PoissonNLLLoss()

    def forward(self, x):
        x = self.conv_transpose1(x)
        x = self.instance_norm1(x)
        x = self.lp_pool1(x)
        x = self.conv_transpose2(x)
        x = self.instance_norm2(x)
        x = self.lp_pool2(x)
        
        # Flatten the output for the parameter dict
        x = x.view(x.size(0), -1)
        
        # Apply the parameter dict
        x = torch.matmul(x, self.parameter_dict['param1'])
        x = torch.matmul(x, self.parameter_dict['param2'])
        
        # Compute the Poisson NLL Loss (assuming target is the same as input for simplicity)
        target = x.detach()  # Detach to avoid backprop through target
        loss = self.poisson_nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

