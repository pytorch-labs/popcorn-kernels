
# This is a random torch model generated by the following modules: ['Bilinear', 'Conv1d', 'NLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.Conv1d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv1d(10, 20, kernel_size=5)
        self.bilinear = nn.Bilinear(20, 20, 50)
        self.fc = nn.Linear(50, 10)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, 1, sequence_length)
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        
        # Reshape for Bilinear layer
        x = x.permute(0, 2, 1)  # Shape: (batch_size, sequence_length, 20)
        x1 = x[:, :x.size(1)//2, :]  # Split the sequence into two parts
        x2 = x[:, x.size(1)//2:, :]
        
        # Apply Bilinear layer
        x = self.bilinear(x1, x2)  # Shape: (batch_size, sequence_length//2, 50)
        
        # Flatten for fully connected layer
        x = x.view(x.size(0), -1)  # Shape: (batch_size, sequence_length//2 * 50)
        x = self.fc(x)  # Shape: (batch_size, 10)
        
        # Apply log_softmax for NLLLoss
        x = F.log_softmax(x, dim=1)
        
        # Assuming target is provided externally for NLLLoss
        target = torch.randint(0, 10, (x.size(0),)).to(x.device)
        loss = self.nll_loss(x, target)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 128).cuda()  # Example input shape: (batch_size, 1, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

