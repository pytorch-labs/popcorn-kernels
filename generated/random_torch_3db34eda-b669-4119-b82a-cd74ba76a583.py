
# This is a random torch model generated by the following modules: ['Dropout1d', 'AdaptiveMaxPool1d', 'Identity', 'ModuleDict', 'FeatureAlphaDropout', 'MaxPool1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.dropout1d = nn.Dropout1d(p=0.5)
        self.adaptive_max_pool1d = nn.AdaptiveMaxPool1d(output_size=10)
        self.identity = nn.Identity()
        self.module_dict = nn.ModuleDict({
            'feature_alpha_dropout': nn.FeatureAlphaDropout(p=0.5),
            'max_pool1d': nn.MaxPool1d(kernel_size=2, stride=2)
        })
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=2)

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, sequence_length)
        x = self.dropout1d(x)
        x = self.adaptive_max_pool1d(x)
        x = self.identity(x)
        x = self.module_dict['feature_alpha_dropout'](x)
        x = self.module_dict['max_pool1d'](x)
        x = self.feature_alpha_dropout(x)
        x = self.max_pool1d(x)
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 32, 100).cuda()  # Example input shape (batch_size=1, channels=32, sequence_length=100)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
