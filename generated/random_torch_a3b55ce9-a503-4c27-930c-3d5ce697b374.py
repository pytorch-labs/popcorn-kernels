
# This is a random torch model generated by the following modules: ['AvgPool1d', 'LazyConv3d', 'LazyBatchNorm1d', 'ReflectionPad3d', 'UpsamplingBilinear2d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool1d = nn.AvgPool1d(kernel_size=2)
        self.lazy_conv3d_1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.lazy_conv3d_2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.lazy_batch_norm1d = nn.LazyBatchNorm1d()
        self.reflection_pad3d = nn.ReflectionPad3d(padding=1)
        self.upsampling_bilinear2d = nn.UpsamplingBilinear2d(scale_factor=2)

    def forward(self, x):
        # Assuming input is 4D (batch, channels, height, width)
        # Reshape to 3D for AvgPool1d
        x = x.view(x.size(0), x.size(1), -1)  # (batch, channels, height * width)
        x = self.avg_pool1d(x)
        
        # Reshape back to 4D for LazyConv3d
        x = x.view(x.size(0), x.size(1), x.size(2), 1, 1)  # (batch, channels, height, 1, 1)
        x = self.lazy_conv3d_1(x)
        x = self.reflection_pad3d(x)
        x = self.lazy_conv3d_2(x)
        
        # Reshape to 2D for LazyBatchNorm1d
        x = x.view(x.size(0), -1)  # (batch, channels * height * width * depth)
        x = self.lazy_batch_norm1d(x)
        
        # Reshape to 4D for UpsamplingBilinear2d
        x = x.view(x.size(0), 32, 8, 8)  # Arbitrary reshape to 4D
        x = self.upsampling_bilinear2d(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input shape (batch, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

