
# This is a random torch model generated by the following modules: ['GLU', 'ConvTranspose2d', 'AdaptiveAvgPool3d', 'SiLU', 'TripletMarginWithDistanceLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.glu1 = nn.GLU(dim=1)
        self.conv_transpose1 = nn.ConvTranspose2d(10, 20, kernel_size=3, stride=2, padding=1)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((5, 5, 5))
        self.silu1 = nn.SiLU()
        self.conv_transpose2 = nn.ConvTranspose2d(20, 30, kernel_size=3, stride=2, padding=1)
        self.glu2 = nn.GLU(dim=1)
        self.triplet_loss = nn.TripletMarginWithDistanceLoss(distance_function=lambda x, y: F.pairwise_distance(x, y, p=2))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, channels, height, width)
        x = self.glu1(x)
        x = self.conv_transpose1(x)
        x = x.unsqueeze(2)  # Add a dimension to make it 5D for AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        x = x.squeeze(2)  # Remove the added dimension
        x = self.silu1(x)
        x = self.conv_transpose2(x)
        x = self.glu2(x)
        
        # For TripletMarginWithDistanceLoss, we need anchor, positive, and negative samples
        # Here, we just use x as anchor, positive, and negative for simplicity
        anchor = x
        positive = x
        negative = x
        loss = self.triplet_loss(anchor, positive, negative)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 20, 32, 32).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

