
# This is a random torch model generated by the following modules: ['MaxPool1d', 'ELU', 'RNNBase', 'CircularPad1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.maxpool1d = nn.MaxPool1d(kernel_size=2, stride=2)
        self.elu = nn.ELU()
        self.rnn = nn.RNNBase(input_size=64, hidden_size=128, num_layers=2, batch_first=True)
        self.circular_pad1d = nn.ConstantPad1d(padding=2, value=0)

    def forward(self, x):
        # Ensure input is 3D: (batch_size, channels, sequence_length)
        if x.dim() == 2:
            x = x.unsqueeze(1)  # Add channel dimension if missing
        elif x.dim() == 1:
            x = x.unsqueeze(0).unsqueeze(0)  # Add batch and channel dimensions if missing
        
        # Apply CircularPad1d
        x = self.circular_pad1d(x)
        
        # Apply MaxPool1d
        x = self.maxpool1d(x)
        
        # Apply ELU
        x = self.elu(x)
        
        # Prepare for RNN: Reshape to (batch_size, sequence_length, input_size)
        x = x.permute(0, 2, 1)
        
        # Apply RNN
        x, _ = self.rnn(x)
        
        # Reshape back to (batch_size, channels, sequence_length)
        x = x.permute(0, 2, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64).cuda()  # Example input: (batch_size, sequence_length)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

