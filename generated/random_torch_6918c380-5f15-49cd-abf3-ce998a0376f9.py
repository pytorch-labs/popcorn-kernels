
# This is a random torch model generated by the following modules: ['LazyBatchNorm2d', 'ZeroPad1d', 'KLDivLoss', 'Conv3d', 'BCEWithLogitsLoss', 'CrossEntropyLoss', 'LazyLinear', 'Conv2d', 'FeatureAlphaDropout']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv3d = nn.Conv3d(1, 10, kernel_size=3)
        self.lazy_batchnorm2d = nn.LazyBatchNorm2d()
        self.zero_pad1d = nn.ZeroPad1d(2)
        self.conv2d = nn.Conv2d(10, 20, kernel_size=5)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout()
        self.lazy_linear = nn.LazyLinear(50)
        self.kldivloss = nn.KLDivLoss()
        self.bce_with_logits_loss = nn.BCEWithLogitsLoss()
        self.cross_entropy_loss = nn.CrossEntropyLoss()

    def forward(self, x):
        # Apply Conv3d
        x = self.conv3d(x)
        
        # Reshape to 2D for LazyBatchNorm2d
        x = x.view(x.size(0), x.size(1), -1, x.size(4))
        x = self.lazy_batchnorm2d(x)
        
        # Reshape back to 3D for ZeroPad1d
        x = x.view(x.size(0), x.size(1), -1)
        x = self.zero_pad1d(x)
        
        # Reshape to 2D for Conv2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.conv2d(x)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Flatten for LazyLinear
        x = x.view(x.size(0), -1)
        x = self.lazy_linear(x)
        
        # Apply KLDivLoss (dummy target)
        target = torch.rand_like(x).softmax(dim=1)
        x = self.kldivloss(F.log_softmax(x, dim=1), target)
        
        # Apply BCEWithLogitsLoss (dummy target)
        target_bce = torch.randint(0, 2, (x.size(0), 50)).float()
        x = self.bce_with_logits_loss(x, target_bce)
        
        # Apply CrossEntropyLoss (dummy target)
        target_ce = torch.randint(0, 50, (x.size(0),))
        x = self.cross_entropy_loss(x, target_ce)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 32, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

