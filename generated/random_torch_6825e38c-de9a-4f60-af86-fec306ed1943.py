
# This is a random torch model generated by the following modules: ['PairwiseDistance', 'PixelShuffle', 'LPPool2d', 'AdaptiveLogSoftmaxWithLoss', 'CELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pixel_shuffle = nn.PixelShuffle(2)
        self.lp_pool = nn.LPPool2d(norm_type=2, kernel_size=2, stride=2)
        self.celu = nn.CELU()
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=128, n_classes=10, cutoffs=[5])
        
        # PairwiseDistance is used to compute distances between two inputs
        self.pairwise_distance = nn.PairwiseDistance(p=2)
        
    def forward(self, x):
        # Assuming input x is a single tensor, we split it into two for PairwiseDistance
        x1, x2 = x.chunk(2, dim=1)
        
        # Compute pairwise distance between x1 and x2
        distance = self.pairwise_distance(x1, x2)
        
        # Reshape distance to match the expected input shape for PixelShuffle
        distance = distance.unsqueeze(1).unsqueeze(1)  # Shape: [batch_size, 1, 1, 1]
        
        # Apply PixelShuffle
        x = self.pixel_shuffle(distance)
        
        # Apply LPPool2d
        x = self.lp_pool(x)
        
        # Apply CELU activation
        x = self.celu(x)
        
        # Reshape x to match the expected input shape for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)  # Flatten all dimensions except batch
        
        # Apply AdaptiveLogSoftmaxWithLoss
        x = self.adaptive_log_softmax.log_prob(x)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 2, 64, 64).cuda()  # Input shape: [batch_size, 2, height, width]
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

