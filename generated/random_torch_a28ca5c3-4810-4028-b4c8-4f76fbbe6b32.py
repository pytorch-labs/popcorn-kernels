
# This is a random torch model generated by the following modules: ['LSTM', 'ModuleList', 'CircularPad2d', 'LazyConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.lstm = nn.LSTM(input_size=128, hidden_size=64, num_layers=2, batch_first=True)
        self.module_list = nn.ModuleList([
            nn.LazyConvTranspose1d(out_channels=64, kernel_size=3, stride=2),
            nn.LazyConvTranspose1d(out_channels=32, kernel_size=3, stride=2),
            nn.LazyConvTranspose1d(out_channels=16, kernel_size=3, stride=2)
        ])
        self.circular_pad = nn.CircularPad2d(padding=(1, 1, 1, 1))

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, seq_len, input_size = x.size()
        
        # Pass through LSTM
        x, _ = self.lstm(x)  # Output shape: (batch_size, seq_len, hidden_size)
        
        # Reshape for ConvTranspose1d
        x = x.permute(0, 2, 1)  # Shape: (batch_size, hidden_size, seq_len)
        
        # Pass through ModuleList of LazyConvTranspose1d layers
        for conv_transpose in self.module_list:
            x = conv_transpose(x)  # Shape changes based on the layer
        
        # Reshape for CircularPad2d
        x = x.unsqueeze(1)  # Shape: (batch_size, 1, channels, length)
        x = self.circular_pad(x)  # Shape: (batch_size, 1, channels + 2, length + 2)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # Example input: (batch_size=1, sequence_length=10, input_size=128)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

