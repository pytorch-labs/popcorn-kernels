
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'AdaptiveLogSoftmaxWithLoss', 'GaussianNLLLoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.adaptive_log_softmax = nn.AdaptiveLogSoftmaxWithLoss(in_features=14*14, n_classes=10, cutoffs=[2, 4])
        self.gaussian_nll_loss = nn.GaussianNLLLoss()

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Flatten the output for AdaptiveLogSoftmaxWithLoss
        x = x.view(x.size(0), -1)
        
        # Apply AdaptiveLogSoftmaxWithLoss
        output = self.adaptive_log_softmax(x, torch.randint(0, 10, (x.size(0),)).to(x.device))
        
        # Apply GaussianNLLLoss (assuming some random target and variance)
        target = torch.randn_like(output[0])
        var = torch.ones_like(output[0])
        loss = self.gaussian_nll_loss(output[0], target, var)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 28, 28).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
