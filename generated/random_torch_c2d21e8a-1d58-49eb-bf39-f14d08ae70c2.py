
# This is a random torch model generated by the following modules: ['LazyConv3d', 'ParameterDict', 'GLU', 'ELU']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.glu = nn.GLU(dim=1)
        self.elu = nn.ELU()
        self.params = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(1, 32, 1, 1, 1)),
            'param2': nn.Parameter(torch.randn(1, 32, 1, 1, 1))
        })

    def forward(self, x):
        x = self.conv1(x)
        x = self.elu(x)
        x = self.conv2(x)
        x = self.glu(x)
        x = x * self.params['param1'] + self.params['param2']
        x = x.view(x.size(0), -1)  # Flatten the tensor
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()  # Example input with arbitrary shape
    return [x]


def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

