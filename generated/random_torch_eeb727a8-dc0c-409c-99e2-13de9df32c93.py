
# This is a random torch model generated by the following modules: ['CircularPad3d', 'ModuleList', 'Conv1d', 'Dropout2d', 'FractionalMaxPool2d', 'MaxPool3d', 'Bilinear']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.circular_pad = nn.ModuleList([nn.CircularPad3d(1) for _ in range(2)])
        self.conv1d = nn.Conv1d(1, 10, kernel_size=5)
        self.dropout2d = nn.Dropout2d(p=0.5)
        self.fractional_max_pool2d = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.max_pool3d = nn.MaxPool3d(kernel_size=2)
        self.bilinear = nn.Bilinear(10, 10, 50)

    def forward(self, x):
        # Apply CircularPad3d
        for pad in self.circular_pad:
            x = pad(x)
        
        # Reshape for Conv1d
        x = x.view(x.size(0), 1, -1)
        x = self.conv1d(x)
        
        # Reshape for Dropout2d
        x = x.view(x.size(0), x.size(1), 1, -1)
        x = self.dropout2d(x)
        
        # Reshape for FractionalMaxPool2d
        x = x.view(x.size(0), x.size(1), x.size(2), -1)
        x = self.fractional_max_pool2d(x)
        
        # Reshape for MaxPool3d
        x = x.view(x.size(0), x.size(1), x.size(2), x.size(3), 1)
        x = self.max_pool3d(x)
        
        # Reshape for Bilinear
        x = x.view(x.size(0), 10, -1)
        x = self.bilinear(x[:, :, 0], x[:, :, 1])
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 1, 64, 64, 64).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
