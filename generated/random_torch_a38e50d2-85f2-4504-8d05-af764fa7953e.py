
# This is a random torch model generated by the following modules: ['AvgPool3d', 'FractionalMaxPool3d', 'NLLLoss', 'LazyConv1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avg_pool3d = nn.AvgPool3d(kernel_size=2, stride=2)
        self.fractional_max_pool3d = nn.FractionalMaxPool3d(kernel_size=2, output_size=(8, 8, 8))
        self.lazy_conv1d = nn.LazyConv1d(out_channels=16, kernel_size=3)
        self.nll_loss = nn.NLLLoss()

    def forward(self, x):
        # Apply AvgPool3d
        x = self.avg_pool3d(x)
        
        # Apply FractionalMaxPool3d
        x = self.fractional_max_pool3d(x)
        
        # Reshape to fit LazyConv1d input requirements
        batch_size, channels, depth, height, width = x.shape
        x = x.view(batch_size, channels * depth * height, width)
        
        # Apply LazyConv1d
        x = self.lazy_conv1d(x)
        
        # Reshape back to 3D for NLLLoss (assuming classification task)
        x = x.view(batch_size, -1)
        
        # Apply log_softmax for NLLLoss
        x = F.log_softmax(x, dim=1)
        
        # Assuming target is provided externally for NLLLoss
        # For demonstration, we'll return the log_softmax output
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 16, 16, 16).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

