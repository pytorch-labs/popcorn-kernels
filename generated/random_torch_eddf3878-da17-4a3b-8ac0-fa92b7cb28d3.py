
# This is a random torch model generated by the following modules: ['ReflectionPad2d', 'CosineEmbeddingLoss', 'ModuleDict', 'TransformerDecoderLayer', 'Hardsigmoid', 'BCELoss']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.pad = nn.ReflectionPad2d(2)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=64, nhead=8)
        self.module_dict = nn.ModuleDict({
            'hardsigmoid': nn.Hardsigmoid(),
            'bce_loss': nn.BCELoss(),
            'cosine_loss': nn.CosineEmbeddingLoss()
        })
        self.fc = nn.Linear(64, 10)

    def forward(self, x):
        # Apply ReflectionPad2d
        x = self.pad(x)
        
        # Reshape for TransformerDecoderLayer
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1).permute(2, 0, 1)  # (seq_len, batch_size, d_model)
        
        # Apply TransformerDecoderLayer
        x = self.transformer_decoder_layer(x, x)
        
        # Reshape back to original dimensions
        x = x.permute(1, 2, 0).view(batch_size, -1, height, width)
        
        # Apply Hardsigmoid
        x = self.module_dict['hardsigmoid'](x)
        
        # Flatten for fully connected layer
        x = x.view(batch_size, -1)
        
        # Apply fully connected layer
        x = self.fc(x)
        
        # Apply BCE loss (for demonstration, assuming target is binary)
        target = torch.randint(0, 2, (batch_size, 10), dtype=torch.float32).to(x.device)
        bce_loss = self.module_dict['bce_loss'](torch.sigmoid(x), target)
        
        # Apply CosineEmbeddingLoss (for demonstration, assuming target is binary)
        target_cosine = torch.randint(0, 2, (batch_size, 10), dtype=torch.float32).to(x.device)
        cosine_loss = self.module_dict['cosine_loss'](x, target_cosine, torch.ones(batch_size).to(x.device))
        
        # Return the output and the losses for demonstration purposes
        return x, bce_loss, cosine_loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
