
# This is a random torch model generated by the following modules: ['Sigmoid', 'Upsample', 'ZeroPad2d', 'LazyBatchNorm3d', 'BatchNorm1d', 'GELU', 'Softmin']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.upsample = nn.Upsample(scale_factor=2, mode='nearest')
        self.zero_pad = nn.ZeroPad2d(2)
        self.lazy_bn3d = nn.LazyBatchNorm3d()
        self.bn1d = nn.BatchNorm1d(128)
        self.gelu = nn.GELU()
        self.sigmoid = nn.Sigmoid()
        self.softmin = nn.Softmin(dim=1)

    def forward(self, x):
        # Assuming input x is of arbitrary shape
        x = self.zero_pad(x)  # Apply ZeroPad2d
        x = x.unsqueeze(1)  # Add a channel dimension to make it 4D for LazyBatchNorm3d
        x = self.lazy_bn3d(x)  # Apply LazyBatchNorm3d
        x = x.squeeze(1)  # Remove the channel dimension to make it 3D
        x = self.upsample(x)  # Apply Upsample
        x = x.view(x.size(0), -1)  # Flatten the tensor for BatchNorm1d
        x = self.bn1d(x)  # Apply BatchNorm1d
        x = self.gelu(x)  # Apply GELU
        x = self.sigmoid(x)  # Apply Sigmoid
        x = self.softmin(x)  # Apply Softmin
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32).cuda()  # Example input with shape (batch_size, channels, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

