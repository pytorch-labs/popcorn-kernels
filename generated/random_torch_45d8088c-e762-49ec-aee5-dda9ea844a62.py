
# This is a random torch model generated by the following modules: ['CTCLoss', 'RNNCellBase', 'LazyInstanceNorm1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.rnn_cell1 = nn.RNNCellBase(input_size=128, hidden_size=256)
        self.rnn_cell2 = nn.RNNCellBase(input_size=256, hidden_size=128)
        self.norm1 = nn.LazyInstanceNorm1d()
        self.norm2 = nn.LazyInstanceNorm1d()
        self.ctc_loss = nn.CTCLoss()

    def forward(self, x):
        # Assuming input x is of shape (batch_size, sequence_length, input_size)
        batch_size, sequence_length, input_size = x.shape
        
        # Reshape for RNNCellBase
        x = x.view(-1, input_size)  # (batch_size * sequence_length, input_size)
        
        # Initialize hidden states
        h1 = torch.zeros(batch_size * sequence_length, 256).to(x.device)
        h2 = torch.zeros(batch_size * sequence_length, 128).to(x.device)
        
        # Apply RNNCellBase layers
        h1 = self.rnn_cell1(x, h1)
        h2 = self.rnn_cell2(h1, h2)
        
        # Reshape back to (batch_size, sequence_length, hidden_size)
        h2 = h2.view(batch_size, sequence_length, -1)
        
        # Apply LazyInstanceNorm1d
        h2 = h2.permute(0, 2, 1)  # (batch_size, hidden_size, sequence_length)
        h2 = self.norm1(h2)
        h2 = h2.permute(0, 2, 1)  # (batch_size, sequence_length, hidden_size)
        
        # Apply another LazyInstanceNorm1d
        h2 = h2.permute(0, 2, 1)  # (batch_size, hidden_size, sequence_length)
        h2 = self.norm2(h2)
        h2 = h2.permute(0, 2, 1)  # (batch_size, sequence_length, hidden_size)
        
        # Compute CTC loss (assuming targets are provided externally)
        # For demonstration, we'll create dummy targets
        targets = torch.randint(1, 10, (batch_size, sequence_length), dtype=torch.long).to(x.device)
        input_lengths = torch.full((batch_size,), sequence_length, dtype=torch.long).to(x.device)
        target_lengths = torch.randint(1, sequence_length + 1, (batch_size,), dtype=torch.long).to(x.device)
        
        # Compute CTC loss
        loss = self.ctc_loss(h2.log_softmax(dim=2), targets, input_lengths, target_lengths)
        
        return loss


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 10, 128).cuda()  # (batch_size, sequence_length, input_size)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

