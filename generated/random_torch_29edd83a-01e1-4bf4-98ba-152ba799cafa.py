
# This is a random torch model generated by the following modules: ['AvgPool2d', 'RReLU', 'Hardtanh', 'LogSigmoid', 'LayerNorm', 'ReflectionPad3d', 'ConvTranspose1d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.avgpool = nn.AvgPool2d(kernel_size=2, stride=2)
        self.rrelu = nn.RReLU()
        self.hardtanh = nn.Hardtanh()
        self.logsigmoid = nn.LogSigmoid()
        self.layernorm = nn.LayerNorm([32, 32])
        self.reflectionpad = nn.ReflectionPad3d(padding=1)
        self.convtranspose1d = nn.ConvTranspose1d(in_channels=32, out_channels=64, kernel_size=3, stride=2)

    def forward(self, x):
        # Assume input is of shape (batch_size, channels, height, width)
        x = self.avgpool(x)  # Reduce spatial dimensions
        x = self.rrelu(x)    # Apply RReLU activation
        x = self.hardtanh(x) # Apply Hardtanh activation
        x = self.logsigmoid(x) # Apply LogSigmoid activation
        
        # Reshape for LayerNorm
        batch_size, channels, height, width = x.shape
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = self.layernorm(x)  # Apply LayerNorm
        x = x.view(batch_size, channels, height, width)  # Reshape back
        
        # Reshape for ReflectionPad3d
        x = x.unsqueeze(2)  # Add a dummy dimension for 3D padding
        x = self.reflectionpad(x)  # Apply ReflectionPad3d
        x = x.squeeze(2)  # Remove the dummy dimension
        
        # Reshape for ConvTranspose1d
        x = x.view(batch_size, channels, -1)  # Flatten height and width
        x = self.convtranspose1d(x)  # Apply ConvTranspose1d
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 64, 64).cuda()  # Example input with batch_size=1, channels=3, height=64, width=64
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

