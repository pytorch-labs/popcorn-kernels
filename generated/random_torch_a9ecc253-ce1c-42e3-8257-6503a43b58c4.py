
# This is a random torch model generated by the following modules: ['Hardtanh', 'MultiLabelMarginLoss', 'MaxUnpool3d', 'HuberLoss', 'FeatureAlphaDropout', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.hardtanh = nn.Hardtanh(min_val=-1.0, max_val=1.0)
        self.max_unpool3d = nn.MaxUnpool3d(kernel_size=2, stride=2)
        self.feature_alpha_dropout = nn.FeatureAlphaDropout(p=0.5)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d(output_size=(1, 1, 1))
        self.multi_label_margin_loss = nn.MultiLabelMarginLoss()
        self.huber_loss = nn.HuberLoss()

    def forward(self, x):
        # Apply Hardtanh activation
        x = self.hardtanh(x)
        
        # Reshape for MaxUnpool3d (assuming input is 4D, we need to make it 5D)
        x = x.unsqueeze(1)  # Add a channel dimension
        x = x.unsqueeze(1)  # Add a depth dimension
        
        # Apply MaxUnpool3d (requires indices from a previous MaxPool3d)
        pool_output, indices = F.max_pool3d(x, kernel_size=2, stride=2, return_indices=True)
        x = self.max_unpool3d(pool_output, indices)
        
        # Apply FeatureAlphaDropout
        x = self.feature_alpha_dropout(x)
        
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        
        # Flatten the output for loss computation
        x = x.view(x.size(0), -1)
        
        # Dummy target for MultiLabelMarginLoss and HuberLoss
        target = torch.randint(0, 2, (x.size(0), x.size(1)), dtype=torch.float32)
        
        # Compute MultiLabelMarginLoss
        loss1 = self.multi_label_margin_loss(x, target)
        
        # Compute HuberLoss
        loss2 = self.huber_loss(x, target)
        
        # Return the sum of losses (for demonstration purposes)
        return loss1 + loss2


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 64, 64, 64).cuda()  # Arbitrary shape (batch_size, height, width, depth)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []

