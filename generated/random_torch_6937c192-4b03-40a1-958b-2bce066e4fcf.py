
# This is a random torch model generated by the following modules: ['SyncBatchNorm', 'LazyConv3d', 'LogSigmoid', 'InstanceNorm3d', 'Mish', 'BatchNorm2d', 'TransformerDecoderLayer', 'AdaptiveAvgPool3d']
import torch
import torch.nn as nn
import torch.nn.functional as F

class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.conv1 = nn.LazyConv3d(out_channels=16, kernel_size=3)
        self.sync_bn1 = nn.SyncBatchNorm(16)
        self.instance_norm1 = nn.InstanceNorm3d(16)
        self.conv2 = nn.LazyConv3d(out_channels=32, kernel_size=3)
        self.batch_norm2d = nn.BatchNorm2d(32)
        self.transformer_decoder_layer = nn.TransformerDecoderLayer(d_model=32, nhead=4)
        self.adaptive_avg_pool3d = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.mish = nn.Mish()
        self.log_sigmoid = nn.LogSigmoid()

    def forward(self, x):
        # Apply LazyConv3d
        x = self.conv1(x)
        # Apply SyncBatchNorm
        x = self.sync_bn1(x)
        # Apply InstanceNorm3d
        x = self.instance_norm1(x)
        # Apply Mish activation
        x = self.mish(x)
        # Apply LazyConv3d again
        x = self.conv2(x)
        # Reshape for BatchNorm2d
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Reshape to (batch, channels, height, width)
        # Apply BatchNorm2d
        x = self.batch_norm2d(x)
        # Reshape back to 3D for TransformerDecoderLayer
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Reshape to (batch, channels, depth, height, width)
        # Apply TransformerDecoderLayer
        x = x.permute(2, 0, 1, 3)  # Reshape to (depth, batch, channels, height*width)
        x = x.view(x.size(0), x.size(1), -1)  # Reshape to (depth, batch, channels*height*width)
        x = self.transformer_decoder_layer(x, x)
        x = x.view(x.size(0), x.size(1), -1, x.size(-1))  # Reshape back to (depth, batch, channels, height*width)
        x = x.permute(1, 2, 0, 3)  # Reshape back to (batch, channels, depth, height*width)
        # Apply AdaptiveAvgPool3d
        x = self.adaptive_avg_pool3d(x)
        # Apply LogSigmoid
        x = self.log_sigmoid(x)
        return x

def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 32, 32, 32).cuda()  # Example input shape (batch, channels, depth, height, width)
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
