
# This is a random torch model generated by the following modules: ['FractionalMaxPool2d', 'TripletMarginWithDistanceLoss', 'LazyBatchNorm2d', 'LazyInstanceNorm2d', 'ParameterDict', 'LazyInstanceNorm1d', 'Sigmoid', 'Module', 'Hardsigmoid', 'LazyInstanceNorm3d']
import torch
import torch.nn as nn
import torch.nn.functional as F


class Model(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.fractional_max_pool = nn.FractionalMaxPool2d(kernel_size=2, output_size=(14, 14))
        self.lazy_batch_norm_2d = nn.LazyBatchNorm2d()
        self.lazy_instance_norm_2d = nn.LazyInstanceNorm2d()
        self.lazy_instance_norm_1d = nn.LazyInstanceNorm1d()
        self.lazy_instance_norm_3d = nn.LazyInstanceNorm3d()
        self.sigmoid = nn.Sigmoid()
        self.hardsigmoid = nn.Hardsigmoid()
        self.parameter_dict = nn.ParameterDict({
            'param1': nn.Parameter(torch.randn(10)),
            'param2': nn.Parameter(torch.randn(10))
        })

    def forward(self, x):
        # Apply FractionalMaxPool2d
        x = self.fractional_max_pool(x)
        
        # Apply LazyBatchNorm2d
        x = self.lazy_batch_norm_2d(x)
        
        # Apply LazyInstanceNorm2d
        x = self.lazy_instance_norm_2d(x)
        
        # Reshape for LazyInstanceNorm1d
        x = x.view(x.size(0), x.size(1), -1)  # Flatten spatial dimensions
        x = self.lazy_instance_norm_1d(x)
        
        # Reshape back for LazyInstanceNorm3d
        x = x.view(x.size(0), x.size(1), 14, 14, -1)  # Add a dummy dimension for 3D
        x = self.lazy_instance_norm_3d(x)
        
        # Apply Sigmoid
        x = self.sigmoid(x)
        
        # Apply Hardsigmoid
        x = self.hardsigmoid(x)
        
        # Use ParameterDict (just for demonstration, not directly applied to x)
        param1 = self.parameter_dict['param1']
        param2 = self.parameter_dict['param2']
        
        # Combine parameters with x (just for demonstration)
        x = x * param1.view(1, -1, 1, 1, 1) + param2.view(1, -1, 1, 1, 1)
        
        return x


def get_inputs():
    # randomly generate input tensors based on the model architecture
    x = torch.randn(1, 3, 28, 28).cuda()  # Example input shape
    return [x]

def get_init_inputs():
    # randomly generate tensors required for initialization based on the model architecture
    return []
